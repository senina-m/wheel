
motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000949c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c5c  08009640  08009640  00019640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a29c  0800a29c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a29c  0800a29c  0001a29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2a4  0800a2a4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2a8  0800a2a8  0001a2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a2ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  200001e8  0800a494  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  0800a494  00020844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfbf  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f80  00000000  00000000  0002e1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00030158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00030f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017626  00000000  00000000  00031c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9ba  00000000  00000000  000492a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000903da  00000000  00000000  00058c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e903a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005194  00000000  00000000  000e908c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009624 	.word	0x08009624

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08009624 	.word	0x08009624

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100e:	f000 fd73 	bl	8001af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001012:	f000 f859 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001016:	f000 f9d3 	bl	80013c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800101a:	f000 f8bd 	bl	8001198 <MX_I2C1_Init>
  MX_TIM3_Init();
 800101e:	f000 f959 	bl	80012d4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001022:	f000 f8e7 	bl	80011f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001026:	f003 fc25 	bl	8004874 <ssd1306_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800102a:	210c      	movs	r1, #12
 800102c:	481e      	ldr	r0, [pc, #120]	; (80010a8 <main+0xa0>)
 800102e:	f002 fa0b 	bl	8003448 <HAL_TIM_PWM_Start>
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <main+0xa4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f06f 0201 	mvn.w	r2, #1
 800103a:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <main+0xa4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <main+0xa4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0201 	orr.w	r2, r2, #1
 800104a:	60da      	str	r2, [r3, #12]
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800104c:	2100      	movs	r1, #0
 800104e:	4817      	ldr	r0, [pc, #92]	; (80010ac <main+0xa4>)
 8001050:	f002 fb04 	bl	800365c <HAL_TIM_IC_Start_IT>
  while (1){
//	  int start = 0;
//	  int stop = 15;
//	  int delay = 500;
//	  HAL_GPIO_WritePin(CW_GPIO_Port, CW_Pin, 1);
	  int i = 10;
 8001054:	230a      	movs	r3, #10
 8001056:	607b      	str	r3, [r7, #4]
//	  for(int i = start; i < stop; i++) {
		  print_text(45, "up", i);
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4915      	ldr	r1, [pc, #84]	; (80010b0 <main+0xa8>)
 800105c:	202d      	movs	r0, #45	; 0x2d
 800105e:	f000 fa5f 	bl	8001520 <print_text>
		  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, i);
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <main+0xa0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800106a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106e:	4811      	ldr	r0, [pc, #68]	; (80010b4 <main+0xac>)
 8001070:	f001 f887 	bl	8002182 <HAL_GPIO_TogglePin>
		  print_pwm(count, last_count);
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <main+0xb0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a10      	ldr	r2, [pc, #64]	; (80010bc <main+0xb4>)
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fa74 	bl	800156c <print_pwm>
		  print_num(convert_v(period, pulseWidth));
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <main+0xb8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <main+0xbc>)
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fa1a 	bl	80014c8 <convert_v>
 8001094:	eef0 7a40 	vmov.f32	s15, s0
 8001098:	eeb0 0a67 	vmov.f32	s0, s15
 800109c:	f000 fa06 	bl	80014ac <print_num>
//	   HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	   print_pwm(count, last_count);
//	   print_num(convert_v(period, pulseWidth));
//	   HAL_Delay(delay);
//	  }
	  HAL_Delay(200);
 80010a0:	20c8      	movs	r0, #200	; 0xc8
 80010a2:	f000 fd9b 	bl	8001bdc <HAL_Delay>
  while (1){
 80010a6:	e7d5      	b.n	8001054 <main+0x4c>
 80010a8:	200003dc 	.word	0x200003dc
 80010ac:	20000394 	.word	0x20000394
 80010b0:	08009640 	.word	0x08009640
 80010b4:	40020800 	.word	0x40020800
 80010b8:	2000020c 	.word	0x2000020c
 80010bc:	20000210 	.word	0x20000210
 80010c0:	20000204 	.word	0x20000204
 80010c4:	20000208 	.word	0x20000208

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	; 0x50
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	2230      	movs	r2, #48	; 0x30
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fe20 	bl	8004d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <SystemClock_Config+0xc8>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a26      	ldr	r2, [pc, #152]	; (8001190 <SystemClock_Config+0xc8>)
 80010f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40
 80010fc:	4b24      	ldr	r3, [pc, #144]	; (8001190 <SystemClock_Config+0xc8>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <SystemClock_Config+0xcc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a20      	ldr	r2, [pc, #128]	; (8001194 <SystemClock_Config+0xcc>)
 8001112:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <SystemClock_Config+0xcc>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001124:	2302      	movs	r3, #2
 8001126:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001128:	2301      	movs	r3, #1
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112c:	2310      	movs	r3, #16
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001130:	2302      	movs	r3, #2
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001134:	2300      	movs	r3, #0
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001138:	2308      	movs	r3, #8
 800113a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800113c:	2348      	movs	r3, #72	; 0x48
 800113e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001140:	2306      	movs	r3, #6
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001144:	2304      	movs	r3, #4
 8001146:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	4618      	mov	r0, r3
 800114e:	f001 fc8f 	bl	8002a70 <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001158:	f000 fa72 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115c:	230f      	movs	r3, #15
 800115e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001160:	2302      	movs	r3, #2
 8001162:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800116c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001170:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f001 fef1 	bl	8002f60 <HAL_RCC_ClockConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001184:	f000 fa5c 	bl	8001640 <Error_Handler>
  }
}
 8001188:	bf00      	nop
 800118a:	3750      	adds	r7, #80	; 0x50
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_I2C1_Init+0x50>)
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <MX_I2C1_Init+0x54>)
 80011a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <MX_I2C1_Init+0x58>)
 80011a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011d6:	f000 ffef 	bl	80021b8 <HAL_I2C_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e0:	f000 fa2e 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000340 	.word	0x20000340
 80011ec:	40005400 	.word	0x40005400
 80011f0:	000186a0 	.word	0x000186a0

080011f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <MX_TIM2_Init+0xdc>)
 8001220:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001224:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000-1;
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <MX_TIM2_Init+0xdc>)
 8001228:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800122c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <MX_TIM2_Init+0xdc>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6000-1;
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <MX_TIM2_Init+0xdc>)
 8001236:	f241 726f 	movw	r2, #5999	; 0x176f
 800123a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <MX_TIM2_Init+0xdc>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <MX_TIM2_Init+0xdc>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001248:	4821      	ldr	r0, [pc, #132]	; (80012d0 <MX_TIM2_Init+0xdc>)
 800124a:	f002 f855 	bl	80032f8 <HAL_TIM_Base_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001254:	f000 f9f4 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800125e:	f107 0318 	add.w	r3, r7, #24
 8001262:	4619      	mov	r1, r3
 8001264:	481a      	ldr	r0, [pc, #104]	; (80012d0 <MX_TIM2_Init+0xdc>)
 8001266:	f002 fd79 	bl	8003d5c <HAL_TIM_ConfigClockSource>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001270:	f000 f9e6 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001274:	4816      	ldr	r0, [pc, #88]	; (80012d0 <MX_TIM2_Init+0xdc>)
 8001276:	f002 f997 	bl	80035a8 <HAL_TIM_IC_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001280:	f000 f9de 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	480f      	ldr	r0, [pc, #60]	; (80012d0 <MX_TIM2_Init+0xdc>)
 8001294:	f003 fa32 	bl	80046fc <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800129e:	f000 f9cf 	bl	8001640 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012a6:	2301      	movs	r3, #1
 80012a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012b2:	463b      	mov	r3, r7
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_TIM2_Init+0xdc>)
 80012ba:	f002 fbf1 	bl	8003aa0 <HAL_TIM_IC_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80012c4:	f000 f9bc 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000394 	.word	0x20000394

080012d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	; 0x38
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	615a      	str	r2, [r3, #20]
 8001302:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001304:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <MX_TIM3_Init+0xe4>)
 8001306:	4a2d      	ldr	r2, [pc, #180]	; (80013bc <MX_TIM3_Init+0xe8>)
 8001308:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24-1;
 800130a:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <MX_TIM3_Init+0xe4>)
 800130c:	2217      	movs	r2, #23
 800130e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <MX_TIM3_Init+0xe4>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30-1;
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <MX_TIM3_Init+0xe4>)
 8001318:	221d      	movs	r2, #29
 800131a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <MX_TIM3_Init+0xe4>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <MX_TIM3_Init+0xe4>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001328:	4823      	ldr	r0, [pc, #140]	; (80013b8 <MX_TIM3_Init+0xe4>)
 800132a:	f001 ffe5 	bl	80032f8 <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001334:	f000 f984 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001342:	4619      	mov	r1, r3
 8001344:	481c      	ldr	r0, [pc, #112]	; (80013b8 <MX_TIM3_Init+0xe4>)
 8001346:	f002 fd09 	bl	8003d5c <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001350:	f000 f976 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001354:	4818      	ldr	r0, [pc, #96]	; (80013b8 <MX_TIM3_Init+0xe4>)
 8001356:	f002 f81e 	bl	8003396 <HAL_TIM_PWM_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001360:	f000 f96e 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	4619      	mov	r1, r3
 8001372:	4811      	ldr	r0, [pc, #68]	; (80013b8 <MX_TIM3_Init+0xe4>)
 8001374:	f003 f9c2 	bl	80046fc <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800137e:	f000 f95f 	bl	8001640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001382:	2360      	movs	r3, #96	; 0x60
 8001384:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	220c      	movs	r2, #12
 8001396:	4619      	mov	r1, r3
 8001398:	4807      	ldr	r0, [pc, #28]	; (80013b8 <MX_TIM3_Init+0xe4>)
 800139a:	f002 fc1d 	bl	8003bd8 <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80013a4:	f000 f94c 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013a8:	4803      	ldr	r0, [pc, #12]	; (80013b8 <MX_TIM3_Init+0xe4>)
 80013aa:	f000 fa2b 	bl	8001804 <HAL_TIM_MspPostInit>

}
 80013ae:	bf00      	nop
 80013b0:	3738      	adds	r7, #56	; 0x38
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200003dc 	.word	0x200003dc
 80013bc:	40000400 	.word	0x40000400

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <MX_GPIO_Init+0xe0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a30      	ldr	r2, [pc, #192]	; (80014a0 <MX_GPIO_Init+0xe0>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <MX_GPIO_Init+0xe0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <MX_GPIO_Init+0xe0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a29      	ldr	r2, [pc, #164]	; (80014a0 <MX_GPIO_Init+0xe0>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <MX_GPIO_Init+0xe0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <MX_GPIO_Init+0xe0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <MX_GPIO_Init+0xe0>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <MX_GPIO_Init+0xe0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <MX_GPIO_Init+0xe0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a1b      	ldr	r2, [pc, #108]	; (80014a0 <MX_GPIO_Init+0xe0>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_GPIO_Init+0xe0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144c:	4815      	ldr	r0, [pc, #84]	; (80014a4 <MX_GPIO_Init+0xe4>)
 800144e:	f000 fe7f 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CW_GPIO_Port, CW_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	4814      	ldr	r0, [pc, #80]	; (80014a8 <MX_GPIO_Init+0xe8>)
 8001458:	f000 fe7a 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800145c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <MX_GPIO_Init+0xe4>)
 8001476:	f000 fce7 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : CW_Pin */
  GPIO_InitStruct.Pin = CW_Pin;
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CW_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_GPIO_Init+0xe8>)
 8001492:	f000 fcd9 	bl	8001e48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40020000 	.word	0x40020000

080014ac <print_num>:

/* USER CODE BEGIN 4 */
static void print_num(float x){
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	ed87 0a01 	vstr	s0, [r7, #4]
//	snprintf(voltageBuff, sizeof(voltageBuff), "Voltage: %.6f  ", x);
////	snprintf(voltageBuff, sizeof(voltageBuff), "Voltage: %i", x);
//	ssd1306_SetCursor(0, 30);
//	ssd1306_WriteString(voltageBuff, Font_7x10, White);
//	ssd1306_UpdateScreen();
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	0000      	movs	r0, r0
 80014c4:	0000      	movs	r0, r0
	...

080014c8 <convert_v>:


static float convert_v(uint32_t period, uint32_t pulseWidth){
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	return 3.3*pulseWidth/period;
 80014d2:	6838      	ldr	r0, [r7, #0]
 80014d4:	f7ff f81e 	bl	8000514 <__aeabi_ui2d>
 80014d8:	a30f      	add	r3, pc, #60	; (adr r3, 8001518 <convert_v+0x50>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f893 	bl	8000608 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4614      	mov	r4, r2
 80014e8:	461d      	mov	r5, r3
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff f812 	bl	8000514 <__aeabi_ui2d>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4620      	mov	r0, r4
 80014f6:	4629      	mov	r1, r5
 80014f8:	f7ff f9b0 	bl	800085c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fb78 	bl	8000bf8 <__aeabi_d2f>
 8001508:	4603      	mov	r3, r0
 800150a:	ee07 3a90 	vmov	s15, r3
}
 800150e:	eeb0 0a67 	vmov.f32	s0, s15
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bdb0      	pop	{r4, r5, r7, pc}
 8001518:	66666666 	.word	0x66666666
 800151c:	400a6666 	.word	0x400a6666

08001520 <print_text>:

static void print_text(int y, char* text, int i){
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af02      	add	r7, sp, #8
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
	snprintf(textBuff, sizeof(textBuff), "%s: %i   ", text, i);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <print_text+0x40>)
 8001534:	2164      	movs	r1, #100	; 0x64
 8001536:	480b      	ldr	r0, [pc, #44]	; (8001564 <print_text+0x44>)
 8001538:	f004 fa78 	bl	8005a2c <sniprintf>
	ssd1306_SetCursor(0, y);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	2000      	movs	r0, #0
 8001544:	f003 fb4e 	bl	8004be4 <ssd1306_SetCursor>
	ssd1306_WriteString(textBuff, Font_7x10, White);
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <print_text+0x48>)
 800154a:	2301      	movs	r3, #1
 800154c:	ca06      	ldmia	r2, {r1, r2}
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <print_text+0x44>)
 8001550:	f003 fb22 	bl	8004b98 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001554:	f003 fa1c 	bl	8004990 <ssd1306_UpdateScreen>
}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	08009644 	.word	0x08009644
 8001564:	200002dc 	.word	0x200002dc
 8001568:	2000000c 	.word	0x2000000c

0800156c <print_pwm>:

static void print_pwm(uint32_t count, uint32_t last_count){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	snprintf(countBuff, sizeof(countBuff), "count: %li    ", count);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <print_pwm+0x58>)
 800157a:	2164      	movs	r1, #100	; 0x64
 800157c:	4812      	ldr	r0, [pc, #72]	; (80015c8 <print_pwm+0x5c>)
 800157e:	f004 fa55 	bl	8005a2c <sniprintf>
	snprintf(speedBuff, sizeof(speedBuff), "speed: %li i/ms   ", last_count );
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	4a11      	ldr	r2, [pc, #68]	; (80015cc <print_pwm+0x60>)
 8001586:	2164      	movs	r1, #100	; 0x64
 8001588:	4811      	ldr	r0, [pc, #68]	; (80015d0 <print_pwm+0x64>)
 800158a:	f004 fa4f 	bl	8005a2c <sniprintf>
	ssd1306_SetCursor(0, 0);
 800158e:	2100      	movs	r1, #0
 8001590:	2000      	movs	r0, #0
 8001592:	f003 fb27 	bl	8004be4 <ssd1306_SetCursor>
	ssd1306_WriteString(countBuff, Font_7x10, White);
 8001596:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <print_pwm+0x68>)
 8001598:	2301      	movs	r3, #1
 800159a:	ca06      	ldmia	r2, {r1, r2}
 800159c:	480a      	ldr	r0, [pc, #40]	; (80015c8 <print_pwm+0x5c>)
 800159e:	f003 fafb 	bl	8004b98 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 15);
 80015a2:	210f      	movs	r1, #15
 80015a4:	2000      	movs	r0, #0
 80015a6:	f003 fb1d 	bl	8004be4 <ssd1306_SetCursor>
	ssd1306_WriteString(speedBuff, Font_7x10, White);
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <print_pwm+0x68>)
 80015ac:	2301      	movs	r3, #1
 80015ae:	ca06      	ldmia	r2, {r1, r2}
 80015b0:	4807      	ldr	r0, [pc, #28]	; (80015d0 <print_pwm+0x64>)
 80015b2:	f003 faf1 	bl	8004b98 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80015b6:	f003 f9eb 	bl	8004990 <ssd1306_UpdateScreen>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	08009650 	.word	0x08009650
 80015c8:	20000278 	.word	0x20000278
 80015cc:	08009660 	.word	0x08009660
 80015d0:	20000214 	.word	0x20000214
 80015d4:	2000000c 	.word	0x2000000c

080015d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e8:	d106      	bne.n	80015f8 <HAL_TIM_PeriodElapsedCallback+0x20>
		last_count = count;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015f0:	6013      	str	r3, [r2, #0]
		count = 0;
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
	}
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	2000020c 	.word	0x2000020c
 8001608:	20000210 	.word	0x20000210

0800160c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2){
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800161c:	d108      	bne.n	8001630 <HAL_TIM_IC_CaptureCallback+0x24>
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7f1b      	ldrb	r3, [r3, #28]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d104      	bne.n	8001630 <HAL_TIM_IC_CaptureCallback+0x24>
           count++;
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_TIM_IC_CaptureCallback+0x30>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	4a03      	ldr	r2, [pc, #12]	; (800163c <HAL_TIM_IC_CaptureCallback+0x30>)
 800162e:	6013      	str	r3, [r2, #0]
        }
    }
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	2000020c 	.word	0x2000020c

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>
	...

0800164c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_MspInit+0x4c>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_MspInit+0x4c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_MspInit+0x4c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_MspInit+0x4c>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_MspInit+0x4c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a19      	ldr	r2, [pc, #100]	; (8001720 <HAL_I2C_MspInit+0x84>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d12b      	bne.n	8001716 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_I2C_MspInit+0x88>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a17      	ldr	r2, [pc, #92]	; (8001724 <HAL_I2C_MspInit+0x88>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_I2C_MspInit+0x88>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016da:	23c0      	movs	r3, #192	; 0xc0
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016de:	2312      	movs	r3, #18
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ea:	2304      	movs	r3, #4
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <HAL_I2C_MspInit+0x8c>)
 80016f6:	f000 fba7 	bl	8001e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_I2C_MspInit+0x88>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_I2C_MspInit+0x88>)
 8001704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_I2C_MspInit+0x88>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40005400 	.word	0x40005400
 8001724:	40023800 	.word	0x40023800
 8001728:	40020400 	.word	0x40020400

0800172c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800174c:	d134      	bne.n	80017b8 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <HAL_TIM_Base_MspInit+0xcc>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <HAL_TIM_Base_MspInit+0xcc>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_TIM_Base_MspInit+0xcc>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_TIM_Base_MspInit+0xcc>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <HAL_TIM_Base_MspInit+0xcc>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <HAL_TIM_Base_MspInit+0xcc>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001786:	2301      	movs	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001796:	2301      	movs	r3, #1
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	4816      	ldr	r0, [pc, #88]	; (80017fc <HAL_TIM_Base_MspInit+0xd0>)
 80017a2:	f000 fb51 	bl	8001e48 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	201c      	movs	r0, #28
 80017ac:	f000 fb15 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017b0:	201c      	movs	r0, #28
 80017b2:	f000 fb2e 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017b6:	e01a      	b.n	80017ee <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_TIM_Base_MspInit+0xd4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d115      	bne.n	80017ee <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_TIM_Base_MspInit+0xcc>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <HAL_TIM_Base_MspInit+0xcc>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_TIM_Base_MspInit+0xcc>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	201d      	movs	r0, #29
 80017e4:	f000 faf9 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017e8:	201d      	movs	r0, #29
 80017ea:	f000 fb12 	bl	8001e12 <HAL_NVIC_EnableIRQ>
}
 80017ee:	bf00      	nop
 80017f0:	3728      	adds	r7, #40	; 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40000400 	.word	0x40000400

08001804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a12      	ldr	r2, [pc, #72]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d11d      	bne.n	8001862 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_TIM_MspPostInit+0x6c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a10      	ldr	r2, [pc, #64]	; (8001870 <HAL_TIM_MspPostInit+0x6c>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_TIM_MspPostInit+0x6c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001842:	2302      	movs	r3, #2
 8001844:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001852:	2302      	movs	r3, #2
 8001854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4619      	mov	r1, r3
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <HAL_TIM_MspPostInit+0x70>)
 800185e:	f000 faf3 	bl	8001e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001862:	bf00      	nop
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40000400 	.word	0x40000400
 8001870:	40023800 	.word	0x40023800
 8001874:	40020400 	.word	0x40020400

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c4:	f000 f96a 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <TIM2_IRQHandler+0x10>)
 80018d2:	f001 ffdd 	bl	8003890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000394 	.word	0x20000394

080018e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <TIM3_IRQHandler+0x10>)
 80018e6:	f001 ffd3 	bl	8003890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200003dc 	.word	0x200003dc

080018f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return 1;
 80018f8:	2301      	movs	r3, #1
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_kill>:

int _kill(int pid, int sig)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800190e:	f003 f9b3 	bl	8004c78 <__errno>
 8001912:	4603      	mov	r3, r0
 8001914:	2216      	movs	r2, #22
 8001916:	601a      	str	r2, [r3, #0]
  return -1;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_exit>:

void _exit (int status)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ffe7 	bl	8001904 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001936:	e7fe      	b.n	8001936 <_exit+0x12>

08001938 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e00a      	b.n	8001960 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800194a:	f3af 8000 	nop.w
 800194e:	4601      	mov	r1, r0
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	60ba      	str	r2, [r7, #8]
 8001956:	b2ca      	uxtb	r2, r1
 8001958:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf0      	blt.n	800194a <_read+0x12>
  }

  return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e009      	b.n	8001998 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	60ba      	str	r2, [r7, #8]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	dbf1      	blt.n	8001984 <_write+0x12>
  }
  return len;
 80019a0:	687b      	ldr	r3, [r7, #4]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_close>:

int _close(int file)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d2:	605a      	str	r2, [r3, #4]
  return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_isatty>:

int _isatty(int file)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f003 f918 	bl	8004c78 <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20020000 	.word	0x20020000
 8001a74:	00000400 	.word	0x00000400
 8001a78:	20000424 	.word	0x20000424
 8001a7c:	20000848 	.word	0x20000848

08001a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <SystemInit+0x20>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <SystemInit+0x20>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
    ldr   sp, =_estack    		 /* set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001adc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa8:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aaa:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aac:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ac0:	4c0b      	ldr	r4, [pc, #44]	; (8001af0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ace:	f7ff ffd7 	bl	8001a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f003 f8d7 	bl	8004c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad6:	f7ff fa97 	bl	8001008 <main>
  bx  lr    
 8001ada:	4770      	bx	lr
    ldr   sp, =_estack    		 /* set stack pointer */
 8001adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001ae8:	0800a2ac 	.word	0x0800a2ac
  ldr r2, =_sbss
 8001aec:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001af0:	20000844 	.word	0x20000844

08001af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC_IRQHandler>
	...

08001af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <HAL_Init+0x40>)
 8001b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_Init+0x40>)
 8001b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_Init+0x40>)
 8001b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 f94f 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b26:	200f      	movs	r0, #15
 8001b28:	f000 f808 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2c:	f7ff fd8e 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f967 	bl	8001e2e <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 f92f 	bl	8001dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000000 	.word	0x20000000
 8001b94:	20000008 	.word	0x20000008
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	20000428 	.word	0x20000428

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000428 	.word	0x20000428

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff ffee 	bl	8001bc4 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_Delay+0x44>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c02:	bf00      	nop
 8001c04:	f7ff ffde 	bl	8001bc4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000008 	.word	0x20000008

08001c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c56:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	60d3      	str	r3, [r2, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <__NVIC_GetPriorityGrouping+0x18>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	f003 0307 	and.w	r3, r3, #7
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db0b      	blt.n	8001cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <__NVIC_EnableIRQ+0x38>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	; (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff8e 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff29 	bl	8001c24 <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff3e 	bl	8001c6c <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff8e 	bl	8001d18 <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5d 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff31 	bl	8001c88 <__NVIC_EnableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffa2 	bl	8001d80 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	; 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	e159      	b.n	8002118 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e64:	2201      	movs	r2, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	f040 8148 	bne.w	8002112 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d005      	beq.n	8001e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d130      	bne.n	8001efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 0201 	and.w	r2, r3, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d017      	beq.n	8001f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d123      	bne.n	8001f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	08da      	lsrs	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3208      	adds	r2, #8
 8001f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	08da      	lsrs	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3208      	adds	r2, #8
 8001f86:	69b9      	ldr	r1, [r7, #24]
 8001f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0203 	and.w	r2, r3, #3
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80a2 	beq.w	8002112 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b57      	ldr	r3, [pc, #348]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a56      	ldr	r2, [pc, #344]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8001fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b54      	ldr	r3, [pc, #336]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fea:	4a52      	ldr	r2, [pc, #328]	; (8002134 <HAL_GPIO_Init+0x2ec>)
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a49      	ldr	r2, [pc, #292]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d019      	beq.n	800204a <HAL_GPIO_Init+0x202>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a48      	ldr	r2, [pc, #288]	; (800213c <HAL_GPIO_Init+0x2f4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_GPIO_Init+0x1fe>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a47      	ldr	r2, [pc, #284]	; (8002140 <HAL_GPIO_Init+0x2f8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00d      	beq.n	8002042 <HAL_GPIO_Init+0x1fa>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a46      	ldr	r2, [pc, #280]	; (8002144 <HAL_GPIO_Init+0x2fc>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <HAL_GPIO_Init+0x1f6>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a45      	ldr	r2, [pc, #276]	; (8002148 <HAL_GPIO_Init+0x300>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_GPIO_Init+0x1f2>
 8002036:	2304      	movs	r3, #4
 8002038:	e008      	b.n	800204c <HAL_GPIO_Init+0x204>
 800203a:	2307      	movs	r3, #7
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x204>
 800203e:	2303      	movs	r3, #3
 8002040:	e004      	b.n	800204c <HAL_GPIO_Init+0x204>
 8002042:	2302      	movs	r3, #2
 8002044:	e002      	b.n	800204c <HAL_GPIO_Init+0x204>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_GPIO_Init+0x204>
 800204a:	2300      	movs	r3, #0
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	f002 0203 	and.w	r2, r2, #3
 8002052:	0092      	lsls	r2, r2, #2
 8002054:	4093      	lsls	r3, r2
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800205c:	4935      	ldr	r1, [pc, #212]	; (8002134 <HAL_GPIO_Init+0x2ec>)
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	3302      	adds	r3, #2
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800206a:	4b38      	ldr	r3, [pc, #224]	; (800214c <HAL_GPIO_Init+0x304>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800208e:	4a2f      	ldr	r2, [pc, #188]	; (800214c <HAL_GPIO_Init+0x304>)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002094:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_GPIO_Init+0x304>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b8:	4a24      	ldr	r2, [pc, #144]	; (800214c <HAL_GPIO_Init+0x304>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_GPIO_Init+0x304>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e2:	4a1a      	ldr	r2, [pc, #104]	; (800214c <HAL_GPIO_Init+0x304>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_GPIO_Init+0x304>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800210c:	4a0f      	ldr	r2, [pc, #60]	; (800214c <HAL_GPIO_Init+0x304>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3301      	adds	r3, #1
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b0f      	cmp	r3, #15
 800211c:	f67f aea2 	bls.w	8001e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	40013800 	.word	0x40013800
 8002138:	40020000 	.word	0x40020000
 800213c:	40020400 	.word	0x40020400
 8002140:	40020800 	.word	0x40020800
 8002144:	40020c00 	.word	0x40020c00
 8002148:	40021000 	.word	0x40021000
 800214c:	40013c00 	.word	0x40013c00

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800216c:	e003      	b.n	8002176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	619a      	str	r2, [r3, #24]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002194:	887a      	ldrh	r2, [r7, #2]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4013      	ands	r3, r2
 800219a:	041a      	lsls	r2, r3, #16
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	43d9      	mvns	r1, r3
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	400b      	ands	r3, r1
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	619a      	str	r2, [r3, #24]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e12b      	b.n	8002422 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fa5c 	bl	800169c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800220a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800221c:	f001 f858 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 8002220:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a81      	ldr	r2, [pc, #516]	; (800242c <HAL_I2C_Init+0x274>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d807      	bhi.n	800223c <HAL_I2C_Init+0x84>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4a80      	ldr	r2, [pc, #512]	; (8002430 <HAL_I2C_Init+0x278>)
 8002230:	4293      	cmp	r3, r2
 8002232:	bf94      	ite	ls
 8002234:	2301      	movls	r3, #1
 8002236:	2300      	movhi	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	e006      	b.n	800224a <HAL_I2C_Init+0x92>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a7d      	ldr	r2, [pc, #500]	; (8002434 <HAL_I2C_Init+0x27c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	bf94      	ite	ls
 8002244:	2301      	movls	r3, #1
 8002246:	2300      	movhi	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0e7      	b.n	8002422 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4a78      	ldr	r2, [pc, #480]	; (8002438 <HAL_I2C_Init+0x280>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0c9b      	lsrs	r3, r3, #18
 800225c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a6a      	ldr	r2, [pc, #424]	; (800242c <HAL_I2C_Init+0x274>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d802      	bhi.n	800228c <HAL_I2C_Init+0xd4>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3301      	adds	r3, #1
 800228a:	e009      	b.n	80022a0 <HAL_I2C_Init+0xe8>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	4a69      	ldr	r2, [pc, #420]	; (800243c <HAL_I2C_Init+0x284>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	3301      	adds	r3, #1
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	495c      	ldr	r1, [pc, #368]	; (800242c <HAL_I2C_Init+0x274>)
 80022bc:	428b      	cmp	r3, r1
 80022be:	d819      	bhi.n	80022f4 <HAL_I2C_Init+0x13c>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1e59      	subs	r1, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ce:	1c59      	adds	r1, r3, #1
 80022d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022d4:	400b      	ands	r3, r1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_I2C_Init+0x138>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1e59      	subs	r1, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e8:	3301      	adds	r3, #1
 80022ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ee:	e051      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 80022f0:	2304      	movs	r3, #4
 80022f2:	e04f      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d111      	bne.n	8002320 <HAL_I2C_Init+0x168>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e58      	subs	r0, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	440b      	add	r3, r1
 800230a:	fbb0 f3f3 	udiv	r3, r0, r3
 800230e:	3301      	adds	r3, #1
 8002310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf0c      	ite	eq
 8002318:	2301      	moveq	r3, #1
 800231a:	2300      	movne	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	e012      	b.n	8002346 <HAL_I2C_Init+0x18e>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e58      	subs	r0, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	0099      	lsls	r1, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	fbb0 f3f3 	udiv	r3, r0, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Init+0x196>
 800234a:	2301      	movs	r3, #1
 800234c:	e022      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10e      	bne.n	8002374 <HAL_I2C_Init+0x1bc>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e58      	subs	r0, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6859      	ldr	r1, [r3, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	440b      	add	r3, r1
 8002364:	fbb0 f3f3 	udiv	r3, r0, r3
 8002368:	3301      	adds	r3, #1
 800236a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002372:	e00f      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e58      	subs	r0, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	0099      	lsls	r1, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	6809      	ldr	r1, [r1, #0]
 8002398:	4313      	orrs	r3, r2
 800239a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6911      	ldr	r1, [r2, #16]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68d2      	ldr	r2, [r2, #12]
 80023ce:	4311      	orrs	r1, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	000186a0 	.word	0x000186a0
 8002430:	001e847f 	.word	0x001e847f
 8002434:	003d08ff 	.word	0x003d08ff
 8002438:	431bde83 	.word	0x431bde83
 800243c:	10624dd3 	.word	0x10624dd3

08002440 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	817b      	strh	r3, [r7, #10]
 8002452:	460b      	mov	r3, r1
 8002454:	813b      	strh	r3, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800245a:	f7ff fbb3 	bl	8001bc4 <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b20      	cmp	r3, #32
 800246a:	f040 80d9 	bne.w	8002620 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2319      	movs	r3, #25
 8002474:	2201      	movs	r2, #1
 8002476:	496d      	ldr	r1, [pc, #436]	; (800262c <HAL_I2C_Mem_Write+0x1ec>)
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f971 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
 8002486:	e0cc      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_I2C_Mem_Write+0x56>
 8002492:	2302      	movs	r3, #2
 8002494:	e0c5      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d007      	beq.n	80024bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2221      	movs	r2, #33	; 0x21
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2240      	movs	r2, #64	; 0x40
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a3a      	ldr	r2, [r7, #32]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a4d      	ldr	r2, [pc, #308]	; (8002630 <HAL_I2C_Mem_Write+0x1f0>)
 80024fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024fe:	88f8      	ldrh	r0, [r7, #6]
 8002500:	893a      	ldrh	r2, [r7, #8]
 8002502:	8979      	ldrh	r1, [r7, #10]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4603      	mov	r3, r0
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f890 	bl	8002634 <I2C_RequestMemoryWrite>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d052      	beq.n	80025c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e081      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f9f2 	bl	800290c <I2C_WaitOnTXEFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00d      	beq.n	800254a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2b04      	cmp	r3, #4
 8002534:	d107      	bne.n	8002546 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002544:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06b      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b04      	cmp	r3, #4
 8002586:	d11b      	bne.n	80025c0 <HAL_I2C_Mem_Write+0x180>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d017      	beq.n	80025c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	781a      	ldrb	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1aa      	bne.n	800251e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f9de 	bl	800298e <I2C_WaitOnBTFFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00d      	beq.n	80025f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d107      	bne.n	80025f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e016      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	e000      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002620:	2302      	movs	r3, #2
  }
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	00100002 	.word	0x00100002
 8002630:	ffff0000 	.word	0xffff0000

08002634 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	4603      	mov	r3, r0
 8002644:	817b      	strh	r3, [r7, #10]
 8002646:	460b      	mov	r3, r1
 8002648:	813b      	strh	r3, [r7, #8]
 800264a:	4613      	mov	r3, r2
 800264c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800265c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	2200      	movs	r2, #0
 8002666:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f878 	bl	8002760 <I2C_WaitOnFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00d      	beq.n	8002692 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002684:	d103      	bne.n	800268e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e05f      	b.n	8002752 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002692:	897b      	ldrh	r3, [r7, #10]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	6a3a      	ldr	r2, [r7, #32]
 80026a6:	492d      	ldr	r1, [pc, #180]	; (800275c <I2C_RequestMemoryWrite+0x128>)
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f8b0 	bl	800280e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e04c      	b.n	8002752 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d0:	6a39      	ldr	r1, [r7, #32]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f91a 	bl	800290c <I2C_WaitOnTXEFlagUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00d      	beq.n	80026fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d107      	bne.n	80026f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e02b      	b.n	8002752 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002700:	893b      	ldrh	r3, [r7, #8]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	611a      	str	r2, [r3, #16]
 800270a:	e021      	b.n	8002750 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800270c:	893b      	ldrh	r3, [r7, #8]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	b29b      	uxth	r3, r3
 8002712:	b2da      	uxtb	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800271a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271c:	6a39      	ldr	r1, [r7, #32]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f8f4 	bl	800290c <I2C_WaitOnTXEFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00d      	beq.n	8002746 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2b04      	cmp	r3, #4
 8002730:	d107      	bne.n	8002742 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002740:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e005      	b.n	8002752 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002746:	893b      	ldrh	r3, [r7, #8]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	00010002 	.word	0x00010002

08002760 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	4613      	mov	r3, r2
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002770:	e025      	b.n	80027be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d021      	beq.n	80027be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277a:	f7ff fa23 	bl	8001bc4 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d302      	bcc.n	8002790 <I2C_WaitOnFlagUntilTimeout+0x30>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d116      	bne.n	80027be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f043 0220 	orr.w	r2, r3, #32
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e023      	b.n	8002806 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	0c1b      	lsrs	r3, r3, #16
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d10d      	bne.n	80027e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4013      	ands	r3, r2
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	e00c      	b.n	80027fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4013      	ands	r3, r2
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bf0c      	ite	eq
 80027f6:	2301      	moveq	r3, #1
 80027f8:	2300      	movne	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	429a      	cmp	r2, r3
 8002802:	d0b6      	beq.n	8002772 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800281c:	e051      	b.n	80028c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282c:	d123      	bne.n	8002876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002846:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f043 0204 	orr.w	r2, r3, #4
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e046      	b.n	8002904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d021      	beq.n	80028c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287e:	f7ff f9a1 	bl	8001bc4 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	429a      	cmp	r2, r3
 800288c:	d302      	bcc.n	8002894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d116      	bne.n	80028c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f043 0220 	orr.w	r2, r3, #32
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e020      	b.n	8002904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10c      	bne.n	80028e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4013      	ands	r3, r2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bf14      	ite	ne
 80028de:	2301      	movne	r3, #1
 80028e0:	2300      	moveq	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	e00b      	b.n	80028fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	43da      	mvns	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	4013      	ands	r3, r2
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf14      	ite	ne
 80028f8:	2301      	movne	r3, #1
 80028fa:	2300      	moveq	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d18d      	bne.n	800281e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002918:	e02d      	b.n	8002976 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f878 	bl	8002a10 <I2C_IsAcknowledgeFailed>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e02d      	b.n	8002986 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d021      	beq.n	8002976 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002932:	f7ff f947 	bl	8001bc4 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	429a      	cmp	r2, r3
 8002940:	d302      	bcc.n	8002948 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d116      	bne.n	8002976 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f043 0220 	orr.w	r2, r3, #32
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e007      	b.n	8002986 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002980:	2b80      	cmp	r3, #128	; 0x80
 8002982:	d1ca      	bne.n	800291a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800299a:	e02d      	b.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f837 	bl	8002a10 <I2C_IsAcknowledgeFailed>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e02d      	b.n	8002a08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b2:	d021      	beq.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b4:	f7ff f906 	bl	8001bc4 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d302      	bcc.n	80029ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d116      	bne.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e007      	b.n	8002a08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d1ca      	bne.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a26:	d11b      	bne.n	8002a60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e267      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d075      	beq.n	8002b7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a8e:	4b88      	ldr	r3, [pc, #544]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d00c      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a9a:	4b85      	ldr	r3, [pc, #532]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d112      	bne.n	8002acc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aa6:	4b82      	ldr	r3, [pc, #520]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ab2:	d10b      	bne.n	8002acc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab4:	4b7e      	ldr	r3, [pc, #504]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d05b      	beq.n	8002b78 <HAL_RCC_OscConfig+0x108>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d157      	bne.n	8002b78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e242      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad4:	d106      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x74>
 8002ad6:	4b76      	ldr	r3, [pc, #472]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a75      	ldr	r2, [pc, #468]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e01d      	b.n	8002b20 <HAL_RCC_OscConfig+0xb0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x98>
 8002aee:	4b70      	ldr	r3, [pc, #448]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a6f      	ldr	r2, [pc, #444]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a6c      	ldr	r2, [pc, #432]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e00b      	b.n	8002b20 <HAL_RCC_OscConfig+0xb0>
 8002b08:	4b69      	ldr	r3, [pc, #420]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a68      	ldr	r2, [pc, #416]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	4b66      	ldr	r3, [pc, #408]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a65      	ldr	r2, [pc, #404]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7ff f84c 	bl	8001bc4 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b30:	f7ff f848 	bl	8001bc4 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e207      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b42:	4b5b      	ldr	r3, [pc, #364]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0xc0>
 8002b4e:	e014      	b.n	8002b7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7ff f838 	bl	8001bc4 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b58:	f7ff f834 	bl	8001bc4 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e1f3      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6a:	4b51      	ldr	r3, [pc, #324]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0xe8>
 8002b76:	e000      	b.n	8002b7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d063      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b86:	4b4a      	ldr	r3, [pc, #296]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00b      	beq.n	8002baa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b92:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d11c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b9e:	4b44      	ldr	r3, [pc, #272]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d116      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002baa:	4b41      	ldr	r3, [pc, #260]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x152>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e1c7      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc2:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4937      	ldr	r1, [pc, #220]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd6:	e03a      	b.n	8002c4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d020      	beq.n	8002c22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be0:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <HAL_RCC_OscConfig+0x244>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe ffed 	bl	8001bc4 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bee:	f7fe ffe9 	bl	8001bc4 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e1a8      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c00:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0c:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4925      	ldr	r1, [pc, #148]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]
 8002c20:	e015      	b.n	8002c4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c22:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <HAL_RCC_OscConfig+0x244>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7fe ffcc 	bl	8001bc4 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c30:	f7fe ffc8 	bl	8001bc4 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e187      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d036      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d016      	beq.n	8002c90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <HAL_RCC_OscConfig+0x248>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7fe ffac 	bl	8001bc4 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c70:	f7fe ffa8 	bl	8001bc4 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e167      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_OscConfig+0x240>)
 8002c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x200>
 8002c8e:	e01b      	b.n	8002cc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCC_OscConfig+0x248>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c96:	f7fe ff95 	bl	8001bc4 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	e00e      	b.n	8002cbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c9e:	f7fe ff91 	bl	8001bc4 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d907      	bls.n	8002cbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e150      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	42470000 	.word	0x42470000
 8002cb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbc:	4b88      	ldr	r3, [pc, #544]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1ea      	bne.n	8002c9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8097 	beq.w	8002e04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cda:	4b81      	ldr	r3, [pc, #516]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10f      	bne.n	8002d06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	4b7d      	ldr	r3, [pc, #500]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4a7c      	ldr	r2, [pc, #496]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf6:	4b7a      	ldr	r3, [pc, #488]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d02:	2301      	movs	r3, #1
 8002d04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d06:	4b77      	ldr	r3, [pc, #476]	; (8002ee4 <HAL_RCC_OscConfig+0x474>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d118      	bne.n	8002d44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d12:	4b74      	ldr	r3, [pc, #464]	; (8002ee4 <HAL_RCC_OscConfig+0x474>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a73      	ldr	r2, [pc, #460]	; (8002ee4 <HAL_RCC_OscConfig+0x474>)
 8002d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe ff51 	bl	8001bc4 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d26:	f7fe ff4d 	bl	8001bc4 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e10c      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	4b6a      	ldr	r3, [pc, #424]	; (8002ee4 <HAL_RCC_OscConfig+0x474>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d106      	bne.n	8002d5a <HAL_RCC_OscConfig+0x2ea>
 8002d4c:	4b64      	ldr	r3, [pc, #400]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	4a63      	ldr	r2, [pc, #396]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6713      	str	r3, [r2, #112]	; 0x70
 8002d58:	e01c      	b.n	8002d94 <HAL_RCC_OscConfig+0x324>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x30c>
 8002d62:	4b5f      	ldr	r3, [pc, #380]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d66:	4a5e      	ldr	r2, [pc, #376]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002d68:	f043 0304 	orr.w	r3, r3, #4
 8002d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6e:	4b5c      	ldr	r3, [pc, #368]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	4a5b      	ldr	r2, [pc, #364]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7a:	e00b      	b.n	8002d94 <HAL_RCC_OscConfig+0x324>
 8002d7c:	4b58      	ldr	r3, [pc, #352]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	4a57      	ldr	r2, [pc, #348]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	6713      	str	r3, [r2, #112]	; 0x70
 8002d88:	4b55      	ldr	r3, [pc, #340]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	4a54      	ldr	r2, [pc, #336]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002d8e:	f023 0304 	bic.w	r3, r3, #4
 8002d92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d015      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9c:	f7fe ff12 	bl	8001bc4 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da4:	f7fe ff0e 	bl	8001bc4 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e0cb      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dba:	4b49      	ldr	r3, [pc, #292]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0ee      	beq.n	8002da4 <HAL_RCC_OscConfig+0x334>
 8002dc6:	e014      	b.n	8002df2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc8:	f7fe fefc 	bl	8001bc4 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fef8 	bl	8001bc4 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e0b5      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de6:	4b3e      	ldr	r3, [pc, #248]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1ee      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d105      	bne.n	8002e04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df8:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	4a38      	ldr	r2, [pc, #224]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80a1 	beq.w	8002f50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e0e:	4b34      	ldr	r3, [pc, #208]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d05c      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d141      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e22:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <HAL_RCC_OscConfig+0x478>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fe fecc 	bl	8001bc4 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fe fec8 	bl	8001bc4 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e087      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e42:	4b27      	ldr	r3, [pc, #156]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	019b      	lsls	r3, r3, #6
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	085b      	lsrs	r3, r3, #1
 8002e66:	3b01      	subs	r3, #1
 8002e68:	041b      	lsls	r3, r3, #16
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	061b      	lsls	r3, r3, #24
 8002e72:	491b      	ldr	r1, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e78:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_RCC_OscConfig+0x478>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7fe fea1 	bl	8001bc4 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e86:	f7fe fe9d 	bl	8001bc4 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e05c      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e98:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x416>
 8002ea4:	e054      	b.n	8002f50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <HAL_RCC_OscConfig+0x478>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe fe8a 	bl	8001bc4 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe fe86 	bl	8001bc4 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e045      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x444>
 8002ed2:	e03d      	b.n	8002f50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e038      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eec:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <HAL_RCC_OscConfig+0x4ec>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d028      	beq.n	8002f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d121      	bne.n	8002f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d11a      	bne.n	8002f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d111      	bne.n	8002f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	3b01      	subs	r3, #1
 8002f36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d107      	bne.n	8002f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800

08002f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0cc      	b.n	800310e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f74:	4b68      	ldr	r3, [pc, #416]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d90c      	bls.n	8002f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b65      	ldr	r3, [pc, #404]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b63      	ldr	r3, [pc, #396]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0b8      	b.n	800310e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d020      	beq.n	8002fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb4:	4b59      	ldr	r3, [pc, #356]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4a58      	ldr	r2, [pc, #352]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fcc:	4b53      	ldr	r3, [pc, #332]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	4a52      	ldr	r2, [pc, #328]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd8:	4b50      	ldr	r3, [pc, #320]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	494d      	ldr	r1, [pc, #308]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d044      	beq.n	8003080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffe:	4b47      	ldr	r3, [pc, #284]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d119      	bne.n	800303e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e07f      	b.n	800310e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d003      	beq.n	800301e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800301a:	2b03      	cmp	r3, #3
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301e:	4b3f      	ldr	r3, [pc, #252]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e06f      	b.n	800310e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302e:	4b3b      	ldr	r3, [pc, #236]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e067      	b.n	800310e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303e:	4b37      	ldr	r3, [pc, #220]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f023 0203 	bic.w	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4934      	ldr	r1, [pc, #208]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	4313      	orrs	r3, r2
 800304e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003050:	f7fe fdb8 	bl	8001bc4 <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	e00a      	b.n	800306e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003058:	f7fe fdb4 	bl	8001bc4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e04f      	b.n	800310e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	4b2b      	ldr	r3, [pc, #172]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 020c 	and.w	r2, r3, #12
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	429a      	cmp	r2, r3
 800307e:	d1eb      	bne.n	8003058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003080:	4b25      	ldr	r3, [pc, #148]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d20c      	bcs.n	80030a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e032      	b.n	800310e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b4:	4b19      	ldr	r3, [pc, #100]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4916      	ldr	r1, [pc, #88]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d2:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	490e      	ldr	r1, [pc, #56]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030e6:	f000 f821 	bl	800312c <HAL_RCC_GetSysClockFreq>
 80030ea:	4602      	mov	r2, r0
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	490a      	ldr	r1, [pc, #40]	; (8003120 <HAL_RCC_ClockConfig+0x1c0>)
 80030f8:	5ccb      	ldrb	r3, [r1, r3]
 80030fa:	fa22 f303 	lsr.w	r3, r2, r3
 80030fe:	4a09      	ldr	r2, [pc, #36]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003102:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe fd18 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40023c00 	.word	0x40023c00
 800311c:	40023800 	.word	0x40023800
 8003120:	08009674 	.word	0x08009674
 8003124:	20000000 	.word	0x20000000
 8003128:	20000004 	.word	0x20000004

0800312c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800312c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003130:	b090      	sub	sp, #64	; 0x40
 8003132:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	637b      	str	r3, [r7, #52]	; 0x34
 8003138:	2300      	movs	r3, #0
 800313a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313c:	2300      	movs	r3, #0
 800313e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003144:	4b59      	ldr	r3, [pc, #356]	; (80032ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 030c 	and.w	r3, r3, #12
 800314c:	2b08      	cmp	r3, #8
 800314e:	d00d      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x40>
 8003150:	2b08      	cmp	r3, #8
 8003152:	f200 80a1 	bhi.w	8003298 <HAL_RCC_GetSysClockFreq+0x16c>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0x34>
 800315a:	2b04      	cmp	r3, #4
 800315c:	d003      	beq.n	8003166 <HAL_RCC_GetSysClockFreq+0x3a>
 800315e:	e09b      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003160:	4b53      	ldr	r3, [pc, #332]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003162:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003164:	e09b      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003166:	4b53      	ldr	r3, [pc, #332]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003168:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800316a:	e098      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800316c:	4b4f      	ldr	r3, [pc, #316]	; (80032ac <HAL_RCC_GetSysClockFreq+0x180>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003176:	4b4d      	ldr	r3, [pc, #308]	; (80032ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d028      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003182:	4b4a      	ldr	r3, [pc, #296]	; (80032ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	099b      	lsrs	r3, r3, #6
 8003188:	2200      	movs	r2, #0
 800318a:	623b      	str	r3, [r7, #32]
 800318c:	627a      	str	r2, [r7, #36]	; 0x24
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003194:	2100      	movs	r1, #0
 8003196:	4b47      	ldr	r3, [pc, #284]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003198:	fb03 f201 	mul.w	r2, r3, r1
 800319c:	2300      	movs	r3, #0
 800319e:	fb00 f303 	mul.w	r3, r0, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	4a43      	ldr	r2, [pc, #268]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80031a6:	fba0 1202 	umull	r1, r2, r0, r2
 80031aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031ac:	460a      	mov	r2, r1
 80031ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80031b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b2:	4413      	add	r3, r2
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b8:	2200      	movs	r2, #0
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	61fa      	str	r2, [r7, #28]
 80031be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031c6:	f7fd fd67 	bl	8000c98 <__aeabi_uldivmod>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4613      	mov	r3, r2
 80031d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d2:	e053      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d4:	4b35      	ldr	r3, [pc, #212]	; (80032ac <HAL_RCC_GetSysClockFreq+0x180>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	2200      	movs	r2, #0
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	617a      	str	r2, [r7, #20]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031e6:	f04f 0b00 	mov.w	fp, #0
 80031ea:	4652      	mov	r2, sl
 80031ec:	465b      	mov	r3, fp
 80031ee:	f04f 0000 	mov.w	r0, #0
 80031f2:	f04f 0100 	mov.w	r1, #0
 80031f6:	0159      	lsls	r1, r3, #5
 80031f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031fc:	0150      	lsls	r0, r2, #5
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	ebb2 080a 	subs.w	r8, r2, sl
 8003206:	eb63 090b 	sbc.w	r9, r3, fp
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003216:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800321a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800321e:	ebb2 0408 	subs.w	r4, r2, r8
 8003222:	eb63 0509 	sbc.w	r5, r3, r9
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	00eb      	lsls	r3, r5, #3
 8003230:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003234:	00e2      	lsls	r2, r4, #3
 8003236:	4614      	mov	r4, r2
 8003238:	461d      	mov	r5, r3
 800323a:	eb14 030a 	adds.w	r3, r4, sl
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	eb45 030b 	adc.w	r3, r5, fp
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003252:	4629      	mov	r1, r5
 8003254:	028b      	lsls	r3, r1, #10
 8003256:	4621      	mov	r1, r4
 8003258:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800325c:	4621      	mov	r1, r4
 800325e:	028a      	lsls	r2, r1, #10
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
 8003264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003266:	2200      	movs	r2, #0
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	60fa      	str	r2, [r7, #12]
 800326c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003270:	f7fd fd12 	bl	8000c98 <__aeabi_uldivmod>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4613      	mov	r3, r2
 800327a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_GetSysClockFreq+0x180>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	3301      	adds	r3, #1
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800328c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003296:	e002      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800329a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800329c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3740      	adds	r7, #64	; 0x40
 80032a4:	46bd      	mov	sp, r7
 80032a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	00f42400 	.word	0x00f42400
 80032b4:	017d7840 	.word	0x017d7840

080032b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <HAL_RCC_GetHCLKFreq+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000000 	.word	0x20000000

080032d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032d4:	f7ff fff0 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	0a9b      	lsrs	r3, r3, #10
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	4903      	ldr	r1, [pc, #12]	; (80032f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e6:	5ccb      	ldrb	r3, [r1, r3]
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40023800 	.word	0x40023800
 80032f4:	08009684 	.word	0x08009684

080032f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e041      	b.n	800338e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe fa04 	bl	800172c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f000 fdf6 	bl	8003f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e041      	b.n	800342c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f839 	bl	8003434 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2202      	movs	r2, #2
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3304      	adds	r3, #4
 80033d2:	4619      	mov	r1, r3
 80033d4:	4610      	mov	r0, r2
 80033d6:	f000 fda7 	bl	8003f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <HAL_TIM_PWM_Start+0x24>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e022      	b.n	80034b2 <HAL_TIM_PWM_Start+0x6a>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b04      	cmp	r3, #4
 8003470:	d109      	bne.n	8003486 <HAL_TIM_PWM_Start+0x3e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	bf14      	ite	ne
 800347e:	2301      	movne	r3, #1
 8003480:	2300      	moveq	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	e015      	b.n	80034b2 <HAL_TIM_PWM_Start+0x6a>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d109      	bne.n	80034a0 <HAL_TIM_PWM_Start+0x58>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	bf14      	ite	ne
 8003498:	2301      	movne	r3, #1
 800349a:	2300      	moveq	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	e008      	b.n	80034b2 <HAL_TIM_PWM_Start+0x6a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	bf14      	ite	ne
 80034ac:	2301      	movne	r3, #1
 80034ae:	2300      	moveq	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e068      	b.n	800358c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <HAL_TIM_PWM_Start+0x82>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c8:	e013      	b.n	80034f2 <HAL_TIM_PWM_Start+0xaa>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d104      	bne.n	80034da <HAL_TIM_PWM_Start+0x92>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d8:	e00b      	b.n	80034f2 <HAL_TIM_PWM_Start+0xaa>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d104      	bne.n	80034ea <HAL_TIM_PWM_Start+0xa2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e8:	e003      	b.n	80034f2 <HAL_TIM_PWM_Start+0xaa>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2201      	movs	r2, #1
 80034f8:	6839      	ldr	r1, [r7, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f001 f8d8 	bl	80046b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a23      	ldr	r2, [pc, #140]	; (8003594 <HAL_TIM_PWM_Start+0x14c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d107      	bne.n	800351a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <HAL_TIM_PWM_Start+0x14c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d018      	beq.n	8003556 <HAL_TIM_PWM_Start+0x10e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352c:	d013      	beq.n	8003556 <HAL_TIM_PWM_Start+0x10e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a19      	ldr	r2, [pc, #100]	; (8003598 <HAL_TIM_PWM_Start+0x150>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00e      	beq.n	8003556 <HAL_TIM_PWM_Start+0x10e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a17      	ldr	r2, [pc, #92]	; (800359c <HAL_TIM_PWM_Start+0x154>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d009      	beq.n	8003556 <HAL_TIM_PWM_Start+0x10e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <HAL_TIM_PWM_Start+0x158>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <HAL_TIM_PWM_Start+0x10e>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <HAL_TIM_PWM_Start+0x15c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d111      	bne.n	800357a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b06      	cmp	r3, #6
 8003566:	d010      	beq.n	800358a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003578:	e007      	b.n	800358a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40010000 	.word	0x40010000
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40000c00 	.word	0x40000c00
 80035a4:	40014000 	.word	0x40014000

080035a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e041      	b.n	800363e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f839 	bl	8003646 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f000 fc9e 	bl	8003f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d104      	bne.n	800367a <HAL_TIM_IC_Start_IT+0x1e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e013      	b.n	80036a2 <HAL_TIM_IC_Start_IT+0x46>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d104      	bne.n	800368a <HAL_TIM_IC_Start_IT+0x2e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003686:	b2db      	uxtb	r3, r3
 8003688:	e00b      	b.n	80036a2 <HAL_TIM_IC_Start_IT+0x46>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d104      	bne.n	800369a <HAL_TIM_IC_Start_IT+0x3e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003696:	b2db      	uxtb	r3, r3
 8003698:	e003      	b.n	80036a2 <HAL_TIM_IC_Start_IT+0x46>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d104      	bne.n	80036b4 <HAL_TIM_IC_Start_IT+0x58>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e013      	b.n	80036dc <HAL_TIM_IC_Start_IT+0x80>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d104      	bne.n	80036c4 <HAL_TIM_IC_Start_IT+0x68>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	e00b      	b.n	80036dc <HAL_TIM_IC_Start_IT+0x80>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d104      	bne.n	80036d4 <HAL_TIM_IC_Start_IT+0x78>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	e003      	b.n	80036dc <HAL_TIM_IC_Start_IT+0x80>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80036de:	7bbb      	ldrb	r3, [r7, #14]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d102      	bne.n	80036ea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80036e4:	7b7b      	ldrb	r3, [r7, #13]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d001      	beq.n	80036ee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0c2      	b.n	8003874 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_IC_Start_IT+0xa2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036fc:	e013      	b.n	8003726 <HAL_TIM_IC_Start_IT+0xca>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b04      	cmp	r3, #4
 8003702:	d104      	bne.n	800370e <HAL_TIM_IC_Start_IT+0xb2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800370c:	e00b      	b.n	8003726 <HAL_TIM_IC_Start_IT+0xca>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d104      	bne.n	800371e <HAL_TIM_IC_Start_IT+0xc2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800371c:	e003      	b.n	8003726 <HAL_TIM_IC_Start_IT+0xca>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d104      	bne.n	8003736 <HAL_TIM_IC_Start_IT+0xda>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003734:	e013      	b.n	800375e <HAL_TIM_IC_Start_IT+0x102>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b04      	cmp	r3, #4
 800373a:	d104      	bne.n	8003746 <HAL_TIM_IC_Start_IT+0xea>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003744:	e00b      	b.n	800375e <HAL_TIM_IC_Start_IT+0x102>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b08      	cmp	r3, #8
 800374a:	d104      	bne.n	8003756 <HAL_TIM_IC_Start_IT+0xfa>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003754:	e003      	b.n	800375e <HAL_TIM_IC_Start_IT+0x102>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b0c      	cmp	r3, #12
 8003762:	d841      	bhi.n	80037e8 <HAL_TIM_IC_Start_IT+0x18c>
 8003764:	a201      	add	r2, pc, #4	; (adr r2, 800376c <HAL_TIM_IC_Start_IT+0x110>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	080037a1 	.word	0x080037a1
 8003770:	080037e9 	.word	0x080037e9
 8003774:	080037e9 	.word	0x080037e9
 8003778:	080037e9 	.word	0x080037e9
 800377c:	080037b3 	.word	0x080037b3
 8003780:	080037e9 	.word	0x080037e9
 8003784:	080037e9 	.word	0x080037e9
 8003788:	080037e9 	.word	0x080037e9
 800378c:	080037c5 	.word	0x080037c5
 8003790:	080037e9 	.word	0x080037e9
 8003794:	080037e9 	.word	0x080037e9
 8003798:	080037e9 	.word	0x080037e9
 800379c:	080037d7 	.word	0x080037d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0202 	orr.w	r2, r2, #2
 80037ae:	60da      	str	r2, [r3, #12]
      break;
 80037b0:	e01d      	b.n	80037ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0204 	orr.w	r2, r2, #4
 80037c0:	60da      	str	r2, [r3, #12]
      break;
 80037c2:	e014      	b.n	80037ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0208 	orr.w	r2, r2, #8
 80037d2:	60da      	str	r2, [r3, #12]
      break;
 80037d4:	e00b      	b.n	80037ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0210 	orr.w	r2, r2, #16
 80037e4:	60da      	str	r2, [r3, #12]
      break;
 80037e6:	e002      	b.n	80037ee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
      break;
 80037ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d13e      	bne.n	8003872 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2201      	movs	r2, #1
 80037fa:	6839      	ldr	r1, [r7, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 ff57 	bl	80046b0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1d      	ldr	r2, [pc, #116]	; (800387c <HAL_TIM_IC_Start_IT+0x220>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d018      	beq.n	800383e <HAL_TIM_IC_Start_IT+0x1e2>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003814:	d013      	beq.n	800383e <HAL_TIM_IC_Start_IT+0x1e2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a19      	ldr	r2, [pc, #100]	; (8003880 <HAL_TIM_IC_Start_IT+0x224>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00e      	beq.n	800383e <HAL_TIM_IC_Start_IT+0x1e2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a17      	ldr	r2, [pc, #92]	; (8003884 <HAL_TIM_IC_Start_IT+0x228>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d009      	beq.n	800383e <HAL_TIM_IC_Start_IT+0x1e2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a16      	ldr	r2, [pc, #88]	; (8003888 <HAL_TIM_IC_Start_IT+0x22c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d004      	beq.n	800383e <HAL_TIM_IC_Start_IT+0x1e2>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a14      	ldr	r2, [pc, #80]	; (800388c <HAL_TIM_IC_Start_IT+0x230>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d111      	bne.n	8003862 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b06      	cmp	r3, #6
 800384e:	d010      	beq.n	8003872 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003860:	e007      	b.n	8003872 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40010000 	.word	0x40010000
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800
 8003888:	40000c00 	.word	0x40000c00
 800388c:	40014000 	.word	0x40014000

08003890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d122      	bne.n	80038ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d11b      	bne.n	80038ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0202 	mvn.w	r2, #2
 80038bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fd fe9a 	bl	800160c <HAL_TIM_IC_CaptureCallback>
 80038d8:	e005      	b.n	80038e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fb05 	bl	8003eea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fb0c 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d122      	bne.n	8003940 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b04      	cmp	r3, #4
 8003906:	d11b      	bne.n	8003940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0204 	mvn.w	r2, #4
 8003910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd fe70 	bl	800160c <HAL_TIM_IC_CaptureCallback>
 800392c:	e005      	b.n	800393a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fadb 	bl	8003eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fae2 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b08      	cmp	r3, #8
 800394c:	d122      	bne.n	8003994 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b08      	cmp	r3, #8
 800395a:	d11b      	bne.n	8003994 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0208 	mvn.w	r2, #8
 8003964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2204      	movs	r2, #4
 800396a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fd fe46 	bl	800160c <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fab1 	bl	8003eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fab8 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0310 	and.w	r3, r3, #16
 800399e:	2b10      	cmp	r3, #16
 80039a0:	d122      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d11b      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0210 	mvn.w	r2, #16
 80039b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2208      	movs	r2, #8
 80039be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd fe1c 	bl	800160c <HAL_TIM_IC_CaptureCallback>
 80039d4:	e005      	b.n	80039e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa87 	bl	8003eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fa8e 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d10e      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d107      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0201 	mvn.w	r2, #1
 8003a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd fde2 	bl	80015d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1e:	2b80      	cmp	r3, #128	; 0x80
 8003a20:	d10e      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2c:	2b80      	cmp	r3, #128	; 0x80
 8003a2e:	d107      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fed6 	bl	80047ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b40      	cmp	r3, #64	; 0x40
 8003a4c:	d10e      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d107      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fa53 	bl	8003f12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d10e      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d107      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0220 	mvn.w	r2, #32
 8003a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fea0 	bl	80047d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a98:	bf00      	nop
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_IC_ConfigChannel+0x1e>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e088      	b.n	8003bd0 <HAL_TIM_IC_ConfigChannel+0x130>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d11b      	bne.n	8003b04 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f000 fc30 	bl	8004340 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 020c 	bic.w	r2, r2, #12
 8003aee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6999      	ldr	r1, [r3, #24]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	619a      	str	r2, [r3, #24]
 8003b02:	e060      	b.n	8003bc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d11c      	bne.n	8003b44 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	6819      	ldr	r1, [r3, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f000 fca8 	bl	800446e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6999      	ldr	r1, [r3, #24]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	021a      	lsls	r2, r3, #8
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	619a      	str	r2, [r3, #24]
 8003b42:	e040      	b.n	8003bc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d11b      	bne.n	8003b82 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f000 fcf5 	bl	8004548 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 020c 	bic.w	r2, r2, #12
 8003b6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69d9      	ldr	r1, [r3, #28]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	61da      	str	r2, [r3, #28]
 8003b80:	e021      	b.n	8003bc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b0c      	cmp	r3, #12
 8003b86:	d11c      	bne.n	8003bc2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	6819      	ldr	r1, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f000 fd12 	bl	80045c0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69da      	ldr	r2, [r3, #28]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003baa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69d9      	ldr	r1, [r3, #28]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	021a      	lsls	r2, r3, #8
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	61da      	str	r2, [r3, #28]
 8003bc0:	e001      	b.n	8003bc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e0ae      	b.n	8003d54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	f200 809f 	bhi.w	8003d44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c06:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0c:	08003c41 	.word	0x08003c41
 8003c10:	08003d45 	.word	0x08003d45
 8003c14:	08003d45 	.word	0x08003d45
 8003c18:	08003d45 	.word	0x08003d45
 8003c1c:	08003c81 	.word	0x08003c81
 8003c20:	08003d45 	.word	0x08003d45
 8003c24:	08003d45 	.word	0x08003d45
 8003c28:	08003d45 	.word	0x08003d45
 8003c2c:	08003cc3 	.word	0x08003cc3
 8003c30:	08003d45 	.word	0x08003d45
 8003c34:	08003d45 	.word	0x08003d45
 8003c38:	08003d45 	.word	0x08003d45
 8003c3c:	08003d03 	.word	0x08003d03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f9ee 	bl	8004028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0208 	orr.w	r2, r2, #8
 8003c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0204 	bic.w	r2, r2, #4
 8003c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6999      	ldr	r1, [r3, #24]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	619a      	str	r2, [r3, #24]
      break;
 8003c7e:	e064      	b.n	8003d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fa34 	bl	80040f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6999      	ldr	r1, [r3, #24]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	021a      	lsls	r2, r3, #8
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	619a      	str	r2, [r3, #24]
      break;
 8003cc0:	e043      	b.n	8003d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fa7f 	bl	80041cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0208 	orr.w	r2, r2, #8
 8003cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0204 	bic.w	r2, r2, #4
 8003cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69d9      	ldr	r1, [r3, #28]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	61da      	str	r2, [r3, #28]
      break;
 8003d00:	e023      	b.n	8003d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fac9 	bl	80042a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69d9      	ldr	r1, [r3, #28]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	021a      	lsls	r2, r3, #8
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	61da      	str	r2, [r3, #28]
      break;
 8003d42:	e002      	b.n	8003d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	75fb      	strb	r3, [r7, #23]
      break;
 8003d48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_TIM_ConfigClockSource+0x1c>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e0b4      	b.n	8003ee2 <HAL_TIM_ConfigClockSource+0x186>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db0:	d03e      	beq.n	8003e30 <HAL_TIM_ConfigClockSource+0xd4>
 8003db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db6:	f200 8087 	bhi.w	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbe:	f000 8086 	beq.w	8003ece <HAL_TIM_ConfigClockSource+0x172>
 8003dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc6:	d87f      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d01a      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0xa6>
 8003dcc:	2b70      	cmp	r3, #112	; 0x70
 8003dce:	d87b      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d050      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0x11a>
 8003dd4:	2b60      	cmp	r3, #96	; 0x60
 8003dd6:	d877      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd8:	2b50      	cmp	r3, #80	; 0x50
 8003dda:	d03c      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0xfa>
 8003ddc:	2b50      	cmp	r3, #80	; 0x50
 8003dde:	d873      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d058      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x13a>
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d86f      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de8:	2b30      	cmp	r3, #48	; 0x30
 8003dea:	d064      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003dec:	2b30      	cmp	r3, #48	; 0x30
 8003dee:	d86b      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d060      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d867      	bhi.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d05c      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d05a      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003e00:	e062      	b.n	8003ec8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6899      	ldr	r1, [r3, #8]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f000 fc2d 	bl	8004670 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	609a      	str	r2, [r3, #8]
      break;
 8003e2e:	e04f      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6899      	ldr	r1, [r3, #8]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f000 fc16 	bl	8004670 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e52:	609a      	str	r2, [r3, #8]
      break;
 8003e54:	e03c      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6859      	ldr	r1, [r3, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	461a      	mov	r2, r3
 8003e64:	f000 fad4 	bl	8004410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2150      	movs	r1, #80	; 0x50
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fbe3 	bl	800463a <TIM_ITRx_SetConfig>
      break;
 8003e74:	e02c      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6859      	ldr	r1, [r3, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	461a      	mov	r2, r3
 8003e84:	f000 fb30 	bl	80044e8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2160      	movs	r1, #96	; 0x60
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fbd3 	bl	800463a <TIM_ITRx_SetConfig>
      break;
 8003e94:	e01c      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6859      	ldr	r1, [r3, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f000 fab4 	bl	8004410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2140      	movs	r1, #64	; 0x40
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fbc3 	bl	800463a <TIM_ITRx_SetConfig>
      break;
 8003eb4:	e00c      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f000 fbba 	bl	800463a <TIM_ITRx_SetConfig>
      break;
 8003ec6:	e003      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ecc:	e000      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a34      	ldr	r2, [pc, #208]	; (800400c <TIM_Base_SetConfig+0xe4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00f      	beq.n	8003f60 <TIM_Base_SetConfig+0x38>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f46:	d00b      	beq.n	8003f60 <TIM_Base_SetConfig+0x38>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a31      	ldr	r2, [pc, #196]	; (8004010 <TIM_Base_SetConfig+0xe8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <TIM_Base_SetConfig+0x38>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a30      	ldr	r2, [pc, #192]	; (8004014 <TIM_Base_SetConfig+0xec>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_Base_SetConfig+0x38>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a2f      	ldr	r2, [pc, #188]	; (8004018 <TIM_Base_SetConfig+0xf0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d108      	bne.n	8003f72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a25      	ldr	r2, [pc, #148]	; (800400c <TIM_Base_SetConfig+0xe4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01b      	beq.n	8003fb2 <TIM_Base_SetConfig+0x8a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f80:	d017      	beq.n	8003fb2 <TIM_Base_SetConfig+0x8a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a22      	ldr	r2, [pc, #136]	; (8004010 <TIM_Base_SetConfig+0xe8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <TIM_Base_SetConfig+0x8a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a21      	ldr	r2, [pc, #132]	; (8004014 <TIM_Base_SetConfig+0xec>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00f      	beq.n	8003fb2 <TIM_Base_SetConfig+0x8a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a20      	ldr	r2, [pc, #128]	; (8004018 <TIM_Base_SetConfig+0xf0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00b      	beq.n	8003fb2 <TIM_Base_SetConfig+0x8a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1f      	ldr	r2, [pc, #124]	; (800401c <TIM_Base_SetConfig+0xf4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <TIM_Base_SetConfig+0x8a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a1e      	ldr	r2, [pc, #120]	; (8004020 <TIM_Base_SetConfig+0xf8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d003      	beq.n	8003fb2 <TIM_Base_SetConfig+0x8a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <TIM_Base_SetConfig+0xfc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d108      	bne.n	8003fc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a08      	ldr	r2, [pc, #32]	; (800400c <TIM_Base_SetConfig+0xe4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d103      	bne.n	8003ff8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	615a      	str	r2, [r3, #20]
}
 8003ffe:	bf00      	nop
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40010000 	.word	0x40010000
 8004010:	40000400 	.word	0x40000400
 8004014:	40000800 	.word	0x40000800
 8004018:	40000c00 	.word	0x40000c00
 800401c:	40014000 	.word	0x40014000
 8004020:	40014400 	.word	0x40014400
 8004024:	40014800 	.word	0x40014800

08004028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f023 0201 	bic.w	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0303 	bic.w	r3, r3, #3
 800405e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f023 0302 	bic.w	r3, r3, #2
 8004070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a1c      	ldr	r2, [pc, #112]	; (80040f0 <TIM_OC1_SetConfig+0xc8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d10c      	bne.n	800409e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0308 	bic.w	r3, r3, #8
 800408a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f023 0304 	bic.w	r3, r3, #4
 800409c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <TIM_OC1_SetConfig+0xc8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d111      	bne.n	80040ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	621a      	str	r2, [r3, #32]
}
 80040e4:	bf00      	nop
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	40010000 	.word	0x40010000

080040f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0210 	bic.w	r2, r3, #16
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0320 	bic.w	r3, r3, #32
 800413e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a1e      	ldr	r2, [pc, #120]	; (80041c8 <TIM_OC2_SetConfig+0xd4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d10d      	bne.n	8004170 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800415a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a15      	ldr	r2, [pc, #84]	; (80041c8 <TIM_OC2_SetConfig+0xd4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d113      	bne.n	80041a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800417e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004186:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40010000 	.word	0x40010000

080041cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0303 	bic.w	r3, r3, #3
 8004202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a1d      	ldr	r2, [pc, #116]	; (800429c <TIM_OC3_SetConfig+0xd0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d10d      	bne.n	8004246 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a14      	ldr	r2, [pc, #80]	; (800429c <TIM_OC3_SetConfig+0xd0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d113      	bne.n	8004276 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800425c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	621a      	str	r2, [r3, #32]
}
 8004290:	bf00      	nop
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40010000 	.word	0x40010000

080042a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	031b      	lsls	r3, r3, #12
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a10      	ldr	r2, [pc, #64]	; (800433c <TIM_OC4_SetConfig+0x9c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d109      	bne.n	8004314 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004306:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	019b      	lsls	r3, r3, #6
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	621a      	str	r2, [r3, #32]
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40010000 	.word	0x40010000

08004340 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a24      	ldr	r2, [pc, #144]	; (80043fc <TIM_TI1_SetConfig+0xbc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <TIM_TI1_SetConfig+0x56>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d00f      	beq.n	8004396 <TIM_TI1_SetConfig+0x56>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4a21      	ldr	r2, [pc, #132]	; (8004400 <TIM_TI1_SetConfig+0xc0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00b      	beq.n	8004396 <TIM_TI1_SetConfig+0x56>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4a20      	ldr	r2, [pc, #128]	; (8004404 <TIM_TI1_SetConfig+0xc4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <TIM_TI1_SetConfig+0x56>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4a1f      	ldr	r2, [pc, #124]	; (8004408 <TIM_TI1_SetConfig+0xc8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <TIM_TI1_SetConfig+0x56>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4a1e      	ldr	r2, [pc, #120]	; (800440c <TIM_TI1_SetConfig+0xcc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <TIM_TI1_SetConfig+0x5a>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <TIM_TI1_SetConfig+0x5c>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e003      	b.n	80043ba <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f023 030a 	bic.w	r3, r3, #10
 80043d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f003 030a 	and.w	r3, r3, #10
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40010000 	.word	0x40010000
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40014000 	.word	0x40014000

08004410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0201 	bic.w	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800443a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f023 030a 	bic.w	r3, r3, #10
 800444c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	621a      	str	r2, [r3, #32]
}
 8004462:	bf00      	nop
 8004464:	371c      	adds	r7, #28
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800446e:	b480      	push	{r7}
 8004470:	b087      	sub	sp, #28
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	f023 0210 	bic.w	r2, r3, #16
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	031b      	lsls	r3, r3, #12
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	621a      	str	r2, [r3, #32]
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f023 0210 	bic.w	r2, r3, #16
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004512:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	031b      	lsls	r3, r3, #12
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004524:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	621a      	str	r2, [r3, #32]
}
 800453c:	bf00      	nop
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 0303 	bic.w	r3, r3, #3
 8004574:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004584:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	b2db      	uxtb	r3, r3
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004598:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	021b      	lsls	r3, r3, #8
 800459e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	621a      	str	r2, [r3, #32]
}
 80045b4:	bf00      	nop
 80045b6:	371c      	adds	r7, #28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	031b      	lsls	r3, r3, #12
 8004604:	b29b      	uxth	r3, r3
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004612:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	031b      	lsls	r3, r3, #12
 8004618:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	f043 0307 	orr.w	r3, r3, #7
 800465c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	609a      	str	r2, [r3, #8]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800468a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	021a      	lsls	r2, r3, #8
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	431a      	orrs	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4313      	orrs	r3, r2
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	609a      	str	r2, [r3, #8]
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	2201      	movs	r2, #1
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1a      	ldr	r2, [r3, #32]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	401a      	ands	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a1a      	ldr	r2, [r3, #32]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	fa01 f303 	lsl.w	r3, r1, r3
 80046e8:	431a      	orrs	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	621a      	str	r2, [r3, #32]
}
 80046ee:	bf00      	nop
 80046f0:	371c      	adds	r7, #28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
	...

080046fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004710:	2302      	movs	r3, #2
 8004712:	e050      	b.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1c      	ldr	r2, [pc, #112]	; (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d018      	beq.n	800478a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004760:	d013      	beq.n	800478a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00e      	beq.n	800478a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a16      	ldr	r2, [pc, #88]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d009      	beq.n	800478a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d004      	beq.n	800478a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d10c      	bne.n	80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004790:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	4313      	orrs	r3, r2
 800479a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40014000 	.word	0x40014000

080047d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af04      	add	r7, sp, #16
 8004816:	4603      	mov	r3, r0
 8004818:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800481a:	f04f 33ff 	mov.w	r3, #4294967295
 800481e:	9302      	str	r3, [sp, #8]
 8004820:	2301      	movs	r3, #1
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	1dfb      	adds	r3, r7, #7
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	2301      	movs	r3, #1
 800482a:	2200      	movs	r2, #0
 800482c:	2178      	movs	r1, #120	; 0x78
 800482e:	4803      	ldr	r0, [pc, #12]	; (800483c <ssd1306_WriteCommand+0x2c>)
 8004830:	f7fd fe06 	bl	8002440 <HAL_I2C_Mem_Write>
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20000340 	.word	0x20000340

08004840 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af04      	add	r7, sp, #16
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f04f 32ff 	mov.w	r2, #4294967295
 8004852:	9202      	str	r2, [sp, #8]
 8004854:	9301      	str	r3, [sp, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	2301      	movs	r3, #1
 800485c:	2240      	movs	r2, #64	; 0x40
 800485e:	2178      	movs	r1, #120	; 0x78
 8004860:	4803      	ldr	r0, [pc, #12]	; (8004870 <ssd1306_WriteData+0x30>)
 8004862:	f7fd fded 	bl	8002440 <HAL_I2C_Mem_Write>
}
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000340 	.word	0x20000340

08004874 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004878:	f7ff ffc2 	bl	8004800 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800487c:	2064      	movs	r0, #100	; 0x64
 800487e:	f7fd f9ad 	bl	8001bdc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004882:	2000      	movs	r0, #0
 8004884:	f000 f9da 	bl	8004c3c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004888:	2020      	movs	r0, #32
 800488a:	f7ff ffc1 	bl	8004810 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800488e:	2000      	movs	r0, #0
 8004890:	f7ff ffbe 	bl	8004810 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004894:	20b0      	movs	r0, #176	; 0xb0
 8004896:	f7ff ffbb 	bl	8004810 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800489a:	20c8      	movs	r0, #200	; 0xc8
 800489c:	f7ff ffb8 	bl	8004810 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80048a0:	2000      	movs	r0, #0
 80048a2:	f7ff ffb5 	bl	8004810 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80048a6:	2010      	movs	r0, #16
 80048a8:	f7ff ffb2 	bl	8004810 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80048ac:	2040      	movs	r0, #64	; 0x40
 80048ae:	f7ff ffaf 	bl	8004810 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80048b2:	20ff      	movs	r0, #255	; 0xff
 80048b4:	f000 f9ae 	bl	8004c14 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80048b8:	20a1      	movs	r0, #161	; 0xa1
 80048ba:	f7ff ffa9 	bl	8004810 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80048be:	20a6      	movs	r0, #166	; 0xa6
 80048c0:	f7ff ffa6 	bl	8004810 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80048c4:	20a8      	movs	r0, #168	; 0xa8
 80048c6:	f7ff ffa3 	bl	8004810 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80048ca:	203f      	movs	r0, #63	; 0x3f
 80048cc:	f7ff ffa0 	bl	8004810 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80048d0:	20a4      	movs	r0, #164	; 0xa4
 80048d2:	f7ff ff9d 	bl	8004810 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80048d6:	20d3      	movs	r0, #211	; 0xd3
 80048d8:	f7ff ff9a 	bl	8004810 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80048dc:	2000      	movs	r0, #0
 80048de:	f7ff ff97 	bl	8004810 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80048e2:	20d5      	movs	r0, #213	; 0xd5
 80048e4:	f7ff ff94 	bl	8004810 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80048e8:	20f0      	movs	r0, #240	; 0xf0
 80048ea:	f7ff ff91 	bl	8004810 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80048ee:	20d9      	movs	r0, #217	; 0xd9
 80048f0:	f7ff ff8e 	bl	8004810 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80048f4:	2022      	movs	r0, #34	; 0x22
 80048f6:	f7ff ff8b 	bl	8004810 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80048fa:	20da      	movs	r0, #218	; 0xda
 80048fc:	f7ff ff88 	bl	8004810 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004900:	2012      	movs	r0, #18
 8004902:	f7ff ff85 	bl	8004810 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004906:	20db      	movs	r0, #219	; 0xdb
 8004908:	f7ff ff82 	bl	8004810 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800490c:	2020      	movs	r0, #32
 800490e:	f7ff ff7f 	bl	8004810 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004912:	208d      	movs	r0, #141	; 0x8d
 8004914:	f7ff ff7c 	bl	8004810 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004918:	2014      	movs	r0, #20
 800491a:	f7ff ff79 	bl	8004810 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800491e:	2001      	movs	r0, #1
 8004920:	f000 f98c 	bl	8004c3c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004924:	2000      	movs	r0, #0
 8004926:	f000 f80f 	bl	8004948 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800492a:	f000 f831 	bl	8004990 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <ssd1306_Init+0xd0>)
 8004930:	2200      	movs	r2, #0
 8004932:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <ssd1306_Init+0xd0>)
 8004936:	2200      	movs	r2, #0
 8004938:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800493a:	4b02      	ldr	r3, [pc, #8]	; (8004944 <ssd1306_Init+0xd0>)
 800493c:	2201      	movs	r2, #1
 800493e:	711a      	strb	r2, [r3, #4]
}
 8004940:	bf00      	nop
 8004942:	bd80      	pop	{r7, pc}
 8004944:	2000082c 	.word	0x2000082c

08004948 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	e00d      	b.n	8004974 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <ssd1306_Fill+0x1a>
 800495e:	2100      	movs	r1, #0
 8004960:	e000      	b.n	8004964 <ssd1306_Fill+0x1c>
 8004962:	21ff      	movs	r1, #255	; 0xff
 8004964:	4a09      	ldr	r2, [pc, #36]	; (800498c <ssd1306_Fill+0x44>)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	460a      	mov	r2, r1
 800496c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3301      	adds	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497a:	d3ed      	bcc.n	8004958 <ssd1306_Fill+0x10>
    }
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	2000042c 	.word	0x2000042c

08004990 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004996:	2300      	movs	r3, #0
 8004998:	71fb      	strb	r3, [r7, #7]
 800499a:	e016      	b.n	80049ca <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	3b50      	subs	r3, #80	; 0x50
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff ff34 	bl	8004810 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80049a8:	2000      	movs	r0, #0
 80049aa:	f7ff ff31 	bl	8004810 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80049ae:	2010      	movs	r0, #16
 80049b0:	f7ff ff2e 	bl	8004810 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	01db      	lsls	r3, r3, #7
 80049b8:	4a08      	ldr	r2, [pc, #32]	; (80049dc <ssd1306_UpdateScreen+0x4c>)
 80049ba:	4413      	add	r3, r2
 80049bc:	2180      	movs	r1, #128	; 0x80
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff ff3e 	bl	8004840 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	3301      	adds	r3, #1
 80049c8:	71fb      	strb	r3, [r7, #7]
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	2b07      	cmp	r3, #7
 80049ce:	d9e5      	bls.n	800499c <ssd1306_UpdateScreen+0xc>
    }
}
 80049d0:	bf00      	nop
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	2000042c 	.word	0x2000042c

080049e0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	71fb      	strb	r3, [r7, #7]
 80049ea:	460b      	mov	r3, r1
 80049ec:	71bb      	strb	r3, [r7, #6]
 80049ee:	4613      	mov	r3, r2
 80049f0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	db3d      	blt.n	8004a76 <ssd1306_DrawPixel+0x96>
 80049fa:	79bb      	ldrb	r3, [r7, #6]
 80049fc:	2b3f      	cmp	r3, #63	; 0x3f
 80049fe:	d83a      	bhi.n	8004a76 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004a00:	797b      	ldrb	r3, [r7, #5]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d11a      	bne.n	8004a3c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004a06:	79fa      	ldrb	r2, [r7, #7]
 8004a08:	79bb      	ldrb	r3, [r7, #6]
 8004a0a:	08db      	lsrs	r3, r3, #3
 8004a0c:	b2d8      	uxtb	r0, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	01db      	lsls	r3, r3, #7
 8004a12:	4413      	add	r3, r2
 8004a14:	4a1b      	ldr	r2, [pc, #108]	; (8004a84 <ssd1306_DrawPixel+0xa4>)
 8004a16:	5cd3      	ldrb	r3, [r2, r3]
 8004a18:	b25a      	sxtb	r2, r3
 8004a1a:	79bb      	ldrb	r3, [r7, #6]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	2101      	movs	r1, #1
 8004a22:	fa01 f303 	lsl.w	r3, r1, r3
 8004a26:	b25b      	sxtb	r3, r3
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	b259      	sxtb	r1, r3
 8004a2c:	79fa      	ldrb	r2, [r7, #7]
 8004a2e:	4603      	mov	r3, r0
 8004a30:	01db      	lsls	r3, r3, #7
 8004a32:	4413      	add	r3, r2
 8004a34:	b2c9      	uxtb	r1, r1
 8004a36:	4a13      	ldr	r2, [pc, #76]	; (8004a84 <ssd1306_DrawPixel+0xa4>)
 8004a38:	54d1      	strb	r1, [r2, r3]
 8004a3a:	e01d      	b.n	8004a78 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004a3c:	79fa      	ldrb	r2, [r7, #7]
 8004a3e:	79bb      	ldrb	r3, [r7, #6]
 8004a40:	08db      	lsrs	r3, r3, #3
 8004a42:	b2d8      	uxtb	r0, r3
 8004a44:	4603      	mov	r3, r0
 8004a46:	01db      	lsls	r3, r3, #7
 8004a48:	4413      	add	r3, r2
 8004a4a:	4a0e      	ldr	r2, [pc, #56]	; (8004a84 <ssd1306_DrawPixel+0xa4>)
 8004a4c:	5cd3      	ldrb	r3, [r2, r3]
 8004a4e:	b25a      	sxtb	r2, r3
 8004a50:	79bb      	ldrb	r3, [r7, #6]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	2101      	movs	r1, #1
 8004a58:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5c:	b25b      	sxtb	r3, r3
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	b25b      	sxtb	r3, r3
 8004a62:	4013      	ands	r3, r2
 8004a64:	b259      	sxtb	r1, r3
 8004a66:	79fa      	ldrb	r2, [r7, #7]
 8004a68:	4603      	mov	r3, r0
 8004a6a:	01db      	lsls	r3, r3, #7
 8004a6c:	4413      	add	r3, r2
 8004a6e:	b2c9      	uxtb	r1, r1
 8004a70:	4a04      	ldr	r2, [pc, #16]	; (8004a84 <ssd1306_DrawPixel+0xa4>)
 8004a72:	54d1      	strb	r1, [r2, r3]
 8004a74:	e000      	b.n	8004a78 <ssd1306_DrawPixel+0x98>
        return;
 8004a76:	bf00      	nop
    }
}
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	2000042c 	.word	0x2000042c

08004a88 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b089      	sub	sp, #36	; 0x24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4604      	mov	r4, r0
 8004a90:	1d38      	adds	r0, r7, #4
 8004a92:	e880 0006 	stmia.w	r0, {r1, r2}
 8004a96:	461a      	mov	r2, r3
 8004a98:	4623      	mov	r3, r4
 8004a9a:	73fb      	strb	r3, [r7, #15]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	2b1f      	cmp	r3, #31
 8004aa4:	d902      	bls.n	8004aac <ssd1306_WriteChar+0x24>
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	2b7e      	cmp	r3, #126	; 0x7e
 8004aaa:	d901      	bls.n	8004ab0 <ssd1306_WriteChar+0x28>
        return 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e06d      	b.n	8004b8c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004ab0:	4b38      	ldr	r3, [pc, #224]	; (8004b94 <ssd1306_WriteChar+0x10c>)
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	793b      	ldrb	r3, [r7, #4]
 8004ab8:	4413      	add	r3, r2
 8004aba:	2b80      	cmp	r3, #128	; 0x80
 8004abc:	dc06      	bgt.n	8004acc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004abe:	4b35      	ldr	r3, [pc, #212]	; (8004b94 <ssd1306_WriteChar+0x10c>)
 8004ac0:	885b      	ldrh	r3, [r3, #2]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	797b      	ldrb	r3, [r7, #5]
 8004ac6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	dd01      	ble.n	8004ad0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e05d      	b.n	8004b8c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]
 8004ad4:	e04c      	b.n	8004b70 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	3b20      	subs	r3, #32
 8004adc:	7979      	ldrb	r1, [r7, #5]
 8004ade:	fb01 f303 	mul.w	r3, r1, r3
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	440b      	add	r3, r1
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004af0:	2300      	movs	r3, #0
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	e034      	b.n	8004b60 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d012      	beq.n	8004b2c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004b06:	4b23      	ldr	r3, [pc, #140]	; (8004b94 <ssd1306_WriteChar+0x10c>)
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	4413      	add	r3, r2
 8004b12:	b2d8      	uxtb	r0, r3
 8004b14:	4b1f      	ldr	r3, [pc, #124]	; (8004b94 <ssd1306_WriteChar+0x10c>)
 8004b16:	885b      	ldrh	r3, [r3, #2]
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	4413      	add	r3, r2
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	7bba      	ldrb	r2, [r7, #14]
 8004b24:	4619      	mov	r1, r3
 8004b26:	f7ff ff5b 	bl	80049e0 <ssd1306_DrawPixel>
 8004b2a:	e016      	b.n	8004b5a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004b2c:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <ssd1306_WriteChar+0x10c>)
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	4413      	add	r3, r2
 8004b38:	b2d8      	uxtb	r0, r3
 8004b3a:	4b16      	ldr	r3, [pc, #88]	; (8004b94 <ssd1306_WriteChar+0x10c>)
 8004b3c:	885b      	ldrh	r3, [r3, #2]
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	4413      	add	r3, r2
 8004b46:	b2d9      	uxtb	r1, r3
 8004b48:	7bbb      	ldrb	r3, [r7, #14]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bf0c      	ite	eq
 8004b4e:	2301      	moveq	r3, #1
 8004b50:	2300      	movne	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	f7ff ff43 	bl	80049e0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	61bb      	str	r3, [r7, #24]
 8004b60:	793b      	ldrb	r3, [r7, #4]
 8004b62:	461a      	mov	r2, r3
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d3c5      	bcc.n	8004af6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	797b      	ldrb	r3, [r7, #5]
 8004b72:	461a      	mov	r2, r3
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d3ad      	bcc.n	8004ad6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004b7a:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <ssd1306_WriteChar+0x10c>)
 8004b7c:	881a      	ldrh	r2, [r3, #0]
 8004b7e:	793b      	ldrb	r3, [r7, #4]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	4413      	add	r3, r2
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	4b03      	ldr	r3, [pc, #12]	; (8004b94 <ssd1306_WriteChar+0x10c>)
 8004b88:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3724      	adds	r7, #36	; 0x24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd90      	pop	{r4, r7, pc}
 8004b94:	2000082c 	.word	0x2000082c

08004b98 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	1d38      	adds	r0, r7, #4
 8004ba2:	e880 0006 	stmia.w	r0, {r1, r2}
 8004ba6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8004ba8:	e012      	b.n	8004bd0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	7818      	ldrb	r0, [r3, #0]
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	1d3a      	adds	r2, r7, #4
 8004bb2:	ca06      	ldmia	r2, {r1, r2}
 8004bb4:	f7ff ff68 	bl	8004a88 <ssd1306_WriteChar>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d002      	beq.n	8004bca <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	e008      	b.n	8004bdc <ssd1306_WriteString+0x44>
        }
        str++;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e8      	bne.n	8004baa <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	781b      	ldrb	r3, [r3, #0]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	460a      	mov	r2, r1
 8004bee:	71fb      	strb	r3, [r7, #7]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <ssd1306_SetCursor+0x2c>)
 8004bfa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004bfc:	79bb      	ldrb	r3, [r7, #6]
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	4b03      	ldr	r3, [pc, #12]	; (8004c10 <ssd1306_SetCursor+0x2c>)
 8004c02:	805a      	strh	r2, [r3, #2]
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	2000082c 	.word	0x2000082c

08004c14 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004c1e:	2381      	movs	r3, #129	; 0x81
 8004c20:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fdf3 	bl	8004810 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff fdef 	bl	8004810 <ssd1306_WriteCommand>
}
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004c4c:	23af      	movs	r3, #175	; 0xaf
 8004c4e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004c50:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <ssd1306_SetDisplayOn+0x38>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	715a      	strb	r2, [r3, #5]
 8004c56:	e004      	b.n	8004c62 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004c58:	23ae      	movs	r3, #174	; 0xae
 8004c5a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <ssd1306_SetDisplayOn+0x38>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff fdd3 	bl	8004810 <ssd1306_WriteCommand>
}
 8004c6a:	bf00      	nop
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	2000082c 	.word	0x2000082c

08004c78 <__errno>:
 8004c78:	4b01      	ldr	r3, [pc, #4]	; (8004c80 <__errno+0x8>)
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	20000014 	.word	0x20000014

08004c84 <__libc_init_array>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	4d0d      	ldr	r5, [pc, #52]	; (8004cbc <__libc_init_array+0x38>)
 8004c88:	4c0d      	ldr	r4, [pc, #52]	; (8004cc0 <__libc_init_array+0x3c>)
 8004c8a:	1b64      	subs	r4, r4, r5
 8004c8c:	10a4      	asrs	r4, r4, #2
 8004c8e:	2600      	movs	r6, #0
 8004c90:	42a6      	cmp	r6, r4
 8004c92:	d109      	bne.n	8004ca8 <__libc_init_array+0x24>
 8004c94:	4d0b      	ldr	r5, [pc, #44]	; (8004cc4 <__libc_init_array+0x40>)
 8004c96:	4c0c      	ldr	r4, [pc, #48]	; (8004cc8 <__libc_init_array+0x44>)
 8004c98:	f004 fcc4 	bl	8009624 <_init>
 8004c9c:	1b64      	subs	r4, r4, r5
 8004c9e:	10a4      	asrs	r4, r4, #2
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	42a6      	cmp	r6, r4
 8004ca4:	d105      	bne.n	8004cb2 <__libc_init_array+0x2e>
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cac:	4798      	blx	r3
 8004cae:	3601      	adds	r6, #1
 8004cb0:	e7ee      	b.n	8004c90 <__libc_init_array+0xc>
 8004cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb6:	4798      	blx	r3
 8004cb8:	3601      	adds	r6, #1
 8004cba:	e7f2      	b.n	8004ca2 <__libc_init_array+0x1e>
 8004cbc:	0800a2a4 	.word	0x0800a2a4
 8004cc0:	0800a2a4 	.word	0x0800a2a4
 8004cc4:	0800a2a4 	.word	0x0800a2a4
 8004cc8:	0800a2a8 	.word	0x0800a2a8

08004ccc <memcpy>:
 8004ccc:	440a      	add	r2, r1
 8004cce:	4291      	cmp	r1, r2
 8004cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cd4:	d100      	bne.n	8004cd8 <memcpy+0xc>
 8004cd6:	4770      	bx	lr
 8004cd8:	b510      	push	{r4, lr}
 8004cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ce2:	4291      	cmp	r1, r2
 8004ce4:	d1f9      	bne.n	8004cda <memcpy+0xe>
 8004ce6:	bd10      	pop	{r4, pc}

08004ce8 <memmove>:
 8004ce8:	4288      	cmp	r0, r1
 8004cea:	b510      	push	{r4, lr}
 8004cec:	eb01 0402 	add.w	r4, r1, r2
 8004cf0:	d902      	bls.n	8004cf8 <memmove+0x10>
 8004cf2:	4284      	cmp	r4, r0
 8004cf4:	4623      	mov	r3, r4
 8004cf6:	d807      	bhi.n	8004d08 <memmove+0x20>
 8004cf8:	1e43      	subs	r3, r0, #1
 8004cfa:	42a1      	cmp	r1, r4
 8004cfc:	d008      	beq.n	8004d10 <memmove+0x28>
 8004cfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d06:	e7f8      	b.n	8004cfa <memmove+0x12>
 8004d08:	4402      	add	r2, r0
 8004d0a:	4601      	mov	r1, r0
 8004d0c:	428a      	cmp	r2, r1
 8004d0e:	d100      	bne.n	8004d12 <memmove+0x2a>
 8004d10:	bd10      	pop	{r4, pc}
 8004d12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d1a:	e7f7      	b.n	8004d0c <memmove+0x24>

08004d1c <memset>:
 8004d1c:	4402      	add	r2, r0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d100      	bne.n	8004d26 <memset+0xa>
 8004d24:	4770      	bx	lr
 8004d26:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2a:	e7f9      	b.n	8004d20 <memset+0x4>

08004d2c <__cvt>:
 8004d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d30:	ec55 4b10 	vmov	r4, r5, d0
 8004d34:	2d00      	cmp	r5, #0
 8004d36:	460e      	mov	r6, r1
 8004d38:	4619      	mov	r1, r3
 8004d3a:	462b      	mov	r3, r5
 8004d3c:	bfbb      	ittet	lt
 8004d3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d42:	461d      	movlt	r5, r3
 8004d44:	2300      	movge	r3, #0
 8004d46:	232d      	movlt	r3, #45	; 0x2d
 8004d48:	700b      	strb	r3, [r1, #0]
 8004d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d50:	4691      	mov	r9, r2
 8004d52:	f023 0820 	bic.w	r8, r3, #32
 8004d56:	bfbc      	itt	lt
 8004d58:	4622      	movlt	r2, r4
 8004d5a:	4614      	movlt	r4, r2
 8004d5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d60:	d005      	beq.n	8004d6e <__cvt+0x42>
 8004d62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d66:	d100      	bne.n	8004d6a <__cvt+0x3e>
 8004d68:	3601      	adds	r6, #1
 8004d6a:	2102      	movs	r1, #2
 8004d6c:	e000      	b.n	8004d70 <__cvt+0x44>
 8004d6e:	2103      	movs	r1, #3
 8004d70:	ab03      	add	r3, sp, #12
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	ab02      	add	r3, sp, #8
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	ec45 4b10 	vmov	d0, r4, r5
 8004d7c:	4653      	mov	r3, sl
 8004d7e:	4632      	mov	r2, r6
 8004d80:	f001 fde2 	bl	8006948 <_dtoa_r>
 8004d84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d88:	4607      	mov	r7, r0
 8004d8a:	d102      	bne.n	8004d92 <__cvt+0x66>
 8004d8c:	f019 0f01 	tst.w	r9, #1
 8004d90:	d022      	beq.n	8004dd8 <__cvt+0xac>
 8004d92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d96:	eb07 0906 	add.w	r9, r7, r6
 8004d9a:	d110      	bne.n	8004dbe <__cvt+0x92>
 8004d9c:	783b      	ldrb	r3, [r7, #0]
 8004d9e:	2b30      	cmp	r3, #48	; 0x30
 8004da0:	d10a      	bne.n	8004db8 <__cvt+0x8c>
 8004da2:	2200      	movs	r2, #0
 8004da4:	2300      	movs	r3, #0
 8004da6:	4620      	mov	r0, r4
 8004da8:	4629      	mov	r1, r5
 8004daa:	f7fb fe95 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dae:	b918      	cbnz	r0, 8004db8 <__cvt+0x8c>
 8004db0:	f1c6 0601 	rsb	r6, r6, #1
 8004db4:	f8ca 6000 	str.w	r6, [sl]
 8004db8:	f8da 3000 	ldr.w	r3, [sl]
 8004dbc:	4499      	add	r9, r3
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	f7fb fe87 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dca:	b108      	cbz	r0, 8004dd0 <__cvt+0xa4>
 8004dcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004dd0:	2230      	movs	r2, #48	; 0x30
 8004dd2:	9b03      	ldr	r3, [sp, #12]
 8004dd4:	454b      	cmp	r3, r9
 8004dd6:	d307      	bcc.n	8004de8 <__cvt+0xbc>
 8004dd8:	9b03      	ldr	r3, [sp, #12]
 8004dda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ddc:	1bdb      	subs	r3, r3, r7
 8004dde:	4638      	mov	r0, r7
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	b004      	add	sp, #16
 8004de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de8:	1c59      	adds	r1, r3, #1
 8004dea:	9103      	str	r1, [sp, #12]
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	e7f0      	b.n	8004dd2 <__cvt+0xa6>

08004df0 <__exponent>:
 8004df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004df2:	4603      	mov	r3, r0
 8004df4:	2900      	cmp	r1, #0
 8004df6:	bfb8      	it	lt
 8004df8:	4249      	neglt	r1, r1
 8004dfa:	f803 2b02 	strb.w	r2, [r3], #2
 8004dfe:	bfb4      	ite	lt
 8004e00:	222d      	movlt	r2, #45	; 0x2d
 8004e02:	222b      	movge	r2, #43	; 0x2b
 8004e04:	2909      	cmp	r1, #9
 8004e06:	7042      	strb	r2, [r0, #1]
 8004e08:	dd2a      	ble.n	8004e60 <__exponent+0x70>
 8004e0a:	f10d 0407 	add.w	r4, sp, #7
 8004e0e:	46a4      	mov	ip, r4
 8004e10:	270a      	movs	r7, #10
 8004e12:	46a6      	mov	lr, r4
 8004e14:	460a      	mov	r2, r1
 8004e16:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e1a:	fb07 1516 	mls	r5, r7, r6, r1
 8004e1e:	3530      	adds	r5, #48	; 0x30
 8004e20:	2a63      	cmp	r2, #99	; 0x63
 8004e22:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	dcf1      	bgt.n	8004e12 <__exponent+0x22>
 8004e2e:	3130      	adds	r1, #48	; 0x30
 8004e30:	f1ae 0502 	sub.w	r5, lr, #2
 8004e34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e38:	1c44      	adds	r4, r0, #1
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	4561      	cmp	r1, ip
 8004e3e:	d30a      	bcc.n	8004e56 <__exponent+0x66>
 8004e40:	f10d 0209 	add.w	r2, sp, #9
 8004e44:	eba2 020e 	sub.w	r2, r2, lr
 8004e48:	4565      	cmp	r5, ip
 8004e4a:	bf88      	it	hi
 8004e4c:	2200      	movhi	r2, #0
 8004e4e:	4413      	add	r3, r2
 8004e50:	1a18      	subs	r0, r3, r0
 8004e52:	b003      	add	sp, #12
 8004e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e5e:	e7ed      	b.n	8004e3c <__exponent+0x4c>
 8004e60:	2330      	movs	r3, #48	; 0x30
 8004e62:	3130      	adds	r1, #48	; 0x30
 8004e64:	7083      	strb	r3, [r0, #2]
 8004e66:	70c1      	strb	r1, [r0, #3]
 8004e68:	1d03      	adds	r3, r0, #4
 8004e6a:	e7f1      	b.n	8004e50 <__exponent+0x60>

08004e6c <_printf_float>:
 8004e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e70:	ed2d 8b02 	vpush	{d8}
 8004e74:	b08d      	sub	sp, #52	; 0x34
 8004e76:	460c      	mov	r4, r1
 8004e78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004e7c:	4616      	mov	r6, r2
 8004e7e:	461f      	mov	r7, r3
 8004e80:	4605      	mov	r5, r0
 8004e82:	f002 febf 	bl	8007c04 <_localeconv_r>
 8004e86:	f8d0 a000 	ldr.w	sl, [r0]
 8004e8a:	4650      	mov	r0, sl
 8004e8c:	f7fb f9a8 	bl	80001e0 <strlen>
 8004e90:	2300      	movs	r3, #0
 8004e92:	930a      	str	r3, [sp, #40]	; 0x28
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	9305      	str	r3, [sp, #20]
 8004e98:	f8d8 3000 	ldr.w	r3, [r8]
 8004e9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ea0:	3307      	adds	r3, #7
 8004ea2:	f023 0307 	bic.w	r3, r3, #7
 8004ea6:	f103 0208 	add.w	r2, r3, #8
 8004eaa:	f8c8 2000 	str.w	r2, [r8]
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004eb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004eba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ebe:	9307      	str	r3, [sp, #28]
 8004ec0:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ec4:	ee08 0a10 	vmov	s16, r0
 8004ec8:	4b9f      	ldr	r3, [pc, #636]	; (8005148 <_printf_float+0x2dc>)
 8004eca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ece:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed2:	f7fb fe33 	bl	8000b3c <__aeabi_dcmpun>
 8004ed6:	bb88      	cbnz	r0, 8004f3c <_printf_float+0xd0>
 8004ed8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004edc:	4b9a      	ldr	r3, [pc, #616]	; (8005148 <_printf_float+0x2dc>)
 8004ede:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee2:	f7fb fe0d 	bl	8000b00 <__aeabi_dcmple>
 8004ee6:	bb48      	cbnz	r0, 8004f3c <_printf_float+0xd0>
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2300      	movs	r3, #0
 8004eec:	4640      	mov	r0, r8
 8004eee:	4649      	mov	r1, r9
 8004ef0:	f7fb fdfc 	bl	8000aec <__aeabi_dcmplt>
 8004ef4:	b110      	cbz	r0, 8004efc <_printf_float+0x90>
 8004ef6:	232d      	movs	r3, #45	; 0x2d
 8004ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004efc:	4b93      	ldr	r3, [pc, #588]	; (800514c <_printf_float+0x2e0>)
 8004efe:	4894      	ldr	r0, [pc, #592]	; (8005150 <_printf_float+0x2e4>)
 8004f00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f04:	bf94      	ite	ls
 8004f06:	4698      	movls	r8, r3
 8004f08:	4680      	movhi	r8, r0
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	6123      	str	r3, [r4, #16]
 8004f0e:	9b05      	ldr	r3, [sp, #20]
 8004f10:	f023 0204 	bic.w	r2, r3, #4
 8004f14:	6022      	str	r2, [r4, #0]
 8004f16:	f04f 0900 	mov.w	r9, #0
 8004f1a:	9700      	str	r7, [sp, #0]
 8004f1c:	4633      	mov	r3, r6
 8004f1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f20:	4621      	mov	r1, r4
 8004f22:	4628      	mov	r0, r5
 8004f24:	f000 f9d8 	bl	80052d8 <_printf_common>
 8004f28:	3001      	adds	r0, #1
 8004f2a:	f040 8090 	bne.w	800504e <_printf_float+0x1e2>
 8004f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f32:	b00d      	add	sp, #52	; 0x34
 8004f34:	ecbd 8b02 	vpop	{d8}
 8004f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3c:	4642      	mov	r2, r8
 8004f3e:	464b      	mov	r3, r9
 8004f40:	4640      	mov	r0, r8
 8004f42:	4649      	mov	r1, r9
 8004f44:	f7fb fdfa 	bl	8000b3c <__aeabi_dcmpun>
 8004f48:	b140      	cbz	r0, 8004f5c <_printf_float+0xf0>
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bfbc      	itt	lt
 8004f50:	232d      	movlt	r3, #45	; 0x2d
 8004f52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f56:	487f      	ldr	r0, [pc, #508]	; (8005154 <_printf_float+0x2e8>)
 8004f58:	4b7f      	ldr	r3, [pc, #508]	; (8005158 <_printf_float+0x2ec>)
 8004f5a:	e7d1      	b.n	8004f00 <_printf_float+0x94>
 8004f5c:	6863      	ldr	r3, [r4, #4]
 8004f5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f62:	9206      	str	r2, [sp, #24]
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	d13f      	bne.n	8004fe8 <_printf_float+0x17c>
 8004f68:	2306      	movs	r3, #6
 8004f6a:	6063      	str	r3, [r4, #4]
 8004f6c:	9b05      	ldr	r3, [sp, #20]
 8004f6e:	6861      	ldr	r1, [r4, #4]
 8004f70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f74:	2300      	movs	r3, #0
 8004f76:	9303      	str	r3, [sp, #12]
 8004f78:	ab0a      	add	r3, sp, #40	; 0x28
 8004f7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004f7e:	ab09      	add	r3, sp, #36	; 0x24
 8004f80:	ec49 8b10 	vmov	d0, r8, r9
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	6022      	str	r2, [r4, #0]
 8004f88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	f7ff fecd 	bl	8004d2c <__cvt>
 8004f92:	9b06      	ldr	r3, [sp, #24]
 8004f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f96:	2b47      	cmp	r3, #71	; 0x47
 8004f98:	4680      	mov	r8, r0
 8004f9a:	d108      	bne.n	8004fae <_printf_float+0x142>
 8004f9c:	1cc8      	adds	r0, r1, #3
 8004f9e:	db02      	blt.n	8004fa6 <_printf_float+0x13a>
 8004fa0:	6863      	ldr	r3, [r4, #4]
 8004fa2:	4299      	cmp	r1, r3
 8004fa4:	dd41      	ble.n	800502a <_printf_float+0x1be>
 8004fa6:	f1ab 0b02 	sub.w	fp, fp, #2
 8004faa:	fa5f fb8b 	uxtb.w	fp, fp
 8004fae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fb2:	d820      	bhi.n	8004ff6 <_printf_float+0x18a>
 8004fb4:	3901      	subs	r1, #1
 8004fb6:	465a      	mov	r2, fp
 8004fb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fbc:	9109      	str	r1, [sp, #36]	; 0x24
 8004fbe:	f7ff ff17 	bl	8004df0 <__exponent>
 8004fc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fc4:	1813      	adds	r3, r2, r0
 8004fc6:	2a01      	cmp	r2, #1
 8004fc8:	4681      	mov	r9, r0
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	dc02      	bgt.n	8004fd4 <_printf_float+0x168>
 8004fce:	6822      	ldr	r2, [r4, #0]
 8004fd0:	07d2      	lsls	r2, r2, #31
 8004fd2:	d501      	bpl.n	8004fd8 <_printf_float+0x16c>
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	6123      	str	r3, [r4, #16]
 8004fd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d09c      	beq.n	8004f1a <_printf_float+0xae>
 8004fe0:	232d      	movs	r3, #45	; 0x2d
 8004fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe6:	e798      	b.n	8004f1a <_printf_float+0xae>
 8004fe8:	9a06      	ldr	r2, [sp, #24]
 8004fea:	2a47      	cmp	r2, #71	; 0x47
 8004fec:	d1be      	bne.n	8004f6c <_printf_float+0x100>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1bc      	bne.n	8004f6c <_printf_float+0x100>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e7b9      	b.n	8004f6a <_printf_float+0xfe>
 8004ff6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004ffa:	d118      	bne.n	800502e <_printf_float+0x1c2>
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	6863      	ldr	r3, [r4, #4]
 8005000:	dd0b      	ble.n	800501a <_printf_float+0x1ae>
 8005002:	6121      	str	r1, [r4, #16]
 8005004:	b913      	cbnz	r3, 800500c <_printf_float+0x1a0>
 8005006:	6822      	ldr	r2, [r4, #0]
 8005008:	07d0      	lsls	r0, r2, #31
 800500a:	d502      	bpl.n	8005012 <_printf_float+0x1a6>
 800500c:	3301      	adds	r3, #1
 800500e:	440b      	add	r3, r1
 8005010:	6123      	str	r3, [r4, #16]
 8005012:	65a1      	str	r1, [r4, #88]	; 0x58
 8005014:	f04f 0900 	mov.w	r9, #0
 8005018:	e7de      	b.n	8004fd8 <_printf_float+0x16c>
 800501a:	b913      	cbnz	r3, 8005022 <_printf_float+0x1b6>
 800501c:	6822      	ldr	r2, [r4, #0]
 800501e:	07d2      	lsls	r2, r2, #31
 8005020:	d501      	bpl.n	8005026 <_printf_float+0x1ba>
 8005022:	3302      	adds	r3, #2
 8005024:	e7f4      	b.n	8005010 <_printf_float+0x1a4>
 8005026:	2301      	movs	r3, #1
 8005028:	e7f2      	b.n	8005010 <_printf_float+0x1a4>
 800502a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800502e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005030:	4299      	cmp	r1, r3
 8005032:	db05      	blt.n	8005040 <_printf_float+0x1d4>
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	6121      	str	r1, [r4, #16]
 8005038:	07d8      	lsls	r0, r3, #31
 800503a:	d5ea      	bpl.n	8005012 <_printf_float+0x1a6>
 800503c:	1c4b      	adds	r3, r1, #1
 800503e:	e7e7      	b.n	8005010 <_printf_float+0x1a4>
 8005040:	2900      	cmp	r1, #0
 8005042:	bfd4      	ite	le
 8005044:	f1c1 0202 	rsble	r2, r1, #2
 8005048:	2201      	movgt	r2, #1
 800504a:	4413      	add	r3, r2
 800504c:	e7e0      	b.n	8005010 <_printf_float+0x1a4>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	055a      	lsls	r2, r3, #21
 8005052:	d407      	bmi.n	8005064 <_printf_float+0x1f8>
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	4642      	mov	r2, r8
 8005058:	4631      	mov	r1, r6
 800505a:	4628      	mov	r0, r5
 800505c:	47b8      	blx	r7
 800505e:	3001      	adds	r0, #1
 8005060:	d12c      	bne.n	80050bc <_printf_float+0x250>
 8005062:	e764      	b.n	8004f2e <_printf_float+0xc2>
 8005064:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005068:	f240 80e0 	bls.w	800522c <_printf_float+0x3c0>
 800506c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005070:	2200      	movs	r2, #0
 8005072:	2300      	movs	r3, #0
 8005074:	f7fb fd30 	bl	8000ad8 <__aeabi_dcmpeq>
 8005078:	2800      	cmp	r0, #0
 800507a:	d034      	beq.n	80050e6 <_printf_float+0x27a>
 800507c:	4a37      	ldr	r2, [pc, #220]	; (800515c <_printf_float+0x2f0>)
 800507e:	2301      	movs	r3, #1
 8005080:	4631      	mov	r1, r6
 8005082:	4628      	mov	r0, r5
 8005084:	47b8      	blx	r7
 8005086:	3001      	adds	r0, #1
 8005088:	f43f af51 	beq.w	8004f2e <_printf_float+0xc2>
 800508c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005090:	429a      	cmp	r2, r3
 8005092:	db02      	blt.n	800509a <_printf_float+0x22e>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	07d8      	lsls	r0, r3, #31
 8005098:	d510      	bpl.n	80050bc <_printf_float+0x250>
 800509a:	ee18 3a10 	vmov	r3, s16
 800509e:	4652      	mov	r2, sl
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	f43f af41 	beq.w	8004f2e <_printf_float+0xc2>
 80050ac:	f04f 0800 	mov.w	r8, #0
 80050b0:	f104 091a 	add.w	r9, r4, #26
 80050b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050b6:	3b01      	subs	r3, #1
 80050b8:	4543      	cmp	r3, r8
 80050ba:	dc09      	bgt.n	80050d0 <_printf_float+0x264>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	079b      	lsls	r3, r3, #30
 80050c0:	f100 8105 	bmi.w	80052ce <_printf_float+0x462>
 80050c4:	68e0      	ldr	r0, [r4, #12]
 80050c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050c8:	4298      	cmp	r0, r3
 80050ca:	bfb8      	it	lt
 80050cc:	4618      	movlt	r0, r3
 80050ce:	e730      	b.n	8004f32 <_printf_float+0xc6>
 80050d0:	2301      	movs	r3, #1
 80050d2:	464a      	mov	r2, r9
 80050d4:	4631      	mov	r1, r6
 80050d6:	4628      	mov	r0, r5
 80050d8:	47b8      	blx	r7
 80050da:	3001      	adds	r0, #1
 80050dc:	f43f af27 	beq.w	8004f2e <_printf_float+0xc2>
 80050e0:	f108 0801 	add.w	r8, r8, #1
 80050e4:	e7e6      	b.n	80050b4 <_printf_float+0x248>
 80050e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	dc39      	bgt.n	8005160 <_printf_float+0x2f4>
 80050ec:	4a1b      	ldr	r2, [pc, #108]	; (800515c <_printf_float+0x2f0>)
 80050ee:	2301      	movs	r3, #1
 80050f0:	4631      	mov	r1, r6
 80050f2:	4628      	mov	r0, r5
 80050f4:	47b8      	blx	r7
 80050f6:	3001      	adds	r0, #1
 80050f8:	f43f af19 	beq.w	8004f2e <_printf_float+0xc2>
 80050fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005100:	4313      	orrs	r3, r2
 8005102:	d102      	bne.n	800510a <_printf_float+0x29e>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	07d9      	lsls	r1, r3, #31
 8005108:	d5d8      	bpl.n	80050bc <_printf_float+0x250>
 800510a:	ee18 3a10 	vmov	r3, s16
 800510e:	4652      	mov	r2, sl
 8005110:	4631      	mov	r1, r6
 8005112:	4628      	mov	r0, r5
 8005114:	47b8      	blx	r7
 8005116:	3001      	adds	r0, #1
 8005118:	f43f af09 	beq.w	8004f2e <_printf_float+0xc2>
 800511c:	f04f 0900 	mov.w	r9, #0
 8005120:	f104 0a1a 	add.w	sl, r4, #26
 8005124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005126:	425b      	negs	r3, r3
 8005128:	454b      	cmp	r3, r9
 800512a:	dc01      	bgt.n	8005130 <_printf_float+0x2c4>
 800512c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800512e:	e792      	b.n	8005056 <_printf_float+0x1ea>
 8005130:	2301      	movs	r3, #1
 8005132:	4652      	mov	r2, sl
 8005134:	4631      	mov	r1, r6
 8005136:	4628      	mov	r0, r5
 8005138:	47b8      	blx	r7
 800513a:	3001      	adds	r0, #1
 800513c:	f43f aef7 	beq.w	8004f2e <_printf_float+0xc2>
 8005140:	f109 0901 	add.w	r9, r9, #1
 8005144:	e7ee      	b.n	8005124 <_printf_float+0x2b8>
 8005146:	bf00      	nop
 8005148:	7fefffff 	.word	0x7fefffff
 800514c:	08009dfc 	.word	0x08009dfc
 8005150:	08009e00 	.word	0x08009e00
 8005154:	08009e08 	.word	0x08009e08
 8005158:	08009e04 	.word	0x08009e04
 800515c:	08009e0c 	.word	0x08009e0c
 8005160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005164:	429a      	cmp	r2, r3
 8005166:	bfa8      	it	ge
 8005168:	461a      	movge	r2, r3
 800516a:	2a00      	cmp	r2, #0
 800516c:	4691      	mov	r9, r2
 800516e:	dc37      	bgt.n	80051e0 <_printf_float+0x374>
 8005170:	f04f 0b00 	mov.w	fp, #0
 8005174:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005178:	f104 021a 	add.w	r2, r4, #26
 800517c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800517e:	9305      	str	r3, [sp, #20]
 8005180:	eba3 0309 	sub.w	r3, r3, r9
 8005184:	455b      	cmp	r3, fp
 8005186:	dc33      	bgt.n	80051f0 <_printf_float+0x384>
 8005188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800518c:	429a      	cmp	r2, r3
 800518e:	db3b      	blt.n	8005208 <_printf_float+0x39c>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	07da      	lsls	r2, r3, #31
 8005194:	d438      	bmi.n	8005208 <_printf_float+0x39c>
 8005196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005198:	9a05      	ldr	r2, [sp, #20]
 800519a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800519c:	1a9a      	subs	r2, r3, r2
 800519e:	eba3 0901 	sub.w	r9, r3, r1
 80051a2:	4591      	cmp	r9, r2
 80051a4:	bfa8      	it	ge
 80051a6:	4691      	movge	r9, r2
 80051a8:	f1b9 0f00 	cmp.w	r9, #0
 80051ac:	dc35      	bgt.n	800521a <_printf_float+0x3ae>
 80051ae:	f04f 0800 	mov.w	r8, #0
 80051b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051b6:	f104 0a1a 	add.w	sl, r4, #26
 80051ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051be:	1a9b      	subs	r3, r3, r2
 80051c0:	eba3 0309 	sub.w	r3, r3, r9
 80051c4:	4543      	cmp	r3, r8
 80051c6:	f77f af79 	ble.w	80050bc <_printf_float+0x250>
 80051ca:	2301      	movs	r3, #1
 80051cc:	4652      	mov	r2, sl
 80051ce:	4631      	mov	r1, r6
 80051d0:	4628      	mov	r0, r5
 80051d2:	47b8      	blx	r7
 80051d4:	3001      	adds	r0, #1
 80051d6:	f43f aeaa 	beq.w	8004f2e <_printf_float+0xc2>
 80051da:	f108 0801 	add.w	r8, r8, #1
 80051de:	e7ec      	b.n	80051ba <_printf_float+0x34e>
 80051e0:	4613      	mov	r3, r2
 80051e2:	4631      	mov	r1, r6
 80051e4:	4642      	mov	r2, r8
 80051e6:	4628      	mov	r0, r5
 80051e8:	47b8      	blx	r7
 80051ea:	3001      	adds	r0, #1
 80051ec:	d1c0      	bne.n	8005170 <_printf_float+0x304>
 80051ee:	e69e      	b.n	8004f2e <_printf_float+0xc2>
 80051f0:	2301      	movs	r3, #1
 80051f2:	4631      	mov	r1, r6
 80051f4:	4628      	mov	r0, r5
 80051f6:	9205      	str	r2, [sp, #20]
 80051f8:	47b8      	blx	r7
 80051fa:	3001      	adds	r0, #1
 80051fc:	f43f ae97 	beq.w	8004f2e <_printf_float+0xc2>
 8005200:	9a05      	ldr	r2, [sp, #20]
 8005202:	f10b 0b01 	add.w	fp, fp, #1
 8005206:	e7b9      	b.n	800517c <_printf_float+0x310>
 8005208:	ee18 3a10 	vmov	r3, s16
 800520c:	4652      	mov	r2, sl
 800520e:	4631      	mov	r1, r6
 8005210:	4628      	mov	r0, r5
 8005212:	47b8      	blx	r7
 8005214:	3001      	adds	r0, #1
 8005216:	d1be      	bne.n	8005196 <_printf_float+0x32a>
 8005218:	e689      	b.n	8004f2e <_printf_float+0xc2>
 800521a:	9a05      	ldr	r2, [sp, #20]
 800521c:	464b      	mov	r3, r9
 800521e:	4442      	add	r2, r8
 8005220:	4631      	mov	r1, r6
 8005222:	4628      	mov	r0, r5
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	d1c1      	bne.n	80051ae <_printf_float+0x342>
 800522a:	e680      	b.n	8004f2e <_printf_float+0xc2>
 800522c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800522e:	2a01      	cmp	r2, #1
 8005230:	dc01      	bgt.n	8005236 <_printf_float+0x3ca>
 8005232:	07db      	lsls	r3, r3, #31
 8005234:	d538      	bpl.n	80052a8 <_printf_float+0x43c>
 8005236:	2301      	movs	r3, #1
 8005238:	4642      	mov	r2, r8
 800523a:	4631      	mov	r1, r6
 800523c:	4628      	mov	r0, r5
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	f43f ae74 	beq.w	8004f2e <_printf_float+0xc2>
 8005246:	ee18 3a10 	vmov	r3, s16
 800524a:	4652      	mov	r2, sl
 800524c:	4631      	mov	r1, r6
 800524e:	4628      	mov	r0, r5
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	f43f ae6b 	beq.w	8004f2e <_printf_float+0xc2>
 8005258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800525c:	2200      	movs	r2, #0
 800525e:	2300      	movs	r3, #0
 8005260:	f7fb fc3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005264:	b9d8      	cbnz	r0, 800529e <_printf_float+0x432>
 8005266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005268:	f108 0201 	add.w	r2, r8, #1
 800526c:	3b01      	subs	r3, #1
 800526e:	4631      	mov	r1, r6
 8005270:	4628      	mov	r0, r5
 8005272:	47b8      	blx	r7
 8005274:	3001      	adds	r0, #1
 8005276:	d10e      	bne.n	8005296 <_printf_float+0x42a>
 8005278:	e659      	b.n	8004f2e <_printf_float+0xc2>
 800527a:	2301      	movs	r3, #1
 800527c:	4652      	mov	r2, sl
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	47b8      	blx	r7
 8005284:	3001      	adds	r0, #1
 8005286:	f43f ae52 	beq.w	8004f2e <_printf_float+0xc2>
 800528a:	f108 0801 	add.w	r8, r8, #1
 800528e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005290:	3b01      	subs	r3, #1
 8005292:	4543      	cmp	r3, r8
 8005294:	dcf1      	bgt.n	800527a <_printf_float+0x40e>
 8005296:	464b      	mov	r3, r9
 8005298:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800529c:	e6dc      	b.n	8005058 <_printf_float+0x1ec>
 800529e:	f04f 0800 	mov.w	r8, #0
 80052a2:	f104 0a1a 	add.w	sl, r4, #26
 80052a6:	e7f2      	b.n	800528e <_printf_float+0x422>
 80052a8:	2301      	movs	r3, #1
 80052aa:	4642      	mov	r2, r8
 80052ac:	e7df      	b.n	800526e <_printf_float+0x402>
 80052ae:	2301      	movs	r3, #1
 80052b0:	464a      	mov	r2, r9
 80052b2:	4631      	mov	r1, r6
 80052b4:	4628      	mov	r0, r5
 80052b6:	47b8      	blx	r7
 80052b8:	3001      	adds	r0, #1
 80052ba:	f43f ae38 	beq.w	8004f2e <_printf_float+0xc2>
 80052be:	f108 0801 	add.w	r8, r8, #1
 80052c2:	68e3      	ldr	r3, [r4, #12]
 80052c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052c6:	1a5b      	subs	r3, r3, r1
 80052c8:	4543      	cmp	r3, r8
 80052ca:	dcf0      	bgt.n	80052ae <_printf_float+0x442>
 80052cc:	e6fa      	b.n	80050c4 <_printf_float+0x258>
 80052ce:	f04f 0800 	mov.w	r8, #0
 80052d2:	f104 0919 	add.w	r9, r4, #25
 80052d6:	e7f4      	b.n	80052c2 <_printf_float+0x456>

080052d8 <_printf_common>:
 80052d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052dc:	4616      	mov	r6, r2
 80052de:	4699      	mov	r9, r3
 80052e0:	688a      	ldr	r2, [r1, #8]
 80052e2:	690b      	ldr	r3, [r1, #16]
 80052e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052e8:	4293      	cmp	r3, r2
 80052ea:	bfb8      	it	lt
 80052ec:	4613      	movlt	r3, r2
 80052ee:	6033      	str	r3, [r6, #0]
 80052f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052f4:	4607      	mov	r7, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	b10a      	cbz	r2, 80052fe <_printf_common+0x26>
 80052fa:	3301      	adds	r3, #1
 80052fc:	6033      	str	r3, [r6, #0]
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	0699      	lsls	r1, r3, #26
 8005302:	bf42      	ittt	mi
 8005304:	6833      	ldrmi	r3, [r6, #0]
 8005306:	3302      	addmi	r3, #2
 8005308:	6033      	strmi	r3, [r6, #0]
 800530a:	6825      	ldr	r5, [r4, #0]
 800530c:	f015 0506 	ands.w	r5, r5, #6
 8005310:	d106      	bne.n	8005320 <_printf_common+0x48>
 8005312:	f104 0a19 	add.w	sl, r4, #25
 8005316:	68e3      	ldr	r3, [r4, #12]
 8005318:	6832      	ldr	r2, [r6, #0]
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	42ab      	cmp	r3, r5
 800531e:	dc26      	bgt.n	800536e <_printf_common+0x96>
 8005320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005324:	1e13      	subs	r3, r2, #0
 8005326:	6822      	ldr	r2, [r4, #0]
 8005328:	bf18      	it	ne
 800532a:	2301      	movne	r3, #1
 800532c:	0692      	lsls	r2, r2, #26
 800532e:	d42b      	bmi.n	8005388 <_printf_common+0xb0>
 8005330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005334:	4649      	mov	r1, r9
 8005336:	4638      	mov	r0, r7
 8005338:	47c0      	blx	r8
 800533a:	3001      	adds	r0, #1
 800533c:	d01e      	beq.n	800537c <_printf_common+0xa4>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	68e5      	ldr	r5, [r4, #12]
 8005342:	6832      	ldr	r2, [r6, #0]
 8005344:	f003 0306 	and.w	r3, r3, #6
 8005348:	2b04      	cmp	r3, #4
 800534a:	bf08      	it	eq
 800534c:	1aad      	subeq	r5, r5, r2
 800534e:	68a3      	ldr	r3, [r4, #8]
 8005350:	6922      	ldr	r2, [r4, #16]
 8005352:	bf0c      	ite	eq
 8005354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005358:	2500      	movne	r5, #0
 800535a:	4293      	cmp	r3, r2
 800535c:	bfc4      	itt	gt
 800535e:	1a9b      	subgt	r3, r3, r2
 8005360:	18ed      	addgt	r5, r5, r3
 8005362:	2600      	movs	r6, #0
 8005364:	341a      	adds	r4, #26
 8005366:	42b5      	cmp	r5, r6
 8005368:	d11a      	bne.n	80053a0 <_printf_common+0xc8>
 800536a:	2000      	movs	r0, #0
 800536c:	e008      	b.n	8005380 <_printf_common+0xa8>
 800536e:	2301      	movs	r3, #1
 8005370:	4652      	mov	r2, sl
 8005372:	4649      	mov	r1, r9
 8005374:	4638      	mov	r0, r7
 8005376:	47c0      	blx	r8
 8005378:	3001      	adds	r0, #1
 800537a:	d103      	bne.n	8005384 <_printf_common+0xac>
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005384:	3501      	adds	r5, #1
 8005386:	e7c6      	b.n	8005316 <_printf_common+0x3e>
 8005388:	18e1      	adds	r1, r4, r3
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	2030      	movs	r0, #48	; 0x30
 800538e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005392:	4422      	add	r2, r4
 8005394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800539c:	3302      	adds	r3, #2
 800539e:	e7c7      	b.n	8005330 <_printf_common+0x58>
 80053a0:	2301      	movs	r3, #1
 80053a2:	4622      	mov	r2, r4
 80053a4:	4649      	mov	r1, r9
 80053a6:	4638      	mov	r0, r7
 80053a8:	47c0      	blx	r8
 80053aa:	3001      	adds	r0, #1
 80053ac:	d0e6      	beq.n	800537c <_printf_common+0xa4>
 80053ae:	3601      	adds	r6, #1
 80053b0:	e7d9      	b.n	8005366 <_printf_common+0x8e>
	...

080053b4 <_printf_i>:
 80053b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053b8:	7e0f      	ldrb	r7, [r1, #24]
 80053ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053bc:	2f78      	cmp	r7, #120	; 0x78
 80053be:	4691      	mov	r9, r2
 80053c0:	4680      	mov	r8, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	469a      	mov	sl, r3
 80053c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053ca:	d807      	bhi.n	80053dc <_printf_i+0x28>
 80053cc:	2f62      	cmp	r7, #98	; 0x62
 80053ce:	d80a      	bhi.n	80053e6 <_printf_i+0x32>
 80053d0:	2f00      	cmp	r7, #0
 80053d2:	f000 80d8 	beq.w	8005586 <_printf_i+0x1d2>
 80053d6:	2f58      	cmp	r7, #88	; 0x58
 80053d8:	f000 80a3 	beq.w	8005522 <_printf_i+0x16e>
 80053dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053e4:	e03a      	b.n	800545c <_printf_i+0xa8>
 80053e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053ea:	2b15      	cmp	r3, #21
 80053ec:	d8f6      	bhi.n	80053dc <_printf_i+0x28>
 80053ee:	a101      	add	r1, pc, #4	; (adr r1, 80053f4 <_printf_i+0x40>)
 80053f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053f4:	0800544d 	.word	0x0800544d
 80053f8:	08005461 	.word	0x08005461
 80053fc:	080053dd 	.word	0x080053dd
 8005400:	080053dd 	.word	0x080053dd
 8005404:	080053dd 	.word	0x080053dd
 8005408:	080053dd 	.word	0x080053dd
 800540c:	08005461 	.word	0x08005461
 8005410:	080053dd 	.word	0x080053dd
 8005414:	080053dd 	.word	0x080053dd
 8005418:	080053dd 	.word	0x080053dd
 800541c:	080053dd 	.word	0x080053dd
 8005420:	0800556d 	.word	0x0800556d
 8005424:	08005491 	.word	0x08005491
 8005428:	0800554f 	.word	0x0800554f
 800542c:	080053dd 	.word	0x080053dd
 8005430:	080053dd 	.word	0x080053dd
 8005434:	0800558f 	.word	0x0800558f
 8005438:	080053dd 	.word	0x080053dd
 800543c:	08005491 	.word	0x08005491
 8005440:	080053dd 	.word	0x080053dd
 8005444:	080053dd 	.word	0x080053dd
 8005448:	08005557 	.word	0x08005557
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	1d1a      	adds	r2, r3, #4
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	602a      	str	r2, [r5, #0]
 8005454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800545c:	2301      	movs	r3, #1
 800545e:	e0a3      	b.n	80055a8 <_printf_i+0x1f4>
 8005460:	6820      	ldr	r0, [r4, #0]
 8005462:	6829      	ldr	r1, [r5, #0]
 8005464:	0606      	lsls	r6, r0, #24
 8005466:	f101 0304 	add.w	r3, r1, #4
 800546a:	d50a      	bpl.n	8005482 <_printf_i+0xce>
 800546c:	680e      	ldr	r6, [r1, #0]
 800546e:	602b      	str	r3, [r5, #0]
 8005470:	2e00      	cmp	r6, #0
 8005472:	da03      	bge.n	800547c <_printf_i+0xc8>
 8005474:	232d      	movs	r3, #45	; 0x2d
 8005476:	4276      	negs	r6, r6
 8005478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800547c:	485e      	ldr	r0, [pc, #376]	; (80055f8 <_printf_i+0x244>)
 800547e:	230a      	movs	r3, #10
 8005480:	e019      	b.n	80054b6 <_printf_i+0x102>
 8005482:	680e      	ldr	r6, [r1, #0]
 8005484:	602b      	str	r3, [r5, #0]
 8005486:	f010 0f40 	tst.w	r0, #64	; 0x40
 800548a:	bf18      	it	ne
 800548c:	b236      	sxthne	r6, r6
 800548e:	e7ef      	b.n	8005470 <_printf_i+0xbc>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	6820      	ldr	r0, [r4, #0]
 8005494:	1d19      	adds	r1, r3, #4
 8005496:	6029      	str	r1, [r5, #0]
 8005498:	0601      	lsls	r1, r0, #24
 800549a:	d501      	bpl.n	80054a0 <_printf_i+0xec>
 800549c:	681e      	ldr	r6, [r3, #0]
 800549e:	e002      	b.n	80054a6 <_printf_i+0xf2>
 80054a0:	0646      	lsls	r6, r0, #25
 80054a2:	d5fb      	bpl.n	800549c <_printf_i+0xe8>
 80054a4:	881e      	ldrh	r6, [r3, #0]
 80054a6:	4854      	ldr	r0, [pc, #336]	; (80055f8 <_printf_i+0x244>)
 80054a8:	2f6f      	cmp	r7, #111	; 0x6f
 80054aa:	bf0c      	ite	eq
 80054ac:	2308      	moveq	r3, #8
 80054ae:	230a      	movne	r3, #10
 80054b0:	2100      	movs	r1, #0
 80054b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054b6:	6865      	ldr	r5, [r4, #4]
 80054b8:	60a5      	str	r5, [r4, #8]
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	bfa2      	ittt	ge
 80054be:	6821      	ldrge	r1, [r4, #0]
 80054c0:	f021 0104 	bicge.w	r1, r1, #4
 80054c4:	6021      	strge	r1, [r4, #0]
 80054c6:	b90e      	cbnz	r6, 80054cc <_printf_i+0x118>
 80054c8:	2d00      	cmp	r5, #0
 80054ca:	d04d      	beq.n	8005568 <_printf_i+0x1b4>
 80054cc:	4615      	mov	r5, r2
 80054ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80054d2:	fb03 6711 	mls	r7, r3, r1, r6
 80054d6:	5dc7      	ldrb	r7, [r0, r7]
 80054d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054dc:	4637      	mov	r7, r6
 80054de:	42bb      	cmp	r3, r7
 80054e0:	460e      	mov	r6, r1
 80054e2:	d9f4      	bls.n	80054ce <_printf_i+0x11a>
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d10b      	bne.n	8005500 <_printf_i+0x14c>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	07de      	lsls	r6, r3, #31
 80054ec:	d508      	bpl.n	8005500 <_printf_i+0x14c>
 80054ee:	6923      	ldr	r3, [r4, #16]
 80054f0:	6861      	ldr	r1, [r4, #4]
 80054f2:	4299      	cmp	r1, r3
 80054f4:	bfde      	ittt	le
 80054f6:	2330      	movle	r3, #48	; 0x30
 80054f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005500:	1b52      	subs	r2, r2, r5
 8005502:	6122      	str	r2, [r4, #16]
 8005504:	f8cd a000 	str.w	sl, [sp]
 8005508:	464b      	mov	r3, r9
 800550a:	aa03      	add	r2, sp, #12
 800550c:	4621      	mov	r1, r4
 800550e:	4640      	mov	r0, r8
 8005510:	f7ff fee2 	bl	80052d8 <_printf_common>
 8005514:	3001      	adds	r0, #1
 8005516:	d14c      	bne.n	80055b2 <_printf_i+0x1fe>
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	b004      	add	sp, #16
 800551e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005522:	4835      	ldr	r0, [pc, #212]	; (80055f8 <_printf_i+0x244>)
 8005524:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005528:	6829      	ldr	r1, [r5, #0]
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005530:	6029      	str	r1, [r5, #0]
 8005532:	061d      	lsls	r5, r3, #24
 8005534:	d514      	bpl.n	8005560 <_printf_i+0x1ac>
 8005536:	07df      	lsls	r7, r3, #31
 8005538:	bf44      	itt	mi
 800553a:	f043 0320 	orrmi.w	r3, r3, #32
 800553e:	6023      	strmi	r3, [r4, #0]
 8005540:	b91e      	cbnz	r6, 800554a <_printf_i+0x196>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	f023 0320 	bic.w	r3, r3, #32
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	2310      	movs	r3, #16
 800554c:	e7b0      	b.n	80054b0 <_printf_i+0xfc>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	f043 0320 	orr.w	r3, r3, #32
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	2378      	movs	r3, #120	; 0x78
 8005558:	4828      	ldr	r0, [pc, #160]	; (80055fc <_printf_i+0x248>)
 800555a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800555e:	e7e3      	b.n	8005528 <_printf_i+0x174>
 8005560:	0659      	lsls	r1, r3, #25
 8005562:	bf48      	it	mi
 8005564:	b2b6      	uxthmi	r6, r6
 8005566:	e7e6      	b.n	8005536 <_printf_i+0x182>
 8005568:	4615      	mov	r5, r2
 800556a:	e7bb      	b.n	80054e4 <_printf_i+0x130>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	6826      	ldr	r6, [r4, #0]
 8005570:	6961      	ldr	r1, [r4, #20]
 8005572:	1d18      	adds	r0, r3, #4
 8005574:	6028      	str	r0, [r5, #0]
 8005576:	0635      	lsls	r5, r6, #24
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	d501      	bpl.n	8005580 <_printf_i+0x1cc>
 800557c:	6019      	str	r1, [r3, #0]
 800557e:	e002      	b.n	8005586 <_printf_i+0x1d2>
 8005580:	0670      	lsls	r0, r6, #25
 8005582:	d5fb      	bpl.n	800557c <_printf_i+0x1c8>
 8005584:	8019      	strh	r1, [r3, #0]
 8005586:	2300      	movs	r3, #0
 8005588:	6123      	str	r3, [r4, #16]
 800558a:	4615      	mov	r5, r2
 800558c:	e7ba      	b.n	8005504 <_printf_i+0x150>
 800558e:	682b      	ldr	r3, [r5, #0]
 8005590:	1d1a      	adds	r2, r3, #4
 8005592:	602a      	str	r2, [r5, #0]
 8005594:	681d      	ldr	r5, [r3, #0]
 8005596:	6862      	ldr	r2, [r4, #4]
 8005598:	2100      	movs	r1, #0
 800559a:	4628      	mov	r0, r5
 800559c:	f7fa fe28 	bl	80001f0 <memchr>
 80055a0:	b108      	cbz	r0, 80055a6 <_printf_i+0x1f2>
 80055a2:	1b40      	subs	r0, r0, r5
 80055a4:	6060      	str	r0, [r4, #4]
 80055a6:	6863      	ldr	r3, [r4, #4]
 80055a8:	6123      	str	r3, [r4, #16]
 80055aa:	2300      	movs	r3, #0
 80055ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b0:	e7a8      	b.n	8005504 <_printf_i+0x150>
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	462a      	mov	r2, r5
 80055b6:	4649      	mov	r1, r9
 80055b8:	4640      	mov	r0, r8
 80055ba:	47d0      	blx	sl
 80055bc:	3001      	adds	r0, #1
 80055be:	d0ab      	beq.n	8005518 <_printf_i+0x164>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	079b      	lsls	r3, r3, #30
 80055c4:	d413      	bmi.n	80055ee <_printf_i+0x23a>
 80055c6:	68e0      	ldr	r0, [r4, #12]
 80055c8:	9b03      	ldr	r3, [sp, #12]
 80055ca:	4298      	cmp	r0, r3
 80055cc:	bfb8      	it	lt
 80055ce:	4618      	movlt	r0, r3
 80055d0:	e7a4      	b.n	800551c <_printf_i+0x168>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4632      	mov	r2, r6
 80055d6:	4649      	mov	r1, r9
 80055d8:	4640      	mov	r0, r8
 80055da:	47d0      	blx	sl
 80055dc:	3001      	adds	r0, #1
 80055de:	d09b      	beq.n	8005518 <_printf_i+0x164>
 80055e0:	3501      	adds	r5, #1
 80055e2:	68e3      	ldr	r3, [r4, #12]
 80055e4:	9903      	ldr	r1, [sp, #12]
 80055e6:	1a5b      	subs	r3, r3, r1
 80055e8:	42ab      	cmp	r3, r5
 80055ea:	dcf2      	bgt.n	80055d2 <_printf_i+0x21e>
 80055ec:	e7eb      	b.n	80055c6 <_printf_i+0x212>
 80055ee:	2500      	movs	r5, #0
 80055f0:	f104 0619 	add.w	r6, r4, #25
 80055f4:	e7f5      	b.n	80055e2 <_printf_i+0x22e>
 80055f6:	bf00      	nop
 80055f8:	08009e0e 	.word	0x08009e0e
 80055fc:	08009e1f 	.word	0x08009e1f

08005600 <_scanf_float>:
 8005600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005604:	b087      	sub	sp, #28
 8005606:	4617      	mov	r7, r2
 8005608:	9303      	str	r3, [sp, #12]
 800560a:	688b      	ldr	r3, [r1, #8]
 800560c:	1e5a      	subs	r2, r3, #1
 800560e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005612:	bf83      	ittte	hi
 8005614:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005618:	195b      	addhi	r3, r3, r5
 800561a:	9302      	strhi	r3, [sp, #8]
 800561c:	2300      	movls	r3, #0
 800561e:	bf86      	itte	hi
 8005620:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005624:	608b      	strhi	r3, [r1, #8]
 8005626:	9302      	strls	r3, [sp, #8]
 8005628:	680b      	ldr	r3, [r1, #0]
 800562a:	468b      	mov	fp, r1
 800562c:	2500      	movs	r5, #0
 800562e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005632:	f84b 3b1c 	str.w	r3, [fp], #28
 8005636:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800563a:	4680      	mov	r8, r0
 800563c:	460c      	mov	r4, r1
 800563e:	465e      	mov	r6, fp
 8005640:	46aa      	mov	sl, r5
 8005642:	46a9      	mov	r9, r5
 8005644:	9501      	str	r5, [sp, #4]
 8005646:	68a2      	ldr	r2, [r4, #8]
 8005648:	b152      	cbz	r2, 8005660 <_scanf_float+0x60>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b4e      	cmp	r3, #78	; 0x4e
 8005650:	d864      	bhi.n	800571c <_scanf_float+0x11c>
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d83c      	bhi.n	80056d0 <_scanf_float+0xd0>
 8005656:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800565a:	b2c8      	uxtb	r0, r1
 800565c:	280e      	cmp	r0, #14
 800565e:	d93a      	bls.n	80056d6 <_scanf_float+0xd6>
 8005660:	f1b9 0f00 	cmp.w	r9, #0
 8005664:	d003      	beq.n	800566e <_scanf_float+0x6e>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005672:	f1ba 0f01 	cmp.w	sl, #1
 8005676:	f200 8113 	bhi.w	80058a0 <_scanf_float+0x2a0>
 800567a:	455e      	cmp	r6, fp
 800567c:	f200 8105 	bhi.w	800588a <_scanf_float+0x28a>
 8005680:	2501      	movs	r5, #1
 8005682:	4628      	mov	r0, r5
 8005684:	b007      	add	sp, #28
 8005686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800568e:	2a0d      	cmp	r2, #13
 8005690:	d8e6      	bhi.n	8005660 <_scanf_float+0x60>
 8005692:	a101      	add	r1, pc, #4	; (adr r1, 8005698 <_scanf_float+0x98>)
 8005694:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005698:	080057d7 	.word	0x080057d7
 800569c:	08005661 	.word	0x08005661
 80056a0:	08005661 	.word	0x08005661
 80056a4:	08005661 	.word	0x08005661
 80056a8:	08005837 	.word	0x08005837
 80056ac:	0800580f 	.word	0x0800580f
 80056b0:	08005661 	.word	0x08005661
 80056b4:	08005661 	.word	0x08005661
 80056b8:	080057e5 	.word	0x080057e5
 80056bc:	08005661 	.word	0x08005661
 80056c0:	08005661 	.word	0x08005661
 80056c4:	08005661 	.word	0x08005661
 80056c8:	08005661 	.word	0x08005661
 80056cc:	0800579d 	.word	0x0800579d
 80056d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80056d4:	e7db      	b.n	800568e <_scanf_float+0x8e>
 80056d6:	290e      	cmp	r1, #14
 80056d8:	d8c2      	bhi.n	8005660 <_scanf_float+0x60>
 80056da:	a001      	add	r0, pc, #4	; (adr r0, 80056e0 <_scanf_float+0xe0>)
 80056dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80056e0:	0800578f 	.word	0x0800578f
 80056e4:	08005661 	.word	0x08005661
 80056e8:	0800578f 	.word	0x0800578f
 80056ec:	08005823 	.word	0x08005823
 80056f0:	08005661 	.word	0x08005661
 80056f4:	0800573d 	.word	0x0800573d
 80056f8:	08005779 	.word	0x08005779
 80056fc:	08005779 	.word	0x08005779
 8005700:	08005779 	.word	0x08005779
 8005704:	08005779 	.word	0x08005779
 8005708:	08005779 	.word	0x08005779
 800570c:	08005779 	.word	0x08005779
 8005710:	08005779 	.word	0x08005779
 8005714:	08005779 	.word	0x08005779
 8005718:	08005779 	.word	0x08005779
 800571c:	2b6e      	cmp	r3, #110	; 0x6e
 800571e:	d809      	bhi.n	8005734 <_scanf_float+0x134>
 8005720:	2b60      	cmp	r3, #96	; 0x60
 8005722:	d8b2      	bhi.n	800568a <_scanf_float+0x8a>
 8005724:	2b54      	cmp	r3, #84	; 0x54
 8005726:	d077      	beq.n	8005818 <_scanf_float+0x218>
 8005728:	2b59      	cmp	r3, #89	; 0x59
 800572a:	d199      	bne.n	8005660 <_scanf_float+0x60>
 800572c:	2d07      	cmp	r5, #7
 800572e:	d197      	bne.n	8005660 <_scanf_float+0x60>
 8005730:	2508      	movs	r5, #8
 8005732:	e029      	b.n	8005788 <_scanf_float+0x188>
 8005734:	2b74      	cmp	r3, #116	; 0x74
 8005736:	d06f      	beq.n	8005818 <_scanf_float+0x218>
 8005738:	2b79      	cmp	r3, #121	; 0x79
 800573a:	e7f6      	b.n	800572a <_scanf_float+0x12a>
 800573c:	6821      	ldr	r1, [r4, #0]
 800573e:	05c8      	lsls	r0, r1, #23
 8005740:	d51a      	bpl.n	8005778 <_scanf_float+0x178>
 8005742:	9b02      	ldr	r3, [sp, #8]
 8005744:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005748:	6021      	str	r1, [r4, #0]
 800574a:	f109 0901 	add.w	r9, r9, #1
 800574e:	b11b      	cbz	r3, 8005758 <_scanf_float+0x158>
 8005750:	3b01      	subs	r3, #1
 8005752:	3201      	adds	r2, #1
 8005754:	9302      	str	r3, [sp, #8]
 8005756:	60a2      	str	r2, [r4, #8]
 8005758:	68a3      	ldr	r3, [r4, #8]
 800575a:	3b01      	subs	r3, #1
 800575c:	60a3      	str	r3, [r4, #8]
 800575e:	6923      	ldr	r3, [r4, #16]
 8005760:	3301      	adds	r3, #1
 8005762:	6123      	str	r3, [r4, #16]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3b01      	subs	r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	607b      	str	r3, [r7, #4]
 800576c:	f340 8084 	ble.w	8005878 <_scanf_float+0x278>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	3301      	adds	r3, #1
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	e766      	b.n	8005646 <_scanf_float+0x46>
 8005778:	eb1a 0f05 	cmn.w	sl, r5
 800577c:	f47f af70 	bne.w	8005660 <_scanf_float+0x60>
 8005780:	6822      	ldr	r2, [r4, #0]
 8005782:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005786:	6022      	str	r2, [r4, #0]
 8005788:	f806 3b01 	strb.w	r3, [r6], #1
 800578c:	e7e4      	b.n	8005758 <_scanf_float+0x158>
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	0610      	lsls	r0, r2, #24
 8005792:	f57f af65 	bpl.w	8005660 <_scanf_float+0x60>
 8005796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800579a:	e7f4      	b.n	8005786 <_scanf_float+0x186>
 800579c:	f1ba 0f00 	cmp.w	sl, #0
 80057a0:	d10e      	bne.n	80057c0 <_scanf_float+0x1c0>
 80057a2:	f1b9 0f00 	cmp.w	r9, #0
 80057a6:	d10e      	bne.n	80057c6 <_scanf_float+0x1c6>
 80057a8:	6822      	ldr	r2, [r4, #0]
 80057aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80057ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80057b2:	d108      	bne.n	80057c6 <_scanf_float+0x1c6>
 80057b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057b8:	6022      	str	r2, [r4, #0]
 80057ba:	f04f 0a01 	mov.w	sl, #1
 80057be:	e7e3      	b.n	8005788 <_scanf_float+0x188>
 80057c0:	f1ba 0f02 	cmp.w	sl, #2
 80057c4:	d055      	beq.n	8005872 <_scanf_float+0x272>
 80057c6:	2d01      	cmp	r5, #1
 80057c8:	d002      	beq.n	80057d0 <_scanf_float+0x1d0>
 80057ca:	2d04      	cmp	r5, #4
 80057cc:	f47f af48 	bne.w	8005660 <_scanf_float+0x60>
 80057d0:	3501      	adds	r5, #1
 80057d2:	b2ed      	uxtb	r5, r5
 80057d4:	e7d8      	b.n	8005788 <_scanf_float+0x188>
 80057d6:	f1ba 0f01 	cmp.w	sl, #1
 80057da:	f47f af41 	bne.w	8005660 <_scanf_float+0x60>
 80057de:	f04f 0a02 	mov.w	sl, #2
 80057e2:	e7d1      	b.n	8005788 <_scanf_float+0x188>
 80057e4:	b97d      	cbnz	r5, 8005806 <_scanf_float+0x206>
 80057e6:	f1b9 0f00 	cmp.w	r9, #0
 80057ea:	f47f af3c 	bne.w	8005666 <_scanf_float+0x66>
 80057ee:	6822      	ldr	r2, [r4, #0]
 80057f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80057f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80057f8:	f47f af39 	bne.w	800566e <_scanf_float+0x6e>
 80057fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005800:	6022      	str	r2, [r4, #0]
 8005802:	2501      	movs	r5, #1
 8005804:	e7c0      	b.n	8005788 <_scanf_float+0x188>
 8005806:	2d03      	cmp	r5, #3
 8005808:	d0e2      	beq.n	80057d0 <_scanf_float+0x1d0>
 800580a:	2d05      	cmp	r5, #5
 800580c:	e7de      	b.n	80057cc <_scanf_float+0x1cc>
 800580e:	2d02      	cmp	r5, #2
 8005810:	f47f af26 	bne.w	8005660 <_scanf_float+0x60>
 8005814:	2503      	movs	r5, #3
 8005816:	e7b7      	b.n	8005788 <_scanf_float+0x188>
 8005818:	2d06      	cmp	r5, #6
 800581a:	f47f af21 	bne.w	8005660 <_scanf_float+0x60>
 800581e:	2507      	movs	r5, #7
 8005820:	e7b2      	b.n	8005788 <_scanf_float+0x188>
 8005822:	6822      	ldr	r2, [r4, #0]
 8005824:	0591      	lsls	r1, r2, #22
 8005826:	f57f af1b 	bpl.w	8005660 <_scanf_float+0x60>
 800582a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800582e:	6022      	str	r2, [r4, #0]
 8005830:	f8cd 9004 	str.w	r9, [sp, #4]
 8005834:	e7a8      	b.n	8005788 <_scanf_float+0x188>
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800583c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005840:	d006      	beq.n	8005850 <_scanf_float+0x250>
 8005842:	0550      	lsls	r0, r2, #21
 8005844:	f57f af0c 	bpl.w	8005660 <_scanf_float+0x60>
 8005848:	f1b9 0f00 	cmp.w	r9, #0
 800584c:	f43f af0f 	beq.w	800566e <_scanf_float+0x6e>
 8005850:	0591      	lsls	r1, r2, #22
 8005852:	bf58      	it	pl
 8005854:	9901      	ldrpl	r1, [sp, #4]
 8005856:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800585a:	bf58      	it	pl
 800585c:	eba9 0101 	subpl.w	r1, r9, r1
 8005860:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005864:	bf58      	it	pl
 8005866:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800586a:	6022      	str	r2, [r4, #0]
 800586c:	f04f 0900 	mov.w	r9, #0
 8005870:	e78a      	b.n	8005788 <_scanf_float+0x188>
 8005872:	f04f 0a03 	mov.w	sl, #3
 8005876:	e787      	b.n	8005788 <_scanf_float+0x188>
 8005878:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800587c:	4639      	mov	r1, r7
 800587e:	4640      	mov	r0, r8
 8005880:	4798      	blx	r3
 8005882:	2800      	cmp	r0, #0
 8005884:	f43f aedf 	beq.w	8005646 <_scanf_float+0x46>
 8005888:	e6ea      	b.n	8005660 <_scanf_float+0x60>
 800588a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800588e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005892:	463a      	mov	r2, r7
 8005894:	4640      	mov	r0, r8
 8005896:	4798      	blx	r3
 8005898:	6923      	ldr	r3, [r4, #16]
 800589a:	3b01      	subs	r3, #1
 800589c:	6123      	str	r3, [r4, #16]
 800589e:	e6ec      	b.n	800567a <_scanf_float+0x7a>
 80058a0:	1e6b      	subs	r3, r5, #1
 80058a2:	2b06      	cmp	r3, #6
 80058a4:	d825      	bhi.n	80058f2 <_scanf_float+0x2f2>
 80058a6:	2d02      	cmp	r5, #2
 80058a8:	d836      	bhi.n	8005918 <_scanf_float+0x318>
 80058aa:	455e      	cmp	r6, fp
 80058ac:	f67f aee8 	bls.w	8005680 <_scanf_float+0x80>
 80058b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058b8:	463a      	mov	r2, r7
 80058ba:	4640      	mov	r0, r8
 80058bc:	4798      	blx	r3
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	6123      	str	r3, [r4, #16]
 80058c4:	e7f1      	b.n	80058aa <_scanf_float+0x2aa>
 80058c6:	9802      	ldr	r0, [sp, #8]
 80058c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80058d0:	9002      	str	r0, [sp, #8]
 80058d2:	463a      	mov	r2, r7
 80058d4:	4640      	mov	r0, r8
 80058d6:	4798      	blx	r3
 80058d8:	6923      	ldr	r3, [r4, #16]
 80058da:	3b01      	subs	r3, #1
 80058dc:	6123      	str	r3, [r4, #16]
 80058de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058e2:	fa5f fa8a 	uxtb.w	sl, sl
 80058e6:	f1ba 0f02 	cmp.w	sl, #2
 80058ea:	d1ec      	bne.n	80058c6 <_scanf_float+0x2c6>
 80058ec:	3d03      	subs	r5, #3
 80058ee:	b2ed      	uxtb	r5, r5
 80058f0:	1b76      	subs	r6, r6, r5
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	05da      	lsls	r2, r3, #23
 80058f6:	d52f      	bpl.n	8005958 <_scanf_float+0x358>
 80058f8:	055b      	lsls	r3, r3, #21
 80058fa:	d510      	bpl.n	800591e <_scanf_float+0x31e>
 80058fc:	455e      	cmp	r6, fp
 80058fe:	f67f aebf 	bls.w	8005680 <_scanf_float+0x80>
 8005902:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005906:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800590a:	463a      	mov	r2, r7
 800590c:	4640      	mov	r0, r8
 800590e:	4798      	blx	r3
 8005910:	6923      	ldr	r3, [r4, #16]
 8005912:	3b01      	subs	r3, #1
 8005914:	6123      	str	r3, [r4, #16]
 8005916:	e7f1      	b.n	80058fc <_scanf_float+0x2fc>
 8005918:	46aa      	mov	sl, r5
 800591a:	9602      	str	r6, [sp, #8]
 800591c:	e7df      	b.n	80058de <_scanf_float+0x2de>
 800591e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005922:	6923      	ldr	r3, [r4, #16]
 8005924:	2965      	cmp	r1, #101	; 0x65
 8005926:	f103 33ff 	add.w	r3, r3, #4294967295
 800592a:	f106 35ff 	add.w	r5, r6, #4294967295
 800592e:	6123      	str	r3, [r4, #16]
 8005930:	d00c      	beq.n	800594c <_scanf_float+0x34c>
 8005932:	2945      	cmp	r1, #69	; 0x45
 8005934:	d00a      	beq.n	800594c <_scanf_float+0x34c>
 8005936:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800593a:	463a      	mov	r2, r7
 800593c:	4640      	mov	r0, r8
 800593e:	4798      	blx	r3
 8005940:	6923      	ldr	r3, [r4, #16]
 8005942:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005946:	3b01      	subs	r3, #1
 8005948:	1eb5      	subs	r5, r6, #2
 800594a:	6123      	str	r3, [r4, #16]
 800594c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005950:	463a      	mov	r2, r7
 8005952:	4640      	mov	r0, r8
 8005954:	4798      	blx	r3
 8005956:	462e      	mov	r6, r5
 8005958:	6825      	ldr	r5, [r4, #0]
 800595a:	f015 0510 	ands.w	r5, r5, #16
 800595e:	d159      	bne.n	8005a14 <_scanf_float+0x414>
 8005960:	7035      	strb	r5, [r6, #0]
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596c:	d11b      	bne.n	80059a6 <_scanf_float+0x3a6>
 800596e:	9b01      	ldr	r3, [sp, #4]
 8005970:	454b      	cmp	r3, r9
 8005972:	eba3 0209 	sub.w	r2, r3, r9
 8005976:	d123      	bne.n	80059c0 <_scanf_float+0x3c0>
 8005978:	2200      	movs	r2, #0
 800597a:	4659      	mov	r1, fp
 800597c:	4640      	mov	r0, r8
 800597e:	f000 fecd 	bl	800671c <_strtod_r>
 8005982:	6822      	ldr	r2, [r4, #0]
 8005984:	9b03      	ldr	r3, [sp, #12]
 8005986:	f012 0f02 	tst.w	r2, #2
 800598a:	ec57 6b10 	vmov	r6, r7, d0
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	d021      	beq.n	80059d6 <_scanf_float+0x3d6>
 8005992:	9903      	ldr	r1, [sp, #12]
 8005994:	1d1a      	adds	r2, r3, #4
 8005996:	600a      	str	r2, [r1, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	e9c3 6700 	strd	r6, r7, [r3]
 800599e:	68e3      	ldr	r3, [r4, #12]
 80059a0:	3301      	adds	r3, #1
 80059a2:	60e3      	str	r3, [r4, #12]
 80059a4:	e66d      	b.n	8005682 <_scanf_float+0x82>
 80059a6:	9b04      	ldr	r3, [sp, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0e5      	beq.n	8005978 <_scanf_float+0x378>
 80059ac:	9905      	ldr	r1, [sp, #20]
 80059ae:	230a      	movs	r3, #10
 80059b0:	462a      	mov	r2, r5
 80059b2:	3101      	adds	r1, #1
 80059b4:	4640      	mov	r0, r8
 80059b6:	f000 ff39 	bl	800682c <_strtol_r>
 80059ba:	9b04      	ldr	r3, [sp, #16]
 80059bc:	9e05      	ldr	r6, [sp, #20]
 80059be:	1ac2      	subs	r2, r0, r3
 80059c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80059c4:	429e      	cmp	r6, r3
 80059c6:	bf28      	it	cs
 80059c8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80059cc:	4912      	ldr	r1, [pc, #72]	; (8005a18 <_scanf_float+0x418>)
 80059ce:	4630      	mov	r0, r6
 80059d0:	f000 f860 	bl	8005a94 <siprintf>
 80059d4:	e7d0      	b.n	8005978 <_scanf_float+0x378>
 80059d6:	9903      	ldr	r1, [sp, #12]
 80059d8:	f012 0f04 	tst.w	r2, #4
 80059dc:	f103 0204 	add.w	r2, r3, #4
 80059e0:	600a      	str	r2, [r1, #0]
 80059e2:	d1d9      	bne.n	8005998 <_scanf_float+0x398>
 80059e4:	f8d3 8000 	ldr.w	r8, [r3]
 80059e8:	ee10 2a10 	vmov	r2, s0
 80059ec:	ee10 0a10 	vmov	r0, s0
 80059f0:	463b      	mov	r3, r7
 80059f2:	4639      	mov	r1, r7
 80059f4:	f7fb f8a2 	bl	8000b3c <__aeabi_dcmpun>
 80059f8:	b128      	cbz	r0, 8005a06 <_scanf_float+0x406>
 80059fa:	4808      	ldr	r0, [pc, #32]	; (8005a1c <_scanf_float+0x41c>)
 80059fc:	f000 f810 	bl	8005a20 <nanf>
 8005a00:	ed88 0a00 	vstr	s0, [r8]
 8005a04:	e7cb      	b.n	800599e <_scanf_float+0x39e>
 8005a06:	4630      	mov	r0, r6
 8005a08:	4639      	mov	r1, r7
 8005a0a:	f7fb f8f5 	bl	8000bf8 <__aeabi_d2f>
 8005a0e:	f8c8 0000 	str.w	r0, [r8]
 8005a12:	e7c4      	b.n	800599e <_scanf_float+0x39e>
 8005a14:	2500      	movs	r5, #0
 8005a16:	e634      	b.n	8005682 <_scanf_float+0x82>
 8005a18:	08009e30 	.word	0x08009e30
 8005a1c:	0800a238 	.word	0x0800a238

08005a20 <nanf>:
 8005a20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005a28 <nanf+0x8>
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	7fc00000 	.word	0x7fc00000

08005a2c <sniprintf>:
 8005a2c:	b40c      	push	{r2, r3}
 8005a2e:	b530      	push	{r4, r5, lr}
 8005a30:	4b17      	ldr	r3, [pc, #92]	; (8005a90 <sniprintf+0x64>)
 8005a32:	1e0c      	subs	r4, r1, #0
 8005a34:	681d      	ldr	r5, [r3, #0]
 8005a36:	b09d      	sub	sp, #116	; 0x74
 8005a38:	da08      	bge.n	8005a4c <sniprintf+0x20>
 8005a3a:	238b      	movs	r3, #139	; 0x8b
 8005a3c:	602b      	str	r3, [r5, #0]
 8005a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a42:	b01d      	add	sp, #116	; 0x74
 8005a44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a48:	b002      	add	sp, #8
 8005a4a:	4770      	bx	lr
 8005a4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a54:	bf14      	ite	ne
 8005a56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a5a:	4623      	moveq	r3, r4
 8005a5c:	9304      	str	r3, [sp, #16]
 8005a5e:	9307      	str	r3, [sp, #28]
 8005a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a64:	9002      	str	r0, [sp, #8]
 8005a66:	9006      	str	r0, [sp, #24]
 8005a68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a6e:	ab21      	add	r3, sp, #132	; 0x84
 8005a70:	a902      	add	r1, sp, #8
 8005a72:	4628      	mov	r0, r5
 8005a74:	9301      	str	r3, [sp, #4]
 8005a76:	f002 fef7 	bl	8008868 <_svfiprintf_r>
 8005a7a:	1c43      	adds	r3, r0, #1
 8005a7c:	bfbc      	itt	lt
 8005a7e:	238b      	movlt	r3, #139	; 0x8b
 8005a80:	602b      	strlt	r3, [r5, #0]
 8005a82:	2c00      	cmp	r4, #0
 8005a84:	d0dd      	beq.n	8005a42 <sniprintf+0x16>
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	e7d9      	b.n	8005a42 <sniprintf+0x16>
 8005a8e:	bf00      	nop
 8005a90:	20000014 	.word	0x20000014

08005a94 <siprintf>:
 8005a94:	b40e      	push	{r1, r2, r3}
 8005a96:	b500      	push	{lr}
 8005a98:	b09c      	sub	sp, #112	; 0x70
 8005a9a:	ab1d      	add	r3, sp, #116	; 0x74
 8005a9c:	9002      	str	r0, [sp, #8]
 8005a9e:	9006      	str	r0, [sp, #24]
 8005aa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005aa4:	4809      	ldr	r0, [pc, #36]	; (8005acc <siprintf+0x38>)
 8005aa6:	9107      	str	r1, [sp, #28]
 8005aa8:	9104      	str	r1, [sp, #16]
 8005aaa:	4909      	ldr	r1, [pc, #36]	; (8005ad0 <siprintf+0x3c>)
 8005aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ab0:	9105      	str	r1, [sp, #20]
 8005ab2:	6800      	ldr	r0, [r0, #0]
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	a902      	add	r1, sp, #8
 8005ab8:	f002 fed6 	bl	8008868 <_svfiprintf_r>
 8005abc:	9b02      	ldr	r3, [sp, #8]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	b01c      	add	sp, #112	; 0x70
 8005ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ac8:	b003      	add	sp, #12
 8005aca:	4770      	bx	lr
 8005acc:	20000014 	.word	0x20000014
 8005ad0:	ffff0208 	.word	0xffff0208

08005ad4 <sulp>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	460d      	mov	r5, r1
 8005ada:	ec45 4b10 	vmov	d0, r4, r5
 8005ade:	4616      	mov	r6, r2
 8005ae0:	f002 fc20 	bl	8008324 <__ulp>
 8005ae4:	ec51 0b10 	vmov	r0, r1, d0
 8005ae8:	b17e      	cbz	r6, 8005b0a <sulp+0x36>
 8005aea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005aee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	dd09      	ble.n	8005b0a <sulp+0x36>
 8005af6:	051b      	lsls	r3, r3, #20
 8005af8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005afc:	2400      	movs	r4, #0
 8005afe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005b02:	4622      	mov	r2, r4
 8005b04:	462b      	mov	r3, r5
 8005b06:	f7fa fd7f 	bl	8000608 <__aeabi_dmul>
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	0000      	movs	r0, r0
	...

08005b10 <_strtod_l>:
 8005b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	ed2d 8b02 	vpush	{d8}
 8005b18:	b09d      	sub	sp, #116	; 0x74
 8005b1a:	461f      	mov	r7, r3
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	9318      	str	r3, [sp, #96]	; 0x60
 8005b20:	4ba2      	ldr	r3, [pc, #648]	; (8005dac <_strtod_l+0x29c>)
 8005b22:	9213      	str	r2, [sp, #76]	; 0x4c
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	9305      	str	r3, [sp, #20]
 8005b28:	4604      	mov	r4, r0
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	4688      	mov	r8, r1
 8005b2e:	f7fa fb57 	bl	80001e0 <strlen>
 8005b32:	f04f 0a00 	mov.w	sl, #0
 8005b36:	4605      	mov	r5, r0
 8005b38:	f04f 0b00 	mov.w	fp, #0
 8005b3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005b40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b42:	781a      	ldrb	r2, [r3, #0]
 8005b44:	2a2b      	cmp	r2, #43	; 0x2b
 8005b46:	d04e      	beq.n	8005be6 <_strtod_l+0xd6>
 8005b48:	d83b      	bhi.n	8005bc2 <_strtod_l+0xb2>
 8005b4a:	2a0d      	cmp	r2, #13
 8005b4c:	d834      	bhi.n	8005bb8 <_strtod_l+0xa8>
 8005b4e:	2a08      	cmp	r2, #8
 8005b50:	d834      	bhi.n	8005bbc <_strtod_l+0xac>
 8005b52:	2a00      	cmp	r2, #0
 8005b54:	d03e      	beq.n	8005bd4 <_strtod_l+0xc4>
 8005b56:	2300      	movs	r3, #0
 8005b58:	930a      	str	r3, [sp, #40]	; 0x28
 8005b5a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005b5c:	7833      	ldrb	r3, [r6, #0]
 8005b5e:	2b30      	cmp	r3, #48	; 0x30
 8005b60:	f040 80b0 	bne.w	8005cc4 <_strtod_l+0x1b4>
 8005b64:	7873      	ldrb	r3, [r6, #1]
 8005b66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005b6a:	2b58      	cmp	r3, #88	; 0x58
 8005b6c:	d168      	bne.n	8005c40 <_strtod_l+0x130>
 8005b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	ab18      	add	r3, sp, #96	; 0x60
 8005b74:	9702      	str	r7, [sp, #8]
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	4a8d      	ldr	r2, [pc, #564]	; (8005db0 <_strtod_l+0x2a0>)
 8005b7a:	ab19      	add	r3, sp, #100	; 0x64
 8005b7c:	a917      	add	r1, sp, #92	; 0x5c
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f001 fd38 	bl	80075f4 <__gethex>
 8005b84:	f010 0707 	ands.w	r7, r0, #7
 8005b88:	4605      	mov	r5, r0
 8005b8a:	d005      	beq.n	8005b98 <_strtod_l+0x88>
 8005b8c:	2f06      	cmp	r7, #6
 8005b8e:	d12c      	bne.n	8005bea <_strtod_l+0xda>
 8005b90:	3601      	adds	r6, #1
 8005b92:	2300      	movs	r3, #0
 8005b94:	9617      	str	r6, [sp, #92]	; 0x5c
 8005b96:	930a      	str	r3, [sp, #40]	; 0x28
 8005b98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f040 8590 	bne.w	80066c0 <_strtod_l+0xbb0>
 8005ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba2:	b1eb      	cbz	r3, 8005be0 <_strtod_l+0xd0>
 8005ba4:	4652      	mov	r2, sl
 8005ba6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005baa:	ec43 2b10 	vmov	d0, r2, r3
 8005bae:	b01d      	add	sp, #116	; 0x74
 8005bb0:	ecbd 8b02 	vpop	{d8}
 8005bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb8:	2a20      	cmp	r2, #32
 8005bba:	d1cc      	bne.n	8005b56 <_strtod_l+0x46>
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	9317      	str	r3, [sp, #92]	; 0x5c
 8005bc0:	e7be      	b.n	8005b40 <_strtod_l+0x30>
 8005bc2:	2a2d      	cmp	r2, #45	; 0x2d
 8005bc4:	d1c7      	bne.n	8005b56 <_strtod_l+0x46>
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	920a      	str	r2, [sp, #40]	; 0x28
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	9217      	str	r2, [sp, #92]	; 0x5c
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1c2      	bne.n	8005b5a <_strtod_l+0x4a>
 8005bd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bd6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f040 856e 	bne.w	80066bc <_strtod_l+0xbac>
 8005be0:	4652      	mov	r2, sl
 8005be2:	465b      	mov	r3, fp
 8005be4:	e7e1      	b.n	8005baa <_strtod_l+0x9a>
 8005be6:	2200      	movs	r2, #0
 8005be8:	e7ee      	b.n	8005bc8 <_strtod_l+0xb8>
 8005bea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005bec:	b13a      	cbz	r2, 8005bfe <_strtod_l+0xee>
 8005bee:	2135      	movs	r1, #53	; 0x35
 8005bf0:	a81a      	add	r0, sp, #104	; 0x68
 8005bf2:	f002 fca2 	bl	800853a <__copybits>
 8005bf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f002 f861 	bl	8007cc0 <_Bfree>
 8005bfe:	3f01      	subs	r7, #1
 8005c00:	2f04      	cmp	r7, #4
 8005c02:	d806      	bhi.n	8005c12 <_strtod_l+0x102>
 8005c04:	e8df f007 	tbb	[pc, r7]
 8005c08:	1714030a 	.word	0x1714030a
 8005c0c:	0a          	.byte	0x0a
 8005c0d:	00          	.byte	0x00
 8005c0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005c12:	0728      	lsls	r0, r5, #28
 8005c14:	d5c0      	bpl.n	8005b98 <_strtod_l+0x88>
 8005c16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005c1a:	e7bd      	b.n	8005b98 <_strtod_l+0x88>
 8005c1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005c20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005c2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005c2e:	e7f0      	b.n	8005c12 <_strtod_l+0x102>
 8005c30:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005db4 <_strtod_l+0x2a4>
 8005c34:	e7ed      	b.n	8005c12 <_strtod_l+0x102>
 8005c36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005c3a:	f04f 3aff 	mov.w	sl, #4294967295
 8005c3e:	e7e8      	b.n	8005c12 <_strtod_l+0x102>
 8005c40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	2b30      	cmp	r3, #48	; 0x30
 8005c4a:	d0f9      	beq.n	8005c40 <_strtod_l+0x130>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0a3      	beq.n	8005b98 <_strtod_l+0x88>
 8005c50:	2301      	movs	r3, #1
 8005c52:	f04f 0900 	mov.w	r9, #0
 8005c56:	9304      	str	r3, [sp, #16]
 8005c58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c5a:	9308      	str	r3, [sp, #32]
 8005c5c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c60:	464f      	mov	r7, r9
 8005c62:	220a      	movs	r2, #10
 8005c64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005c66:	7806      	ldrb	r6, [r0, #0]
 8005c68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005c6c:	b2d9      	uxtb	r1, r3
 8005c6e:	2909      	cmp	r1, #9
 8005c70:	d92a      	bls.n	8005cc8 <_strtod_l+0x1b8>
 8005c72:	9905      	ldr	r1, [sp, #20]
 8005c74:	462a      	mov	r2, r5
 8005c76:	f002 ff0f 	bl	8008a98 <strncmp>
 8005c7a:	b398      	cbz	r0, 8005ce4 <_strtod_l+0x1d4>
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	4632      	mov	r2, r6
 8005c80:	463d      	mov	r5, r7
 8005c82:	9005      	str	r0, [sp, #20]
 8005c84:	4603      	mov	r3, r0
 8005c86:	2a65      	cmp	r2, #101	; 0x65
 8005c88:	d001      	beq.n	8005c8e <_strtod_l+0x17e>
 8005c8a:	2a45      	cmp	r2, #69	; 0x45
 8005c8c:	d118      	bne.n	8005cc0 <_strtod_l+0x1b0>
 8005c8e:	b91d      	cbnz	r5, 8005c98 <_strtod_l+0x188>
 8005c90:	9a04      	ldr	r2, [sp, #16]
 8005c92:	4302      	orrs	r2, r0
 8005c94:	d09e      	beq.n	8005bd4 <_strtod_l+0xc4>
 8005c96:	2500      	movs	r5, #0
 8005c98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005c9c:	f108 0201 	add.w	r2, r8, #1
 8005ca0:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ca2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005ca6:	2a2b      	cmp	r2, #43	; 0x2b
 8005ca8:	d075      	beq.n	8005d96 <_strtod_l+0x286>
 8005caa:	2a2d      	cmp	r2, #45	; 0x2d
 8005cac:	d07b      	beq.n	8005da6 <_strtod_l+0x296>
 8005cae:	f04f 0c00 	mov.w	ip, #0
 8005cb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005cb6:	2909      	cmp	r1, #9
 8005cb8:	f240 8082 	bls.w	8005dc0 <_strtod_l+0x2b0>
 8005cbc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005cc0:	2600      	movs	r6, #0
 8005cc2:	e09d      	b.n	8005e00 <_strtod_l+0x2f0>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	e7c4      	b.n	8005c52 <_strtod_l+0x142>
 8005cc8:	2f08      	cmp	r7, #8
 8005cca:	bfd8      	it	le
 8005ccc:	9907      	ldrle	r1, [sp, #28]
 8005cce:	f100 0001 	add.w	r0, r0, #1
 8005cd2:	bfda      	itte	le
 8005cd4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005cd8:	9307      	strle	r3, [sp, #28]
 8005cda:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005cde:	3701      	adds	r7, #1
 8005ce0:	9017      	str	r0, [sp, #92]	; 0x5c
 8005ce2:	e7bf      	b.n	8005c64 <_strtod_l+0x154>
 8005ce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ce6:	195a      	adds	r2, r3, r5
 8005ce8:	9217      	str	r2, [sp, #92]	; 0x5c
 8005cea:	5d5a      	ldrb	r2, [r3, r5]
 8005cec:	2f00      	cmp	r7, #0
 8005cee:	d037      	beq.n	8005d60 <_strtod_l+0x250>
 8005cf0:	9005      	str	r0, [sp, #20]
 8005cf2:	463d      	mov	r5, r7
 8005cf4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005cf8:	2b09      	cmp	r3, #9
 8005cfa:	d912      	bls.n	8005d22 <_strtod_l+0x212>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e7c2      	b.n	8005c86 <_strtod_l+0x176>
 8005d00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d06:	785a      	ldrb	r2, [r3, #1]
 8005d08:	3001      	adds	r0, #1
 8005d0a:	2a30      	cmp	r2, #48	; 0x30
 8005d0c:	d0f8      	beq.n	8005d00 <_strtod_l+0x1f0>
 8005d0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	f200 84d9 	bhi.w	80066ca <_strtod_l+0xbba>
 8005d18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d1a:	9005      	str	r0, [sp, #20]
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	9308      	str	r3, [sp, #32]
 8005d20:	4605      	mov	r5, r0
 8005d22:	3a30      	subs	r2, #48	; 0x30
 8005d24:	f100 0301 	add.w	r3, r0, #1
 8005d28:	d014      	beq.n	8005d54 <_strtod_l+0x244>
 8005d2a:	9905      	ldr	r1, [sp, #20]
 8005d2c:	4419      	add	r1, r3
 8005d2e:	9105      	str	r1, [sp, #20]
 8005d30:	462b      	mov	r3, r5
 8005d32:	eb00 0e05 	add.w	lr, r0, r5
 8005d36:	210a      	movs	r1, #10
 8005d38:	4573      	cmp	r3, lr
 8005d3a:	d113      	bne.n	8005d64 <_strtod_l+0x254>
 8005d3c:	182b      	adds	r3, r5, r0
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	f105 0501 	add.w	r5, r5, #1
 8005d44:	4405      	add	r5, r0
 8005d46:	dc1c      	bgt.n	8005d82 <_strtod_l+0x272>
 8005d48:	9907      	ldr	r1, [sp, #28]
 8005d4a:	230a      	movs	r3, #10
 8005d4c:	fb03 2301 	mla	r3, r3, r1, r2
 8005d50:	9307      	str	r3, [sp, #28]
 8005d52:	2300      	movs	r3, #0
 8005d54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005d56:	1c51      	adds	r1, r2, #1
 8005d58:	9117      	str	r1, [sp, #92]	; 0x5c
 8005d5a:	7852      	ldrb	r2, [r2, #1]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	e7c9      	b.n	8005cf4 <_strtod_l+0x1e4>
 8005d60:	4638      	mov	r0, r7
 8005d62:	e7d2      	b.n	8005d0a <_strtod_l+0x1fa>
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	dc04      	bgt.n	8005d72 <_strtod_l+0x262>
 8005d68:	9e07      	ldr	r6, [sp, #28]
 8005d6a:	434e      	muls	r6, r1
 8005d6c:	9607      	str	r6, [sp, #28]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	e7e2      	b.n	8005d38 <_strtod_l+0x228>
 8005d72:	f103 0c01 	add.w	ip, r3, #1
 8005d76:	f1bc 0f10 	cmp.w	ip, #16
 8005d7a:	bfd8      	it	le
 8005d7c:	fb01 f909 	mulle.w	r9, r1, r9
 8005d80:	e7f5      	b.n	8005d6e <_strtod_l+0x25e>
 8005d82:	2d10      	cmp	r5, #16
 8005d84:	bfdc      	itt	le
 8005d86:	230a      	movle	r3, #10
 8005d88:	fb03 2909 	mlale	r9, r3, r9, r2
 8005d8c:	e7e1      	b.n	8005d52 <_strtod_l+0x242>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	9305      	str	r3, [sp, #20]
 8005d92:	2301      	movs	r3, #1
 8005d94:	e77c      	b.n	8005c90 <_strtod_l+0x180>
 8005d96:	f04f 0c00 	mov.w	ip, #0
 8005d9a:	f108 0202 	add.w	r2, r8, #2
 8005d9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005da0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005da4:	e785      	b.n	8005cb2 <_strtod_l+0x1a2>
 8005da6:	f04f 0c01 	mov.w	ip, #1
 8005daa:	e7f6      	b.n	8005d9a <_strtod_l+0x28a>
 8005dac:	0800a080 	.word	0x0800a080
 8005db0:	08009e38 	.word	0x08009e38
 8005db4:	7ff00000 	.word	0x7ff00000
 8005db8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005dba:	1c51      	adds	r1, r2, #1
 8005dbc:	9117      	str	r1, [sp, #92]	; 0x5c
 8005dbe:	7852      	ldrb	r2, [r2, #1]
 8005dc0:	2a30      	cmp	r2, #48	; 0x30
 8005dc2:	d0f9      	beq.n	8005db8 <_strtod_l+0x2a8>
 8005dc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005dc8:	2908      	cmp	r1, #8
 8005dca:	f63f af79 	bhi.w	8005cc0 <_strtod_l+0x1b0>
 8005dce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005dd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005dd4:	9206      	str	r2, [sp, #24]
 8005dd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005dd8:	1c51      	adds	r1, r2, #1
 8005dda:	9117      	str	r1, [sp, #92]	; 0x5c
 8005ddc:	7852      	ldrb	r2, [r2, #1]
 8005dde:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005de2:	2e09      	cmp	r6, #9
 8005de4:	d937      	bls.n	8005e56 <_strtod_l+0x346>
 8005de6:	9e06      	ldr	r6, [sp, #24]
 8005de8:	1b89      	subs	r1, r1, r6
 8005dea:	2908      	cmp	r1, #8
 8005dec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005df0:	dc02      	bgt.n	8005df8 <_strtod_l+0x2e8>
 8005df2:	4576      	cmp	r6, lr
 8005df4:	bfa8      	it	ge
 8005df6:	4676      	movge	r6, lr
 8005df8:	f1bc 0f00 	cmp.w	ip, #0
 8005dfc:	d000      	beq.n	8005e00 <_strtod_l+0x2f0>
 8005dfe:	4276      	negs	r6, r6
 8005e00:	2d00      	cmp	r5, #0
 8005e02:	d14d      	bne.n	8005ea0 <_strtod_l+0x390>
 8005e04:	9904      	ldr	r1, [sp, #16]
 8005e06:	4301      	orrs	r1, r0
 8005e08:	f47f aec6 	bne.w	8005b98 <_strtod_l+0x88>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f47f aee1 	bne.w	8005bd4 <_strtod_l+0xc4>
 8005e12:	2a69      	cmp	r2, #105	; 0x69
 8005e14:	d027      	beq.n	8005e66 <_strtod_l+0x356>
 8005e16:	dc24      	bgt.n	8005e62 <_strtod_l+0x352>
 8005e18:	2a49      	cmp	r2, #73	; 0x49
 8005e1a:	d024      	beq.n	8005e66 <_strtod_l+0x356>
 8005e1c:	2a4e      	cmp	r2, #78	; 0x4e
 8005e1e:	f47f aed9 	bne.w	8005bd4 <_strtod_l+0xc4>
 8005e22:	499f      	ldr	r1, [pc, #636]	; (80060a0 <_strtod_l+0x590>)
 8005e24:	a817      	add	r0, sp, #92	; 0x5c
 8005e26:	f001 fe3d 	bl	8007aa4 <__match>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	f43f aed2 	beq.w	8005bd4 <_strtod_l+0xc4>
 8005e30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b28      	cmp	r3, #40	; 0x28
 8005e36:	d12d      	bne.n	8005e94 <_strtod_l+0x384>
 8005e38:	499a      	ldr	r1, [pc, #616]	; (80060a4 <_strtod_l+0x594>)
 8005e3a:	aa1a      	add	r2, sp, #104	; 0x68
 8005e3c:	a817      	add	r0, sp, #92	; 0x5c
 8005e3e:	f001 fe45 	bl	8007acc <__hexnan>
 8005e42:	2805      	cmp	r0, #5
 8005e44:	d126      	bne.n	8005e94 <_strtod_l+0x384>
 8005e46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005e4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005e50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005e54:	e6a0      	b.n	8005b98 <_strtod_l+0x88>
 8005e56:	210a      	movs	r1, #10
 8005e58:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005e5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005e60:	e7b9      	b.n	8005dd6 <_strtod_l+0x2c6>
 8005e62:	2a6e      	cmp	r2, #110	; 0x6e
 8005e64:	e7db      	b.n	8005e1e <_strtod_l+0x30e>
 8005e66:	4990      	ldr	r1, [pc, #576]	; (80060a8 <_strtod_l+0x598>)
 8005e68:	a817      	add	r0, sp, #92	; 0x5c
 8005e6a:	f001 fe1b 	bl	8007aa4 <__match>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	f43f aeb0 	beq.w	8005bd4 <_strtod_l+0xc4>
 8005e74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e76:	498d      	ldr	r1, [pc, #564]	; (80060ac <_strtod_l+0x59c>)
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	a817      	add	r0, sp, #92	; 0x5c
 8005e7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e7e:	f001 fe11 	bl	8007aa4 <__match>
 8005e82:	b910      	cbnz	r0, 8005e8a <_strtod_l+0x37a>
 8005e84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e86:	3301      	adds	r3, #1
 8005e88:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e8a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80060bc <_strtod_l+0x5ac>
 8005e8e:	f04f 0a00 	mov.w	sl, #0
 8005e92:	e681      	b.n	8005b98 <_strtod_l+0x88>
 8005e94:	4886      	ldr	r0, [pc, #536]	; (80060b0 <_strtod_l+0x5a0>)
 8005e96:	f002 fde7 	bl	8008a68 <nan>
 8005e9a:	ec5b ab10 	vmov	sl, fp, d0
 8005e9e:	e67b      	b.n	8005b98 <_strtod_l+0x88>
 8005ea0:	9b05      	ldr	r3, [sp, #20]
 8005ea2:	9807      	ldr	r0, [sp, #28]
 8005ea4:	1af3      	subs	r3, r6, r3
 8005ea6:	2f00      	cmp	r7, #0
 8005ea8:	bf08      	it	eq
 8005eaa:	462f      	moveq	r7, r5
 8005eac:	2d10      	cmp	r5, #16
 8005eae:	9306      	str	r3, [sp, #24]
 8005eb0:	46a8      	mov	r8, r5
 8005eb2:	bfa8      	it	ge
 8005eb4:	f04f 0810 	movge.w	r8, #16
 8005eb8:	f7fa fb2c 	bl	8000514 <__aeabi_ui2d>
 8005ebc:	2d09      	cmp	r5, #9
 8005ebe:	4682      	mov	sl, r0
 8005ec0:	468b      	mov	fp, r1
 8005ec2:	dd13      	ble.n	8005eec <_strtod_l+0x3dc>
 8005ec4:	4b7b      	ldr	r3, [pc, #492]	; (80060b4 <_strtod_l+0x5a4>)
 8005ec6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005eca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005ece:	f7fa fb9b 	bl	8000608 <__aeabi_dmul>
 8005ed2:	4682      	mov	sl, r0
 8005ed4:	4648      	mov	r0, r9
 8005ed6:	468b      	mov	fp, r1
 8005ed8:	f7fa fb1c 	bl	8000514 <__aeabi_ui2d>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4650      	mov	r0, sl
 8005ee2:	4659      	mov	r1, fp
 8005ee4:	f7fa f9da 	bl	800029c <__adddf3>
 8005ee8:	4682      	mov	sl, r0
 8005eea:	468b      	mov	fp, r1
 8005eec:	2d0f      	cmp	r5, #15
 8005eee:	dc38      	bgt.n	8005f62 <_strtod_l+0x452>
 8005ef0:	9b06      	ldr	r3, [sp, #24]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f43f ae50 	beq.w	8005b98 <_strtod_l+0x88>
 8005ef8:	dd24      	ble.n	8005f44 <_strtod_l+0x434>
 8005efa:	2b16      	cmp	r3, #22
 8005efc:	dc0b      	bgt.n	8005f16 <_strtod_l+0x406>
 8005efe:	496d      	ldr	r1, [pc, #436]	; (80060b4 <_strtod_l+0x5a4>)
 8005f00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f08:	4652      	mov	r2, sl
 8005f0a:	465b      	mov	r3, fp
 8005f0c:	f7fa fb7c 	bl	8000608 <__aeabi_dmul>
 8005f10:	4682      	mov	sl, r0
 8005f12:	468b      	mov	fp, r1
 8005f14:	e640      	b.n	8005b98 <_strtod_l+0x88>
 8005f16:	9a06      	ldr	r2, [sp, #24]
 8005f18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	db20      	blt.n	8005f62 <_strtod_l+0x452>
 8005f20:	4c64      	ldr	r4, [pc, #400]	; (80060b4 <_strtod_l+0x5a4>)
 8005f22:	f1c5 050f 	rsb	r5, r5, #15
 8005f26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005f2a:	4652      	mov	r2, sl
 8005f2c:	465b      	mov	r3, fp
 8005f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f32:	f7fa fb69 	bl	8000608 <__aeabi_dmul>
 8005f36:	9b06      	ldr	r3, [sp, #24]
 8005f38:	1b5d      	subs	r5, r3, r5
 8005f3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005f3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005f42:	e7e3      	b.n	8005f0c <_strtod_l+0x3fc>
 8005f44:	9b06      	ldr	r3, [sp, #24]
 8005f46:	3316      	adds	r3, #22
 8005f48:	db0b      	blt.n	8005f62 <_strtod_l+0x452>
 8005f4a:	9b05      	ldr	r3, [sp, #20]
 8005f4c:	1b9e      	subs	r6, r3, r6
 8005f4e:	4b59      	ldr	r3, [pc, #356]	; (80060b4 <_strtod_l+0x5a4>)
 8005f50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005f54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f58:	4650      	mov	r0, sl
 8005f5a:	4659      	mov	r1, fp
 8005f5c:	f7fa fc7e 	bl	800085c <__aeabi_ddiv>
 8005f60:	e7d6      	b.n	8005f10 <_strtod_l+0x400>
 8005f62:	9b06      	ldr	r3, [sp, #24]
 8005f64:	eba5 0808 	sub.w	r8, r5, r8
 8005f68:	4498      	add	r8, r3
 8005f6a:	f1b8 0f00 	cmp.w	r8, #0
 8005f6e:	dd74      	ble.n	800605a <_strtod_l+0x54a>
 8005f70:	f018 030f 	ands.w	r3, r8, #15
 8005f74:	d00a      	beq.n	8005f8c <_strtod_l+0x47c>
 8005f76:	494f      	ldr	r1, [pc, #316]	; (80060b4 <_strtod_l+0x5a4>)
 8005f78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f7c:	4652      	mov	r2, sl
 8005f7e:	465b      	mov	r3, fp
 8005f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f84:	f7fa fb40 	bl	8000608 <__aeabi_dmul>
 8005f88:	4682      	mov	sl, r0
 8005f8a:	468b      	mov	fp, r1
 8005f8c:	f038 080f 	bics.w	r8, r8, #15
 8005f90:	d04f      	beq.n	8006032 <_strtod_l+0x522>
 8005f92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005f96:	dd22      	ble.n	8005fde <_strtod_l+0x4ce>
 8005f98:	2500      	movs	r5, #0
 8005f9a:	462e      	mov	r6, r5
 8005f9c:	9507      	str	r5, [sp, #28]
 8005f9e:	9505      	str	r5, [sp, #20]
 8005fa0:	2322      	movs	r3, #34	; 0x22
 8005fa2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80060bc <_strtod_l+0x5ac>
 8005fa6:	6023      	str	r3, [r4, #0]
 8005fa8:	f04f 0a00 	mov.w	sl, #0
 8005fac:	9b07      	ldr	r3, [sp, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f43f adf2 	beq.w	8005b98 <_strtod_l+0x88>
 8005fb4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f001 fe82 	bl	8007cc0 <_Bfree>
 8005fbc:	9905      	ldr	r1, [sp, #20]
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f001 fe7e 	bl	8007cc0 <_Bfree>
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f001 fe7a 	bl	8007cc0 <_Bfree>
 8005fcc:	9907      	ldr	r1, [sp, #28]
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f001 fe76 	bl	8007cc0 <_Bfree>
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f001 fe72 	bl	8007cc0 <_Bfree>
 8005fdc:	e5dc      	b.n	8005b98 <_strtod_l+0x88>
 8005fde:	4b36      	ldr	r3, [pc, #216]	; (80060b8 <_strtod_l+0x5a8>)
 8005fe0:	9304      	str	r3, [sp, #16]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005fe8:	4650      	mov	r0, sl
 8005fea:	4659      	mov	r1, fp
 8005fec:	4699      	mov	r9, r3
 8005fee:	f1b8 0f01 	cmp.w	r8, #1
 8005ff2:	dc21      	bgt.n	8006038 <_strtod_l+0x528>
 8005ff4:	b10b      	cbz	r3, 8005ffa <_strtod_l+0x4ea>
 8005ff6:	4682      	mov	sl, r0
 8005ff8:	468b      	mov	fp, r1
 8005ffa:	4b2f      	ldr	r3, [pc, #188]	; (80060b8 <_strtod_l+0x5a8>)
 8005ffc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006000:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006004:	4652      	mov	r2, sl
 8006006:	465b      	mov	r3, fp
 8006008:	e9d9 0100 	ldrd	r0, r1, [r9]
 800600c:	f7fa fafc 	bl	8000608 <__aeabi_dmul>
 8006010:	4b2a      	ldr	r3, [pc, #168]	; (80060bc <_strtod_l+0x5ac>)
 8006012:	460a      	mov	r2, r1
 8006014:	400b      	ands	r3, r1
 8006016:	492a      	ldr	r1, [pc, #168]	; (80060c0 <_strtod_l+0x5b0>)
 8006018:	428b      	cmp	r3, r1
 800601a:	4682      	mov	sl, r0
 800601c:	d8bc      	bhi.n	8005f98 <_strtod_l+0x488>
 800601e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006022:	428b      	cmp	r3, r1
 8006024:	bf86      	itte	hi
 8006026:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80060c4 <_strtod_l+0x5b4>
 800602a:	f04f 3aff 	movhi.w	sl, #4294967295
 800602e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006032:	2300      	movs	r3, #0
 8006034:	9304      	str	r3, [sp, #16]
 8006036:	e084      	b.n	8006142 <_strtod_l+0x632>
 8006038:	f018 0f01 	tst.w	r8, #1
 800603c:	d005      	beq.n	800604a <_strtod_l+0x53a>
 800603e:	9b04      	ldr	r3, [sp, #16]
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f7fa fae0 	bl	8000608 <__aeabi_dmul>
 8006048:	2301      	movs	r3, #1
 800604a:	9a04      	ldr	r2, [sp, #16]
 800604c:	3208      	adds	r2, #8
 800604e:	f109 0901 	add.w	r9, r9, #1
 8006052:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006056:	9204      	str	r2, [sp, #16]
 8006058:	e7c9      	b.n	8005fee <_strtod_l+0x4de>
 800605a:	d0ea      	beq.n	8006032 <_strtod_l+0x522>
 800605c:	f1c8 0800 	rsb	r8, r8, #0
 8006060:	f018 020f 	ands.w	r2, r8, #15
 8006064:	d00a      	beq.n	800607c <_strtod_l+0x56c>
 8006066:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <_strtod_l+0x5a4>)
 8006068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800606c:	4650      	mov	r0, sl
 800606e:	4659      	mov	r1, fp
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f7fa fbf2 	bl	800085c <__aeabi_ddiv>
 8006078:	4682      	mov	sl, r0
 800607a:	468b      	mov	fp, r1
 800607c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006080:	d0d7      	beq.n	8006032 <_strtod_l+0x522>
 8006082:	f1b8 0f1f 	cmp.w	r8, #31
 8006086:	dd1f      	ble.n	80060c8 <_strtod_l+0x5b8>
 8006088:	2500      	movs	r5, #0
 800608a:	462e      	mov	r6, r5
 800608c:	9507      	str	r5, [sp, #28]
 800608e:	9505      	str	r5, [sp, #20]
 8006090:	2322      	movs	r3, #34	; 0x22
 8006092:	f04f 0a00 	mov.w	sl, #0
 8006096:	f04f 0b00 	mov.w	fp, #0
 800609a:	6023      	str	r3, [r4, #0]
 800609c:	e786      	b.n	8005fac <_strtod_l+0x49c>
 800609e:	bf00      	nop
 80060a0:	08009e09 	.word	0x08009e09
 80060a4:	08009e4c 	.word	0x08009e4c
 80060a8:	08009e01 	.word	0x08009e01
 80060ac:	08009f8c 	.word	0x08009f8c
 80060b0:	0800a238 	.word	0x0800a238
 80060b4:	0800a118 	.word	0x0800a118
 80060b8:	0800a0f0 	.word	0x0800a0f0
 80060bc:	7ff00000 	.word	0x7ff00000
 80060c0:	7ca00000 	.word	0x7ca00000
 80060c4:	7fefffff 	.word	0x7fefffff
 80060c8:	f018 0310 	ands.w	r3, r8, #16
 80060cc:	bf18      	it	ne
 80060ce:	236a      	movne	r3, #106	; 0x6a
 80060d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006480 <_strtod_l+0x970>
 80060d4:	9304      	str	r3, [sp, #16]
 80060d6:	4650      	mov	r0, sl
 80060d8:	4659      	mov	r1, fp
 80060da:	2300      	movs	r3, #0
 80060dc:	f018 0f01 	tst.w	r8, #1
 80060e0:	d004      	beq.n	80060ec <_strtod_l+0x5dc>
 80060e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80060e6:	f7fa fa8f 	bl	8000608 <__aeabi_dmul>
 80060ea:	2301      	movs	r3, #1
 80060ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80060f0:	f109 0908 	add.w	r9, r9, #8
 80060f4:	d1f2      	bne.n	80060dc <_strtod_l+0x5cc>
 80060f6:	b10b      	cbz	r3, 80060fc <_strtod_l+0x5ec>
 80060f8:	4682      	mov	sl, r0
 80060fa:	468b      	mov	fp, r1
 80060fc:	9b04      	ldr	r3, [sp, #16]
 80060fe:	b1c3      	cbz	r3, 8006132 <_strtod_l+0x622>
 8006100:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006104:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006108:	2b00      	cmp	r3, #0
 800610a:	4659      	mov	r1, fp
 800610c:	dd11      	ble.n	8006132 <_strtod_l+0x622>
 800610e:	2b1f      	cmp	r3, #31
 8006110:	f340 8124 	ble.w	800635c <_strtod_l+0x84c>
 8006114:	2b34      	cmp	r3, #52	; 0x34
 8006116:	bfde      	ittt	le
 8006118:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800611c:	f04f 33ff 	movle.w	r3, #4294967295
 8006120:	fa03 f202 	lslle.w	r2, r3, r2
 8006124:	f04f 0a00 	mov.w	sl, #0
 8006128:	bfcc      	ite	gt
 800612a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800612e:	ea02 0b01 	andle.w	fp, r2, r1
 8006132:	2200      	movs	r2, #0
 8006134:	2300      	movs	r3, #0
 8006136:	4650      	mov	r0, sl
 8006138:	4659      	mov	r1, fp
 800613a:	f7fa fccd 	bl	8000ad8 <__aeabi_dcmpeq>
 800613e:	2800      	cmp	r0, #0
 8006140:	d1a2      	bne.n	8006088 <_strtod_l+0x578>
 8006142:	9b07      	ldr	r3, [sp, #28]
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	9908      	ldr	r1, [sp, #32]
 8006148:	462b      	mov	r3, r5
 800614a:	463a      	mov	r2, r7
 800614c:	4620      	mov	r0, r4
 800614e:	f001 fe1f 	bl	8007d90 <__s2b>
 8006152:	9007      	str	r0, [sp, #28]
 8006154:	2800      	cmp	r0, #0
 8006156:	f43f af1f 	beq.w	8005f98 <_strtod_l+0x488>
 800615a:	9b05      	ldr	r3, [sp, #20]
 800615c:	1b9e      	subs	r6, r3, r6
 800615e:	9b06      	ldr	r3, [sp, #24]
 8006160:	2b00      	cmp	r3, #0
 8006162:	bfb4      	ite	lt
 8006164:	4633      	movlt	r3, r6
 8006166:	2300      	movge	r3, #0
 8006168:	930c      	str	r3, [sp, #48]	; 0x30
 800616a:	9b06      	ldr	r3, [sp, #24]
 800616c:	2500      	movs	r5, #0
 800616e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006172:	9312      	str	r3, [sp, #72]	; 0x48
 8006174:	462e      	mov	r6, r5
 8006176:	9b07      	ldr	r3, [sp, #28]
 8006178:	4620      	mov	r0, r4
 800617a:	6859      	ldr	r1, [r3, #4]
 800617c:	f001 fd60 	bl	8007c40 <_Balloc>
 8006180:	9005      	str	r0, [sp, #20]
 8006182:	2800      	cmp	r0, #0
 8006184:	f43f af0c 	beq.w	8005fa0 <_strtod_l+0x490>
 8006188:	9b07      	ldr	r3, [sp, #28]
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	3202      	adds	r2, #2
 800618e:	f103 010c 	add.w	r1, r3, #12
 8006192:	0092      	lsls	r2, r2, #2
 8006194:	300c      	adds	r0, #12
 8006196:	f7fe fd99 	bl	8004ccc <memcpy>
 800619a:	ec4b ab10 	vmov	d0, sl, fp
 800619e:	aa1a      	add	r2, sp, #104	; 0x68
 80061a0:	a919      	add	r1, sp, #100	; 0x64
 80061a2:	4620      	mov	r0, r4
 80061a4:	f002 f93a 	bl	800841c <__d2b>
 80061a8:	ec4b ab18 	vmov	d8, sl, fp
 80061ac:	9018      	str	r0, [sp, #96]	; 0x60
 80061ae:	2800      	cmp	r0, #0
 80061b0:	f43f aef6 	beq.w	8005fa0 <_strtod_l+0x490>
 80061b4:	2101      	movs	r1, #1
 80061b6:	4620      	mov	r0, r4
 80061b8:	f001 fe84 	bl	8007ec4 <__i2b>
 80061bc:	4606      	mov	r6, r0
 80061be:	2800      	cmp	r0, #0
 80061c0:	f43f aeee 	beq.w	8005fa0 <_strtod_l+0x490>
 80061c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061c6:	9904      	ldr	r1, [sp, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bfab      	itete	ge
 80061cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80061ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80061d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80061d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80061d6:	bfac      	ite	ge
 80061d8:	eb03 0902 	addge.w	r9, r3, r2
 80061dc:	1ad7      	sublt	r7, r2, r3
 80061de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80061e0:	eba3 0801 	sub.w	r8, r3, r1
 80061e4:	4490      	add	r8, r2
 80061e6:	4ba1      	ldr	r3, [pc, #644]	; (800646c <_strtod_l+0x95c>)
 80061e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80061ec:	4598      	cmp	r8, r3
 80061ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80061f2:	f280 80c7 	bge.w	8006384 <_strtod_l+0x874>
 80061f6:	eba3 0308 	sub.w	r3, r3, r8
 80061fa:	2b1f      	cmp	r3, #31
 80061fc:	eba2 0203 	sub.w	r2, r2, r3
 8006200:	f04f 0101 	mov.w	r1, #1
 8006204:	f300 80b1 	bgt.w	800636a <_strtod_l+0x85a>
 8006208:	fa01 f303 	lsl.w	r3, r1, r3
 800620c:	930d      	str	r3, [sp, #52]	; 0x34
 800620e:	2300      	movs	r3, #0
 8006210:	9308      	str	r3, [sp, #32]
 8006212:	eb09 0802 	add.w	r8, r9, r2
 8006216:	9b04      	ldr	r3, [sp, #16]
 8006218:	45c1      	cmp	r9, r8
 800621a:	4417      	add	r7, r2
 800621c:	441f      	add	r7, r3
 800621e:	464b      	mov	r3, r9
 8006220:	bfa8      	it	ge
 8006222:	4643      	movge	r3, r8
 8006224:	42bb      	cmp	r3, r7
 8006226:	bfa8      	it	ge
 8006228:	463b      	movge	r3, r7
 800622a:	2b00      	cmp	r3, #0
 800622c:	bfc2      	ittt	gt
 800622e:	eba8 0803 	subgt.w	r8, r8, r3
 8006232:	1aff      	subgt	r7, r7, r3
 8006234:	eba9 0903 	subgt.w	r9, r9, r3
 8006238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800623a:	2b00      	cmp	r3, #0
 800623c:	dd17      	ble.n	800626e <_strtod_l+0x75e>
 800623e:	4631      	mov	r1, r6
 8006240:	461a      	mov	r2, r3
 8006242:	4620      	mov	r0, r4
 8006244:	f001 fefe 	bl	8008044 <__pow5mult>
 8006248:	4606      	mov	r6, r0
 800624a:	2800      	cmp	r0, #0
 800624c:	f43f aea8 	beq.w	8005fa0 <_strtod_l+0x490>
 8006250:	4601      	mov	r1, r0
 8006252:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006254:	4620      	mov	r0, r4
 8006256:	f001 fe4b 	bl	8007ef0 <__multiply>
 800625a:	900b      	str	r0, [sp, #44]	; 0x2c
 800625c:	2800      	cmp	r0, #0
 800625e:	f43f ae9f 	beq.w	8005fa0 <_strtod_l+0x490>
 8006262:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006264:	4620      	mov	r0, r4
 8006266:	f001 fd2b 	bl	8007cc0 <_Bfree>
 800626a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800626c:	9318      	str	r3, [sp, #96]	; 0x60
 800626e:	f1b8 0f00 	cmp.w	r8, #0
 8006272:	f300 808c 	bgt.w	800638e <_strtod_l+0x87e>
 8006276:	9b06      	ldr	r3, [sp, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	dd08      	ble.n	800628e <_strtod_l+0x77e>
 800627c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800627e:	9905      	ldr	r1, [sp, #20]
 8006280:	4620      	mov	r0, r4
 8006282:	f001 fedf 	bl	8008044 <__pow5mult>
 8006286:	9005      	str	r0, [sp, #20]
 8006288:	2800      	cmp	r0, #0
 800628a:	f43f ae89 	beq.w	8005fa0 <_strtod_l+0x490>
 800628e:	2f00      	cmp	r7, #0
 8006290:	dd08      	ble.n	80062a4 <_strtod_l+0x794>
 8006292:	9905      	ldr	r1, [sp, #20]
 8006294:	463a      	mov	r2, r7
 8006296:	4620      	mov	r0, r4
 8006298:	f001 ff2e 	bl	80080f8 <__lshift>
 800629c:	9005      	str	r0, [sp, #20]
 800629e:	2800      	cmp	r0, #0
 80062a0:	f43f ae7e 	beq.w	8005fa0 <_strtod_l+0x490>
 80062a4:	f1b9 0f00 	cmp.w	r9, #0
 80062a8:	dd08      	ble.n	80062bc <_strtod_l+0x7ac>
 80062aa:	4631      	mov	r1, r6
 80062ac:	464a      	mov	r2, r9
 80062ae:	4620      	mov	r0, r4
 80062b0:	f001 ff22 	bl	80080f8 <__lshift>
 80062b4:	4606      	mov	r6, r0
 80062b6:	2800      	cmp	r0, #0
 80062b8:	f43f ae72 	beq.w	8005fa0 <_strtod_l+0x490>
 80062bc:	9a05      	ldr	r2, [sp, #20]
 80062be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80062c0:	4620      	mov	r0, r4
 80062c2:	f001 ffa5 	bl	8008210 <__mdiff>
 80062c6:	4605      	mov	r5, r0
 80062c8:	2800      	cmp	r0, #0
 80062ca:	f43f ae69 	beq.w	8005fa0 <_strtod_l+0x490>
 80062ce:	68c3      	ldr	r3, [r0, #12]
 80062d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80062d2:	2300      	movs	r3, #0
 80062d4:	60c3      	str	r3, [r0, #12]
 80062d6:	4631      	mov	r1, r6
 80062d8:	f001 ff7e 	bl	80081d8 <__mcmp>
 80062dc:	2800      	cmp	r0, #0
 80062de:	da60      	bge.n	80063a2 <_strtod_l+0x892>
 80062e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e2:	ea53 030a 	orrs.w	r3, r3, sl
 80062e6:	f040 8082 	bne.w	80063ee <_strtod_l+0x8de>
 80062ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d17d      	bne.n	80063ee <_strtod_l+0x8de>
 80062f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80062f6:	0d1b      	lsrs	r3, r3, #20
 80062f8:	051b      	lsls	r3, r3, #20
 80062fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80062fe:	d976      	bls.n	80063ee <_strtod_l+0x8de>
 8006300:	696b      	ldr	r3, [r5, #20]
 8006302:	b913      	cbnz	r3, 800630a <_strtod_l+0x7fa>
 8006304:	692b      	ldr	r3, [r5, #16]
 8006306:	2b01      	cmp	r3, #1
 8006308:	dd71      	ble.n	80063ee <_strtod_l+0x8de>
 800630a:	4629      	mov	r1, r5
 800630c:	2201      	movs	r2, #1
 800630e:	4620      	mov	r0, r4
 8006310:	f001 fef2 	bl	80080f8 <__lshift>
 8006314:	4631      	mov	r1, r6
 8006316:	4605      	mov	r5, r0
 8006318:	f001 ff5e 	bl	80081d8 <__mcmp>
 800631c:	2800      	cmp	r0, #0
 800631e:	dd66      	ble.n	80063ee <_strtod_l+0x8de>
 8006320:	9904      	ldr	r1, [sp, #16]
 8006322:	4a53      	ldr	r2, [pc, #332]	; (8006470 <_strtod_l+0x960>)
 8006324:	465b      	mov	r3, fp
 8006326:	2900      	cmp	r1, #0
 8006328:	f000 8081 	beq.w	800642e <_strtod_l+0x91e>
 800632c:	ea02 010b 	and.w	r1, r2, fp
 8006330:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006334:	dc7b      	bgt.n	800642e <_strtod_l+0x91e>
 8006336:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800633a:	f77f aea9 	ble.w	8006090 <_strtod_l+0x580>
 800633e:	4b4d      	ldr	r3, [pc, #308]	; (8006474 <_strtod_l+0x964>)
 8006340:	4650      	mov	r0, sl
 8006342:	4659      	mov	r1, fp
 8006344:	2200      	movs	r2, #0
 8006346:	f7fa f95f 	bl	8000608 <__aeabi_dmul>
 800634a:	460b      	mov	r3, r1
 800634c:	4303      	orrs	r3, r0
 800634e:	bf08      	it	eq
 8006350:	2322      	moveq	r3, #34	; 0x22
 8006352:	4682      	mov	sl, r0
 8006354:	468b      	mov	fp, r1
 8006356:	bf08      	it	eq
 8006358:	6023      	streq	r3, [r4, #0]
 800635a:	e62b      	b.n	8005fb4 <_strtod_l+0x4a4>
 800635c:	f04f 32ff 	mov.w	r2, #4294967295
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	ea03 0a0a 	and.w	sl, r3, sl
 8006368:	e6e3      	b.n	8006132 <_strtod_l+0x622>
 800636a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800636e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006372:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006376:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800637a:	fa01 f308 	lsl.w	r3, r1, r8
 800637e:	9308      	str	r3, [sp, #32]
 8006380:	910d      	str	r1, [sp, #52]	; 0x34
 8006382:	e746      	b.n	8006212 <_strtod_l+0x702>
 8006384:	2300      	movs	r3, #0
 8006386:	9308      	str	r3, [sp, #32]
 8006388:	2301      	movs	r3, #1
 800638a:	930d      	str	r3, [sp, #52]	; 0x34
 800638c:	e741      	b.n	8006212 <_strtod_l+0x702>
 800638e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006390:	4642      	mov	r2, r8
 8006392:	4620      	mov	r0, r4
 8006394:	f001 feb0 	bl	80080f8 <__lshift>
 8006398:	9018      	str	r0, [sp, #96]	; 0x60
 800639a:	2800      	cmp	r0, #0
 800639c:	f47f af6b 	bne.w	8006276 <_strtod_l+0x766>
 80063a0:	e5fe      	b.n	8005fa0 <_strtod_l+0x490>
 80063a2:	465f      	mov	r7, fp
 80063a4:	d16e      	bne.n	8006484 <_strtod_l+0x974>
 80063a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063ac:	b342      	cbz	r2, 8006400 <_strtod_l+0x8f0>
 80063ae:	4a32      	ldr	r2, [pc, #200]	; (8006478 <_strtod_l+0x968>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d128      	bne.n	8006406 <_strtod_l+0x8f6>
 80063b4:	9b04      	ldr	r3, [sp, #16]
 80063b6:	4651      	mov	r1, sl
 80063b8:	b1eb      	cbz	r3, 80063f6 <_strtod_l+0x8e6>
 80063ba:	4b2d      	ldr	r3, [pc, #180]	; (8006470 <_strtod_l+0x960>)
 80063bc:	403b      	ands	r3, r7
 80063be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80063c2:	f04f 32ff 	mov.w	r2, #4294967295
 80063c6:	d819      	bhi.n	80063fc <_strtod_l+0x8ec>
 80063c8:	0d1b      	lsrs	r3, r3, #20
 80063ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	4299      	cmp	r1, r3
 80063d4:	d117      	bne.n	8006406 <_strtod_l+0x8f6>
 80063d6:	4b29      	ldr	r3, [pc, #164]	; (800647c <_strtod_l+0x96c>)
 80063d8:	429f      	cmp	r7, r3
 80063da:	d102      	bne.n	80063e2 <_strtod_l+0x8d2>
 80063dc:	3101      	adds	r1, #1
 80063de:	f43f addf 	beq.w	8005fa0 <_strtod_l+0x490>
 80063e2:	4b23      	ldr	r3, [pc, #140]	; (8006470 <_strtod_l+0x960>)
 80063e4:	403b      	ands	r3, r7
 80063e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80063ea:	f04f 0a00 	mov.w	sl, #0
 80063ee:	9b04      	ldr	r3, [sp, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1a4      	bne.n	800633e <_strtod_l+0x82e>
 80063f4:	e5de      	b.n	8005fb4 <_strtod_l+0x4a4>
 80063f6:	f04f 33ff 	mov.w	r3, #4294967295
 80063fa:	e7ea      	b.n	80063d2 <_strtod_l+0x8c2>
 80063fc:	4613      	mov	r3, r2
 80063fe:	e7e8      	b.n	80063d2 <_strtod_l+0x8c2>
 8006400:	ea53 030a 	orrs.w	r3, r3, sl
 8006404:	d08c      	beq.n	8006320 <_strtod_l+0x810>
 8006406:	9b08      	ldr	r3, [sp, #32]
 8006408:	b1db      	cbz	r3, 8006442 <_strtod_l+0x932>
 800640a:	423b      	tst	r3, r7
 800640c:	d0ef      	beq.n	80063ee <_strtod_l+0x8de>
 800640e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006410:	9a04      	ldr	r2, [sp, #16]
 8006412:	4650      	mov	r0, sl
 8006414:	4659      	mov	r1, fp
 8006416:	b1c3      	cbz	r3, 800644a <_strtod_l+0x93a>
 8006418:	f7ff fb5c 	bl	8005ad4 <sulp>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	ec51 0b18 	vmov	r0, r1, d8
 8006424:	f7f9 ff3a 	bl	800029c <__adddf3>
 8006428:	4682      	mov	sl, r0
 800642a:	468b      	mov	fp, r1
 800642c:	e7df      	b.n	80063ee <_strtod_l+0x8de>
 800642e:	4013      	ands	r3, r2
 8006430:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006434:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006438:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800643c:	f04f 3aff 	mov.w	sl, #4294967295
 8006440:	e7d5      	b.n	80063ee <_strtod_l+0x8de>
 8006442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006444:	ea13 0f0a 	tst.w	r3, sl
 8006448:	e7e0      	b.n	800640c <_strtod_l+0x8fc>
 800644a:	f7ff fb43 	bl	8005ad4 <sulp>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	ec51 0b18 	vmov	r0, r1, d8
 8006456:	f7f9 ff1f 	bl	8000298 <__aeabi_dsub>
 800645a:	2200      	movs	r2, #0
 800645c:	2300      	movs	r3, #0
 800645e:	4682      	mov	sl, r0
 8006460:	468b      	mov	fp, r1
 8006462:	f7fa fb39 	bl	8000ad8 <__aeabi_dcmpeq>
 8006466:	2800      	cmp	r0, #0
 8006468:	d0c1      	beq.n	80063ee <_strtod_l+0x8de>
 800646a:	e611      	b.n	8006090 <_strtod_l+0x580>
 800646c:	fffffc02 	.word	0xfffffc02
 8006470:	7ff00000 	.word	0x7ff00000
 8006474:	39500000 	.word	0x39500000
 8006478:	000fffff 	.word	0x000fffff
 800647c:	7fefffff 	.word	0x7fefffff
 8006480:	08009e60 	.word	0x08009e60
 8006484:	4631      	mov	r1, r6
 8006486:	4628      	mov	r0, r5
 8006488:	f002 f824 	bl	80084d4 <__ratio>
 800648c:	ec59 8b10 	vmov	r8, r9, d0
 8006490:	ee10 0a10 	vmov	r0, s0
 8006494:	2200      	movs	r2, #0
 8006496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800649a:	4649      	mov	r1, r9
 800649c:	f7fa fb30 	bl	8000b00 <__aeabi_dcmple>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d07a      	beq.n	800659a <_strtod_l+0xa8a>
 80064a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d04a      	beq.n	8006540 <_strtod_l+0xa30>
 80064aa:	4b95      	ldr	r3, [pc, #596]	; (8006700 <_strtod_l+0xbf0>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80064b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006700 <_strtod_l+0xbf0>
 80064b6:	f04f 0800 	mov.w	r8, #0
 80064ba:	4b92      	ldr	r3, [pc, #584]	; (8006704 <_strtod_l+0xbf4>)
 80064bc:	403b      	ands	r3, r7
 80064be:	930d      	str	r3, [sp, #52]	; 0x34
 80064c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064c2:	4b91      	ldr	r3, [pc, #580]	; (8006708 <_strtod_l+0xbf8>)
 80064c4:	429a      	cmp	r2, r3
 80064c6:	f040 80b0 	bne.w	800662a <_strtod_l+0xb1a>
 80064ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80064ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80064d2:	ec4b ab10 	vmov	d0, sl, fp
 80064d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80064da:	f001 ff23 	bl	8008324 <__ulp>
 80064de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80064e2:	ec53 2b10 	vmov	r2, r3, d0
 80064e6:	f7fa f88f 	bl	8000608 <__aeabi_dmul>
 80064ea:	4652      	mov	r2, sl
 80064ec:	465b      	mov	r3, fp
 80064ee:	f7f9 fed5 	bl	800029c <__adddf3>
 80064f2:	460b      	mov	r3, r1
 80064f4:	4983      	ldr	r1, [pc, #524]	; (8006704 <_strtod_l+0xbf4>)
 80064f6:	4a85      	ldr	r2, [pc, #532]	; (800670c <_strtod_l+0xbfc>)
 80064f8:	4019      	ands	r1, r3
 80064fa:	4291      	cmp	r1, r2
 80064fc:	4682      	mov	sl, r0
 80064fe:	d960      	bls.n	80065c2 <_strtod_l+0xab2>
 8006500:	ee18 3a90 	vmov	r3, s17
 8006504:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006508:	4293      	cmp	r3, r2
 800650a:	d104      	bne.n	8006516 <_strtod_l+0xa06>
 800650c:	ee18 3a10 	vmov	r3, s16
 8006510:	3301      	adds	r3, #1
 8006512:	f43f ad45 	beq.w	8005fa0 <_strtod_l+0x490>
 8006516:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006718 <_strtod_l+0xc08>
 800651a:	f04f 3aff 	mov.w	sl, #4294967295
 800651e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006520:	4620      	mov	r0, r4
 8006522:	f001 fbcd 	bl	8007cc0 <_Bfree>
 8006526:	9905      	ldr	r1, [sp, #20]
 8006528:	4620      	mov	r0, r4
 800652a:	f001 fbc9 	bl	8007cc0 <_Bfree>
 800652e:	4631      	mov	r1, r6
 8006530:	4620      	mov	r0, r4
 8006532:	f001 fbc5 	bl	8007cc0 <_Bfree>
 8006536:	4629      	mov	r1, r5
 8006538:	4620      	mov	r0, r4
 800653a:	f001 fbc1 	bl	8007cc0 <_Bfree>
 800653e:	e61a      	b.n	8006176 <_strtod_l+0x666>
 8006540:	f1ba 0f00 	cmp.w	sl, #0
 8006544:	d11b      	bne.n	800657e <_strtod_l+0xa6e>
 8006546:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800654a:	b9f3      	cbnz	r3, 800658a <_strtod_l+0xa7a>
 800654c:	4b6c      	ldr	r3, [pc, #432]	; (8006700 <_strtod_l+0xbf0>)
 800654e:	2200      	movs	r2, #0
 8006550:	4640      	mov	r0, r8
 8006552:	4649      	mov	r1, r9
 8006554:	f7fa faca 	bl	8000aec <__aeabi_dcmplt>
 8006558:	b9d0      	cbnz	r0, 8006590 <_strtod_l+0xa80>
 800655a:	4640      	mov	r0, r8
 800655c:	4649      	mov	r1, r9
 800655e:	4b6c      	ldr	r3, [pc, #432]	; (8006710 <_strtod_l+0xc00>)
 8006560:	2200      	movs	r2, #0
 8006562:	f7fa f851 	bl	8000608 <__aeabi_dmul>
 8006566:	4680      	mov	r8, r0
 8006568:	4689      	mov	r9, r1
 800656a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800656e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006572:	9315      	str	r3, [sp, #84]	; 0x54
 8006574:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006578:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800657c:	e79d      	b.n	80064ba <_strtod_l+0x9aa>
 800657e:	f1ba 0f01 	cmp.w	sl, #1
 8006582:	d102      	bne.n	800658a <_strtod_l+0xa7a>
 8006584:	2f00      	cmp	r7, #0
 8006586:	f43f ad83 	beq.w	8006090 <_strtod_l+0x580>
 800658a:	4b62      	ldr	r3, [pc, #392]	; (8006714 <_strtod_l+0xc04>)
 800658c:	2200      	movs	r2, #0
 800658e:	e78e      	b.n	80064ae <_strtod_l+0x99e>
 8006590:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006710 <_strtod_l+0xc00>
 8006594:	f04f 0800 	mov.w	r8, #0
 8006598:	e7e7      	b.n	800656a <_strtod_l+0xa5a>
 800659a:	4b5d      	ldr	r3, [pc, #372]	; (8006710 <_strtod_l+0xc00>)
 800659c:	4640      	mov	r0, r8
 800659e:	4649      	mov	r1, r9
 80065a0:	2200      	movs	r2, #0
 80065a2:	f7fa f831 	bl	8000608 <__aeabi_dmul>
 80065a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065a8:	4680      	mov	r8, r0
 80065aa:	4689      	mov	r9, r1
 80065ac:	b933      	cbnz	r3, 80065bc <_strtod_l+0xaac>
 80065ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065b2:	900e      	str	r0, [sp, #56]	; 0x38
 80065b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80065b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80065ba:	e7dd      	b.n	8006578 <_strtod_l+0xa68>
 80065bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80065c0:	e7f9      	b.n	80065b6 <_strtod_l+0xaa6>
 80065c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80065c6:	9b04      	ldr	r3, [sp, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1a8      	bne.n	800651e <_strtod_l+0xa0e>
 80065cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80065d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065d2:	0d1b      	lsrs	r3, r3, #20
 80065d4:	051b      	lsls	r3, r3, #20
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d1a1      	bne.n	800651e <_strtod_l+0xa0e>
 80065da:	4640      	mov	r0, r8
 80065dc:	4649      	mov	r1, r9
 80065de:	f7fa fb73 	bl	8000cc8 <__aeabi_d2lz>
 80065e2:	f7f9 ffe3 	bl	80005ac <__aeabi_l2d>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4640      	mov	r0, r8
 80065ec:	4649      	mov	r1, r9
 80065ee:	f7f9 fe53 	bl	8000298 <__aeabi_dsub>
 80065f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065f8:	ea43 030a 	orr.w	r3, r3, sl
 80065fc:	4313      	orrs	r3, r2
 80065fe:	4680      	mov	r8, r0
 8006600:	4689      	mov	r9, r1
 8006602:	d055      	beq.n	80066b0 <_strtod_l+0xba0>
 8006604:	a336      	add	r3, pc, #216	; (adr r3, 80066e0 <_strtod_l+0xbd0>)
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	f7fa fa6f 	bl	8000aec <__aeabi_dcmplt>
 800660e:	2800      	cmp	r0, #0
 8006610:	f47f acd0 	bne.w	8005fb4 <_strtod_l+0x4a4>
 8006614:	a334      	add	r3, pc, #208	; (adr r3, 80066e8 <_strtod_l+0xbd8>)
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	4640      	mov	r0, r8
 800661c:	4649      	mov	r1, r9
 800661e:	f7fa fa83 	bl	8000b28 <__aeabi_dcmpgt>
 8006622:	2800      	cmp	r0, #0
 8006624:	f43f af7b 	beq.w	800651e <_strtod_l+0xa0e>
 8006628:	e4c4      	b.n	8005fb4 <_strtod_l+0x4a4>
 800662a:	9b04      	ldr	r3, [sp, #16]
 800662c:	b333      	cbz	r3, 800667c <_strtod_l+0xb6c>
 800662e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006630:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006634:	d822      	bhi.n	800667c <_strtod_l+0xb6c>
 8006636:	a32e      	add	r3, pc, #184	; (adr r3, 80066f0 <_strtod_l+0xbe0>)
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	4640      	mov	r0, r8
 800663e:	4649      	mov	r1, r9
 8006640:	f7fa fa5e 	bl	8000b00 <__aeabi_dcmple>
 8006644:	b1a0      	cbz	r0, 8006670 <_strtod_l+0xb60>
 8006646:	4649      	mov	r1, r9
 8006648:	4640      	mov	r0, r8
 800664a:	f7fa fab5 	bl	8000bb8 <__aeabi_d2uiz>
 800664e:	2801      	cmp	r0, #1
 8006650:	bf38      	it	cc
 8006652:	2001      	movcc	r0, #1
 8006654:	f7f9 ff5e 	bl	8000514 <__aeabi_ui2d>
 8006658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800665a:	4680      	mov	r8, r0
 800665c:	4689      	mov	r9, r1
 800665e:	bb23      	cbnz	r3, 80066aa <_strtod_l+0xb9a>
 8006660:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006664:	9010      	str	r0, [sp, #64]	; 0x40
 8006666:	9311      	str	r3, [sp, #68]	; 0x44
 8006668:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800666c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006672:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006674:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006678:	1a9b      	subs	r3, r3, r2
 800667a:	9309      	str	r3, [sp, #36]	; 0x24
 800667c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006680:	eeb0 0a48 	vmov.f32	s0, s16
 8006684:	eef0 0a68 	vmov.f32	s1, s17
 8006688:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800668c:	f001 fe4a 	bl	8008324 <__ulp>
 8006690:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006694:	ec53 2b10 	vmov	r2, r3, d0
 8006698:	f7f9 ffb6 	bl	8000608 <__aeabi_dmul>
 800669c:	ec53 2b18 	vmov	r2, r3, d8
 80066a0:	f7f9 fdfc 	bl	800029c <__adddf3>
 80066a4:	4682      	mov	sl, r0
 80066a6:	468b      	mov	fp, r1
 80066a8:	e78d      	b.n	80065c6 <_strtod_l+0xab6>
 80066aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80066ae:	e7db      	b.n	8006668 <_strtod_l+0xb58>
 80066b0:	a311      	add	r3, pc, #68	; (adr r3, 80066f8 <_strtod_l+0xbe8>)
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	f7fa fa19 	bl	8000aec <__aeabi_dcmplt>
 80066ba:	e7b2      	b.n	8006622 <_strtod_l+0xb12>
 80066bc:	2300      	movs	r3, #0
 80066be:	930a      	str	r3, [sp, #40]	; 0x28
 80066c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	f7ff ba6b 	b.w	8005ba0 <_strtod_l+0x90>
 80066ca:	2a65      	cmp	r2, #101	; 0x65
 80066cc:	f43f ab5f 	beq.w	8005d8e <_strtod_l+0x27e>
 80066d0:	2a45      	cmp	r2, #69	; 0x45
 80066d2:	f43f ab5c 	beq.w	8005d8e <_strtod_l+0x27e>
 80066d6:	2301      	movs	r3, #1
 80066d8:	f7ff bb94 	b.w	8005e04 <_strtod_l+0x2f4>
 80066dc:	f3af 8000 	nop.w
 80066e0:	94a03595 	.word	0x94a03595
 80066e4:	3fdfffff 	.word	0x3fdfffff
 80066e8:	35afe535 	.word	0x35afe535
 80066ec:	3fe00000 	.word	0x3fe00000
 80066f0:	ffc00000 	.word	0xffc00000
 80066f4:	41dfffff 	.word	0x41dfffff
 80066f8:	94a03595 	.word	0x94a03595
 80066fc:	3fcfffff 	.word	0x3fcfffff
 8006700:	3ff00000 	.word	0x3ff00000
 8006704:	7ff00000 	.word	0x7ff00000
 8006708:	7fe00000 	.word	0x7fe00000
 800670c:	7c9fffff 	.word	0x7c9fffff
 8006710:	3fe00000 	.word	0x3fe00000
 8006714:	bff00000 	.word	0xbff00000
 8006718:	7fefffff 	.word	0x7fefffff

0800671c <_strtod_r>:
 800671c:	4b01      	ldr	r3, [pc, #4]	; (8006724 <_strtod_r+0x8>)
 800671e:	f7ff b9f7 	b.w	8005b10 <_strtod_l>
 8006722:	bf00      	nop
 8006724:	2000007c 	.word	0x2000007c

08006728 <_strtol_l.constprop.0>:
 8006728:	2b01      	cmp	r3, #1
 800672a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800672e:	d001      	beq.n	8006734 <_strtol_l.constprop.0+0xc>
 8006730:	2b24      	cmp	r3, #36	; 0x24
 8006732:	d906      	bls.n	8006742 <_strtol_l.constprop.0+0x1a>
 8006734:	f7fe faa0 	bl	8004c78 <__errno>
 8006738:	2316      	movs	r3, #22
 800673a:	6003      	str	r3, [r0, #0]
 800673c:	2000      	movs	r0, #0
 800673e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006742:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006828 <_strtol_l.constprop.0+0x100>
 8006746:	460d      	mov	r5, r1
 8006748:	462e      	mov	r6, r5
 800674a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800674e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006752:	f017 0708 	ands.w	r7, r7, #8
 8006756:	d1f7      	bne.n	8006748 <_strtol_l.constprop.0+0x20>
 8006758:	2c2d      	cmp	r4, #45	; 0x2d
 800675a:	d132      	bne.n	80067c2 <_strtol_l.constprop.0+0x9a>
 800675c:	782c      	ldrb	r4, [r5, #0]
 800675e:	2701      	movs	r7, #1
 8006760:	1cb5      	adds	r5, r6, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d05b      	beq.n	800681e <_strtol_l.constprop.0+0xf6>
 8006766:	2b10      	cmp	r3, #16
 8006768:	d109      	bne.n	800677e <_strtol_l.constprop.0+0x56>
 800676a:	2c30      	cmp	r4, #48	; 0x30
 800676c:	d107      	bne.n	800677e <_strtol_l.constprop.0+0x56>
 800676e:	782c      	ldrb	r4, [r5, #0]
 8006770:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006774:	2c58      	cmp	r4, #88	; 0x58
 8006776:	d14d      	bne.n	8006814 <_strtol_l.constprop.0+0xec>
 8006778:	786c      	ldrb	r4, [r5, #1]
 800677a:	2310      	movs	r3, #16
 800677c:	3502      	adds	r5, #2
 800677e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006782:	f108 38ff 	add.w	r8, r8, #4294967295
 8006786:	f04f 0c00 	mov.w	ip, #0
 800678a:	fbb8 f9f3 	udiv	r9, r8, r3
 800678e:	4666      	mov	r6, ip
 8006790:	fb03 8a19 	mls	sl, r3, r9, r8
 8006794:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006798:	f1be 0f09 	cmp.w	lr, #9
 800679c:	d816      	bhi.n	80067cc <_strtol_l.constprop.0+0xa4>
 800679e:	4674      	mov	r4, lr
 80067a0:	42a3      	cmp	r3, r4
 80067a2:	dd24      	ble.n	80067ee <_strtol_l.constprop.0+0xc6>
 80067a4:	f1bc 0f00 	cmp.w	ip, #0
 80067a8:	db1e      	blt.n	80067e8 <_strtol_l.constprop.0+0xc0>
 80067aa:	45b1      	cmp	r9, r6
 80067ac:	d31c      	bcc.n	80067e8 <_strtol_l.constprop.0+0xc0>
 80067ae:	d101      	bne.n	80067b4 <_strtol_l.constprop.0+0x8c>
 80067b0:	45a2      	cmp	sl, r4
 80067b2:	db19      	blt.n	80067e8 <_strtol_l.constprop.0+0xc0>
 80067b4:	fb06 4603 	mla	r6, r6, r3, r4
 80067b8:	f04f 0c01 	mov.w	ip, #1
 80067bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067c0:	e7e8      	b.n	8006794 <_strtol_l.constprop.0+0x6c>
 80067c2:	2c2b      	cmp	r4, #43	; 0x2b
 80067c4:	bf04      	itt	eq
 80067c6:	782c      	ldrbeq	r4, [r5, #0]
 80067c8:	1cb5      	addeq	r5, r6, #2
 80067ca:	e7ca      	b.n	8006762 <_strtol_l.constprop.0+0x3a>
 80067cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80067d0:	f1be 0f19 	cmp.w	lr, #25
 80067d4:	d801      	bhi.n	80067da <_strtol_l.constprop.0+0xb2>
 80067d6:	3c37      	subs	r4, #55	; 0x37
 80067d8:	e7e2      	b.n	80067a0 <_strtol_l.constprop.0+0x78>
 80067da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80067de:	f1be 0f19 	cmp.w	lr, #25
 80067e2:	d804      	bhi.n	80067ee <_strtol_l.constprop.0+0xc6>
 80067e4:	3c57      	subs	r4, #87	; 0x57
 80067e6:	e7db      	b.n	80067a0 <_strtol_l.constprop.0+0x78>
 80067e8:	f04f 3cff 	mov.w	ip, #4294967295
 80067ec:	e7e6      	b.n	80067bc <_strtol_l.constprop.0+0x94>
 80067ee:	f1bc 0f00 	cmp.w	ip, #0
 80067f2:	da05      	bge.n	8006800 <_strtol_l.constprop.0+0xd8>
 80067f4:	2322      	movs	r3, #34	; 0x22
 80067f6:	6003      	str	r3, [r0, #0]
 80067f8:	4646      	mov	r6, r8
 80067fa:	b942      	cbnz	r2, 800680e <_strtol_l.constprop.0+0xe6>
 80067fc:	4630      	mov	r0, r6
 80067fe:	e79e      	b.n	800673e <_strtol_l.constprop.0+0x16>
 8006800:	b107      	cbz	r7, 8006804 <_strtol_l.constprop.0+0xdc>
 8006802:	4276      	negs	r6, r6
 8006804:	2a00      	cmp	r2, #0
 8006806:	d0f9      	beq.n	80067fc <_strtol_l.constprop.0+0xd4>
 8006808:	f1bc 0f00 	cmp.w	ip, #0
 800680c:	d000      	beq.n	8006810 <_strtol_l.constprop.0+0xe8>
 800680e:	1e69      	subs	r1, r5, #1
 8006810:	6011      	str	r1, [r2, #0]
 8006812:	e7f3      	b.n	80067fc <_strtol_l.constprop.0+0xd4>
 8006814:	2430      	movs	r4, #48	; 0x30
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1b1      	bne.n	800677e <_strtol_l.constprop.0+0x56>
 800681a:	2308      	movs	r3, #8
 800681c:	e7af      	b.n	800677e <_strtol_l.constprop.0+0x56>
 800681e:	2c30      	cmp	r4, #48	; 0x30
 8006820:	d0a5      	beq.n	800676e <_strtol_l.constprop.0+0x46>
 8006822:	230a      	movs	r3, #10
 8006824:	e7ab      	b.n	800677e <_strtol_l.constprop.0+0x56>
 8006826:	bf00      	nop
 8006828:	08009e89 	.word	0x08009e89

0800682c <_strtol_r>:
 800682c:	f7ff bf7c 	b.w	8006728 <_strtol_l.constprop.0>

08006830 <quorem>:
 8006830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006834:	6903      	ldr	r3, [r0, #16]
 8006836:	690c      	ldr	r4, [r1, #16]
 8006838:	42a3      	cmp	r3, r4
 800683a:	4607      	mov	r7, r0
 800683c:	f2c0 8081 	blt.w	8006942 <quorem+0x112>
 8006840:	3c01      	subs	r4, #1
 8006842:	f101 0814 	add.w	r8, r1, #20
 8006846:	f100 0514 	add.w	r5, r0, #20
 800684a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006854:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006858:	3301      	adds	r3, #1
 800685a:	429a      	cmp	r2, r3
 800685c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006860:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006864:	fbb2 f6f3 	udiv	r6, r2, r3
 8006868:	d331      	bcc.n	80068ce <quorem+0x9e>
 800686a:	f04f 0e00 	mov.w	lr, #0
 800686e:	4640      	mov	r0, r8
 8006870:	46ac      	mov	ip, r5
 8006872:	46f2      	mov	sl, lr
 8006874:	f850 2b04 	ldr.w	r2, [r0], #4
 8006878:	b293      	uxth	r3, r2
 800687a:	fb06 e303 	mla	r3, r6, r3, lr
 800687e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006882:	b29b      	uxth	r3, r3
 8006884:	ebaa 0303 	sub.w	r3, sl, r3
 8006888:	f8dc a000 	ldr.w	sl, [ip]
 800688c:	0c12      	lsrs	r2, r2, #16
 800688e:	fa13 f38a 	uxtah	r3, r3, sl
 8006892:	fb06 e202 	mla	r2, r6, r2, lr
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	9b00      	ldr	r3, [sp, #0]
 800689a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800689e:	b292      	uxth	r2, r2
 80068a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80068a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80068ac:	4581      	cmp	r9, r0
 80068ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068b2:	f84c 3b04 	str.w	r3, [ip], #4
 80068b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80068ba:	d2db      	bcs.n	8006874 <quorem+0x44>
 80068bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80068c0:	b92b      	cbnz	r3, 80068ce <quorem+0x9e>
 80068c2:	9b01      	ldr	r3, [sp, #4]
 80068c4:	3b04      	subs	r3, #4
 80068c6:	429d      	cmp	r5, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	d32e      	bcc.n	800692a <quorem+0xfa>
 80068cc:	613c      	str	r4, [r7, #16]
 80068ce:	4638      	mov	r0, r7
 80068d0:	f001 fc82 	bl	80081d8 <__mcmp>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	db24      	blt.n	8006922 <quorem+0xf2>
 80068d8:	3601      	adds	r6, #1
 80068da:	4628      	mov	r0, r5
 80068dc:	f04f 0c00 	mov.w	ip, #0
 80068e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80068e4:	f8d0 e000 	ldr.w	lr, [r0]
 80068e8:	b293      	uxth	r3, r2
 80068ea:	ebac 0303 	sub.w	r3, ip, r3
 80068ee:	0c12      	lsrs	r2, r2, #16
 80068f0:	fa13 f38e 	uxtah	r3, r3, lr
 80068f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006902:	45c1      	cmp	r9, r8
 8006904:	f840 3b04 	str.w	r3, [r0], #4
 8006908:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800690c:	d2e8      	bcs.n	80068e0 <quorem+0xb0>
 800690e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006912:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006916:	b922      	cbnz	r2, 8006922 <quorem+0xf2>
 8006918:	3b04      	subs	r3, #4
 800691a:	429d      	cmp	r5, r3
 800691c:	461a      	mov	r2, r3
 800691e:	d30a      	bcc.n	8006936 <quorem+0x106>
 8006920:	613c      	str	r4, [r7, #16]
 8006922:	4630      	mov	r0, r6
 8006924:	b003      	add	sp, #12
 8006926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	3b04      	subs	r3, #4
 800692e:	2a00      	cmp	r2, #0
 8006930:	d1cc      	bne.n	80068cc <quorem+0x9c>
 8006932:	3c01      	subs	r4, #1
 8006934:	e7c7      	b.n	80068c6 <quorem+0x96>
 8006936:	6812      	ldr	r2, [r2, #0]
 8006938:	3b04      	subs	r3, #4
 800693a:	2a00      	cmp	r2, #0
 800693c:	d1f0      	bne.n	8006920 <quorem+0xf0>
 800693e:	3c01      	subs	r4, #1
 8006940:	e7eb      	b.n	800691a <quorem+0xea>
 8006942:	2000      	movs	r0, #0
 8006944:	e7ee      	b.n	8006924 <quorem+0xf4>
	...

08006948 <_dtoa_r>:
 8006948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694c:	ed2d 8b04 	vpush	{d8-d9}
 8006950:	ec57 6b10 	vmov	r6, r7, d0
 8006954:	b093      	sub	sp, #76	; 0x4c
 8006956:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006958:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800695c:	9106      	str	r1, [sp, #24]
 800695e:	ee10 aa10 	vmov	sl, s0
 8006962:	4604      	mov	r4, r0
 8006964:	9209      	str	r2, [sp, #36]	; 0x24
 8006966:	930c      	str	r3, [sp, #48]	; 0x30
 8006968:	46bb      	mov	fp, r7
 800696a:	b975      	cbnz	r5, 800698a <_dtoa_r+0x42>
 800696c:	2010      	movs	r0, #16
 800696e:	f001 f94d 	bl	8007c0c <malloc>
 8006972:	4602      	mov	r2, r0
 8006974:	6260      	str	r0, [r4, #36]	; 0x24
 8006976:	b920      	cbnz	r0, 8006982 <_dtoa_r+0x3a>
 8006978:	4ba7      	ldr	r3, [pc, #668]	; (8006c18 <_dtoa_r+0x2d0>)
 800697a:	21ea      	movs	r1, #234	; 0xea
 800697c:	48a7      	ldr	r0, [pc, #668]	; (8006c1c <_dtoa_r+0x2d4>)
 800697e:	f002 f8ad 	bl	8008adc <__assert_func>
 8006982:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006986:	6005      	str	r5, [r0, #0]
 8006988:	60c5      	str	r5, [r0, #12]
 800698a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800698c:	6819      	ldr	r1, [r3, #0]
 800698e:	b151      	cbz	r1, 80069a6 <_dtoa_r+0x5e>
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	604a      	str	r2, [r1, #4]
 8006994:	2301      	movs	r3, #1
 8006996:	4093      	lsls	r3, r2
 8006998:	608b      	str	r3, [r1, #8]
 800699a:	4620      	mov	r0, r4
 800699c:	f001 f990 	bl	8007cc0 <_Bfree>
 80069a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	1e3b      	subs	r3, r7, #0
 80069a8:	bfaa      	itet	ge
 80069aa:	2300      	movge	r3, #0
 80069ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80069b0:	f8c8 3000 	strge.w	r3, [r8]
 80069b4:	4b9a      	ldr	r3, [pc, #616]	; (8006c20 <_dtoa_r+0x2d8>)
 80069b6:	bfbc      	itt	lt
 80069b8:	2201      	movlt	r2, #1
 80069ba:	f8c8 2000 	strlt.w	r2, [r8]
 80069be:	ea33 030b 	bics.w	r3, r3, fp
 80069c2:	d11b      	bne.n	80069fc <_dtoa_r+0xb4>
 80069c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069d0:	4333      	orrs	r3, r6
 80069d2:	f000 8592 	beq.w	80074fa <_dtoa_r+0xbb2>
 80069d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069d8:	b963      	cbnz	r3, 80069f4 <_dtoa_r+0xac>
 80069da:	4b92      	ldr	r3, [pc, #584]	; (8006c24 <_dtoa_r+0x2dc>)
 80069dc:	e022      	b.n	8006a24 <_dtoa_r+0xdc>
 80069de:	4b92      	ldr	r3, [pc, #584]	; (8006c28 <_dtoa_r+0x2e0>)
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	3308      	adds	r3, #8
 80069e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	9801      	ldr	r0, [sp, #4]
 80069ea:	b013      	add	sp, #76	; 0x4c
 80069ec:	ecbd 8b04 	vpop	{d8-d9}
 80069f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f4:	4b8b      	ldr	r3, [pc, #556]	; (8006c24 <_dtoa_r+0x2dc>)
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	3303      	adds	r3, #3
 80069fa:	e7f3      	b.n	80069e4 <_dtoa_r+0x9c>
 80069fc:	2200      	movs	r2, #0
 80069fe:	2300      	movs	r3, #0
 8006a00:	4650      	mov	r0, sl
 8006a02:	4659      	mov	r1, fp
 8006a04:	f7fa f868 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a08:	ec4b ab19 	vmov	d9, sl, fp
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	b158      	cbz	r0, 8006a28 <_dtoa_r+0xe0>
 8006a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a12:	2301      	movs	r3, #1
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 856b 	beq.w	80074f4 <_dtoa_r+0xbac>
 8006a1e:	4883      	ldr	r0, [pc, #524]	; (8006c2c <_dtoa_r+0x2e4>)
 8006a20:	6018      	str	r0, [r3, #0]
 8006a22:	1e43      	subs	r3, r0, #1
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	e7df      	b.n	80069e8 <_dtoa_r+0xa0>
 8006a28:	ec4b ab10 	vmov	d0, sl, fp
 8006a2c:	aa10      	add	r2, sp, #64	; 0x40
 8006a2e:	a911      	add	r1, sp, #68	; 0x44
 8006a30:	4620      	mov	r0, r4
 8006a32:	f001 fcf3 	bl	800841c <__d2b>
 8006a36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006a3a:	ee08 0a10 	vmov	s16, r0
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	f000 8084 	beq.w	8006b4c <_dtoa_r+0x204>
 8006a44:	ee19 3a90 	vmov	r3, s19
 8006a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a50:	4656      	mov	r6, sl
 8006a52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006a5e:	4b74      	ldr	r3, [pc, #464]	; (8006c30 <_dtoa_r+0x2e8>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	4630      	mov	r0, r6
 8006a64:	4639      	mov	r1, r7
 8006a66:	f7f9 fc17 	bl	8000298 <__aeabi_dsub>
 8006a6a:	a365      	add	r3, pc, #404	; (adr r3, 8006c00 <_dtoa_r+0x2b8>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f7f9 fdca 	bl	8000608 <__aeabi_dmul>
 8006a74:	a364      	add	r3, pc, #400	; (adr r3, 8006c08 <_dtoa_r+0x2c0>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f7f9 fc0f 	bl	800029c <__adddf3>
 8006a7e:	4606      	mov	r6, r0
 8006a80:	4628      	mov	r0, r5
 8006a82:	460f      	mov	r7, r1
 8006a84:	f7f9 fd56 	bl	8000534 <__aeabi_i2d>
 8006a88:	a361      	add	r3, pc, #388	; (adr r3, 8006c10 <_dtoa_r+0x2c8>)
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	f7f9 fdbb 	bl	8000608 <__aeabi_dmul>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4630      	mov	r0, r6
 8006a98:	4639      	mov	r1, r7
 8006a9a:	f7f9 fbff 	bl	800029c <__adddf3>
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	460f      	mov	r7, r1
 8006aa2:	f7fa f861 	bl	8000b68 <__aeabi_d2iz>
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	9000      	str	r0, [sp, #0]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	4630      	mov	r0, r6
 8006aae:	4639      	mov	r1, r7
 8006ab0:	f7fa f81c 	bl	8000aec <__aeabi_dcmplt>
 8006ab4:	b150      	cbz	r0, 8006acc <_dtoa_r+0x184>
 8006ab6:	9800      	ldr	r0, [sp, #0]
 8006ab8:	f7f9 fd3c 	bl	8000534 <__aeabi_i2d>
 8006abc:	4632      	mov	r2, r6
 8006abe:	463b      	mov	r3, r7
 8006ac0:	f7fa f80a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ac4:	b910      	cbnz	r0, 8006acc <_dtoa_r+0x184>
 8006ac6:	9b00      	ldr	r3, [sp, #0]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	9b00      	ldr	r3, [sp, #0]
 8006ace:	2b16      	cmp	r3, #22
 8006ad0:	d85a      	bhi.n	8006b88 <_dtoa_r+0x240>
 8006ad2:	9a00      	ldr	r2, [sp, #0]
 8006ad4:	4b57      	ldr	r3, [pc, #348]	; (8006c34 <_dtoa_r+0x2ec>)
 8006ad6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	ec51 0b19 	vmov	r0, r1, d9
 8006ae2:	f7fa f803 	bl	8000aec <__aeabi_dcmplt>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d050      	beq.n	8006b8c <_dtoa_r+0x244>
 8006aea:	9b00      	ldr	r3, [sp, #0]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	2300      	movs	r3, #0
 8006af2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006af6:	1b5d      	subs	r5, r3, r5
 8006af8:	1e6b      	subs	r3, r5, #1
 8006afa:	9305      	str	r3, [sp, #20]
 8006afc:	bf45      	ittet	mi
 8006afe:	f1c5 0301 	rsbmi	r3, r5, #1
 8006b02:	9304      	strmi	r3, [sp, #16]
 8006b04:	2300      	movpl	r3, #0
 8006b06:	2300      	movmi	r3, #0
 8006b08:	bf4c      	ite	mi
 8006b0a:	9305      	strmi	r3, [sp, #20]
 8006b0c:	9304      	strpl	r3, [sp, #16]
 8006b0e:	9b00      	ldr	r3, [sp, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	db3d      	blt.n	8006b90 <_dtoa_r+0x248>
 8006b14:	9b05      	ldr	r3, [sp, #20]
 8006b16:	9a00      	ldr	r2, [sp, #0]
 8006b18:	920a      	str	r2, [sp, #40]	; 0x28
 8006b1a:	4413      	add	r3, r2
 8006b1c:	9305      	str	r3, [sp, #20]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	9307      	str	r3, [sp, #28]
 8006b22:	9b06      	ldr	r3, [sp, #24]
 8006b24:	2b09      	cmp	r3, #9
 8006b26:	f200 8089 	bhi.w	8006c3c <_dtoa_r+0x2f4>
 8006b2a:	2b05      	cmp	r3, #5
 8006b2c:	bfc4      	itt	gt
 8006b2e:	3b04      	subgt	r3, #4
 8006b30:	9306      	strgt	r3, [sp, #24]
 8006b32:	9b06      	ldr	r3, [sp, #24]
 8006b34:	f1a3 0302 	sub.w	r3, r3, #2
 8006b38:	bfcc      	ite	gt
 8006b3a:	2500      	movgt	r5, #0
 8006b3c:	2501      	movle	r5, #1
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	f200 8087 	bhi.w	8006c52 <_dtoa_r+0x30a>
 8006b44:	e8df f003 	tbb	[pc, r3]
 8006b48:	59383a2d 	.word	0x59383a2d
 8006b4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b50:	441d      	add	r5, r3
 8006b52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	bfc1      	itttt	gt
 8006b5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b62:	fa0b f303 	lslgt.w	r3, fp, r3
 8006b66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b6a:	bfda      	itte	le
 8006b6c:	f1c3 0320 	rsble	r3, r3, #32
 8006b70:	fa06 f003 	lslle.w	r0, r6, r3
 8006b74:	4318      	orrgt	r0, r3
 8006b76:	f7f9 fccd 	bl	8000514 <__aeabi_ui2d>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006b82:	3d01      	subs	r5, #1
 8006b84:	930e      	str	r3, [sp, #56]	; 0x38
 8006b86:	e76a      	b.n	8006a5e <_dtoa_r+0x116>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e7b2      	b.n	8006af2 <_dtoa_r+0x1aa>
 8006b8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006b8e:	e7b1      	b.n	8006af4 <_dtoa_r+0x1ac>
 8006b90:	9b04      	ldr	r3, [sp, #16]
 8006b92:	9a00      	ldr	r2, [sp, #0]
 8006b94:	1a9b      	subs	r3, r3, r2
 8006b96:	9304      	str	r3, [sp, #16]
 8006b98:	4253      	negs	r3, r2
 8006b9a:	9307      	str	r3, [sp, #28]
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006ba0:	e7bf      	b.n	8006b22 <_dtoa_r+0x1da>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	9308      	str	r3, [sp, #32]
 8006ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	dc55      	bgt.n	8006c58 <_dtoa_r+0x310>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	9209      	str	r2, [sp, #36]	; 0x24
 8006bb6:	e00c      	b.n	8006bd2 <_dtoa_r+0x28a>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e7f3      	b.n	8006ba4 <_dtoa_r+0x25c>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bc0:	9308      	str	r3, [sp, #32]
 8006bc2:	9b00      	ldr	r3, [sp, #0]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	9302      	str	r3, [sp, #8]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	9303      	str	r3, [sp, #12]
 8006bce:	bfb8      	it	lt
 8006bd0:	2301      	movlt	r3, #1
 8006bd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	6042      	str	r2, [r0, #4]
 8006bd8:	2204      	movs	r2, #4
 8006bda:	f102 0614 	add.w	r6, r2, #20
 8006bde:	429e      	cmp	r6, r3
 8006be0:	6841      	ldr	r1, [r0, #4]
 8006be2:	d93d      	bls.n	8006c60 <_dtoa_r+0x318>
 8006be4:	4620      	mov	r0, r4
 8006be6:	f001 f82b 	bl	8007c40 <_Balloc>
 8006bea:	9001      	str	r0, [sp, #4]
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d13b      	bne.n	8006c68 <_dtoa_r+0x320>
 8006bf0:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <_dtoa_r+0x2f0>)
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006bf8:	e6c0      	b.n	800697c <_dtoa_r+0x34>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e7df      	b.n	8006bbe <_dtoa_r+0x276>
 8006bfe:	bf00      	nop
 8006c00:	636f4361 	.word	0x636f4361
 8006c04:	3fd287a7 	.word	0x3fd287a7
 8006c08:	8b60c8b3 	.word	0x8b60c8b3
 8006c0c:	3fc68a28 	.word	0x3fc68a28
 8006c10:	509f79fb 	.word	0x509f79fb
 8006c14:	3fd34413 	.word	0x3fd34413
 8006c18:	08009f96 	.word	0x08009f96
 8006c1c:	08009fad 	.word	0x08009fad
 8006c20:	7ff00000 	.word	0x7ff00000
 8006c24:	08009f92 	.word	0x08009f92
 8006c28:	08009f89 	.word	0x08009f89
 8006c2c:	08009e0d 	.word	0x08009e0d
 8006c30:	3ff80000 	.word	0x3ff80000
 8006c34:	0800a118 	.word	0x0800a118
 8006c38:	0800a008 	.word	0x0800a008
 8006c3c:	2501      	movs	r5, #1
 8006c3e:	2300      	movs	r3, #0
 8006c40:	9306      	str	r3, [sp, #24]
 8006c42:	9508      	str	r5, [sp, #32]
 8006c44:	f04f 33ff 	mov.w	r3, #4294967295
 8006c48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2312      	movs	r3, #18
 8006c50:	e7b0      	b.n	8006bb4 <_dtoa_r+0x26c>
 8006c52:	2301      	movs	r3, #1
 8006c54:	9308      	str	r3, [sp, #32]
 8006c56:	e7f5      	b.n	8006c44 <_dtoa_r+0x2fc>
 8006c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c5e:	e7b8      	b.n	8006bd2 <_dtoa_r+0x28a>
 8006c60:	3101      	adds	r1, #1
 8006c62:	6041      	str	r1, [r0, #4]
 8006c64:	0052      	lsls	r2, r2, #1
 8006c66:	e7b8      	b.n	8006bda <_dtoa_r+0x292>
 8006c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c6a:	9a01      	ldr	r2, [sp, #4]
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	9b03      	ldr	r3, [sp, #12]
 8006c70:	2b0e      	cmp	r3, #14
 8006c72:	f200 809d 	bhi.w	8006db0 <_dtoa_r+0x468>
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	f000 809a 	beq.w	8006db0 <_dtoa_r+0x468>
 8006c7c:	9b00      	ldr	r3, [sp, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	dd32      	ble.n	8006ce8 <_dtoa_r+0x3a0>
 8006c82:	4ab7      	ldr	r2, [pc, #732]	; (8006f60 <_dtoa_r+0x618>)
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c90:	9b00      	ldr	r3, [sp, #0]
 8006c92:	05d8      	lsls	r0, r3, #23
 8006c94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006c98:	d516      	bpl.n	8006cc8 <_dtoa_r+0x380>
 8006c9a:	4bb2      	ldr	r3, [pc, #712]	; (8006f64 <_dtoa_r+0x61c>)
 8006c9c:	ec51 0b19 	vmov	r0, r1, d9
 8006ca0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ca4:	f7f9 fdda 	bl	800085c <__aeabi_ddiv>
 8006ca8:	f007 070f 	and.w	r7, r7, #15
 8006cac:	4682      	mov	sl, r0
 8006cae:	468b      	mov	fp, r1
 8006cb0:	2503      	movs	r5, #3
 8006cb2:	4eac      	ldr	r6, [pc, #688]	; (8006f64 <_dtoa_r+0x61c>)
 8006cb4:	b957      	cbnz	r7, 8006ccc <_dtoa_r+0x384>
 8006cb6:	4642      	mov	r2, r8
 8006cb8:	464b      	mov	r3, r9
 8006cba:	4650      	mov	r0, sl
 8006cbc:	4659      	mov	r1, fp
 8006cbe:	f7f9 fdcd 	bl	800085c <__aeabi_ddiv>
 8006cc2:	4682      	mov	sl, r0
 8006cc4:	468b      	mov	fp, r1
 8006cc6:	e028      	b.n	8006d1a <_dtoa_r+0x3d2>
 8006cc8:	2502      	movs	r5, #2
 8006cca:	e7f2      	b.n	8006cb2 <_dtoa_r+0x36a>
 8006ccc:	07f9      	lsls	r1, r7, #31
 8006cce:	d508      	bpl.n	8006ce2 <_dtoa_r+0x39a>
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cd8:	f7f9 fc96 	bl	8000608 <__aeabi_dmul>
 8006cdc:	3501      	adds	r5, #1
 8006cde:	4680      	mov	r8, r0
 8006ce0:	4689      	mov	r9, r1
 8006ce2:	107f      	asrs	r7, r7, #1
 8006ce4:	3608      	adds	r6, #8
 8006ce6:	e7e5      	b.n	8006cb4 <_dtoa_r+0x36c>
 8006ce8:	f000 809b 	beq.w	8006e22 <_dtoa_r+0x4da>
 8006cec:	9b00      	ldr	r3, [sp, #0]
 8006cee:	4f9d      	ldr	r7, [pc, #628]	; (8006f64 <_dtoa_r+0x61c>)
 8006cf0:	425e      	negs	r6, r3
 8006cf2:	4b9b      	ldr	r3, [pc, #620]	; (8006f60 <_dtoa_r+0x618>)
 8006cf4:	f006 020f 	and.w	r2, r6, #15
 8006cf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	ec51 0b19 	vmov	r0, r1, d9
 8006d04:	f7f9 fc80 	bl	8000608 <__aeabi_dmul>
 8006d08:	1136      	asrs	r6, r6, #4
 8006d0a:	4682      	mov	sl, r0
 8006d0c:	468b      	mov	fp, r1
 8006d0e:	2300      	movs	r3, #0
 8006d10:	2502      	movs	r5, #2
 8006d12:	2e00      	cmp	r6, #0
 8006d14:	d17a      	bne.n	8006e0c <_dtoa_r+0x4c4>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1d3      	bne.n	8006cc2 <_dtoa_r+0x37a>
 8006d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 8082 	beq.w	8006e26 <_dtoa_r+0x4de>
 8006d22:	4b91      	ldr	r3, [pc, #580]	; (8006f68 <_dtoa_r+0x620>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	4650      	mov	r0, sl
 8006d28:	4659      	mov	r1, fp
 8006d2a:	f7f9 fedf 	bl	8000aec <__aeabi_dcmplt>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d079      	beq.n	8006e26 <_dtoa_r+0x4de>
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d076      	beq.n	8006e26 <_dtoa_r+0x4de>
 8006d38:	9b02      	ldr	r3, [sp, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	dd36      	ble.n	8006dac <_dtoa_r+0x464>
 8006d3e:	9b00      	ldr	r3, [sp, #0]
 8006d40:	4650      	mov	r0, sl
 8006d42:	4659      	mov	r1, fp
 8006d44:	1e5f      	subs	r7, r3, #1
 8006d46:	2200      	movs	r2, #0
 8006d48:	4b88      	ldr	r3, [pc, #544]	; (8006f6c <_dtoa_r+0x624>)
 8006d4a:	f7f9 fc5d 	bl	8000608 <__aeabi_dmul>
 8006d4e:	9e02      	ldr	r6, [sp, #8]
 8006d50:	4682      	mov	sl, r0
 8006d52:	468b      	mov	fp, r1
 8006d54:	3501      	adds	r5, #1
 8006d56:	4628      	mov	r0, r5
 8006d58:	f7f9 fbec 	bl	8000534 <__aeabi_i2d>
 8006d5c:	4652      	mov	r2, sl
 8006d5e:	465b      	mov	r3, fp
 8006d60:	f7f9 fc52 	bl	8000608 <__aeabi_dmul>
 8006d64:	4b82      	ldr	r3, [pc, #520]	; (8006f70 <_dtoa_r+0x628>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	f7f9 fa98 	bl	800029c <__adddf3>
 8006d6c:	46d0      	mov	r8, sl
 8006d6e:	46d9      	mov	r9, fp
 8006d70:	4682      	mov	sl, r0
 8006d72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	d158      	bne.n	8006e2c <_dtoa_r+0x4e4>
 8006d7a:	4b7e      	ldr	r3, [pc, #504]	; (8006f74 <_dtoa_r+0x62c>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 fa89 	bl	8000298 <__aeabi_dsub>
 8006d86:	4652      	mov	r2, sl
 8006d88:	465b      	mov	r3, fp
 8006d8a:	4680      	mov	r8, r0
 8006d8c:	4689      	mov	r9, r1
 8006d8e:	f7f9 fecb 	bl	8000b28 <__aeabi_dcmpgt>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	f040 8295 	bne.w	80072c2 <_dtoa_r+0x97a>
 8006d98:	4652      	mov	r2, sl
 8006d9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d9e:	4640      	mov	r0, r8
 8006da0:	4649      	mov	r1, r9
 8006da2:	f7f9 fea3 	bl	8000aec <__aeabi_dcmplt>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f040 8289 	bne.w	80072be <_dtoa_r+0x976>
 8006dac:	ec5b ab19 	vmov	sl, fp, d9
 8006db0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f2c0 8148 	blt.w	8007048 <_dtoa_r+0x700>
 8006db8:	9a00      	ldr	r2, [sp, #0]
 8006dba:	2a0e      	cmp	r2, #14
 8006dbc:	f300 8144 	bgt.w	8007048 <_dtoa_r+0x700>
 8006dc0:	4b67      	ldr	r3, [pc, #412]	; (8006f60 <_dtoa_r+0x618>)
 8006dc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f280 80d5 	bge.w	8006f7c <_dtoa_r+0x634>
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f300 80d1 	bgt.w	8006f7c <_dtoa_r+0x634>
 8006dda:	f040 826f 	bne.w	80072bc <_dtoa_r+0x974>
 8006dde:	4b65      	ldr	r3, [pc, #404]	; (8006f74 <_dtoa_r+0x62c>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	4640      	mov	r0, r8
 8006de4:	4649      	mov	r1, r9
 8006de6:	f7f9 fc0f 	bl	8000608 <__aeabi_dmul>
 8006dea:	4652      	mov	r2, sl
 8006dec:	465b      	mov	r3, fp
 8006dee:	f7f9 fe91 	bl	8000b14 <__aeabi_dcmpge>
 8006df2:	9e03      	ldr	r6, [sp, #12]
 8006df4:	4637      	mov	r7, r6
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f040 8245 	bne.w	8007286 <_dtoa_r+0x93e>
 8006dfc:	9d01      	ldr	r5, [sp, #4]
 8006dfe:	2331      	movs	r3, #49	; 0x31
 8006e00:	f805 3b01 	strb.w	r3, [r5], #1
 8006e04:	9b00      	ldr	r3, [sp, #0]
 8006e06:	3301      	adds	r3, #1
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	e240      	b.n	800728e <_dtoa_r+0x946>
 8006e0c:	07f2      	lsls	r2, r6, #31
 8006e0e:	d505      	bpl.n	8006e1c <_dtoa_r+0x4d4>
 8006e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e14:	f7f9 fbf8 	bl	8000608 <__aeabi_dmul>
 8006e18:	3501      	adds	r5, #1
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	1076      	asrs	r6, r6, #1
 8006e1e:	3708      	adds	r7, #8
 8006e20:	e777      	b.n	8006d12 <_dtoa_r+0x3ca>
 8006e22:	2502      	movs	r5, #2
 8006e24:	e779      	b.n	8006d1a <_dtoa_r+0x3d2>
 8006e26:	9f00      	ldr	r7, [sp, #0]
 8006e28:	9e03      	ldr	r6, [sp, #12]
 8006e2a:	e794      	b.n	8006d56 <_dtoa_r+0x40e>
 8006e2c:	9901      	ldr	r1, [sp, #4]
 8006e2e:	4b4c      	ldr	r3, [pc, #304]	; (8006f60 <_dtoa_r+0x618>)
 8006e30:	4431      	add	r1, r6
 8006e32:	910d      	str	r1, [sp, #52]	; 0x34
 8006e34:	9908      	ldr	r1, [sp, #32]
 8006e36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e3e:	2900      	cmp	r1, #0
 8006e40:	d043      	beq.n	8006eca <_dtoa_r+0x582>
 8006e42:	494d      	ldr	r1, [pc, #308]	; (8006f78 <_dtoa_r+0x630>)
 8006e44:	2000      	movs	r0, #0
 8006e46:	f7f9 fd09 	bl	800085c <__aeabi_ddiv>
 8006e4a:	4652      	mov	r2, sl
 8006e4c:	465b      	mov	r3, fp
 8006e4e:	f7f9 fa23 	bl	8000298 <__aeabi_dsub>
 8006e52:	9d01      	ldr	r5, [sp, #4]
 8006e54:	4682      	mov	sl, r0
 8006e56:	468b      	mov	fp, r1
 8006e58:	4649      	mov	r1, r9
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	f7f9 fe84 	bl	8000b68 <__aeabi_d2iz>
 8006e60:	4606      	mov	r6, r0
 8006e62:	f7f9 fb67 	bl	8000534 <__aeabi_i2d>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	f7f9 fa13 	bl	8000298 <__aeabi_dsub>
 8006e72:	3630      	adds	r6, #48	; 0x30
 8006e74:	f805 6b01 	strb.w	r6, [r5], #1
 8006e78:	4652      	mov	r2, sl
 8006e7a:	465b      	mov	r3, fp
 8006e7c:	4680      	mov	r8, r0
 8006e7e:	4689      	mov	r9, r1
 8006e80:	f7f9 fe34 	bl	8000aec <__aeabi_dcmplt>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d163      	bne.n	8006f50 <_dtoa_r+0x608>
 8006e88:	4642      	mov	r2, r8
 8006e8a:	464b      	mov	r3, r9
 8006e8c:	4936      	ldr	r1, [pc, #216]	; (8006f68 <_dtoa_r+0x620>)
 8006e8e:	2000      	movs	r0, #0
 8006e90:	f7f9 fa02 	bl	8000298 <__aeabi_dsub>
 8006e94:	4652      	mov	r2, sl
 8006e96:	465b      	mov	r3, fp
 8006e98:	f7f9 fe28 	bl	8000aec <__aeabi_dcmplt>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	f040 80b5 	bne.w	800700c <_dtoa_r+0x6c4>
 8006ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ea4:	429d      	cmp	r5, r3
 8006ea6:	d081      	beq.n	8006dac <_dtoa_r+0x464>
 8006ea8:	4b30      	ldr	r3, [pc, #192]	; (8006f6c <_dtoa_r+0x624>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	4650      	mov	r0, sl
 8006eae:	4659      	mov	r1, fp
 8006eb0:	f7f9 fbaa 	bl	8000608 <__aeabi_dmul>
 8006eb4:	4b2d      	ldr	r3, [pc, #180]	; (8006f6c <_dtoa_r+0x624>)
 8006eb6:	4682      	mov	sl, r0
 8006eb8:	468b      	mov	fp, r1
 8006eba:	4640      	mov	r0, r8
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f7f9 fba2 	bl	8000608 <__aeabi_dmul>
 8006ec4:	4680      	mov	r8, r0
 8006ec6:	4689      	mov	r9, r1
 8006ec8:	e7c6      	b.n	8006e58 <_dtoa_r+0x510>
 8006eca:	4650      	mov	r0, sl
 8006ecc:	4659      	mov	r1, fp
 8006ece:	f7f9 fb9b 	bl	8000608 <__aeabi_dmul>
 8006ed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ed4:	9d01      	ldr	r5, [sp, #4]
 8006ed6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ed8:	4682      	mov	sl, r0
 8006eda:	468b      	mov	fp, r1
 8006edc:	4649      	mov	r1, r9
 8006ede:	4640      	mov	r0, r8
 8006ee0:	f7f9 fe42 	bl	8000b68 <__aeabi_d2iz>
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	f7f9 fb25 	bl	8000534 <__aeabi_i2d>
 8006eea:	3630      	adds	r6, #48	; 0x30
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	f7f9 f9d0 	bl	8000298 <__aeabi_dsub>
 8006ef8:	f805 6b01 	strb.w	r6, [r5], #1
 8006efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006efe:	429d      	cmp	r5, r3
 8006f00:	4680      	mov	r8, r0
 8006f02:	4689      	mov	r9, r1
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	d124      	bne.n	8006f54 <_dtoa_r+0x60c>
 8006f0a:	4b1b      	ldr	r3, [pc, #108]	; (8006f78 <_dtoa_r+0x630>)
 8006f0c:	4650      	mov	r0, sl
 8006f0e:	4659      	mov	r1, fp
 8006f10:	f7f9 f9c4 	bl	800029c <__adddf3>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4640      	mov	r0, r8
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	f7f9 fe04 	bl	8000b28 <__aeabi_dcmpgt>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d173      	bne.n	800700c <_dtoa_r+0x6c4>
 8006f24:	4652      	mov	r2, sl
 8006f26:	465b      	mov	r3, fp
 8006f28:	4913      	ldr	r1, [pc, #76]	; (8006f78 <_dtoa_r+0x630>)
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	f7f9 f9b4 	bl	8000298 <__aeabi_dsub>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4640      	mov	r0, r8
 8006f36:	4649      	mov	r1, r9
 8006f38:	f7f9 fdd8 	bl	8000aec <__aeabi_dcmplt>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	f43f af35 	beq.w	8006dac <_dtoa_r+0x464>
 8006f42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006f44:	1e6b      	subs	r3, r5, #1
 8006f46:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f4c:	2b30      	cmp	r3, #48	; 0x30
 8006f4e:	d0f8      	beq.n	8006f42 <_dtoa_r+0x5fa>
 8006f50:	9700      	str	r7, [sp, #0]
 8006f52:	e049      	b.n	8006fe8 <_dtoa_r+0x6a0>
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <_dtoa_r+0x624>)
 8006f56:	f7f9 fb57 	bl	8000608 <__aeabi_dmul>
 8006f5a:	4680      	mov	r8, r0
 8006f5c:	4689      	mov	r9, r1
 8006f5e:	e7bd      	b.n	8006edc <_dtoa_r+0x594>
 8006f60:	0800a118 	.word	0x0800a118
 8006f64:	0800a0f0 	.word	0x0800a0f0
 8006f68:	3ff00000 	.word	0x3ff00000
 8006f6c:	40240000 	.word	0x40240000
 8006f70:	401c0000 	.word	0x401c0000
 8006f74:	40140000 	.word	0x40140000
 8006f78:	3fe00000 	.word	0x3fe00000
 8006f7c:	9d01      	ldr	r5, [sp, #4]
 8006f7e:	4656      	mov	r6, sl
 8006f80:	465f      	mov	r7, fp
 8006f82:	4642      	mov	r2, r8
 8006f84:	464b      	mov	r3, r9
 8006f86:	4630      	mov	r0, r6
 8006f88:	4639      	mov	r1, r7
 8006f8a:	f7f9 fc67 	bl	800085c <__aeabi_ddiv>
 8006f8e:	f7f9 fdeb 	bl	8000b68 <__aeabi_d2iz>
 8006f92:	4682      	mov	sl, r0
 8006f94:	f7f9 face 	bl	8000534 <__aeabi_i2d>
 8006f98:	4642      	mov	r2, r8
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	f7f9 fb34 	bl	8000608 <__aeabi_dmul>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006fac:	f7f9 f974 	bl	8000298 <__aeabi_dsub>
 8006fb0:	f805 6b01 	strb.w	r6, [r5], #1
 8006fb4:	9e01      	ldr	r6, [sp, #4]
 8006fb6:	9f03      	ldr	r7, [sp, #12]
 8006fb8:	1bae      	subs	r6, r5, r6
 8006fba:	42b7      	cmp	r7, r6
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	d135      	bne.n	800702e <_dtoa_r+0x6e6>
 8006fc2:	f7f9 f96b 	bl	800029c <__adddf3>
 8006fc6:	4642      	mov	r2, r8
 8006fc8:	464b      	mov	r3, r9
 8006fca:	4606      	mov	r6, r0
 8006fcc:	460f      	mov	r7, r1
 8006fce:	f7f9 fdab 	bl	8000b28 <__aeabi_dcmpgt>
 8006fd2:	b9d0      	cbnz	r0, 800700a <_dtoa_r+0x6c2>
 8006fd4:	4642      	mov	r2, r8
 8006fd6:	464b      	mov	r3, r9
 8006fd8:	4630      	mov	r0, r6
 8006fda:	4639      	mov	r1, r7
 8006fdc:	f7f9 fd7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fe0:	b110      	cbz	r0, 8006fe8 <_dtoa_r+0x6a0>
 8006fe2:	f01a 0f01 	tst.w	sl, #1
 8006fe6:	d110      	bne.n	800700a <_dtoa_r+0x6c2>
 8006fe8:	4620      	mov	r0, r4
 8006fea:	ee18 1a10 	vmov	r1, s16
 8006fee:	f000 fe67 	bl	8007cc0 <_Bfree>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9800      	ldr	r0, [sp, #0]
 8006ff6:	702b      	strb	r3, [r5, #0]
 8006ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	6018      	str	r0, [r3, #0]
 8006ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007000:	2b00      	cmp	r3, #0
 8007002:	f43f acf1 	beq.w	80069e8 <_dtoa_r+0xa0>
 8007006:	601d      	str	r5, [r3, #0]
 8007008:	e4ee      	b.n	80069e8 <_dtoa_r+0xa0>
 800700a:	9f00      	ldr	r7, [sp, #0]
 800700c:	462b      	mov	r3, r5
 800700e:	461d      	mov	r5, r3
 8007010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007014:	2a39      	cmp	r2, #57	; 0x39
 8007016:	d106      	bne.n	8007026 <_dtoa_r+0x6de>
 8007018:	9a01      	ldr	r2, [sp, #4]
 800701a:	429a      	cmp	r2, r3
 800701c:	d1f7      	bne.n	800700e <_dtoa_r+0x6c6>
 800701e:	9901      	ldr	r1, [sp, #4]
 8007020:	2230      	movs	r2, #48	; 0x30
 8007022:	3701      	adds	r7, #1
 8007024:	700a      	strb	r2, [r1, #0]
 8007026:	781a      	ldrb	r2, [r3, #0]
 8007028:	3201      	adds	r2, #1
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	e790      	b.n	8006f50 <_dtoa_r+0x608>
 800702e:	4ba6      	ldr	r3, [pc, #664]	; (80072c8 <_dtoa_r+0x980>)
 8007030:	2200      	movs	r2, #0
 8007032:	f7f9 fae9 	bl	8000608 <__aeabi_dmul>
 8007036:	2200      	movs	r2, #0
 8007038:	2300      	movs	r3, #0
 800703a:	4606      	mov	r6, r0
 800703c:	460f      	mov	r7, r1
 800703e:	f7f9 fd4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007042:	2800      	cmp	r0, #0
 8007044:	d09d      	beq.n	8006f82 <_dtoa_r+0x63a>
 8007046:	e7cf      	b.n	8006fe8 <_dtoa_r+0x6a0>
 8007048:	9a08      	ldr	r2, [sp, #32]
 800704a:	2a00      	cmp	r2, #0
 800704c:	f000 80d7 	beq.w	80071fe <_dtoa_r+0x8b6>
 8007050:	9a06      	ldr	r2, [sp, #24]
 8007052:	2a01      	cmp	r2, #1
 8007054:	f300 80ba 	bgt.w	80071cc <_dtoa_r+0x884>
 8007058:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800705a:	2a00      	cmp	r2, #0
 800705c:	f000 80b2 	beq.w	80071c4 <_dtoa_r+0x87c>
 8007060:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007064:	9e07      	ldr	r6, [sp, #28]
 8007066:	9d04      	ldr	r5, [sp, #16]
 8007068:	9a04      	ldr	r2, [sp, #16]
 800706a:	441a      	add	r2, r3
 800706c:	9204      	str	r2, [sp, #16]
 800706e:	9a05      	ldr	r2, [sp, #20]
 8007070:	2101      	movs	r1, #1
 8007072:	441a      	add	r2, r3
 8007074:	4620      	mov	r0, r4
 8007076:	9205      	str	r2, [sp, #20]
 8007078:	f000 ff24 	bl	8007ec4 <__i2b>
 800707c:	4607      	mov	r7, r0
 800707e:	2d00      	cmp	r5, #0
 8007080:	dd0c      	ble.n	800709c <_dtoa_r+0x754>
 8007082:	9b05      	ldr	r3, [sp, #20]
 8007084:	2b00      	cmp	r3, #0
 8007086:	dd09      	ble.n	800709c <_dtoa_r+0x754>
 8007088:	42ab      	cmp	r3, r5
 800708a:	9a04      	ldr	r2, [sp, #16]
 800708c:	bfa8      	it	ge
 800708e:	462b      	movge	r3, r5
 8007090:	1ad2      	subs	r2, r2, r3
 8007092:	9204      	str	r2, [sp, #16]
 8007094:	9a05      	ldr	r2, [sp, #20]
 8007096:	1aed      	subs	r5, r5, r3
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	9305      	str	r3, [sp, #20]
 800709c:	9b07      	ldr	r3, [sp, #28]
 800709e:	b31b      	cbz	r3, 80070e8 <_dtoa_r+0x7a0>
 80070a0:	9b08      	ldr	r3, [sp, #32]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 80af 	beq.w	8007206 <_dtoa_r+0x8be>
 80070a8:	2e00      	cmp	r6, #0
 80070aa:	dd13      	ble.n	80070d4 <_dtoa_r+0x78c>
 80070ac:	4639      	mov	r1, r7
 80070ae:	4632      	mov	r2, r6
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 ffc7 	bl	8008044 <__pow5mult>
 80070b6:	ee18 2a10 	vmov	r2, s16
 80070ba:	4601      	mov	r1, r0
 80070bc:	4607      	mov	r7, r0
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 ff16 	bl	8007ef0 <__multiply>
 80070c4:	ee18 1a10 	vmov	r1, s16
 80070c8:	4680      	mov	r8, r0
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 fdf8 	bl	8007cc0 <_Bfree>
 80070d0:	ee08 8a10 	vmov	s16, r8
 80070d4:	9b07      	ldr	r3, [sp, #28]
 80070d6:	1b9a      	subs	r2, r3, r6
 80070d8:	d006      	beq.n	80070e8 <_dtoa_r+0x7a0>
 80070da:	ee18 1a10 	vmov	r1, s16
 80070de:	4620      	mov	r0, r4
 80070e0:	f000 ffb0 	bl	8008044 <__pow5mult>
 80070e4:	ee08 0a10 	vmov	s16, r0
 80070e8:	2101      	movs	r1, #1
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 feea 	bl	8007ec4 <__i2b>
 80070f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	4606      	mov	r6, r0
 80070f6:	f340 8088 	ble.w	800720a <_dtoa_r+0x8c2>
 80070fa:	461a      	mov	r2, r3
 80070fc:	4601      	mov	r1, r0
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 ffa0 	bl	8008044 <__pow5mult>
 8007104:	9b06      	ldr	r3, [sp, #24]
 8007106:	2b01      	cmp	r3, #1
 8007108:	4606      	mov	r6, r0
 800710a:	f340 8081 	ble.w	8007210 <_dtoa_r+0x8c8>
 800710e:	f04f 0800 	mov.w	r8, #0
 8007112:	6933      	ldr	r3, [r6, #16]
 8007114:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007118:	6918      	ldr	r0, [r3, #16]
 800711a:	f000 fe83 	bl	8007e24 <__hi0bits>
 800711e:	f1c0 0020 	rsb	r0, r0, #32
 8007122:	9b05      	ldr	r3, [sp, #20]
 8007124:	4418      	add	r0, r3
 8007126:	f010 001f 	ands.w	r0, r0, #31
 800712a:	f000 8092 	beq.w	8007252 <_dtoa_r+0x90a>
 800712e:	f1c0 0320 	rsb	r3, r0, #32
 8007132:	2b04      	cmp	r3, #4
 8007134:	f340 808a 	ble.w	800724c <_dtoa_r+0x904>
 8007138:	f1c0 001c 	rsb	r0, r0, #28
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	4403      	add	r3, r0
 8007140:	9304      	str	r3, [sp, #16]
 8007142:	9b05      	ldr	r3, [sp, #20]
 8007144:	4403      	add	r3, r0
 8007146:	4405      	add	r5, r0
 8007148:	9305      	str	r3, [sp, #20]
 800714a:	9b04      	ldr	r3, [sp, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	dd07      	ble.n	8007160 <_dtoa_r+0x818>
 8007150:	ee18 1a10 	vmov	r1, s16
 8007154:	461a      	mov	r2, r3
 8007156:	4620      	mov	r0, r4
 8007158:	f000 ffce 	bl	80080f8 <__lshift>
 800715c:	ee08 0a10 	vmov	s16, r0
 8007160:	9b05      	ldr	r3, [sp, #20]
 8007162:	2b00      	cmp	r3, #0
 8007164:	dd05      	ble.n	8007172 <_dtoa_r+0x82a>
 8007166:	4631      	mov	r1, r6
 8007168:	461a      	mov	r2, r3
 800716a:	4620      	mov	r0, r4
 800716c:	f000 ffc4 	bl	80080f8 <__lshift>
 8007170:	4606      	mov	r6, r0
 8007172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d06e      	beq.n	8007256 <_dtoa_r+0x90e>
 8007178:	ee18 0a10 	vmov	r0, s16
 800717c:	4631      	mov	r1, r6
 800717e:	f001 f82b 	bl	80081d8 <__mcmp>
 8007182:	2800      	cmp	r0, #0
 8007184:	da67      	bge.n	8007256 <_dtoa_r+0x90e>
 8007186:	9b00      	ldr	r3, [sp, #0]
 8007188:	3b01      	subs	r3, #1
 800718a:	ee18 1a10 	vmov	r1, s16
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	220a      	movs	r2, #10
 8007192:	2300      	movs	r3, #0
 8007194:	4620      	mov	r0, r4
 8007196:	f000 fdb5 	bl	8007d04 <__multadd>
 800719a:	9b08      	ldr	r3, [sp, #32]
 800719c:	ee08 0a10 	vmov	s16, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 81b1 	beq.w	8007508 <_dtoa_r+0xbc0>
 80071a6:	2300      	movs	r3, #0
 80071a8:	4639      	mov	r1, r7
 80071aa:	220a      	movs	r2, #10
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 fda9 	bl	8007d04 <__multadd>
 80071b2:	9b02      	ldr	r3, [sp, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	4607      	mov	r7, r0
 80071b8:	f300 808e 	bgt.w	80072d8 <_dtoa_r+0x990>
 80071bc:	9b06      	ldr	r3, [sp, #24]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	dc51      	bgt.n	8007266 <_dtoa_r+0x91e>
 80071c2:	e089      	b.n	80072d8 <_dtoa_r+0x990>
 80071c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071ca:	e74b      	b.n	8007064 <_dtoa_r+0x71c>
 80071cc:	9b03      	ldr	r3, [sp, #12]
 80071ce:	1e5e      	subs	r6, r3, #1
 80071d0:	9b07      	ldr	r3, [sp, #28]
 80071d2:	42b3      	cmp	r3, r6
 80071d4:	bfbf      	itttt	lt
 80071d6:	9b07      	ldrlt	r3, [sp, #28]
 80071d8:	9607      	strlt	r6, [sp, #28]
 80071da:	1af2      	sublt	r2, r6, r3
 80071dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80071de:	bfb6      	itet	lt
 80071e0:	189b      	addlt	r3, r3, r2
 80071e2:	1b9e      	subge	r6, r3, r6
 80071e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80071e6:	9b03      	ldr	r3, [sp, #12]
 80071e8:	bfb8      	it	lt
 80071ea:	2600      	movlt	r6, #0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	bfb7      	itett	lt
 80071f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80071f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80071f8:	1a9d      	sublt	r5, r3, r2
 80071fa:	2300      	movlt	r3, #0
 80071fc:	e734      	b.n	8007068 <_dtoa_r+0x720>
 80071fe:	9e07      	ldr	r6, [sp, #28]
 8007200:	9d04      	ldr	r5, [sp, #16]
 8007202:	9f08      	ldr	r7, [sp, #32]
 8007204:	e73b      	b.n	800707e <_dtoa_r+0x736>
 8007206:	9a07      	ldr	r2, [sp, #28]
 8007208:	e767      	b.n	80070da <_dtoa_r+0x792>
 800720a:	9b06      	ldr	r3, [sp, #24]
 800720c:	2b01      	cmp	r3, #1
 800720e:	dc18      	bgt.n	8007242 <_dtoa_r+0x8fa>
 8007210:	f1ba 0f00 	cmp.w	sl, #0
 8007214:	d115      	bne.n	8007242 <_dtoa_r+0x8fa>
 8007216:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800721a:	b993      	cbnz	r3, 8007242 <_dtoa_r+0x8fa>
 800721c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007220:	0d1b      	lsrs	r3, r3, #20
 8007222:	051b      	lsls	r3, r3, #20
 8007224:	b183      	cbz	r3, 8007248 <_dtoa_r+0x900>
 8007226:	9b04      	ldr	r3, [sp, #16]
 8007228:	3301      	adds	r3, #1
 800722a:	9304      	str	r3, [sp, #16]
 800722c:	9b05      	ldr	r3, [sp, #20]
 800722e:	3301      	adds	r3, #1
 8007230:	9305      	str	r3, [sp, #20]
 8007232:	f04f 0801 	mov.w	r8, #1
 8007236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007238:	2b00      	cmp	r3, #0
 800723a:	f47f af6a 	bne.w	8007112 <_dtoa_r+0x7ca>
 800723e:	2001      	movs	r0, #1
 8007240:	e76f      	b.n	8007122 <_dtoa_r+0x7da>
 8007242:	f04f 0800 	mov.w	r8, #0
 8007246:	e7f6      	b.n	8007236 <_dtoa_r+0x8ee>
 8007248:	4698      	mov	r8, r3
 800724a:	e7f4      	b.n	8007236 <_dtoa_r+0x8ee>
 800724c:	f43f af7d 	beq.w	800714a <_dtoa_r+0x802>
 8007250:	4618      	mov	r0, r3
 8007252:	301c      	adds	r0, #28
 8007254:	e772      	b.n	800713c <_dtoa_r+0x7f4>
 8007256:	9b03      	ldr	r3, [sp, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	dc37      	bgt.n	80072cc <_dtoa_r+0x984>
 800725c:	9b06      	ldr	r3, [sp, #24]
 800725e:	2b02      	cmp	r3, #2
 8007260:	dd34      	ble.n	80072cc <_dtoa_r+0x984>
 8007262:	9b03      	ldr	r3, [sp, #12]
 8007264:	9302      	str	r3, [sp, #8]
 8007266:	9b02      	ldr	r3, [sp, #8]
 8007268:	b96b      	cbnz	r3, 8007286 <_dtoa_r+0x93e>
 800726a:	4631      	mov	r1, r6
 800726c:	2205      	movs	r2, #5
 800726e:	4620      	mov	r0, r4
 8007270:	f000 fd48 	bl	8007d04 <__multadd>
 8007274:	4601      	mov	r1, r0
 8007276:	4606      	mov	r6, r0
 8007278:	ee18 0a10 	vmov	r0, s16
 800727c:	f000 ffac 	bl	80081d8 <__mcmp>
 8007280:	2800      	cmp	r0, #0
 8007282:	f73f adbb 	bgt.w	8006dfc <_dtoa_r+0x4b4>
 8007286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007288:	9d01      	ldr	r5, [sp, #4]
 800728a:	43db      	mvns	r3, r3
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	f04f 0800 	mov.w	r8, #0
 8007292:	4631      	mov	r1, r6
 8007294:	4620      	mov	r0, r4
 8007296:	f000 fd13 	bl	8007cc0 <_Bfree>
 800729a:	2f00      	cmp	r7, #0
 800729c:	f43f aea4 	beq.w	8006fe8 <_dtoa_r+0x6a0>
 80072a0:	f1b8 0f00 	cmp.w	r8, #0
 80072a4:	d005      	beq.n	80072b2 <_dtoa_r+0x96a>
 80072a6:	45b8      	cmp	r8, r7
 80072a8:	d003      	beq.n	80072b2 <_dtoa_r+0x96a>
 80072aa:	4641      	mov	r1, r8
 80072ac:	4620      	mov	r0, r4
 80072ae:	f000 fd07 	bl	8007cc0 <_Bfree>
 80072b2:	4639      	mov	r1, r7
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 fd03 	bl	8007cc0 <_Bfree>
 80072ba:	e695      	b.n	8006fe8 <_dtoa_r+0x6a0>
 80072bc:	2600      	movs	r6, #0
 80072be:	4637      	mov	r7, r6
 80072c0:	e7e1      	b.n	8007286 <_dtoa_r+0x93e>
 80072c2:	9700      	str	r7, [sp, #0]
 80072c4:	4637      	mov	r7, r6
 80072c6:	e599      	b.n	8006dfc <_dtoa_r+0x4b4>
 80072c8:	40240000 	.word	0x40240000
 80072cc:	9b08      	ldr	r3, [sp, #32]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 80ca 	beq.w	8007468 <_dtoa_r+0xb20>
 80072d4:	9b03      	ldr	r3, [sp, #12]
 80072d6:	9302      	str	r3, [sp, #8]
 80072d8:	2d00      	cmp	r5, #0
 80072da:	dd05      	ble.n	80072e8 <_dtoa_r+0x9a0>
 80072dc:	4639      	mov	r1, r7
 80072de:	462a      	mov	r2, r5
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 ff09 	bl	80080f8 <__lshift>
 80072e6:	4607      	mov	r7, r0
 80072e8:	f1b8 0f00 	cmp.w	r8, #0
 80072ec:	d05b      	beq.n	80073a6 <_dtoa_r+0xa5e>
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 fca5 	bl	8007c40 <_Balloc>
 80072f6:	4605      	mov	r5, r0
 80072f8:	b928      	cbnz	r0, 8007306 <_dtoa_r+0x9be>
 80072fa:	4b87      	ldr	r3, [pc, #540]	; (8007518 <_dtoa_r+0xbd0>)
 80072fc:	4602      	mov	r2, r0
 80072fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007302:	f7ff bb3b 	b.w	800697c <_dtoa_r+0x34>
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	3202      	adds	r2, #2
 800730a:	0092      	lsls	r2, r2, #2
 800730c:	f107 010c 	add.w	r1, r7, #12
 8007310:	300c      	adds	r0, #12
 8007312:	f7fd fcdb 	bl	8004ccc <memcpy>
 8007316:	2201      	movs	r2, #1
 8007318:	4629      	mov	r1, r5
 800731a:	4620      	mov	r0, r4
 800731c:	f000 feec 	bl	80080f8 <__lshift>
 8007320:	9b01      	ldr	r3, [sp, #4]
 8007322:	f103 0901 	add.w	r9, r3, #1
 8007326:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800732a:	4413      	add	r3, r2
 800732c:	9305      	str	r3, [sp, #20]
 800732e:	f00a 0301 	and.w	r3, sl, #1
 8007332:	46b8      	mov	r8, r7
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	4607      	mov	r7, r0
 8007338:	4631      	mov	r1, r6
 800733a:	ee18 0a10 	vmov	r0, s16
 800733e:	f7ff fa77 	bl	8006830 <quorem>
 8007342:	4641      	mov	r1, r8
 8007344:	9002      	str	r0, [sp, #8]
 8007346:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800734a:	ee18 0a10 	vmov	r0, s16
 800734e:	f000 ff43 	bl	80081d8 <__mcmp>
 8007352:	463a      	mov	r2, r7
 8007354:	9003      	str	r0, [sp, #12]
 8007356:	4631      	mov	r1, r6
 8007358:	4620      	mov	r0, r4
 800735a:	f000 ff59 	bl	8008210 <__mdiff>
 800735e:	68c2      	ldr	r2, [r0, #12]
 8007360:	f109 3bff 	add.w	fp, r9, #4294967295
 8007364:	4605      	mov	r5, r0
 8007366:	bb02      	cbnz	r2, 80073aa <_dtoa_r+0xa62>
 8007368:	4601      	mov	r1, r0
 800736a:	ee18 0a10 	vmov	r0, s16
 800736e:	f000 ff33 	bl	80081d8 <__mcmp>
 8007372:	4602      	mov	r2, r0
 8007374:	4629      	mov	r1, r5
 8007376:	4620      	mov	r0, r4
 8007378:	9207      	str	r2, [sp, #28]
 800737a:	f000 fca1 	bl	8007cc0 <_Bfree>
 800737e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007382:	ea43 0102 	orr.w	r1, r3, r2
 8007386:	9b04      	ldr	r3, [sp, #16]
 8007388:	430b      	orrs	r3, r1
 800738a:	464d      	mov	r5, r9
 800738c:	d10f      	bne.n	80073ae <_dtoa_r+0xa66>
 800738e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007392:	d02a      	beq.n	80073ea <_dtoa_r+0xaa2>
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	dd02      	ble.n	80073a0 <_dtoa_r+0xa58>
 800739a:	9b02      	ldr	r3, [sp, #8]
 800739c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80073a0:	f88b a000 	strb.w	sl, [fp]
 80073a4:	e775      	b.n	8007292 <_dtoa_r+0x94a>
 80073a6:	4638      	mov	r0, r7
 80073a8:	e7ba      	b.n	8007320 <_dtoa_r+0x9d8>
 80073aa:	2201      	movs	r2, #1
 80073ac:	e7e2      	b.n	8007374 <_dtoa_r+0xa2c>
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	db04      	blt.n	80073be <_dtoa_r+0xa76>
 80073b4:	9906      	ldr	r1, [sp, #24]
 80073b6:	430b      	orrs	r3, r1
 80073b8:	9904      	ldr	r1, [sp, #16]
 80073ba:	430b      	orrs	r3, r1
 80073bc:	d122      	bne.n	8007404 <_dtoa_r+0xabc>
 80073be:	2a00      	cmp	r2, #0
 80073c0:	ddee      	ble.n	80073a0 <_dtoa_r+0xa58>
 80073c2:	ee18 1a10 	vmov	r1, s16
 80073c6:	2201      	movs	r2, #1
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 fe95 	bl	80080f8 <__lshift>
 80073ce:	4631      	mov	r1, r6
 80073d0:	ee08 0a10 	vmov	s16, r0
 80073d4:	f000 ff00 	bl	80081d8 <__mcmp>
 80073d8:	2800      	cmp	r0, #0
 80073da:	dc03      	bgt.n	80073e4 <_dtoa_r+0xa9c>
 80073dc:	d1e0      	bne.n	80073a0 <_dtoa_r+0xa58>
 80073de:	f01a 0f01 	tst.w	sl, #1
 80073e2:	d0dd      	beq.n	80073a0 <_dtoa_r+0xa58>
 80073e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80073e8:	d1d7      	bne.n	800739a <_dtoa_r+0xa52>
 80073ea:	2339      	movs	r3, #57	; 0x39
 80073ec:	f88b 3000 	strb.w	r3, [fp]
 80073f0:	462b      	mov	r3, r5
 80073f2:	461d      	mov	r5, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073fa:	2a39      	cmp	r2, #57	; 0x39
 80073fc:	d071      	beq.n	80074e2 <_dtoa_r+0xb9a>
 80073fe:	3201      	adds	r2, #1
 8007400:	701a      	strb	r2, [r3, #0]
 8007402:	e746      	b.n	8007292 <_dtoa_r+0x94a>
 8007404:	2a00      	cmp	r2, #0
 8007406:	dd07      	ble.n	8007418 <_dtoa_r+0xad0>
 8007408:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800740c:	d0ed      	beq.n	80073ea <_dtoa_r+0xaa2>
 800740e:	f10a 0301 	add.w	r3, sl, #1
 8007412:	f88b 3000 	strb.w	r3, [fp]
 8007416:	e73c      	b.n	8007292 <_dtoa_r+0x94a>
 8007418:	9b05      	ldr	r3, [sp, #20]
 800741a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800741e:	4599      	cmp	r9, r3
 8007420:	d047      	beq.n	80074b2 <_dtoa_r+0xb6a>
 8007422:	ee18 1a10 	vmov	r1, s16
 8007426:	2300      	movs	r3, #0
 8007428:	220a      	movs	r2, #10
 800742a:	4620      	mov	r0, r4
 800742c:	f000 fc6a 	bl	8007d04 <__multadd>
 8007430:	45b8      	cmp	r8, r7
 8007432:	ee08 0a10 	vmov	s16, r0
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	f04f 020a 	mov.w	r2, #10
 800743e:	4641      	mov	r1, r8
 8007440:	4620      	mov	r0, r4
 8007442:	d106      	bne.n	8007452 <_dtoa_r+0xb0a>
 8007444:	f000 fc5e 	bl	8007d04 <__multadd>
 8007448:	4680      	mov	r8, r0
 800744a:	4607      	mov	r7, r0
 800744c:	f109 0901 	add.w	r9, r9, #1
 8007450:	e772      	b.n	8007338 <_dtoa_r+0x9f0>
 8007452:	f000 fc57 	bl	8007d04 <__multadd>
 8007456:	4639      	mov	r1, r7
 8007458:	4680      	mov	r8, r0
 800745a:	2300      	movs	r3, #0
 800745c:	220a      	movs	r2, #10
 800745e:	4620      	mov	r0, r4
 8007460:	f000 fc50 	bl	8007d04 <__multadd>
 8007464:	4607      	mov	r7, r0
 8007466:	e7f1      	b.n	800744c <_dtoa_r+0xb04>
 8007468:	9b03      	ldr	r3, [sp, #12]
 800746a:	9302      	str	r3, [sp, #8]
 800746c:	9d01      	ldr	r5, [sp, #4]
 800746e:	ee18 0a10 	vmov	r0, s16
 8007472:	4631      	mov	r1, r6
 8007474:	f7ff f9dc 	bl	8006830 <quorem>
 8007478:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800747c:	9b01      	ldr	r3, [sp, #4]
 800747e:	f805 ab01 	strb.w	sl, [r5], #1
 8007482:	1aea      	subs	r2, r5, r3
 8007484:	9b02      	ldr	r3, [sp, #8]
 8007486:	4293      	cmp	r3, r2
 8007488:	dd09      	ble.n	800749e <_dtoa_r+0xb56>
 800748a:	ee18 1a10 	vmov	r1, s16
 800748e:	2300      	movs	r3, #0
 8007490:	220a      	movs	r2, #10
 8007492:	4620      	mov	r0, r4
 8007494:	f000 fc36 	bl	8007d04 <__multadd>
 8007498:	ee08 0a10 	vmov	s16, r0
 800749c:	e7e7      	b.n	800746e <_dtoa_r+0xb26>
 800749e:	9b02      	ldr	r3, [sp, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	bfc8      	it	gt
 80074a4:	461d      	movgt	r5, r3
 80074a6:	9b01      	ldr	r3, [sp, #4]
 80074a8:	bfd8      	it	le
 80074aa:	2501      	movle	r5, #1
 80074ac:	441d      	add	r5, r3
 80074ae:	f04f 0800 	mov.w	r8, #0
 80074b2:	ee18 1a10 	vmov	r1, s16
 80074b6:	2201      	movs	r2, #1
 80074b8:	4620      	mov	r0, r4
 80074ba:	f000 fe1d 	bl	80080f8 <__lshift>
 80074be:	4631      	mov	r1, r6
 80074c0:	ee08 0a10 	vmov	s16, r0
 80074c4:	f000 fe88 	bl	80081d8 <__mcmp>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	dc91      	bgt.n	80073f0 <_dtoa_r+0xaa8>
 80074cc:	d102      	bne.n	80074d4 <_dtoa_r+0xb8c>
 80074ce:	f01a 0f01 	tst.w	sl, #1
 80074d2:	d18d      	bne.n	80073f0 <_dtoa_r+0xaa8>
 80074d4:	462b      	mov	r3, r5
 80074d6:	461d      	mov	r5, r3
 80074d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074dc:	2a30      	cmp	r2, #48	; 0x30
 80074de:	d0fa      	beq.n	80074d6 <_dtoa_r+0xb8e>
 80074e0:	e6d7      	b.n	8007292 <_dtoa_r+0x94a>
 80074e2:	9a01      	ldr	r2, [sp, #4]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d184      	bne.n	80073f2 <_dtoa_r+0xaaa>
 80074e8:	9b00      	ldr	r3, [sp, #0]
 80074ea:	3301      	adds	r3, #1
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	2331      	movs	r3, #49	; 0x31
 80074f0:	7013      	strb	r3, [r2, #0]
 80074f2:	e6ce      	b.n	8007292 <_dtoa_r+0x94a>
 80074f4:	4b09      	ldr	r3, [pc, #36]	; (800751c <_dtoa_r+0xbd4>)
 80074f6:	f7ff ba95 	b.w	8006a24 <_dtoa_r+0xdc>
 80074fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f47f aa6e 	bne.w	80069de <_dtoa_r+0x96>
 8007502:	4b07      	ldr	r3, [pc, #28]	; (8007520 <_dtoa_r+0xbd8>)
 8007504:	f7ff ba8e 	b.w	8006a24 <_dtoa_r+0xdc>
 8007508:	9b02      	ldr	r3, [sp, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	dcae      	bgt.n	800746c <_dtoa_r+0xb24>
 800750e:	9b06      	ldr	r3, [sp, #24]
 8007510:	2b02      	cmp	r3, #2
 8007512:	f73f aea8 	bgt.w	8007266 <_dtoa_r+0x91e>
 8007516:	e7a9      	b.n	800746c <_dtoa_r+0xb24>
 8007518:	0800a008 	.word	0x0800a008
 800751c:	08009e0c 	.word	0x08009e0c
 8007520:	08009f89 	.word	0x08009f89

08007524 <rshift>:
 8007524:	6903      	ldr	r3, [r0, #16]
 8007526:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800752a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800752e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007532:	f100 0414 	add.w	r4, r0, #20
 8007536:	dd45      	ble.n	80075c4 <rshift+0xa0>
 8007538:	f011 011f 	ands.w	r1, r1, #31
 800753c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007540:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007544:	d10c      	bne.n	8007560 <rshift+0x3c>
 8007546:	f100 0710 	add.w	r7, r0, #16
 800754a:	4629      	mov	r1, r5
 800754c:	42b1      	cmp	r1, r6
 800754e:	d334      	bcc.n	80075ba <rshift+0x96>
 8007550:	1a9b      	subs	r3, r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	1eea      	subs	r2, r5, #3
 8007556:	4296      	cmp	r6, r2
 8007558:	bf38      	it	cc
 800755a:	2300      	movcc	r3, #0
 800755c:	4423      	add	r3, r4
 800755e:	e015      	b.n	800758c <rshift+0x68>
 8007560:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007564:	f1c1 0820 	rsb	r8, r1, #32
 8007568:	40cf      	lsrs	r7, r1
 800756a:	f105 0e04 	add.w	lr, r5, #4
 800756e:	46a1      	mov	r9, r4
 8007570:	4576      	cmp	r6, lr
 8007572:	46f4      	mov	ip, lr
 8007574:	d815      	bhi.n	80075a2 <rshift+0x7e>
 8007576:	1a9a      	subs	r2, r3, r2
 8007578:	0092      	lsls	r2, r2, #2
 800757a:	3a04      	subs	r2, #4
 800757c:	3501      	adds	r5, #1
 800757e:	42ae      	cmp	r6, r5
 8007580:	bf38      	it	cc
 8007582:	2200      	movcc	r2, #0
 8007584:	18a3      	adds	r3, r4, r2
 8007586:	50a7      	str	r7, [r4, r2]
 8007588:	b107      	cbz	r7, 800758c <rshift+0x68>
 800758a:	3304      	adds	r3, #4
 800758c:	1b1a      	subs	r2, r3, r4
 800758e:	42a3      	cmp	r3, r4
 8007590:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007594:	bf08      	it	eq
 8007596:	2300      	moveq	r3, #0
 8007598:	6102      	str	r2, [r0, #16]
 800759a:	bf08      	it	eq
 800759c:	6143      	streq	r3, [r0, #20]
 800759e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075a2:	f8dc c000 	ldr.w	ip, [ip]
 80075a6:	fa0c fc08 	lsl.w	ip, ip, r8
 80075aa:	ea4c 0707 	orr.w	r7, ip, r7
 80075ae:	f849 7b04 	str.w	r7, [r9], #4
 80075b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075b6:	40cf      	lsrs	r7, r1
 80075b8:	e7da      	b.n	8007570 <rshift+0x4c>
 80075ba:	f851 cb04 	ldr.w	ip, [r1], #4
 80075be:	f847 cf04 	str.w	ip, [r7, #4]!
 80075c2:	e7c3      	b.n	800754c <rshift+0x28>
 80075c4:	4623      	mov	r3, r4
 80075c6:	e7e1      	b.n	800758c <rshift+0x68>

080075c8 <__hexdig_fun>:
 80075c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80075cc:	2b09      	cmp	r3, #9
 80075ce:	d802      	bhi.n	80075d6 <__hexdig_fun+0xe>
 80075d0:	3820      	subs	r0, #32
 80075d2:	b2c0      	uxtb	r0, r0
 80075d4:	4770      	bx	lr
 80075d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80075da:	2b05      	cmp	r3, #5
 80075dc:	d801      	bhi.n	80075e2 <__hexdig_fun+0x1a>
 80075de:	3847      	subs	r0, #71	; 0x47
 80075e0:	e7f7      	b.n	80075d2 <__hexdig_fun+0xa>
 80075e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80075e6:	2b05      	cmp	r3, #5
 80075e8:	d801      	bhi.n	80075ee <__hexdig_fun+0x26>
 80075ea:	3827      	subs	r0, #39	; 0x27
 80075ec:	e7f1      	b.n	80075d2 <__hexdig_fun+0xa>
 80075ee:	2000      	movs	r0, #0
 80075f0:	4770      	bx	lr
	...

080075f4 <__gethex>:
 80075f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f8:	ed2d 8b02 	vpush	{d8}
 80075fc:	b089      	sub	sp, #36	; 0x24
 80075fe:	ee08 0a10 	vmov	s16, r0
 8007602:	9304      	str	r3, [sp, #16]
 8007604:	4bb4      	ldr	r3, [pc, #720]	; (80078d8 <__gethex+0x2e4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	9301      	str	r3, [sp, #4]
 800760a:	4618      	mov	r0, r3
 800760c:	468b      	mov	fp, r1
 800760e:	4690      	mov	r8, r2
 8007610:	f7f8 fde6 	bl	80001e0 <strlen>
 8007614:	9b01      	ldr	r3, [sp, #4]
 8007616:	f8db 2000 	ldr.w	r2, [fp]
 800761a:	4403      	add	r3, r0
 800761c:	4682      	mov	sl, r0
 800761e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007622:	9305      	str	r3, [sp, #20]
 8007624:	1c93      	adds	r3, r2, #2
 8007626:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800762a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800762e:	32fe      	adds	r2, #254	; 0xfe
 8007630:	18d1      	adds	r1, r2, r3
 8007632:	461f      	mov	r7, r3
 8007634:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007638:	9100      	str	r1, [sp, #0]
 800763a:	2830      	cmp	r0, #48	; 0x30
 800763c:	d0f8      	beq.n	8007630 <__gethex+0x3c>
 800763e:	f7ff ffc3 	bl	80075c8 <__hexdig_fun>
 8007642:	4604      	mov	r4, r0
 8007644:	2800      	cmp	r0, #0
 8007646:	d13a      	bne.n	80076be <__gethex+0xca>
 8007648:	9901      	ldr	r1, [sp, #4]
 800764a:	4652      	mov	r2, sl
 800764c:	4638      	mov	r0, r7
 800764e:	f001 fa23 	bl	8008a98 <strncmp>
 8007652:	4605      	mov	r5, r0
 8007654:	2800      	cmp	r0, #0
 8007656:	d168      	bne.n	800772a <__gethex+0x136>
 8007658:	f817 000a 	ldrb.w	r0, [r7, sl]
 800765c:	eb07 060a 	add.w	r6, r7, sl
 8007660:	f7ff ffb2 	bl	80075c8 <__hexdig_fun>
 8007664:	2800      	cmp	r0, #0
 8007666:	d062      	beq.n	800772e <__gethex+0x13a>
 8007668:	4633      	mov	r3, r6
 800766a:	7818      	ldrb	r0, [r3, #0]
 800766c:	2830      	cmp	r0, #48	; 0x30
 800766e:	461f      	mov	r7, r3
 8007670:	f103 0301 	add.w	r3, r3, #1
 8007674:	d0f9      	beq.n	800766a <__gethex+0x76>
 8007676:	f7ff ffa7 	bl	80075c8 <__hexdig_fun>
 800767a:	2301      	movs	r3, #1
 800767c:	fab0 f480 	clz	r4, r0
 8007680:	0964      	lsrs	r4, r4, #5
 8007682:	4635      	mov	r5, r6
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	463a      	mov	r2, r7
 8007688:	4616      	mov	r6, r2
 800768a:	3201      	adds	r2, #1
 800768c:	7830      	ldrb	r0, [r6, #0]
 800768e:	f7ff ff9b 	bl	80075c8 <__hexdig_fun>
 8007692:	2800      	cmp	r0, #0
 8007694:	d1f8      	bne.n	8007688 <__gethex+0x94>
 8007696:	9901      	ldr	r1, [sp, #4]
 8007698:	4652      	mov	r2, sl
 800769a:	4630      	mov	r0, r6
 800769c:	f001 f9fc 	bl	8008a98 <strncmp>
 80076a0:	b980      	cbnz	r0, 80076c4 <__gethex+0xd0>
 80076a2:	b94d      	cbnz	r5, 80076b8 <__gethex+0xc4>
 80076a4:	eb06 050a 	add.w	r5, r6, sl
 80076a8:	462a      	mov	r2, r5
 80076aa:	4616      	mov	r6, r2
 80076ac:	3201      	adds	r2, #1
 80076ae:	7830      	ldrb	r0, [r6, #0]
 80076b0:	f7ff ff8a 	bl	80075c8 <__hexdig_fun>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d1f8      	bne.n	80076aa <__gethex+0xb6>
 80076b8:	1bad      	subs	r5, r5, r6
 80076ba:	00ad      	lsls	r5, r5, #2
 80076bc:	e004      	b.n	80076c8 <__gethex+0xd4>
 80076be:	2400      	movs	r4, #0
 80076c0:	4625      	mov	r5, r4
 80076c2:	e7e0      	b.n	8007686 <__gethex+0x92>
 80076c4:	2d00      	cmp	r5, #0
 80076c6:	d1f7      	bne.n	80076b8 <__gethex+0xc4>
 80076c8:	7833      	ldrb	r3, [r6, #0]
 80076ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80076ce:	2b50      	cmp	r3, #80	; 0x50
 80076d0:	d13b      	bne.n	800774a <__gethex+0x156>
 80076d2:	7873      	ldrb	r3, [r6, #1]
 80076d4:	2b2b      	cmp	r3, #43	; 0x2b
 80076d6:	d02c      	beq.n	8007732 <__gethex+0x13e>
 80076d8:	2b2d      	cmp	r3, #45	; 0x2d
 80076da:	d02e      	beq.n	800773a <__gethex+0x146>
 80076dc:	1c71      	adds	r1, r6, #1
 80076de:	f04f 0900 	mov.w	r9, #0
 80076e2:	7808      	ldrb	r0, [r1, #0]
 80076e4:	f7ff ff70 	bl	80075c8 <__hexdig_fun>
 80076e8:	1e43      	subs	r3, r0, #1
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b18      	cmp	r3, #24
 80076ee:	d82c      	bhi.n	800774a <__gethex+0x156>
 80076f0:	f1a0 0210 	sub.w	r2, r0, #16
 80076f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076f8:	f7ff ff66 	bl	80075c8 <__hexdig_fun>
 80076fc:	1e43      	subs	r3, r0, #1
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b18      	cmp	r3, #24
 8007702:	d91d      	bls.n	8007740 <__gethex+0x14c>
 8007704:	f1b9 0f00 	cmp.w	r9, #0
 8007708:	d000      	beq.n	800770c <__gethex+0x118>
 800770a:	4252      	negs	r2, r2
 800770c:	4415      	add	r5, r2
 800770e:	f8cb 1000 	str.w	r1, [fp]
 8007712:	b1e4      	cbz	r4, 800774e <__gethex+0x15a>
 8007714:	9b00      	ldr	r3, [sp, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	bf14      	ite	ne
 800771a:	2700      	movne	r7, #0
 800771c:	2706      	moveq	r7, #6
 800771e:	4638      	mov	r0, r7
 8007720:	b009      	add	sp, #36	; 0x24
 8007722:	ecbd 8b02 	vpop	{d8}
 8007726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772a:	463e      	mov	r6, r7
 800772c:	4625      	mov	r5, r4
 800772e:	2401      	movs	r4, #1
 8007730:	e7ca      	b.n	80076c8 <__gethex+0xd4>
 8007732:	f04f 0900 	mov.w	r9, #0
 8007736:	1cb1      	adds	r1, r6, #2
 8007738:	e7d3      	b.n	80076e2 <__gethex+0xee>
 800773a:	f04f 0901 	mov.w	r9, #1
 800773e:	e7fa      	b.n	8007736 <__gethex+0x142>
 8007740:	230a      	movs	r3, #10
 8007742:	fb03 0202 	mla	r2, r3, r2, r0
 8007746:	3a10      	subs	r2, #16
 8007748:	e7d4      	b.n	80076f4 <__gethex+0x100>
 800774a:	4631      	mov	r1, r6
 800774c:	e7df      	b.n	800770e <__gethex+0x11a>
 800774e:	1bf3      	subs	r3, r6, r7
 8007750:	3b01      	subs	r3, #1
 8007752:	4621      	mov	r1, r4
 8007754:	2b07      	cmp	r3, #7
 8007756:	dc0b      	bgt.n	8007770 <__gethex+0x17c>
 8007758:	ee18 0a10 	vmov	r0, s16
 800775c:	f000 fa70 	bl	8007c40 <_Balloc>
 8007760:	4604      	mov	r4, r0
 8007762:	b940      	cbnz	r0, 8007776 <__gethex+0x182>
 8007764:	4b5d      	ldr	r3, [pc, #372]	; (80078dc <__gethex+0x2e8>)
 8007766:	4602      	mov	r2, r0
 8007768:	21de      	movs	r1, #222	; 0xde
 800776a:	485d      	ldr	r0, [pc, #372]	; (80078e0 <__gethex+0x2ec>)
 800776c:	f001 f9b6 	bl	8008adc <__assert_func>
 8007770:	3101      	adds	r1, #1
 8007772:	105b      	asrs	r3, r3, #1
 8007774:	e7ee      	b.n	8007754 <__gethex+0x160>
 8007776:	f100 0914 	add.w	r9, r0, #20
 800777a:	f04f 0b00 	mov.w	fp, #0
 800777e:	f1ca 0301 	rsb	r3, sl, #1
 8007782:	f8cd 9008 	str.w	r9, [sp, #8]
 8007786:	f8cd b000 	str.w	fp, [sp]
 800778a:	9306      	str	r3, [sp, #24]
 800778c:	42b7      	cmp	r7, r6
 800778e:	d340      	bcc.n	8007812 <__gethex+0x21e>
 8007790:	9802      	ldr	r0, [sp, #8]
 8007792:	9b00      	ldr	r3, [sp, #0]
 8007794:	f840 3b04 	str.w	r3, [r0], #4
 8007798:	eba0 0009 	sub.w	r0, r0, r9
 800779c:	1080      	asrs	r0, r0, #2
 800779e:	0146      	lsls	r6, r0, #5
 80077a0:	6120      	str	r0, [r4, #16]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fb3e 	bl	8007e24 <__hi0bits>
 80077a8:	1a30      	subs	r0, r6, r0
 80077aa:	f8d8 6000 	ldr.w	r6, [r8]
 80077ae:	42b0      	cmp	r0, r6
 80077b0:	dd63      	ble.n	800787a <__gethex+0x286>
 80077b2:	1b87      	subs	r7, r0, r6
 80077b4:	4639      	mov	r1, r7
 80077b6:	4620      	mov	r0, r4
 80077b8:	f000 fee2 	bl	8008580 <__any_on>
 80077bc:	4682      	mov	sl, r0
 80077be:	b1a8      	cbz	r0, 80077ec <__gethex+0x1f8>
 80077c0:	1e7b      	subs	r3, r7, #1
 80077c2:	1159      	asrs	r1, r3, #5
 80077c4:	f003 021f 	and.w	r2, r3, #31
 80077c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80077cc:	f04f 0a01 	mov.w	sl, #1
 80077d0:	fa0a f202 	lsl.w	r2, sl, r2
 80077d4:	420a      	tst	r2, r1
 80077d6:	d009      	beq.n	80077ec <__gethex+0x1f8>
 80077d8:	4553      	cmp	r3, sl
 80077da:	dd05      	ble.n	80077e8 <__gethex+0x1f4>
 80077dc:	1eb9      	subs	r1, r7, #2
 80077de:	4620      	mov	r0, r4
 80077e0:	f000 fece 	bl	8008580 <__any_on>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d145      	bne.n	8007874 <__gethex+0x280>
 80077e8:	f04f 0a02 	mov.w	sl, #2
 80077ec:	4639      	mov	r1, r7
 80077ee:	4620      	mov	r0, r4
 80077f0:	f7ff fe98 	bl	8007524 <rshift>
 80077f4:	443d      	add	r5, r7
 80077f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077fa:	42ab      	cmp	r3, r5
 80077fc:	da4c      	bge.n	8007898 <__gethex+0x2a4>
 80077fe:	ee18 0a10 	vmov	r0, s16
 8007802:	4621      	mov	r1, r4
 8007804:	f000 fa5c 	bl	8007cc0 <_Bfree>
 8007808:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800780a:	2300      	movs	r3, #0
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	27a3      	movs	r7, #163	; 0xa3
 8007810:	e785      	b.n	800771e <__gethex+0x12a>
 8007812:	1e73      	subs	r3, r6, #1
 8007814:	9a05      	ldr	r2, [sp, #20]
 8007816:	9303      	str	r3, [sp, #12]
 8007818:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800781c:	4293      	cmp	r3, r2
 800781e:	d019      	beq.n	8007854 <__gethex+0x260>
 8007820:	f1bb 0f20 	cmp.w	fp, #32
 8007824:	d107      	bne.n	8007836 <__gethex+0x242>
 8007826:	9b02      	ldr	r3, [sp, #8]
 8007828:	9a00      	ldr	r2, [sp, #0]
 800782a:	f843 2b04 	str.w	r2, [r3], #4
 800782e:	9302      	str	r3, [sp, #8]
 8007830:	2300      	movs	r3, #0
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	469b      	mov	fp, r3
 8007836:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800783a:	f7ff fec5 	bl	80075c8 <__hexdig_fun>
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	f000 000f 	and.w	r0, r0, #15
 8007844:	fa00 f00b 	lsl.w	r0, r0, fp
 8007848:	4303      	orrs	r3, r0
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	f10b 0b04 	add.w	fp, fp, #4
 8007850:	9b03      	ldr	r3, [sp, #12]
 8007852:	e00d      	b.n	8007870 <__gethex+0x27c>
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	9a06      	ldr	r2, [sp, #24]
 8007858:	4413      	add	r3, r2
 800785a:	42bb      	cmp	r3, r7
 800785c:	d3e0      	bcc.n	8007820 <__gethex+0x22c>
 800785e:	4618      	mov	r0, r3
 8007860:	9901      	ldr	r1, [sp, #4]
 8007862:	9307      	str	r3, [sp, #28]
 8007864:	4652      	mov	r2, sl
 8007866:	f001 f917 	bl	8008a98 <strncmp>
 800786a:	9b07      	ldr	r3, [sp, #28]
 800786c:	2800      	cmp	r0, #0
 800786e:	d1d7      	bne.n	8007820 <__gethex+0x22c>
 8007870:	461e      	mov	r6, r3
 8007872:	e78b      	b.n	800778c <__gethex+0x198>
 8007874:	f04f 0a03 	mov.w	sl, #3
 8007878:	e7b8      	b.n	80077ec <__gethex+0x1f8>
 800787a:	da0a      	bge.n	8007892 <__gethex+0x29e>
 800787c:	1a37      	subs	r7, r6, r0
 800787e:	4621      	mov	r1, r4
 8007880:	ee18 0a10 	vmov	r0, s16
 8007884:	463a      	mov	r2, r7
 8007886:	f000 fc37 	bl	80080f8 <__lshift>
 800788a:	1bed      	subs	r5, r5, r7
 800788c:	4604      	mov	r4, r0
 800788e:	f100 0914 	add.w	r9, r0, #20
 8007892:	f04f 0a00 	mov.w	sl, #0
 8007896:	e7ae      	b.n	80077f6 <__gethex+0x202>
 8007898:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800789c:	42a8      	cmp	r0, r5
 800789e:	dd72      	ble.n	8007986 <__gethex+0x392>
 80078a0:	1b45      	subs	r5, r0, r5
 80078a2:	42ae      	cmp	r6, r5
 80078a4:	dc36      	bgt.n	8007914 <__gethex+0x320>
 80078a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d02a      	beq.n	8007904 <__gethex+0x310>
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d02c      	beq.n	800790c <__gethex+0x318>
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d11c      	bne.n	80078f0 <__gethex+0x2fc>
 80078b6:	42ae      	cmp	r6, r5
 80078b8:	d11a      	bne.n	80078f0 <__gethex+0x2fc>
 80078ba:	2e01      	cmp	r6, #1
 80078bc:	d112      	bne.n	80078e4 <__gethex+0x2f0>
 80078be:	9a04      	ldr	r2, [sp, #16]
 80078c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	2301      	movs	r3, #1
 80078c8:	6123      	str	r3, [r4, #16]
 80078ca:	f8c9 3000 	str.w	r3, [r9]
 80078ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078d0:	2762      	movs	r7, #98	; 0x62
 80078d2:	601c      	str	r4, [r3, #0]
 80078d4:	e723      	b.n	800771e <__gethex+0x12a>
 80078d6:	bf00      	nop
 80078d8:	0800a080 	.word	0x0800a080
 80078dc:	0800a008 	.word	0x0800a008
 80078e0:	0800a019 	.word	0x0800a019
 80078e4:	1e71      	subs	r1, r6, #1
 80078e6:	4620      	mov	r0, r4
 80078e8:	f000 fe4a 	bl	8008580 <__any_on>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d1e6      	bne.n	80078be <__gethex+0x2ca>
 80078f0:	ee18 0a10 	vmov	r0, s16
 80078f4:	4621      	mov	r1, r4
 80078f6:	f000 f9e3 	bl	8007cc0 <_Bfree>
 80078fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078fc:	2300      	movs	r3, #0
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	2750      	movs	r7, #80	; 0x50
 8007902:	e70c      	b.n	800771e <__gethex+0x12a>
 8007904:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1f2      	bne.n	80078f0 <__gethex+0x2fc>
 800790a:	e7d8      	b.n	80078be <__gethex+0x2ca>
 800790c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1d5      	bne.n	80078be <__gethex+0x2ca>
 8007912:	e7ed      	b.n	80078f0 <__gethex+0x2fc>
 8007914:	1e6f      	subs	r7, r5, #1
 8007916:	f1ba 0f00 	cmp.w	sl, #0
 800791a:	d131      	bne.n	8007980 <__gethex+0x38c>
 800791c:	b127      	cbz	r7, 8007928 <__gethex+0x334>
 800791e:	4639      	mov	r1, r7
 8007920:	4620      	mov	r0, r4
 8007922:	f000 fe2d 	bl	8008580 <__any_on>
 8007926:	4682      	mov	sl, r0
 8007928:	117b      	asrs	r3, r7, #5
 800792a:	2101      	movs	r1, #1
 800792c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007930:	f007 071f 	and.w	r7, r7, #31
 8007934:	fa01 f707 	lsl.w	r7, r1, r7
 8007938:	421f      	tst	r7, r3
 800793a:	4629      	mov	r1, r5
 800793c:	4620      	mov	r0, r4
 800793e:	bf18      	it	ne
 8007940:	f04a 0a02 	orrne.w	sl, sl, #2
 8007944:	1b76      	subs	r6, r6, r5
 8007946:	f7ff fded 	bl	8007524 <rshift>
 800794a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800794e:	2702      	movs	r7, #2
 8007950:	f1ba 0f00 	cmp.w	sl, #0
 8007954:	d048      	beq.n	80079e8 <__gethex+0x3f4>
 8007956:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d015      	beq.n	800798a <__gethex+0x396>
 800795e:	2b03      	cmp	r3, #3
 8007960:	d017      	beq.n	8007992 <__gethex+0x39e>
 8007962:	2b01      	cmp	r3, #1
 8007964:	d109      	bne.n	800797a <__gethex+0x386>
 8007966:	f01a 0f02 	tst.w	sl, #2
 800796a:	d006      	beq.n	800797a <__gethex+0x386>
 800796c:	f8d9 0000 	ldr.w	r0, [r9]
 8007970:	ea4a 0a00 	orr.w	sl, sl, r0
 8007974:	f01a 0f01 	tst.w	sl, #1
 8007978:	d10e      	bne.n	8007998 <__gethex+0x3a4>
 800797a:	f047 0710 	orr.w	r7, r7, #16
 800797e:	e033      	b.n	80079e8 <__gethex+0x3f4>
 8007980:	f04f 0a01 	mov.w	sl, #1
 8007984:	e7d0      	b.n	8007928 <__gethex+0x334>
 8007986:	2701      	movs	r7, #1
 8007988:	e7e2      	b.n	8007950 <__gethex+0x35c>
 800798a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800798c:	f1c3 0301 	rsb	r3, r3, #1
 8007990:	9315      	str	r3, [sp, #84]	; 0x54
 8007992:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0f0      	beq.n	800797a <__gethex+0x386>
 8007998:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800799c:	f104 0314 	add.w	r3, r4, #20
 80079a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80079a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80079a8:	f04f 0c00 	mov.w	ip, #0
 80079ac:	4618      	mov	r0, r3
 80079ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80079b6:	d01c      	beq.n	80079f2 <__gethex+0x3fe>
 80079b8:	3201      	adds	r2, #1
 80079ba:	6002      	str	r2, [r0, #0]
 80079bc:	2f02      	cmp	r7, #2
 80079be:	f104 0314 	add.w	r3, r4, #20
 80079c2:	d13f      	bne.n	8007a44 <__gethex+0x450>
 80079c4:	f8d8 2000 	ldr.w	r2, [r8]
 80079c8:	3a01      	subs	r2, #1
 80079ca:	42b2      	cmp	r2, r6
 80079cc:	d10a      	bne.n	80079e4 <__gethex+0x3f0>
 80079ce:	1171      	asrs	r1, r6, #5
 80079d0:	2201      	movs	r2, #1
 80079d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079d6:	f006 061f 	and.w	r6, r6, #31
 80079da:	fa02 f606 	lsl.w	r6, r2, r6
 80079de:	421e      	tst	r6, r3
 80079e0:	bf18      	it	ne
 80079e2:	4617      	movne	r7, r2
 80079e4:	f047 0720 	orr.w	r7, r7, #32
 80079e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079ea:	601c      	str	r4, [r3, #0]
 80079ec:	9b04      	ldr	r3, [sp, #16]
 80079ee:	601d      	str	r5, [r3, #0]
 80079f0:	e695      	b.n	800771e <__gethex+0x12a>
 80079f2:	4299      	cmp	r1, r3
 80079f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80079f8:	d8d8      	bhi.n	80079ac <__gethex+0x3b8>
 80079fa:	68a3      	ldr	r3, [r4, #8]
 80079fc:	459b      	cmp	fp, r3
 80079fe:	db19      	blt.n	8007a34 <__gethex+0x440>
 8007a00:	6861      	ldr	r1, [r4, #4]
 8007a02:	ee18 0a10 	vmov	r0, s16
 8007a06:	3101      	adds	r1, #1
 8007a08:	f000 f91a 	bl	8007c40 <_Balloc>
 8007a0c:	4681      	mov	r9, r0
 8007a0e:	b918      	cbnz	r0, 8007a18 <__gethex+0x424>
 8007a10:	4b1a      	ldr	r3, [pc, #104]	; (8007a7c <__gethex+0x488>)
 8007a12:	4602      	mov	r2, r0
 8007a14:	2184      	movs	r1, #132	; 0x84
 8007a16:	e6a8      	b.n	800776a <__gethex+0x176>
 8007a18:	6922      	ldr	r2, [r4, #16]
 8007a1a:	3202      	adds	r2, #2
 8007a1c:	f104 010c 	add.w	r1, r4, #12
 8007a20:	0092      	lsls	r2, r2, #2
 8007a22:	300c      	adds	r0, #12
 8007a24:	f7fd f952 	bl	8004ccc <memcpy>
 8007a28:	4621      	mov	r1, r4
 8007a2a:	ee18 0a10 	vmov	r0, s16
 8007a2e:	f000 f947 	bl	8007cc0 <_Bfree>
 8007a32:	464c      	mov	r4, r9
 8007a34:	6923      	ldr	r3, [r4, #16]
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a3c:	6122      	str	r2, [r4, #16]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	615a      	str	r2, [r3, #20]
 8007a42:	e7bb      	b.n	80079bc <__gethex+0x3c8>
 8007a44:	6922      	ldr	r2, [r4, #16]
 8007a46:	455a      	cmp	r2, fp
 8007a48:	dd0b      	ble.n	8007a62 <__gethex+0x46e>
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f7ff fd69 	bl	8007524 <rshift>
 8007a52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a56:	3501      	adds	r5, #1
 8007a58:	42ab      	cmp	r3, r5
 8007a5a:	f6ff aed0 	blt.w	80077fe <__gethex+0x20a>
 8007a5e:	2701      	movs	r7, #1
 8007a60:	e7c0      	b.n	80079e4 <__gethex+0x3f0>
 8007a62:	f016 061f 	ands.w	r6, r6, #31
 8007a66:	d0fa      	beq.n	8007a5e <__gethex+0x46a>
 8007a68:	4453      	add	r3, sl
 8007a6a:	f1c6 0620 	rsb	r6, r6, #32
 8007a6e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007a72:	f000 f9d7 	bl	8007e24 <__hi0bits>
 8007a76:	42b0      	cmp	r0, r6
 8007a78:	dbe7      	blt.n	8007a4a <__gethex+0x456>
 8007a7a:	e7f0      	b.n	8007a5e <__gethex+0x46a>
 8007a7c:	0800a008 	.word	0x0800a008

08007a80 <L_shift>:
 8007a80:	f1c2 0208 	rsb	r2, r2, #8
 8007a84:	0092      	lsls	r2, r2, #2
 8007a86:	b570      	push	{r4, r5, r6, lr}
 8007a88:	f1c2 0620 	rsb	r6, r2, #32
 8007a8c:	6843      	ldr	r3, [r0, #4]
 8007a8e:	6804      	ldr	r4, [r0, #0]
 8007a90:	fa03 f506 	lsl.w	r5, r3, r6
 8007a94:	432c      	orrs	r4, r5
 8007a96:	40d3      	lsrs	r3, r2
 8007a98:	6004      	str	r4, [r0, #0]
 8007a9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a9e:	4288      	cmp	r0, r1
 8007aa0:	d3f4      	bcc.n	8007a8c <L_shift+0xc>
 8007aa2:	bd70      	pop	{r4, r5, r6, pc}

08007aa4 <__match>:
 8007aa4:	b530      	push	{r4, r5, lr}
 8007aa6:	6803      	ldr	r3, [r0, #0]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aae:	b914      	cbnz	r4, 8007ab6 <__match+0x12>
 8007ab0:	6003      	str	r3, [r0, #0]
 8007ab2:	2001      	movs	r0, #1
 8007ab4:	bd30      	pop	{r4, r5, pc}
 8007ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007abe:	2d19      	cmp	r5, #25
 8007ac0:	bf98      	it	ls
 8007ac2:	3220      	addls	r2, #32
 8007ac4:	42a2      	cmp	r2, r4
 8007ac6:	d0f0      	beq.n	8007aaa <__match+0x6>
 8007ac8:	2000      	movs	r0, #0
 8007aca:	e7f3      	b.n	8007ab4 <__match+0x10>

08007acc <__hexnan>:
 8007acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad0:	680b      	ldr	r3, [r1, #0]
 8007ad2:	115e      	asrs	r6, r3, #5
 8007ad4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ad8:	f013 031f 	ands.w	r3, r3, #31
 8007adc:	b087      	sub	sp, #28
 8007ade:	bf18      	it	ne
 8007ae0:	3604      	addne	r6, #4
 8007ae2:	2500      	movs	r5, #0
 8007ae4:	1f37      	subs	r7, r6, #4
 8007ae6:	4690      	mov	r8, r2
 8007ae8:	6802      	ldr	r2, [r0, #0]
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	4682      	mov	sl, r0
 8007aee:	f846 5c04 	str.w	r5, [r6, #-4]
 8007af2:	46b9      	mov	r9, r7
 8007af4:	463c      	mov	r4, r7
 8007af6:	9502      	str	r5, [sp, #8]
 8007af8:	46ab      	mov	fp, r5
 8007afa:	7851      	ldrb	r1, [r2, #1]
 8007afc:	1c53      	adds	r3, r2, #1
 8007afe:	9303      	str	r3, [sp, #12]
 8007b00:	b341      	cbz	r1, 8007b54 <__hexnan+0x88>
 8007b02:	4608      	mov	r0, r1
 8007b04:	9205      	str	r2, [sp, #20]
 8007b06:	9104      	str	r1, [sp, #16]
 8007b08:	f7ff fd5e 	bl	80075c8 <__hexdig_fun>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d14f      	bne.n	8007bb0 <__hexnan+0xe4>
 8007b10:	9904      	ldr	r1, [sp, #16]
 8007b12:	9a05      	ldr	r2, [sp, #20]
 8007b14:	2920      	cmp	r1, #32
 8007b16:	d818      	bhi.n	8007b4a <__hexnan+0x7e>
 8007b18:	9b02      	ldr	r3, [sp, #8]
 8007b1a:	459b      	cmp	fp, r3
 8007b1c:	dd13      	ble.n	8007b46 <__hexnan+0x7a>
 8007b1e:	454c      	cmp	r4, r9
 8007b20:	d206      	bcs.n	8007b30 <__hexnan+0x64>
 8007b22:	2d07      	cmp	r5, #7
 8007b24:	dc04      	bgt.n	8007b30 <__hexnan+0x64>
 8007b26:	462a      	mov	r2, r5
 8007b28:	4649      	mov	r1, r9
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f7ff ffa8 	bl	8007a80 <L_shift>
 8007b30:	4544      	cmp	r4, r8
 8007b32:	d950      	bls.n	8007bd6 <__hexnan+0x10a>
 8007b34:	2300      	movs	r3, #0
 8007b36:	f1a4 0904 	sub.w	r9, r4, #4
 8007b3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b3e:	f8cd b008 	str.w	fp, [sp, #8]
 8007b42:	464c      	mov	r4, r9
 8007b44:	461d      	mov	r5, r3
 8007b46:	9a03      	ldr	r2, [sp, #12]
 8007b48:	e7d7      	b.n	8007afa <__hexnan+0x2e>
 8007b4a:	2929      	cmp	r1, #41	; 0x29
 8007b4c:	d156      	bne.n	8007bfc <__hexnan+0x130>
 8007b4e:	3202      	adds	r2, #2
 8007b50:	f8ca 2000 	str.w	r2, [sl]
 8007b54:	f1bb 0f00 	cmp.w	fp, #0
 8007b58:	d050      	beq.n	8007bfc <__hexnan+0x130>
 8007b5a:	454c      	cmp	r4, r9
 8007b5c:	d206      	bcs.n	8007b6c <__hexnan+0xa0>
 8007b5e:	2d07      	cmp	r5, #7
 8007b60:	dc04      	bgt.n	8007b6c <__hexnan+0xa0>
 8007b62:	462a      	mov	r2, r5
 8007b64:	4649      	mov	r1, r9
 8007b66:	4620      	mov	r0, r4
 8007b68:	f7ff ff8a 	bl	8007a80 <L_shift>
 8007b6c:	4544      	cmp	r4, r8
 8007b6e:	d934      	bls.n	8007bda <__hexnan+0x10e>
 8007b70:	f1a8 0204 	sub.w	r2, r8, #4
 8007b74:	4623      	mov	r3, r4
 8007b76:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b7a:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b7e:	429f      	cmp	r7, r3
 8007b80:	d2f9      	bcs.n	8007b76 <__hexnan+0xaa>
 8007b82:	1b3b      	subs	r3, r7, r4
 8007b84:	f023 0303 	bic.w	r3, r3, #3
 8007b88:	3304      	adds	r3, #4
 8007b8a:	3401      	adds	r4, #1
 8007b8c:	3e03      	subs	r6, #3
 8007b8e:	42b4      	cmp	r4, r6
 8007b90:	bf88      	it	hi
 8007b92:	2304      	movhi	r3, #4
 8007b94:	4443      	add	r3, r8
 8007b96:	2200      	movs	r2, #0
 8007b98:	f843 2b04 	str.w	r2, [r3], #4
 8007b9c:	429f      	cmp	r7, r3
 8007b9e:	d2fb      	bcs.n	8007b98 <__hexnan+0xcc>
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	b91b      	cbnz	r3, 8007bac <__hexnan+0xe0>
 8007ba4:	4547      	cmp	r7, r8
 8007ba6:	d127      	bne.n	8007bf8 <__hexnan+0x12c>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	2005      	movs	r0, #5
 8007bae:	e026      	b.n	8007bfe <__hexnan+0x132>
 8007bb0:	3501      	adds	r5, #1
 8007bb2:	2d08      	cmp	r5, #8
 8007bb4:	f10b 0b01 	add.w	fp, fp, #1
 8007bb8:	dd06      	ble.n	8007bc8 <__hexnan+0xfc>
 8007bba:	4544      	cmp	r4, r8
 8007bbc:	d9c3      	bls.n	8007b46 <__hexnan+0x7a>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f844 3c04 	str.w	r3, [r4, #-4]
 8007bc4:	2501      	movs	r5, #1
 8007bc6:	3c04      	subs	r4, #4
 8007bc8:	6822      	ldr	r2, [r4, #0]
 8007bca:	f000 000f 	and.w	r0, r0, #15
 8007bce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007bd2:	6022      	str	r2, [r4, #0]
 8007bd4:	e7b7      	b.n	8007b46 <__hexnan+0x7a>
 8007bd6:	2508      	movs	r5, #8
 8007bd8:	e7b5      	b.n	8007b46 <__hexnan+0x7a>
 8007bda:	9b01      	ldr	r3, [sp, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0df      	beq.n	8007ba0 <__hexnan+0xd4>
 8007be0:	f04f 32ff 	mov.w	r2, #4294967295
 8007be4:	f1c3 0320 	rsb	r3, r3, #32
 8007be8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007bf0:	401a      	ands	r2, r3
 8007bf2:	f846 2c04 	str.w	r2, [r6, #-4]
 8007bf6:	e7d3      	b.n	8007ba0 <__hexnan+0xd4>
 8007bf8:	3f04      	subs	r7, #4
 8007bfa:	e7d1      	b.n	8007ba0 <__hexnan+0xd4>
 8007bfc:	2004      	movs	r0, #4
 8007bfe:	b007      	add	sp, #28
 8007c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c04 <_localeconv_r>:
 8007c04:	4800      	ldr	r0, [pc, #0]	; (8007c08 <_localeconv_r+0x4>)
 8007c06:	4770      	bx	lr
 8007c08:	2000016c 	.word	0x2000016c

08007c0c <malloc>:
 8007c0c:	4b02      	ldr	r3, [pc, #8]	; (8007c18 <malloc+0xc>)
 8007c0e:	4601      	mov	r1, r0
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	f000 bd59 	b.w	80086c8 <_malloc_r>
 8007c16:	bf00      	nop
 8007c18:	20000014 	.word	0x20000014

08007c1c <__ascii_mbtowc>:
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	b901      	cbnz	r1, 8007c22 <__ascii_mbtowc+0x6>
 8007c20:	a901      	add	r1, sp, #4
 8007c22:	b142      	cbz	r2, 8007c36 <__ascii_mbtowc+0x1a>
 8007c24:	b14b      	cbz	r3, 8007c3a <__ascii_mbtowc+0x1e>
 8007c26:	7813      	ldrb	r3, [r2, #0]
 8007c28:	600b      	str	r3, [r1, #0]
 8007c2a:	7812      	ldrb	r2, [r2, #0]
 8007c2c:	1e10      	subs	r0, r2, #0
 8007c2e:	bf18      	it	ne
 8007c30:	2001      	movne	r0, #1
 8007c32:	b002      	add	sp, #8
 8007c34:	4770      	bx	lr
 8007c36:	4610      	mov	r0, r2
 8007c38:	e7fb      	b.n	8007c32 <__ascii_mbtowc+0x16>
 8007c3a:	f06f 0001 	mvn.w	r0, #1
 8007c3e:	e7f8      	b.n	8007c32 <__ascii_mbtowc+0x16>

08007c40 <_Balloc>:
 8007c40:	b570      	push	{r4, r5, r6, lr}
 8007c42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c44:	4604      	mov	r4, r0
 8007c46:	460d      	mov	r5, r1
 8007c48:	b976      	cbnz	r6, 8007c68 <_Balloc+0x28>
 8007c4a:	2010      	movs	r0, #16
 8007c4c:	f7ff ffde 	bl	8007c0c <malloc>
 8007c50:	4602      	mov	r2, r0
 8007c52:	6260      	str	r0, [r4, #36]	; 0x24
 8007c54:	b920      	cbnz	r0, 8007c60 <_Balloc+0x20>
 8007c56:	4b18      	ldr	r3, [pc, #96]	; (8007cb8 <_Balloc+0x78>)
 8007c58:	4818      	ldr	r0, [pc, #96]	; (8007cbc <_Balloc+0x7c>)
 8007c5a:	2166      	movs	r1, #102	; 0x66
 8007c5c:	f000 ff3e 	bl	8008adc <__assert_func>
 8007c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c64:	6006      	str	r6, [r0, #0]
 8007c66:	60c6      	str	r6, [r0, #12]
 8007c68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c6a:	68f3      	ldr	r3, [r6, #12]
 8007c6c:	b183      	cbz	r3, 8007c90 <_Balloc+0x50>
 8007c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c76:	b9b8      	cbnz	r0, 8007ca8 <_Balloc+0x68>
 8007c78:	2101      	movs	r1, #1
 8007c7a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c7e:	1d72      	adds	r2, r6, #5
 8007c80:	0092      	lsls	r2, r2, #2
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 fc9d 	bl	80085c2 <_calloc_r>
 8007c88:	b160      	cbz	r0, 8007ca4 <_Balloc+0x64>
 8007c8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c8e:	e00e      	b.n	8007cae <_Balloc+0x6e>
 8007c90:	2221      	movs	r2, #33	; 0x21
 8007c92:	2104      	movs	r1, #4
 8007c94:	4620      	mov	r0, r4
 8007c96:	f000 fc94 	bl	80085c2 <_calloc_r>
 8007c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c9c:	60f0      	str	r0, [r6, #12]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e4      	bne.n	8007c6e <_Balloc+0x2e>
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	bd70      	pop	{r4, r5, r6, pc}
 8007ca8:	6802      	ldr	r2, [r0, #0]
 8007caa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cb4:	e7f7      	b.n	8007ca6 <_Balloc+0x66>
 8007cb6:	bf00      	nop
 8007cb8:	08009f96 	.word	0x08009f96
 8007cbc:	0800a094 	.word	0x0800a094

08007cc0 <_Bfree>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	b976      	cbnz	r6, 8007ce8 <_Bfree+0x28>
 8007cca:	2010      	movs	r0, #16
 8007ccc:	f7ff ff9e 	bl	8007c0c <malloc>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	6268      	str	r0, [r5, #36]	; 0x24
 8007cd4:	b920      	cbnz	r0, 8007ce0 <_Bfree+0x20>
 8007cd6:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <_Bfree+0x3c>)
 8007cd8:	4809      	ldr	r0, [pc, #36]	; (8007d00 <_Bfree+0x40>)
 8007cda:	218a      	movs	r1, #138	; 0x8a
 8007cdc:	f000 fefe 	bl	8008adc <__assert_func>
 8007ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ce4:	6006      	str	r6, [r0, #0]
 8007ce6:	60c6      	str	r6, [r0, #12]
 8007ce8:	b13c      	cbz	r4, 8007cfa <_Bfree+0x3a>
 8007cea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cec:	6862      	ldr	r2, [r4, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cf4:	6021      	str	r1, [r4, #0]
 8007cf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}
 8007cfc:	08009f96 	.word	0x08009f96
 8007d00:	0800a094 	.word	0x0800a094

08007d04 <__multadd>:
 8007d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d08:	690d      	ldr	r5, [r1, #16]
 8007d0a:	4607      	mov	r7, r0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	461e      	mov	r6, r3
 8007d10:	f101 0c14 	add.w	ip, r1, #20
 8007d14:	2000      	movs	r0, #0
 8007d16:	f8dc 3000 	ldr.w	r3, [ip]
 8007d1a:	b299      	uxth	r1, r3
 8007d1c:	fb02 6101 	mla	r1, r2, r1, r6
 8007d20:	0c1e      	lsrs	r6, r3, #16
 8007d22:	0c0b      	lsrs	r3, r1, #16
 8007d24:	fb02 3306 	mla	r3, r2, r6, r3
 8007d28:	b289      	uxth	r1, r1
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d30:	4285      	cmp	r5, r0
 8007d32:	f84c 1b04 	str.w	r1, [ip], #4
 8007d36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d3a:	dcec      	bgt.n	8007d16 <__multadd+0x12>
 8007d3c:	b30e      	cbz	r6, 8007d82 <__multadd+0x7e>
 8007d3e:	68a3      	ldr	r3, [r4, #8]
 8007d40:	42ab      	cmp	r3, r5
 8007d42:	dc19      	bgt.n	8007d78 <__multadd+0x74>
 8007d44:	6861      	ldr	r1, [r4, #4]
 8007d46:	4638      	mov	r0, r7
 8007d48:	3101      	adds	r1, #1
 8007d4a:	f7ff ff79 	bl	8007c40 <_Balloc>
 8007d4e:	4680      	mov	r8, r0
 8007d50:	b928      	cbnz	r0, 8007d5e <__multadd+0x5a>
 8007d52:	4602      	mov	r2, r0
 8007d54:	4b0c      	ldr	r3, [pc, #48]	; (8007d88 <__multadd+0x84>)
 8007d56:	480d      	ldr	r0, [pc, #52]	; (8007d8c <__multadd+0x88>)
 8007d58:	21b5      	movs	r1, #181	; 0xb5
 8007d5a:	f000 febf 	bl	8008adc <__assert_func>
 8007d5e:	6922      	ldr	r2, [r4, #16]
 8007d60:	3202      	adds	r2, #2
 8007d62:	f104 010c 	add.w	r1, r4, #12
 8007d66:	0092      	lsls	r2, r2, #2
 8007d68:	300c      	adds	r0, #12
 8007d6a:	f7fc ffaf 	bl	8004ccc <memcpy>
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4638      	mov	r0, r7
 8007d72:	f7ff ffa5 	bl	8007cc0 <_Bfree>
 8007d76:	4644      	mov	r4, r8
 8007d78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d7c:	3501      	adds	r5, #1
 8007d7e:	615e      	str	r6, [r3, #20]
 8007d80:	6125      	str	r5, [r4, #16]
 8007d82:	4620      	mov	r0, r4
 8007d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d88:	0800a008 	.word	0x0800a008
 8007d8c:	0800a094 	.word	0x0800a094

08007d90 <__s2b>:
 8007d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d94:	460c      	mov	r4, r1
 8007d96:	4615      	mov	r5, r2
 8007d98:	461f      	mov	r7, r3
 8007d9a:	2209      	movs	r2, #9
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	4606      	mov	r6, r0
 8007da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007da4:	2100      	movs	r1, #0
 8007da6:	2201      	movs	r2, #1
 8007da8:	429a      	cmp	r2, r3
 8007daa:	db09      	blt.n	8007dc0 <__s2b+0x30>
 8007dac:	4630      	mov	r0, r6
 8007dae:	f7ff ff47 	bl	8007c40 <_Balloc>
 8007db2:	b940      	cbnz	r0, 8007dc6 <__s2b+0x36>
 8007db4:	4602      	mov	r2, r0
 8007db6:	4b19      	ldr	r3, [pc, #100]	; (8007e1c <__s2b+0x8c>)
 8007db8:	4819      	ldr	r0, [pc, #100]	; (8007e20 <__s2b+0x90>)
 8007dba:	21ce      	movs	r1, #206	; 0xce
 8007dbc:	f000 fe8e 	bl	8008adc <__assert_func>
 8007dc0:	0052      	lsls	r2, r2, #1
 8007dc2:	3101      	adds	r1, #1
 8007dc4:	e7f0      	b.n	8007da8 <__s2b+0x18>
 8007dc6:	9b08      	ldr	r3, [sp, #32]
 8007dc8:	6143      	str	r3, [r0, #20]
 8007dca:	2d09      	cmp	r5, #9
 8007dcc:	f04f 0301 	mov.w	r3, #1
 8007dd0:	6103      	str	r3, [r0, #16]
 8007dd2:	dd16      	ble.n	8007e02 <__s2b+0x72>
 8007dd4:	f104 0909 	add.w	r9, r4, #9
 8007dd8:	46c8      	mov	r8, r9
 8007dda:	442c      	add	r4, r5
 8007ddc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007de0:	4601      	mov	r1, r0
 8007de2:	3b30      	subs	r3, #48	; 0x30
 8007de4:	220a      	movs	r2, #10
 8007de6:	4630      	mov	r0, r6
 8007de8:	f7ff ff8c 	bl	8007d04 <__multadd>
 8007dec:	45a0      	cmp	r8, r4
 8007dee:	d1f5      	bne.n	8007ddc <__s2b+0x4c>
 8007df0:	f1a5 0408 	sub.w	r4, r5, #8
 8007df4:	444c      	add	r4, r9
 8007df6:	1b2d      	subs	r5, r5, r4
 8007df8:	1963      	adds	r3, r4, r5
 8007dfa:	42bb      	cmp	r3, r7
 8007dfc:	db04      	blt.n	8007e08 <__s2b+0x78>
 8007dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e02:	340a      	adds	r4, #10
 8007e04:	2509      	movs	r5, #9
 8007e06:	e7f6      	b.n	8007df6 <__s2b+0x66>
 8007e08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e0c:	4601      	mov	r1, r0
 8007e0e:	3b30      	subs	r3, #48	; 0x30
 8007e10:	220a      	movs	r2, #10
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7ff ff76 	bl	8007d04 <__multadd>
 8007e18:	e7ee      	b.n	8007df8 <__s2b+0x68>
 8007e1a:	bf00      	nop
 8007e1c:	0800a008 	.word	0x0800a008
 8007e20:	0800a094 	.word	0x0800a094

08007e24 <__hi0bits>:
 8007e24:	0c03      	lsrs	r3, r0, #16
 8007e26:	041b      	lsls	r3, r3, #16
 8007e28:	b9d3      	cbnz	r3, 8007e60 <__hi0bits+0x3c>
 8007e2a:	0400      	lsls	r0, r0, #16
 8007e2c:	2310      	movs	r3, #16
 8007e2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007e32:	bf04      	itt	eq
 8007e34:	0200      	lsleq	r0, r0, #8
 8007e36:	3308      	addeq	r3, #8
 8007e38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007e3c:	bf04      	itt	eq
 8007e3e:	0100      	lsleq	r0, r0, #4
 8007e40:	3304      	addeq	r3, #4
 8007e42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007e46:	bf04      	itt	eq
 8007e48:	0080      	lsleq	r0, r0, #2
 8007e4a:	3302      	addeq	r3, #2
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	db05      	blt.n	8007e5c <__hi0bits+0x38>
 8007e50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007e54:	f103 0301 	add.w	r3, r3, #1
 8007e58:	bf08      	it	eq
 8007e5a:	2320      	moveq	r3, #32
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	4770      	bx	lr
 8007e60:	2300      	movs	r3, #0
 8007e62:	e7e4      	b.n	8007e2e <__hi0bits+0xa>

08007e64 <__lo0bits>:
 8007e64:	6803      	ldr	r3, [r0, #0]
 8007e66:	f013 0207 	ands.w	r2, r3, #7
 8007e6a:	4601      	mov	r1, r0
 8007e6c:	d00b      	beq.n	8007e86 <__lo0bits+0x22>
 8007e6e:	07da      	lsls	r2, r3, #31
 8007e70:	d423      	bmi.n	8007eba <__lo0bits+0x56>
 8007e72:	0798      	lsls	r0, r3, #30
 8007e74:	bf49      	itett	mi
 8007e76:	085b      	lsrmi	r3, r3, #1
 8007e78:	089b      	lsrpl	r3, r3, #2
 8007e7a:	2001      	movmi	r0, #1
 8007e7c:	600b      	strmi	r3, [r1, #0]
 8007e7e:	bf5c      	itt	pl
 8007e80:	600b      	strpl	r3, [r1, #0]
 8007e82:	2002      	movpl	r0, #2
 8007e84:	4770      	bx	lr
 8007e86:	b298      	uxth	r0, r3
 8007e88:	b9a8      	cbnz	r0, 8007eb6 <__lo0bits+0x52>
 8007e8a:	0c1b      	lsrs	r3, r3, #16
 8007e8c:	2010      	movs	r0, #16
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	b90a      	cbnz	r2, 8007e96 <__lo0bits+0x32>
 8007e92:	3008      	adds	r0, #8
 8007e94:	0a1b      	lsrs	r3, r3, #8
 8007e96:	071a      	lsls	r2, r3, #28
 8007e98:	bf04      	itt	eq
 8007e9a:	091b      	lsreq	r3, r3, #4
 8007e9c:	3004      	addeq	r0, #4
 8007e9e:	079a      	lsls	r2, r3, #30
 8007ea0:	bf04      	itt	eq
 8007ea2:	089b      	lsreq	r3, r3, #2
 8007ea4:	3002      	addeq	r0, #2
 8007ea6:	07da      	lsls	r2, r3, #31
 8007ea8:	d403      	bmi.n	8007eb2 <__lo0bits+0x4e>
 8007eaa:	085b      	lsrs	r3, r3, #1
 8007eac:	f100 0001 	add.w	r0, r0, #1
 8007eb0:	d005      	beq.n	8007ebe <__lo0bits+0x5a>
 8007eb2:	600b      	str	r3, [r1, #0]
 8007eb4:	4770      	bx	lr
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	e7e9      	b.n	8007e8e <__lo0bits+0x2a>
 8007eba:	2000      	movs	r0, #0
 8007ebc:	4770      	bx	lr
 8007ebe:	2020      	movs	r0, #32
 8007ec0:	4770      	bx	lr
	...

08007ec4 <__i2b>:
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	2101      	movs	r1, #1
 8007eca:	f7ff feb9 	bl	8007c40 <_Balloc>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	b928      	cbnz	r0, 8007ede <__i2b+0x1a>
 8007ed2:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <__i2b+0x24>)
 8007ed4:	4805      	ldr	r0, [pc, #20]	; (8007eec <__i2b+0x28>)
 8007ed6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007eda:	f000 fdff 	bl	8008adc <__assert_func>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	6144      	str	r4, [r0, #20]
 8007ee2:	6103      	str	r3, [r0, #16]
 8007ee4:	bd10      	pop	{r4, pc}
 8007ee6:	bf00      	nop
 8007ee8:	0800a008 	.word	0x0800a008
 8007eec:	0800a094 	.word	0x0800a094

08007ef0 <__multiply>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	4691      	mov	r9, r2
 8007ef6:	690a      	ldr	r2, [r1, #16]
 8007ef8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	bfb8      	it	lt
 8007f00:	460b      	movlt	r3, r1
 8007f02:	460c      	mov	r4, r1
 8007f04:	bfbc      	itt	lt
 8007f06:	464c      	movlt	r4, r9
 8007f08:	4699      	movlt	r9, r3
 8007f0a:	6927      	ldr	r7, [r4, #16]
 8007f0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f10:	68a3      	ldr	r3, [r4, #8]
 8007f12:	6861      	ldr	r1, [r4, #4]
 8007f14:	eb07 060a 	add.w	r6, r7, sl
 8007f18:	42b3      	cmp	r3, r6
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	bfb8      	it	lt
 8007f1e:	3101      	addlt	r1, #1
 8007f20:	f7ff fe8e 	bl	8007c40 <_Balloc>
 8007f24:	b930      	cbnz	r0, 8007f34 <__multiply+0x44>
 8007f26:	4602      	mov	r2, r0
 8007f28:	4b44      	ldr	r3, [pc, #272]	; (800803c <__multiply+0x14c>)
 8007f2a:	4845      	ldr	r0, [pc, #276]	; (8008040 <__multiply+0x150>)
 8007f2c:	f240 115d 	movw	r1, #349	; 0x15d
 8007f30:	f000 fdd4 	bl	8008adc <__assert_func>
 8007f34:	f100 0514 	add.w	r5, r0, #20
 8007f38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f3c:	462b      	mov	r3, r5
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4543      	cmp	r3, r8
 8007f42:	d321      	bcc.n	8007f88 <__multiply+0x98>
 8007f44:	f104 0314 	add.w	r3, r4, #20
 8007f48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f4c:	f109 0314 	add.w	r3, r9, #20
 8007f50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f54:	9202      	str	r2, [sp, #8]
 8007f56:	1b3a      	subs	r2, r7, r4
 8007f58:	3a15      	subs	r2, #21
 8007f5a:	f022 0203 	bic.w	r2, r2, #3
 8007f5e:	3204      	adds	r2, #4
 8007f60:	f104 0115 	add.w	r1, r4, #21
 8007f64:	428f      	cmp	r7, r1
 8007f66:	bf38      	it	cc
 8007f68:	2204      	movcc	r2, #4
 8007f6a:	9201      	str	r2, [sp, #4]
 8007f6c:	9a02      	ldr	r2, [sp, #8]
 8007f6e:	9303      	str	r3, [sp, #12]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d80c      	bhi.n	8007f8e <__multiply+0x9e>
 8007f74:	2e00      	cmp	r6, #0
 8007f76:	dd03      	ble.n	8007f80 <__multiply+0x90>
 8007f78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d05a      	beq.n	8008036 <__multiply+0x146>
 8007f80:	6106      	str	r6, [r0, #16]
 8007f82:	b005      	add	sp, #20
 8007f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f88:	f843 2b04 	str.w	r2, [r3], #4
 8007f8c:	e7d8      	b.n	8007f40 <__multiply+0x50>
 8007f8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f92:	f1ba 0f00 	cmp.w	sl, #0
 8007f96:	d024      	beq.n	8007fe2 <__multiply+0xf2>
 8007f98:	f104 0e14 	add.w	lr, r4, #20
 8007f9c:	46a9      	mov	r9, r5
 8007f9e:	f04f 0c00 	mov.w	ip, #0
 8007fa2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007fa6:	f8d9 1000 	ldr.w	r1, [r9]
 8007faa:	fa1f fb82 	uxth.w	fp, r2
 8007fae:	b289      	uxth	r1, r1
 8007fb0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007fb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007fb8:	f8d9 2000 	ldr.w	r2, [r9]
 8007fbc:	4461      	add	r1, ip
 8007fbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fc2:	fb0a c20b 	mla	r2, sl, fp, ip
 8007fc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007fca:	b289      	uxth	r1, r1
 8007fcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fd0:	4577      	cmp	r7, lr
 8007fd2:	f849 1b04 	str.w	r1, [r9], #4
 8007fd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fda:	d8e2      	bhi.n	8007fa2 <__multiply+0xb2>
 8007fdc:	9a01      	ldr	r2, [sp, #4]
 8007fde:	f845 c002 	str.w	ip, [r5, r2]
 8007fe2:	9a03      	ldr	r2, [sp, #12]
 8007fe4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007fe8:	3304      	adds	r3, #4
 8007fea:	f1b9 0f00 	cmp.w	r9, #0
 8007fee:	d020      	beq.n	8008032 <__multiply+0x142>
 8007ff0:	6829      	ldr	r1, [r5, #0]
 8007ff2:	f104 0c14 	add.w	ip, r4, #20
 8007ff6:	46ae      	mov	lr, r5
 8007ff8:	f04f 0a00 	mov.w	sl, #0
 8007ffc:	f8bc b000 	ldrh.w	fp, [ip]
 8008000:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008004:	fb09 220b 	mla	r2, r9, fp, r2
 8008008:	4492      	add	sl, r2
 800800a:	b289      	uxth	r1, r1
 800800c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008010:	f84e 1b04 	str.w	r1, [lr], #4
 8008014:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008018:	f8be 1000 	ldrh.w	r1, [lr]
 800801c:	0c12      	lsrs	r2, r2, #16
 800801e:	fb09 1102 	mla	r1, r9, r2, r1
 8008022:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008026:	4567      	cmp	r7, ip
 8008028:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800802c:	d8e6      	bhi.n	8007ffc <__multiply+0x10c>
 800802e:	9a01      	ldr	r2, [sp, #4]
 8008030:	50a9      	str	r1, [r5, r2]
 8008032:	3504      	adds	r5, #4
 8008034:	e79a      	b.n	8007f6c <__multiply+0x7c>
 8008036:	3e01      	subs	r6, #1
 8008038:	e79c      	b.n	8007f74 <__multiply+0x84>
 800803a:	bf00      	nop
 800803c:	0800a008 	.word	0x0800a008
 8008040:	0800a094 	.word	0x0800a094

08008044 <__pow5mult>:
 8008044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008048:	4615      	mov	r5, r2
 800804a:	f012 0203 	ands.w	r2, r2, #3
 800804e:	4606      	mov	r6, r0
 8008050:	460f      	mov	r7, r1
 8008052:	d007      	beq.n	8008064 <__pow5mult+0x20>
 8008054:	4c25      	ldr	r4, [pc, #148]	; (80080ec <__pow5mult+0xa8>)
 8008056:	3a01      	subs	r2, #1
 8008058:	2300      	movs	r3, #0
 800805a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800805e:	f7ff fe51 	bl	8007d04 <__multadd>
 8008062:	4607      	mov	r7, r0
 8008064:	10ad      	asrs	r5, r5, #2
 8008066:	d03d      	beq.n	80080e4 <__pow5mult+0xa0>
 8008068:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800806a:	b97c      	cbnz	r4, 800808c <__pow5mult+0x48>
 800806c:	2010      	movs	r0, #16
 800806e:	f7ff fdcd 	bl	8007c0c <malloc>
 8008072:	4602      	mov	r2, r0
 8008074:	6270      	str	r0, [r6, #36]	; 0x24
 8008076:	b928      	cbnz	r0, 8008084 <__pow5mult+0x40>
 8008078:	4b1d      	ldr	r3, [pc, #116]	; (80080f0 <__pow5mult+0xac>)
 800807a:	481e      	ldr	r0, [pc, #120]	; (80080f4 <__pow5mult+0xb0>)
 800807c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008080:	f000 fd2c 	bl	8008adc <__assert_func>
 8008084:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008088:	6004      	str	r4, [r0, #0]
 800808a:	60c4      	str	r4, [r0, #12]
 800808c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008090:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008094:	b94c      	cbnz	r4, 80080aa <__pow5mult+0x66>
 8008096:	f240 2171 	movw	r1, #625	; 0x271
 800809a:	4630      	mov	r0, r6
 800809c:	f7ff ff12 	bl	8007ec4 <__i2b>
 80080a0:	2300      	movs	r3, #0
 80080a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80080a6:	4604      	mov	r4, r0
 80080a8:	6003      	str	r3, [r0, #0]
 80080aa:	f04f 0900 	mov.w	r9, #0
 80080ae:	07eb      	lsls	r3, r5, #31
 80080b0:	d50a      	bpl.n	80080c8 <__pow5mult+0x84>
 80080b2:	4639      	mov	r1, r7
 80080b4:	4622      	mov	r2, r4
 80080b6:	4630      	mov	r0, r6
 80080b8:	f7ff ff1a 	bl	8007ef0 <__multiply>
 80080bc:	4639      	mov	r1, r7
 80080be:	4680      	mov	r8, r0
 80080c0:	4630      	mov	r0, r6
 80080c2:	f7ff fdfd 	bl	8007cc0 <_Bfree>
 80080c6:	4647      	mov	r7, r8
 80080c8:	106d      	asrs	r5, r5, #1
 80080ca:	d00b      	beq.n	80080e4 <__pow5mult+0xa0>
 80080cc:	6820      	ldr	r0, [r4, #0]
 80080ce:	b938      	cbnz	r0, 80080e0 <__pow5mult+0x9c>
 80080d0:	4622      	mov	r2, r4
 80080d2:	4621      	mov	r1, r4
 80080d4:	4630      	mov	r0, r6
 80080d6:	f7ff ff0b 	bl	8007ef0 <__multiply>
 80080da:	6020      	str	r0, [r4, #0]
 80080dc:	f8c0 9000 	str.w	r9, [r0]
 80080e0:	4604      	mov	r4, r0
 80080e2:	e7e4      	b.n	80080ae <__pow5mult+0x6a>
 80080e4:	4638      	mov	r0, r7
 80080e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ea:	bf00      	nop
 80080ec:	0800a1e0 	.word	0x0800a1e0
 80080f0:	08009f96 	.word	0x08009f96
 80080f4:	0800a094 	.word	0x0800a094

080080f8 <__lshift>:
 80080f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080fc:	460c      	mov	r4, r1
 80080fe:	6849      	ldr	r1, [r1, #4]
 8008100:	6923      	ldr	r3, [r4, #16]
 8008102:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008106:	68a3      	ldr	r3, [r4, #8]
 8008108:	4607      	mov	r7, r0
 800810a:	4691      	mov	r9, r2
 800810c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008110:	f108 0601 	add.w	r6, r8, #1
 8008114:	42b3      	cmp	r3, r6
 8008116:	db0b      	blt.n	8008130 <__lshift+0x38>
 8008118:	4638      	mov	r0, r7
 800811a:	f7ff fd91 	bl	8007c40 <_Balloc>
 800811e:	4605      	mov	r5, r0
 8008120:	b948      	cbnz	r0, 8008136 <__lshift+0x3e>
 8008122:	4602      	mov	r2, r0
 8008124:	4b2a      	ldr	r3, [pc, #168]	; (80081d0 <__lshift+0xd8>)
 8008126:	482b      	ldr	r0, [pc, #172]	; (80081d4 <__lshift+0xdc>)
 8008128:	f240 11d9 	movw	r1, #473	; 0x1d9
 800812c:	f000 fcd6 	bl	8008adc <__assert_func>
 8008130:	3101      	adds	r1, #1
 8008132:	005b      	lsls	r3, r3, #1
 8008134:	e7ee      	b.n	8008114 <__lshift+0x1c>
 8008136:	2300      	movs	r3, #0
 8008138:	f100 0114 	add.w	r1, r0, #20
 800813c:	f100 0210 	add.w	r2, r0, #16
 8008140:	4618      	mov	r0, r3
 8008142:	4553      	cmp	r3, sl
 8008144:	db37      	blt.n	80081b6 <__lshift+0xbe>
 8008146:	6920      	ldr	r0, [r4, #16]
 8008148:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800814c:	f104 0314 	add.w	r3, r4, #20
 8008150:	f019 091f 	ands.w	r9, r9, #31
 8008154:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008158:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800815c:	d02f      	beq.n	80081be <__lshift+0xc6>
 800815e:	f1c9 0e20 	rsb	lr, r9, #32
 8008162:	468a      	mov	sl, r1
 8008164:	f04f 0c00 	mov.w	ip, #0
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	fa02 f209 	lsl.w	r2, r2, r9
 800816e:	ea42 020c 	orr.w	r2, r2, ip
 8008172:	f84a 2b04 	str.w	r2, [sl], #4
 8008176:	f853 2b04 	ldr.w	r2, [r3], #4
 800817a:	4298      	cmp	r0, r3
 800817c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008180:	d8f2      	bhi.n	8008168 <__lshift+0x70>
 8008182:	1b03      	subs	r3, r0, r4
 8008184:	3b15      	subs	r3, #21
 8008186:	f023 0303 	bic.w	r3, r3, #3
 800818a:	3304      	adds	r3, #4
 800818c:	f104 0215 	add.w	r2, r4, #21
 8008190:	4290      	cmp	r0, r2
 8008192:	bf38      	it	cc
 8008194:	2304      	movcc	r3, #4
 8008196:	f841 c003 	str.w	ip, [r1, r3]
 800819a:	f1bc 0f00 	cmp.w	ip, #0
 800819e:	d001      	beq.n	80081a4 <__lshift+0xac>
 80081a0:	f108 0602 	add.w	r6, r8, #2
 80081a4:	3e01      	subs	r6, #1
 80081a6:	4638      	mov	r0, r7
 80081a8:	612e      	str	r6, [r5, #16]
 80081aa:	4621      	mov	r1, r4
 80081ac:	f7ff fd88 	bl	8007cc0 <_Bfree>
 80081b0:	4628      	mov	r0, r5
 80081b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80081ba:	3301      	adds	r3, #1
 80081bc:	e7c1      	b.n	8008142 <__lshift+0x4a>
 80081be:	3904      	subs	r1, #4
 80081c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80081c8:	4298      	cmp	r0, r3
 80081ca:	d8f9      	bhi.n	80081c0 <__lshift+0xc8>
 80081cc:	e7ea      	b.n	80081a4 <__lshift+0xac>
 80081ce:	bf00      	nop
 80081d0:	0800a008 	.word	0x0800a008
 80081d4:	0800a094 	.word	0x0800a094

080081d8 <__mcmp>:
 80081d8:	b530      	push	{r4, r5, lr}
 80081da:	6902      	ldr	r2, [r0, #16]
 80081dc:	690c      	ldr	r4, [r1, #16]
 80081de:	1b12      	subs	r2, r2, r4
 80081e0:	d10e      	bne.n	8008200 <__mcmp+0x28>
 80081e2:	f100 0314 	add.w	r3, r0, #20
 80081e6:	3114      	adds	r1, #20
 80081e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80081ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80081f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80081f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80081f8:	42a5      	cmp	r5, r4
 80081fa:	d003      	beq.n	8008204 <__mcmp+0x2c>
 80081fc:	d305      	bcc.n	800820a <__mcmp+0x32>
 80081fe:	2201      	movs	r2, #1
 8008200:	4610      	mov	r0, r2
 8008202:	bd30      	pop	{r4, r5, pc}
 8008204:	4283      	cmp	r3, r0
 8008206:	d3f3      	bcc.n	80081f0 <__mcmp+0x18>
 8008208:	e7fa      	b.n	8008200 <__mcmp+0x28>
 800820a:	f04f 32ff 	mov.w	r2, #4294967295
 800820e:	e7f7      	b.n	8008200 <__mcmp+0x28>

08008210 <__mdiff>:
 8008210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008214:	460c      	mov	r4, r1
 8008216:	4606      	mov	r6, r0
 8008218:	4611      	mov	r1, r2
 800821a:	4620      	mov	r0, r4
 800821c:	4690      	mov	r8, r2
 800821e:	f7ff ffdb 	bl	80081d8 <__mcmp>
 8008222:	1e05      	subs	r5, r0, #0
 8008224:	d110      	bne.n	8008248 <__mdiff+0x38>
 8008226:	4629      	mov	r1, r5
 8008228:	4630      	mov	r0, r6
 800822a:	f7ff fd09 	bl	8007c40 <_Balloc>
 800822e:	b930      	cbnz	r0, 800823e <__mdiff+0x2e>
 8008230:	4b3a      	ldr	r3, [pc, #232]	; (800831c <__mdiff+0x10c>)
 8008232:	4602      	mov	r2, r0
 8008234:	f240 2132 	movw	r1, #562	; 0x232
 8008238:	4839      	ldr	r0, [pc, #228]	; (8008320 <__mdiff+0x110>)
 800823a:	f000 fc4f 	bl	8008adc <__assert_func>
 800823e:	2301      	movs	r3, #1
 8008240:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008248:	bfa4      	itt	ge
 800824a:	4643      	movge	r3, r8
 800824c:	46a0      	movge	r8, r4
 800824e:	4630      	mov	r0, r6
 8008250:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008254:	bfa6      	itte	ge
 8008256:	461c      	movge	r4, r3
 8008258:	2500      	movge	r5, #0
 800825a:	2501      	movlt	r5, #1
 800825c:	f7ff fcf0 	bl	8007c40 <_Balloc>
 8008260:	b920      	cbnz	r0, 800826c <__mdiff+0x5c>
 8008262:	4b2e      	ldr	r3, [pc, #184]	; (800831c <__mdiff+0x10c>)
 8008264:	4602      	mov	r2, r0
 8008266:	f44f 7110 	mov.w	r1, #576	; 0x240
 800826a:	e7e5      	b.n	8008238 <__mdiff+0x28>
 800826c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008270:	6926      	ldr	r6, [r4, #16]
 8008272:	60c5      	str	r5, [r0, #12]
 8008274:	f104 0914 	add.w	r9, r4, #20
 8008278:	f108 0514 	add.w	r5, r8, #20
 800827c:	f100 0e14 	add.w	lr, r0, #20
 8008280:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008284:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008288:	f108 0210 	add.w	r2, r8, #16
 800828c:	46f2      	mov	sl, lr
 800828e:	2100      	movs	r1, #0
 8008290:	f859 3b04 	ldr.w	r3, [r9], #4
 8008294:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008298:	fa1f f883 	uxth.w	r8, r3
 800829c:	fa11 f18b 	uxtah	r1, r1, fp
 80082a0:	0c1b      	lsrs	r3, r3, #16
 80082a2:	eba1 0808 	sub.w	r8, r1, r8
 80082a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80082ae:	fa1f f888 	uxth.w	r8, r8
 80082b2:	1419      	asrs	r1, r3, #16
 80082b4:	454e      	cmp	r6, r9
 80082b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80082ba:	f84a 3b04 	str.w	r3, [sl], #4
 80082be:	d8e7      	bhi.n	8008290 <__mdiff+0x80>
 80082c0:	1b33      	subs	r3, r6, r4
 80082c2:	3b15      	subs	r3, #21
 80082c4:	f023 0303 	bic.w	r3, r3, #3
 80082c8:	3304      	adds	r3, #4
 80082ca:	3415      	adds	r4, #21
 80082cc:	42a6      	cmp	r6, r4
 80082ce:	bf38      	it	cc
 80082d0:	2304      	movcc	r3, #4
 80082d2:	441d      	add	r5, r3
 80082d4:	4473      	add	r3, lr
 80082d6:	469e      	mov	lr, r3
 80082d8:	462e      	mov	r6, r5
 80082da:	4566      	cmp	r6, ip
 80082dc:	d30e      	bcc.n	80082fc <__mdiff+0xec>
 80082de:	f10c 0203 	add.w	r2, ip, #3
 80082e2:	1b52      	subs	r2, r2, r5
 80082e4:	f022 0203 	bic.w	r2, r2, #3
 80082e8:	3d03      	subs	r5, #3
 80082ea:	45ac      	cmp	ip, r5
 80082ec:	bf38      	it	cc
 80082ee:	2200      	movcc	r2, #0
 80082f0:	441a      	add	r2, r3
 80082f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80082f6:	b17b      	cbz	r3, 8008318 <__mdiff+0x108>
 80082f8:	6107      	str	r7, [r0, #16]
 80082fa:	e7a3      	b.n	8008244 <__mdiff+0x34>
 80082fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8008300:	fa11 f288 	uxtah	r2, r1, r8
 8008304:	1414      	asrs	r4, r2, #16
 8008306:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800830a:	b292      	uxth	r2, r2
 800830c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008310:	f84e 2b04 	str.w	r2, [lr], #4
 8008314:	1421      	asrs	r1, r4, #16
 8008316:	e7e0      	b.n	80082da <__mdiff+0xca>
 8008318:	3f01      	subs	r7, #1
 800831a:	e7ea      	b.n	80082f2 <__mdiff+0xe2>
 800831c:	0800a008 	.word	0x0800a008
 8008320:	0800a094 	.word	0x0800a094

08008324 <__ulp>:
 8008324:	b082      	sub	sp, #8
 8008326:	ed8d 0b00 	vstr	d0, [sp]
 800832a:	9b01      	ldr	r3, [sp, #4]
 800832c:	4912      	ldr	r1, [pc, #72]	; (8008378 <__ulp+0x54>)
 800832e:	4019      	ands	r1, r3
 8008330:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008334:	2900      	cmp	r1, #0
 8008336:	dd05      	ble.n	8008344 <__ulp+0x20>
 8008338:	2200      	movs	r2, #0
 800833a:	460b      	mov	r3, r1
 800833c:	ec43 2b10 	vmov	d0, r2, r3
 8008340:	b002      	add	sp, #8
 8008342:	4770      	bx	lr
 8008344:	4249      	negs	r1, r1
 8008346:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800834a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800834e:	f04f 0200 	mov.w	r2, #0
 8008352:	f04f 0300 	mov.w	r3, #0
 8008356:	da04      	bge.n	8008362 <__ulp+0x3e>
 8008358:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800835c:	fa41 f300 	asr.w	r3, r1, r0
 8008360:	e7ec      	b.n	800833c <__ulp+0x18>
 8008362:	f1a0 0114 	sub.w	r1, r0, #20
 8008366:	291e      	cmp	r1, #30
 8008368:	bfda      	itte	le
 800836a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800836e:	fa20 f101 	lsrle.w	r1, r0, r1
 8008372:	2101      	movgt	r1, #1
 8008374:	460a      	mov	r2, r1
 8008376:	e7e1      	b.n	800833c <__ulp+0x18>
 8008378:	7ff00000 	.word	0x7ff00000

0800837c <__b2d>:
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837e:	6905      	ldr	r5, [r0, #16]
 8008380:	f100 0714 	add.w	r7, r0, #20
 8008384:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008388:	1f2e      	subs	r6, r5, #4
 800838a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800838e:	4620      	mov	r0, r4
 8008390:	f7ff fd48 	bl	8007e24 <__hi0bits>
 8008394:	f1c0 0320 	rsb	r3, r0, #32
 8008398:	280a      	cmp	r0, #10
 800839a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008418 <__b2d+0x9c>
 800839e:	600b      	str	r3, [r1, #0]
 80083a0:	dc14      	bgt.n	80083cc <__b2d+0x50>
 80083a2:	f1c0 0e0b 	rsb	lr, r0, #11
 80083a6:	fa24 f10e 	lsr.w	r1, r4, lr
 80083aa:	42b7      	cmp	r7, r6
 80083ac:	ea41 030c 	orr.w	r3, r1, ip
 80083b0:	bf34      	ite	cc
 80083b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80083b6:	2100      	movcs	r1, #0
 80083b8:	3015      	adds	r0, #21
 80083ba:	fa04 f000 	lsl.w	r0, r4, r0
 80083be:	fa21 f10e 	lsr.w	r1, r1, lr
 80083c2:	ea40 0201 	orr.w	r2, r0, r1
 80083c6:	ec43 2b10 	vmov	d0, r2, r3
 80083ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083cc:	42b7      	cmp	r7, r6
 80083ce:	bf3a      	itte	cc
 80083d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80083d4:	f1a5 0608 	subcc.w	r6, r5, #8
 80083d8:	2100      	movcs	r1, #0
 80083da:	380b      	subs	r0, #11
 80083dc:	d017      	beq.n	800840e <__b2d+0x92>
 80083de:	f1c0 0c20 	rsb	ip, r0, #32
 80083e2:	fa04 f500 	lsl.w	r5, r4, r0
 80083e6:	42be      	cmp	r6, r7
 80083e8:	fa21 f40c 	lsr.w	r4, r1, ip
 80083ec:	ea45 0504 	orr.w	r5, r5, r4
 80083f0:	bf8c      	ite	hi
 80083f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80083f6:	2400      	movls	r4, #0
 80083f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80083fc:	fa01 f000 	lsl.w	r0, r1, r0
 8008400:	fa24 f40c 	lsr.w	r4, r4, ip
 8008404:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008408:	ea40 0204 	orr.w	r2, r0, r4
 800840c:	e7db      	b.n	80083c6 <__b2d+0x4a>
 800840e:	ea44 030c 	orr.w	r3, r4, ip
 8008412:	460a      	mov	r2, r1
 8008414:	e7d7      	b.n	80083c6 <__b2d+0x4a>
 8008416:	bf00      	nop
 8008418:	3ff00000 	.word	0x3ff00000

0800841c <__d2b>:
 800841c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008420:	4689      	mov	r9, r1
 8008422:	2101      	movs	r1, #1
 8008424:	ec57 6b10 	vmov	r6, r7, d0
 8008428:	4690      	mov	r8, r2
 800842a:	f7ff fc09 	bl	8007c40 <_Balloc>
 800842e:	4604      	mov	r4, r0
 8008430:	b930      	cbnz	r0, 8008440 <__d2b+0x24>
 8008432:	4602      	mov	r2, r0
 8008434:	4b25      	ldr	r3, [pc, #148]	; (80084cc <__d2b+0xb0>)
 8008436:	4826      	ldr	r0, [pc, #152]	; (80084d0 <__d2b+0xb4>)
 8008438:	f240 310a 	movw	r1, #778	; 0x30a
 800843c:	f000 fb4e 	bl	8008adc <__assert_func>
 8008440:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008444:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008448:	bb35      	cbnz	r5, 8008498 <__d2b+0x7c>
 800844a:	2e00      	cmp	r6, #0
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	d028      	beq.n	80084a2 <__d2b+0x86>
 8008450:	4668      	mov	r0, sp
 8008452:	9600      	str	r6, [sp, #0]
 8008454:	f7ff fd06 	bl	8007e64 <__lo0bits>
 8008458:	9900      	ldr	r1, [sp, #0]
 800845a:	b300      	cbz	r0, 800849e <__d2b+0x82>
 800845c:	9a01      	ldr	r2, [sp, #4]
 800845e:	f1c0 0320 	rsb	r3, r0, #32
 8008462:	fa02 f303 	lsl.w	r3, r2, r3
 8008466:	430b      	orrs	r3, r1
 8008468:	40c2      	lsrs	r2, r0
 800846a:	6163      	str	r3, [r4, #20]
 800846c:	9201      	str	r2, [sp, #4]
 800846e:	9b01      	ldr	r3, [sp, #4]
 8008470:	61a3      	str	r3, [r4, #24]
 8008472:	2b00      	cmp	r3, #0
 8008474:	bf14      	ite	ne
 8008476:	2202      	movne	r2, #2
 8008478:	2201      	moveq	r2, #1
 800847a:	6122      	str	r2, [r4, #16]
 800847c:	b1d5      	cbz	r5, 80084b4 <__d2b+0x98>
 800847e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008482:	4405      	add	r5, r0
 8008484:	f8c9 5000 	str.w	r5, [r9]
 8008488:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800848c:	f8c8 0000 	str.w	r0, [r8]
 8008490:	4620      	mov	r0, r4
 8008492:	b003      	add	sp, #12
 8008494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008498:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800849c:	e7d5      	b.n	800844a <__d2b+0x2e>
 800849e:	6161      	str	r1, [r4, #20]
 80084a0:	e7e5      	b.n	800846e <__d2b+0x52>
 80084a2:	a801      	add	r0, sp, #4
 80084a4:	f7ff fcde 	bl	8007e64 <__lo0bits>
 80084a8:	9b01      	ldr	r3, [sp, #4]
 80084aa:	6163      	str	r3, [r4, #20]
 80084ac:	2201      	movs	r2, #1
 80084ae:	6122      	str	r2, [r4, #16]
 80084b0:	3020      	adds	r0, #32
 80084b2:	e7e3      	b.n	800847c <__d2b+0x60>
 80084b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084bc:	f8c9 0000 	str.w	r0, [r9]
 80084c0:	6918      	ldr	r0, [r3, #16]
 80084c2:	f7ff fcaf 	bl	8007e24 <__hi0bits>
 80084c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084ca:	e7df      	b.n	800848c <__d2b+0x70>
 80084cc:	0800a008 	.word	0x0800a008
 80084d0:	0800a094 	.word	0x0800a094

080084d4 <__ratio>:
 80084d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	4688      	mov	r8, r1
 80084da:	4669      	mov	r1, sp
 80084dc:	4681      	mov	r9, r0
 80084de:	f7ff ff4d 	bl	800837c <__b2d>
 80084e2:	a901      	add	r1, sp, #4
 80084e4:	4640      	mov	r0, r8
 80084e6:	ec55 4b10 	vmov	r4, r5, d0
 80084ea:	f7ff ff47 	bl	800837c <__b2d>
 80084ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80084f6:	eba3 0c02 	sub.w	ip, r3, r2
 80084fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084fe:	1a9b      	subs	r3, r3, r2
 8008500:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008504:	ec51 0b10 	vmov	r0, r1, d0
 8008508:	2b00      	cmp	r3, #0
 800850a:	bfd6      	itet	le
 800850c:	460a      	movle	r2, r1
 800850e:	462a      	movgt	r2, r5
 8008510:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008514:	468b      	mov	fp, r1
 8008516:	462f      	mov	r7, r5
 8008518:	bfd4      	ite	le
 800851a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800851e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008522:	4620      	mov	r0, r4
 8008524:	ee10 2a10 	vmov	r2, s0
 8008528:	465b      	mov	r3, fp
 800852a:	4639      	mov	r1, r7
 800852c:	f7f8 f996 	bl	800085c <__aeabi_ddiv>
 8008530:	ec41 0b10 	vmov	d0, r0, r1
 8008534:	b003      	add	sp, #12
 8008536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800853a <__copybits>:
 800853a:	3901      	subs	r1, #1
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	1149      	asrs	r1, r1, #5
 8008540:	6914      	ldr	r4, [r2, #16]
 8008542:	3101      	adds	r1, #1
 8008544:	f102 0314 	add.w	r3, r2, #20
 8008548:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800854c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008550:	1f05      	subs	r5, r0, #4
 8008552:	42a3      	cmp	r3, r4
 8008554:	d30c      	bcc.n	8008570 <__copybits+0x36>
 8008556:	1aa3      	subs	r3, r4, r2
 8008558:	3b11      	subs	r3, #17
 800855a:	f023 0303 	bic.w	r3, r3, #3
 800855e:	3211      	adds	r2, #17
 8008560:	42a2      	cmp	r2, r4
 8008562:	bf88      	it	hi
 8008564:	2300      	movhi	r3, #0
 8008566:	4418      	add	r0, r3
 8008568:	2300      	movs	r3, #0
 800856a:	4288      	cmp	r0, r1
 800856c:	d305      	bcc.n	800857a <__copybits+0x40>
 800856e:	bd70      	pop	{r4, r5, r6, pc}
 8008570:	f853 6b04 	ldr.w	r6, [r3], #4
 8008574:	f845 6f04 	str.w	r6, [r5, #4]!
 8008578:	e7eb      	b.n	8008552 <__copybits+0x18>
 800857a:	f840 3b04 	str.w	r3, [r0], #4
 800857e:	e7f4      	b.n	800856a <__copybits+0x30>

08008580 <__any_on>:
 8008580:	f100 0214 	add.w	r2, r0, #20
 8008584:	6900      	ldr	r0, [r0, #16]
 8008586:	114b      	asrs	r3, r1, #5
 8008588:	4298      	cmp	r0, r3
 800858a:	b510      	push	{r4, lr}
 800858c:	db11      	blt.n	80085b2 <__any_on+0x32>
 800858e:	dd0a      	ble.n	80085a6 <__any_on+0x26>
 8008590:	f011 011f 	ands.w	r1, r1, #31
 8008594:	d007      	beq.n	80085a6 <__any_on+0x26>
 8008596:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800859a:	fa24 f001 	lsr.w	r0, r4, r1
 800859e:	fa00 f101 	lsl.w	r1, r0, r1
 80085a2:	428c      	cmp	r4, r1
 80085a4:	d10b      	bne.n	80085be <__any_on+0x3e>
 80085a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d803      	bhi.n	80085b6 <__any_on+0x36>
 80085ae:	2000      	movs	r0, #0
 80085b0:	bd10      	pop	{r4, pc}
 80085b2:	4603      	mov	r3, r0
 80085b4:	e7f7      	b.n	80085a6 <__any_on+0x26>
 80085b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085ba:	2900      	cmp	r1, #0
 80085bc:	d0f5      	beq.n	80085aa <__any_on+0x2a>
 80085be:	2001      	movs	r0, #1
 80085c0:	e7f6      	b.n	80085b0 <__any_on+0x30>

080085c2 <_calloc_r>:
 80085c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085c4:	fba1 2402 	umull	r2, r4, r1, r2
 80085c8:	b94c      	cbnz	r4, 80085de <_calloc_r+0x1c>
 80085ca:	4611      	mov	r1, r2
 80085cc:	9201      	str	r2, [sp, #4]
 80085ce:	f000 f87b 	bl	80086c8 <_malloc_r>
 80085d2:	9a01      	ldr	r2, [sp, #4]
 80085d4:	4605      	mov	r5, r0
 80085d6:	b930      	cbnz	r0, 80085e6 <_calloc_r+0x24>
 80085d8:	4628      	mov	r0, r5
 80085da:	b003      	add	sp, #12
 80085dc:	bd30      	pop	{r4, r5, pc}
 80085de:	220c      	movs	r2, #12
 80085e0:	6002      	str	r2, [r0, #0]
 80085e2:	2500      	movs	r5, #0
 80085e4:	e7f8      	b.n	80085d8 <_calloc_r+0x16>
 80085e6:	4621      	mov	r1, r4
 80085e8:	f7fc fb98 	bl	8004d1c <memset>
 80085ec:	e7f4      	b.n	80085d8 <_calloc_r+0x16>
	...

080085f0 <_free_r>:
 80085f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085f2:	2900      	cmp	r1, #0
 80085f4:	d044      	beq.n	8008680 <_free_r+0x90>
 80085f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fa:	9001      	str	r0, [sp, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008602:	bfb8      	it	lt
 8008604:	18e4      	addlt	r4, r4, r3
 8008606:	f000 fa99 	bl	8008b3c <__malloc_lock>
 800860a:	4a1e      	ldr	r2, [pc, #120]	; (8008684 <_free_r+0x94>)
 800860c:	9801      	ldr	r0, [sp, #4]
 800860e:	6813      	ldr	r3, [r2, #0]
 8008610:	b933      	cbnz	r3, 8008620 <_free_r+0x30>
 8008612:	6063      	str	r3, [r4, #4]
 8008614:	6014      	str	r4, [r2, #0]
 8008616:	b003      	add	sp, #12
 8008618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800861c:	f000 ba94 	b.w	8008b48 <__malloc_unlock>
 8008620:	42a3      	cmp	r3, r4
 8008622:	d908      	bls.n	8008636 <_free_r+0x46>
 8008624:	6825      	ldr	r5, [r4, #0]
 8008626:	1961      	adds	r1, r4, r5
 8008628:	428b      	cmp	r3, r1
 800862a:	bf01      	itttt	eq
 800862c:	6819      	ldreq	r1, [r3, #0]
 800862e:	685b      	ldreq	r3, [r3, #4]
 8008630:	1949      	addeq	r1, r1, r5
 8008632:	6021      	streq	r1, [r4, #0]
 8008634:	e7ed      	b.n	8008612 <_free_r+0x22>
 8008636:	461a      	mov	r2, r3
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	b10b      	cbz	r3, 8008640 <_free_r+0x50>
 800863c:	42a3      	cmp	r3, r4
 800863e:	d9fa      	bls.n	8008636 <_free_r+0x46>
 8008640:	6811      	ldr	r1, [r2, #0]
 8008642:	1855      	adds	r5, r2, r1
 8008644:	42a5      	cmp	r5, r4
 8008646:	d10b      	bne.n	8008660 <_free_r+0x70>
 8008648:	6824      	ldr	r4, [r4, #0]
 800864a:	4421      	add	r1, r4
 800864c:	1854      	adds	r4, r2, r1
 800864e:	42a3      	cmp	r3, r4
 8008650:	6011      	str	r1, [r2, #0]
 8008652:	d1e0      	bne.n	8008616 <_free_r+0x26>
 8008654:	681c      	ldr	r4, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	6053      	str	r3, [r2, #4]
 800865a:	4421      	add	r1, r4
 800865c:	6011      	str	r1, [r2, #0]
 800865e:	e7da      	b.n	8008616 <_free_r+0x26>
 8008660:	d902      	bls.n	8008668 <_free_r+0x78>
 8008662:	230c      	movs	r3, #12
 8008664:	6003      	str	r3, [r0, #0]
 8008666:	e7d6      	b.n	8008616 <_free_r+0x26>
 8008668:	6825      	ldr	r5, [r4, #0]
 800866a:	1961      	adds	r1, r4, r5
 800866c:	428b      	cmp	r3, r1
 800866e:	bf04      	itt	eq
 8008670:	6819      	ldreq	r1, [r3, #0]
 8008672:	685b      	ldreq	r3, [r3, #4]
 8008674:	6063      	str	r3, [r4, #4]
 8008676:	bf04      	itt	eq
 8008678:	1949      	addeq	r1, r1, r5
 800867a:	6021      	streq	r1, [r4, #0]
 800867c:	6054      	str	r4, [r2, #4]
 800867e:	e7ca      	b.n	8008616 <_free_r+0x26>
 8008680:	b003      	add	sp, #12
 8008682:	bd30      	pop	{r4, r5, pc}
 8008684:	20000834 	.word	0x20000834

08008688 <sbrk_aligned>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	4e0e      	ldr	r6, [pc, #56]	; (80086c4 <sbrk_aligned+0x3c>)
 800868c:	460c      	mov	r4, r1
 800868e:	6831      	ldr	r1, [r6, #0]
 8008690:	4605      	mov	r5, r0
 8008692:	b911      	cbnz	r1, 800869a <sbrk_aligned+0x12>
 8008694:	f000 f9f0 	bl	8008a78 <_sbrk_r>
 8008698:	6030      	str	r0, [r6, #0]
 800869a:	4621      	mov	r1, r4
 800869c:	4628      	mov	r0, r5
 800869e:	f000 f9eb 	bl	8008a78 <_sbrk_r>
 80086a2:	1c43      	adds	r3, r0, #1
 80086a4:	d00a      	beq.n	80086bc <sbrk_aligned+0x34>
 80086a6:	1cc4      	adds	r4, r0, #3
 80086a8:	f024 0403 	bic.w	r4, r4, #3
 80086ac:	42a0      	cmp	r0, r4
 80086ae:	d007      	beq.n	80086c0 <sbrk_aligned+0x38>
 80086b0:	1a21      	subs	r1, r4, r0
 80086b2:	4628      	mov	r0, r5
 80086b4:	f000 f9e0 	bl	8008a78 <_sbrk_r>
 80086b8:	3001      	adds	r0, #1
 80086ba:	d101      	bne.n	80086c0 <sbrk_aligned+0x38>
 80086bc:	f04f 34ff 	mov.w	r4, #4294967295
 80086c0:	4620      	mov	r0, r4
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
 80086c4:	20000838 	.word	0x20000838

080086c8 <_malloc_r>:
 80086c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086cc:	1ccd      	adds	r5, r1, #3
 80086ce:	f025 0503 	bic.w	r5, r5, #3
 80086d2:	3508      	adds	r5, #8
 80086d4:	2d0c      	cmp	r5, #12
 80086d6:	bf38      	it	cc
 80086d8:	250c      	movcc	r5, #12
 80086da:	2d00      	cmp	r5, #0
 80086dc:	4607      	mov	r7, r0
 80086de:	db01      	blt.n	80086e4 <_malloc_r+0x1c>
 80086e0:	42a9      	cmp	r1, r5
 80086e2:	d905      	bls.n	80086f0 <_malloc_r+0x28>
 80086e4:	230c      	movs	r3, #12
 80086e6:	603b      	str	r3, [r7, #0]
 80086e8:	2600      	movs	r6, #0
 80086ea:	4630      	mov	r0, r6
 80086ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f0:	4e2e      	ldr	r6, [pc, #184]	; (80087ac <_malloc_r+0xe4>)
 80086f2:	f000 fa23 	bl	8008b3c <__malloc_lock>
 80086f6:	6833      	ldr	r3, [r6, #0]
 80086f8:	461c      	mov	r4, r3
 80086fa:	bb34      	cbnz	r4, 800874a <_malloc_r+0x82>
 80086fc:	4629      	mov	r1, r5
 80086fe:	4638      	mov	r0, r7
 8008700:	f7ff ffc2 	bl	8008688 <sbrk_aligned>
 8008704:	1c43      	adds	r3, r0, #1
 8008706:	4604      	mov	r4, r0
 8008708:	d14d      	bne.n	80087a6 <_malloc_r+0xde>
 800870a:	6834      	ldr	r4, [r6, #0]
 800870c:	4626      	mov	r6, r4
 800870e:	2e00      	cmp	r6, #0
 8008710:	d140      	bne.n	8008794 <_malloc_r+0xcc>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	4631      	mov	r1, r6
 8008716:	4638      	mov	r0, r7
 8008718:	eb04 0803 	add.w	r8, r4, r3
 800871c:	f000 f9ac 	bl	8008a78 <_sbrk_r>
 8008720:	4580      	cmp	r8, r0
 8008722:	d13a      	bne.n	800879a <_malloc_r+0xd2>
 8008724:	6821      	ldr	r1, [r4, #0]
 8008726:	3503      	adds	r5, #3
 8008728:	1a6d      	subs	r5, r5, r1
 800872a:	f025 0503 	bic.w	r5, r5, #3
 800872e:	3508      	adds	r5, #8
 8008730:	2d0c      	cmp	r5, #12
 8008732:	bf38      	it	cc
 8008734:	250c      	movcc	r5, #12
 8008736:	4629      	mov	r1, r5
 8008738:	4638      	mov	r0, r7
 800873a:	f7ff ffa5 	bl	8008688 <sbrk_aligned>
 800873e:	3001      	adds	r0, #1
 8008740:	d02b      	beq.n	800879a <_malloc_r+0xd2>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	442b      	add	r3, r5
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	e00e      	b.n	8008768 <_malloc_r+0xa0>
 800874a:	6822      	ldr	r2, [r4, #0]
 800874c:	1b52      	subs	r2, r2, r5
 800874e:	d41e      	bmi.n	800878e <_malloc_r+0xc6>
 8008750:	2a0b      	cmp	r2, #11
 8008752:	d916      	bls.n	8008782 <_malloc_r+0xba>
 8008754:	1961      	adds	r1, r4, r5
 8008756:	42a3      	cmp	r3, r4
 8008758:	6025      	str	r5, [r4, #0]
 800875a:	bf18      	it	ne
 800875c:	6059      	strne	r1, [r3, #4]
 800875e:	6863      	ldr	r3, [r4, #4]
 8008760:	bf08      	it	eq
 8008762:	6031      	streq	r1, [r6, #0]
 8008764:	5162      	str	r2, [r4, r5]
 8008766:	604b      	str	r3, [r1, #4]
 8008768:	4638      	mov	r0, r7
 800876a:	f104 060b 	add.w	r6, r4, #11
 800876e:	f000 f9eb 	bl	8008b48 <__malloc_unlock>
 8008772:	f026 0607 	bic.w	r6, r6, #7
 8008776:	1d23      	adds	r3, r4, #4
 8008778:	1af2      	subs	r2, r6, r3
 800877a:	d0b6      	beq.n	80086ea <_malloc_r+0x22>
 800877c:	1b9b      	subs	r3, r3, r6
 800877e:	50a3      	str	r3, [r4, r2]
 8008780:	e7b3      	b.n	80086ea <_malloc_r+0x22>
 8008782:	6862      	ldr	r2, [r4, #4]
 8008784:	42a3      	cmp	r3, r4
 8008786:	bf0c      	ite	eq
 8008788:	6032      	streq	r2, [r6, #0]
 800878a:	605a      	strne	r2, [r3, #4]
 800878c:	e7ec      	b.n	8008768 <_malloc_r+0xa0>
 800878e:	4623      	mov	r3, r4
 8008790:	6864      	ldr	r4, [r4, #4]
 8008792:	e7b2      	b.n	80086fa <_malloc_r+0x32>
 8008794:	4634      	mov	r4, r6
 8008796:	6876      	ldr	r6, [r6, #4]
 8008798:	e7b9      	b.n	800870e <_malloc_r+0x46>
 800879a:	230c      	movs	r3, #12
 800879c:	603b      	str	r3, [r7, #0]
 800879e:	4638      	mov	r0, r7
 80087a0:	f000 f9d2 	bl	8008b48 <__malloc_unlock>
 80087a4:	e7a1      	b.n	80086ea <_malloc_r+0x22>
 80087a6:	6025      	str	r5, [r4, #0]
 80087a8:	e7de      	b.n	8008768 <_malloc_r+0xa0>
 80087aa:	bf00      	nop
 80087ac:	20000834 	.word	0x20000834

080087b0 <__ssputs_r>:
 80087b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b4:	688e      	ldr	r6, [r1, #8]
 80087b6:	429e      	cmp	r6, r3
 80087b8:	4682      	mov	sl, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	4690      	mov	r8, r2
 80087be:	461f      	mov	r7, r3
 80087c0:	d838      	bhi.n	8008834 <__ssputs_r+0x84>
 80087c2:	898a      	ldrh	r2, [r1, #12]
 80087c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087c8:	d032      	beq.n	8008830 <__ssputs_r+0x80>
 80087ca:	6825      	ldr	r5, [r4, #0]
 80087cc:	6909      	ldr	r1, [r1, #16]
 80087ce:	eba5 0901 	sub.w	r9, r5, r1
 80087d2:	6965      	ldr	r5, [r4, #20]
 80087d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087dc:	3301      	adds	r3, #1
 80087de:	444b      	add	r3, r9
 80087e0:	106d      	asrs	r5, r5, #1
 80087e2:	429d      	cmp	r5, r3
 80087e4:	bf38      	it	cc
 80087e6:	461d      	movcc	r5, r3
 80087e8:	0553      	lsls	r3, r2, #21
 80087ea:	d531      	bpl.n	8008850 <__ssputs_r+0xa0>
 80087ec:	4629      	mov	r1, r5
 80087ee:	f7ff ff6b 	bl	80086c8 <_malloc_r>
 80087f2:	4606      	mov	r6, r0
 80087f4:	b950      	cbnz	r0, 800880c <__ssputs_r+0x5c>
 80087f6:	230c      	movs	r3, #12
 80087f8:	f8ca 3000 	str.w	r3, [sl]
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	f04f 30ff 	mov.w	r0, #4294967295
 8008808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880c:	6921      	ldr	r1, [r4, #16]
 800880e:	464a      	mov	r2, r9
 8008810:	f7fc fa5c 	bl	8004ccc <memcpy>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800881a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881e:	81a3      	strh	r3, [r4, #12]
 8008820:	6126      	str	r6, [r4, #16]
 8008822:	6165      	str	r5, [r4, #20]
 8008824:	444e      	add	r6, r9
 8008826:	eba5 0509 	sub.w	r5, r5, r9
 800882a:	6026      	str	r6, [r4, #0]
 800882c:	60a5      	str	r5, [r4, #8]
 800882e:	463e      	mov	r6, r7
 8008830:	42be      	cmp	r6, r7
 8008832:	d900      	bls.n	8008836 <__ssputs_r+0x86>
 8008834:	463e      	mov	r6, r7
 8008836:	6820      	ldr	r0, [r4, #0]
 8008838:	4632      	mov	r2, r6
 800883a:	4641      	mov	r1, r8
 800883c:	f7fc fa54 	bl	8004ce8 <memmove>
 8008840:	68a3      	ldr	r3, [r4, #8]
 8008842:	1b9b      	subs	r3, r3, r6
 8008844:	60a3      	str	r3, [r4, #8]
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	4433      	add	r3, r6
 800884a:	6023      	str	r3, [r4, #0]
 800884c:	2000      	movs	r0, #0
 800884e:	e7db      	b.n	8008808 <__ssputs_r+0x58>
 8008850:	462a      	mov	r2, r5
 8008852:	f000 f97f 	bl	8008b54 <_realloc_r>
 8008856:	4606      	mov	r6, r0
 8008858:	2800      	cmp	r0, #0
 800885a:	d1e1      	bne.n	8008820 <__ssputs_r+0x70>
 800885c:	6921      	ldr	r1, [r4, #16]
 800885e:	4650      	mov	r0, sl
 8008860:	f7ff fec6 	bl	80085f0 <_free_r>
 8008864:	e7c7      	b.n	80087f6 <__ssputs_r+0x46>
	...

08008868 <_svfiprintf_r>:
 8008868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	4698      	mov	r8, r3
 800886e:	898b      	ldrh	r3, [r1, #12]
 8008870:	061b      	lsls	r3, r3, #24
 8008872:	b09d      	sub	sp, #116	; 0x74
 8008874:	4607      	mov	r7, r0
 8008876:	460d      	mov	r5, r1
 8008878:	4614      	mov	r4, r2
 800887a:	d50e      	bpl.n	800889a <_svfiprintf_r+0x32>
 800887c:	690b      	ldr	r3, [r1, #16]
 800887e:	b963      	cbnz	r3, 800889a <_svfiprintf_r+0x32>
 8008880:	2140      	movs	r1, #64	; 0x40
 8008882:	f7ff ff21 	bl	80086c8 <_malloc_r>
 8008886:	6028      	str	r0, [r5, #0]
 8008888:	6128      	str	r0, [r5, #16]
 800888a:	b920      	cbnz	r0, 8008896 <_svfiprintf_r+0x2e>
 800888c:	230c      	movs	r3, #12
 800888e:	603b      	str	r3, [r7, #0]
 8008890:	f04f 30ff 	mov.w	r0, #4294967295
 8008894:	e0d1      	b.n	8008a3a <_svfiprintf_r+0x1d2>
 8008896:	2340      	movs	r3, #64	; 0x40
 8008898:	616b      	str	r3, [r5, #20]
 800889a:	2300      	movs	r3, #0
 800889c:	9309      	str	r3, [sp, #36]	; 0x24
 800889e:	2320      	movs	r3, #32
 80088a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80088a8:	2330      	movs	r3, #48	; 0x30
 80088aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a54 <_svfiprintf_r+0x1ec>
 80088ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088b2:	f04f 0901 	mov.w	r9, #1
 80088b6:	4623      	mov	r3, r4
 80088b8:	469a      	mov	sl, r3
 80088ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088be:	b10a      	cbz	r2, 80088c4 <_svfiprintf_r+0x5c>
 80088c0:	2a25      	cmp	r2, #37	; 0x25
 80088c2:	d1f9      	bne.n	80088b8 <_svfiprintf_r+0x50>
 80088c4:	ebba 0b04 	subs.w	fp, sl, r4
 80088c8:	d00b      	beq.n	80088e2 <_svfiprintf_r+0x7a>
 80088ca:	465b      	mov	r3, fp
 80088cc:	4622      	mov	r2, r4
 80088ce:	4629      	mov	r1, r5
 80088d0:	4638      	mov	r0, r7
 80088d2:	f7ff ff6d 	bl	80087b0 <__ssputs_r>
 80088d6:	3001      	adds	r0, #1
 80088d8:	f000 80aa 	beq.w	8008a30 <_svfiprintf_r+0x1c8>
 80088dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088de:	445a      	add	r2, fp
 80088e0:	9209      	str	r2, [sp, #36]	; 0x24
 80088e2:	f89a 3000 	ldrb.w	r3, [sl]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 80a2 	beq.w	8008a30 <_svfiprintf_r+0x1c8>
 80088ec:	2300      	movs	r3, #0
 80088ee:	f04f 32ff 	mov.w	r2, #4294967295
 80088f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088f6:	f10a 0a01 	add.w	sl, sl, #1
 80088fa:	9304      	str	r3, [sp, #16]
 80088fc:	9307      	str	r3, [sp, #28]
 80088fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008902:	931a      	str	r3, [sp, #104]	; 0x68
 8008904:	4654      	mov	r4, sl
 8008906:	2205      	movs	r2, #5
 8008908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800890c:	4851      	ldr	r0, [pc, #324]	; (8008a54 <_svfiprintf_r+0x1ec>)
 800890e:	f7f7 fc6f 	bl	80001f0 <memchr>
 8008912:	9a04      	ldr	r2, [sp, #16]
 8008914:	b9d8      	cbnz	r0, 800894e <_svfiprintf_r+0xe6>
 8008916:	06d0      	lsls	r0, r2, #27
 8008918:	bf44      	itt	mi
 800891a:	2320      	movmi	r3, #32
 800891c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008920:	0711      	lsls	r1, r2, #28
 8008922:	bf44      	itt	mi
 8008924:	232b      	movmi	r3, #43	; 0x2b
 8008926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800892a:	f89a 3000 	ldrb.w	r3, [sl]
 800892e:	2b2a      	cmp	r3, #42	; 0x2a
 8008930:	d015      	beq.n	800895e <_svfiprintf_r+0xf6>
 8008932:	9a07      	ldr	r2, [sp, #28]
 8008934:	4654      	mov	r4, sl
 8008936:	2000      	movs	r0, #0
 8008938:	f04f 0c0a 	mov.w	ip, #10
 800893c:	4621      	mov	r1, r4
 800893e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008942:	3b30      	subs	r3, #48	; 0x30
 8008944:	2b09      	cmp	r3, #9
 8008946:	d94e      	bls.n	80089e6 <_svfiprintf_r+0x17e>
 8008948:	b1b0      	cbz	r0, 8008978 <_svfiprintf_r+0x110>
 800894a:	9207      	str	r2, [sp, #28]
 800894c:	e014      	b.n	8008978 <_svfiprintf_r+0x110>
 800894e:	eba0 0308 	sub.w	r3, r0, r8
 8008952:	fa09 f303 	lsl.w	r3, r9, r3
 8008956:	4313      	orrs	r3, r2
 8008958:	9304      	str	r3, [sp, #16]
 800895a:	46a2      	mov	sl, r4
 800895c:	e7d2      	b.n	8008904 <_svfiprintf_r+0x9c>
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	1d19      	adds	r1, r3, #4
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	9103      	str	r1, [sp, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	bfbb      	ittet	lt
 800896a:	425b      	neglt	r3, r3
 800896c:	f042 0202 	orrlt.w	r2, r2, #2
 8008970:	9307      	strge	r3, [sp, #28]
 8008972:	9307      	strlt	r3, [sp, #28]
 8008974:	bfb8      	it	lt
 8008976:	9204      	strlt	r2, [sp, #16]
 8008978:	7823      	ldrb	r3, [r4, #0]
 800897a:	2b2e      	cmp	r3, #46	; 0x2e
 800897c:	d10c      	bne.n	8008998 <_svfiprintf_r+0x130>
 800897e:	7863      	ldrb	r3, [r4, #1]
 8008980:	2b2a      	cmp	r3, #42	; 0x2a
 8008982:	d135      	bne.n	80089f0 <_svfiprintf_r+0x188>
 8008984:	9b03      	ldr	r3, [sp, #12]
 8008986:	1d1a      	adds	r2, r3, #4
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	9203      	str	r2, [sp, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	bfb8      	it	lt
 8008990:	f04f 33ff 	movlt.w	r3, #4294967295
 8008994:	3402      	adds	r4, #2
 8008996:	9305      	str	r3, [sp, #20]
 8008998:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a64 <_svfiprintf_r+0x1fc>
 800899c:	7821      	ldrb	r1, [r4, #0]
 800899e:	2203      	movs	r2, #3
 80089a0:	4650      	mov	r0, sl
 80089a2:	f7f7 fc25 	bl	80001f0 <memchr>
 80089a6:	b140      	cbz	r0, 80089ba <_svfiprintf_r+0x152>
 80089a8:	2340      	movs	r3, #64	; 0x40
 80089aa:	eba0 000a 	sub.w	r0, r0, sl
 80089ae:	fa03 f000 	lsl.w	r0, r3, r0
 80089b2:	9b04      	ldr	r3, [sp, #16]
 80089b4:	4303      	orrs	r3, r0
 80089b6:	3401      	adds	r4, #1
 80089b8:	9304      	str	r3, [sp, #16]
 80089ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089be:	4826      	ldr	r0, [pc, #152]	; (8008a58 <_svfiprintf_r+0x1f0>)
 80089c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089c4:	2206      	movs	r2, #6
 80089c6:	f7f7 fc13 	bl	80001f0 <memchr>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d038      	beq.n	8008a40 <_svfiprintf_r+0x1d8>
 80089ce:	4b23      	ldr	r3, [pc, #140]	; (8008a5c <_svfiprintf_r+0x1f4>)
 80089d0:	bb1b      	cbnz	r3, 8008a1a <_svfiprintf_r+0x1b2>
 80089d2:	9b03      	ldr	r3, [sp, #12]
 80089d4:	3307      	adds	r3, #7
 80089d6:	f023 0307 	bic.w	r3, r3, #7
 80089da:	3308      	adds	r3, #8
 80089dc:	9303      	str	r3, [sp, #12]
 80089de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e0:	4433      	add	r3, r6
 80089e2:	9309      	str	r3, [sp, #36]	; 0x24
 80089e4:	e767      	b.n	80088b6 <_svfiprintf_r+0x4e>
 80089e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80089ea:	460c      	mov	r4, r1
 80089ec:	2001      	movs	r0, #1
 80089ee:	e7a5      	b.n	800893c <_svfiprintf_r+0xd4>
 80089f0:	2300      	movs	r3, #0
 80089f2:	3401      	adds	r4, #1
 80089f4:	9305      	str	r3, [sp, #20]
 80089f6:	4619      	mov	r1, r3
 80089f8:	f04f 0c0a 	mov.w	ip, #10
 80089fc:	4620      	mov	r0, r4
 80089fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a02:	3a30      	subs	r2, #48	; 0x30
 8008a04:	2a09      	cmp	r2, #9
 8008a06:	d903      	bls.n	8008a10 <_svfiprintf_r+0x1a8>
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d0c5      	beq.n	8008998 <_svfiprintf_r+0x130>
 8008a0c:	9105      	str	r1, [sp, #20]
 8008a0e:	e7c3      	b.n	8008998 <_svfiprintf_r+0x130>
 8008a10:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a14:	4604      	mov	r4, r0
 8008a16:	2301      	movs	r3, #1
 8008a18:	e7f0      	b.n	80089fc <_svfiprintf_r+0x194>
 8008a1a:	ab03      	add	r3, sp, #12
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	462a      	mov	r2, r5
 8008a20:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <_svfiprintf_r+0x1f8>)
 8008a22:	a904      	add	r1, sp, #16
 8008a24:	4638      	mov	r0, r7
 8008a26:	f7fc fa21 	bl	8004e6c <_printf_float>
 8008a2a:	1c42      	adds	r2, r0, #1
 8008a2c:	4606      	mov	r6, r0
 8008a2e:	d1d6      	bne.n	80089de <_svfiprintf_r+0x176>
 8008a30:	89ab      	ldrh	r3, [r5, #12]
 8008a32:	065b      	lsls	r3, r3, #25
 8008a34:	f53f af2c 	bmi.w	8008890 <_svfiprintf_r+0x28>
 8008a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a3a:	b01d      	add	sp, #116	; 0x74
 8008a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a40:	ab03      	add	r3, sp, #12
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	462a      	mov	r2, r5
 8008a46:	4b06      	ldr	r3, [pc, #24]	; (8008a60 <_svfiprintf_r+0x1f8>)
 8008a48:	a904      	add	r1, sp, #16
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	f7fc fcb2 	bl	80053b4 <_printf_i>
 8008a50:	e7eb      	b.n	8008a2a <_svfiprintf_r+0x1c2>
 8008a52:	bf00      	nop
 8008a54:	0800a1ec 	.word	0x0800a1ec
 8008a58:	0800a1f6 	.word	0x0800a1f6
 8008a5c:	08004e6d 	.word	0x08004e6d
 8008a60:	080087b1 	.word	0x080087b1
 8008a64:	0800a1f2 	.word	0x0800a1f2

08008a68 <nan>:
 8008a68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a70 <nan+0x8>
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	00000000 	.word	0x00000000
 8008a74:	7ff80000 	.word	0x7ff80000

08008a78 <_sbrk_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d06      	ldr	r5, [pc, #24]	; (8008a94 <_sbrk_r+0x1c>)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	602b      	str	r3, [r5, #0]
 8008a84:	f7f8 ffc6 	bl	8001a14 <_sbrk>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_sbrk_r+0x1a>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_sbrk_r+0x1a>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	2000083c 	.word	0x2000083c

08008a98 <strncmp>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	b17a      	cbz	r2, 8008abc <strncmp+0x24>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	3901      	subs	r1, #1
 8008aa0:	1884      	adds	r4, r0, r2
 8008aa2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008aa6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008aaa:	4290      	cmp	r0, r2
 8008aac:	d101      	bne.n	8008ab2 <strncmp+0x1a>
 8008aae:	42a3      	cmp	r3, r4
 8008ab0:	d101      	bne.n	8008ab6 <strncmp+0x1e>
 8008ab2:	1a80      	subs	r0, r0, r2
 8008ab4:	bd10      	pop	{r4, pc}
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d1f3      	bne.n	8008aa2 <strncmp+0xa>
 8008aba:	e7fa      	b.n	8008ab2 <strncmp+0x1a>
 8008abc:	4610      	mov	r0, r2
 8008abe:	e7f9      	b.n	8008ab4 <strncmp+0x1c>

08008ac0 <__ascii_wctomb>:
 8008ac0:	b149      	cbz	r1, 8008ad6 <__ascii_wctomb+0x16>
 8008ac2:	2aff      	cmp	r2, #255	; 0xff
 8008ac4:	bf85      	ittet	hi
 8008ac6:	238a      	movhi	r3, #138	; 0x8a
 8008ac8:	6003      	strhi	r3, [r0, #0]
 8008aca:	700a      	strbls	r2, [r1, #0]
 8008acc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ad0:	bf98      	it	ls
 8008ad2:	2001      	movls	r0, #1
 8008ad4:	4770      	bx	lr
 8008ad6:	4608      	mov	r0, r1
 8008ad8:	4770      	bx	lr
	...

08008adc <__assert_func>:
 8008adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ade:	4614      	mov	r4, r2
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <__assert_func+0x2c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	68d8      	ldr	r0, [r3, #12]
 8008aea:	b14c      	cbz	r4, 8008b00 <__assert_func+0x24>
 8008aec:	4b07      	ldr	r3, [pc, #28]	; (8008b0c <__assert_func+0x30>)
 8008aee:	9100      	str	r1, [sp, #0]
 8008af0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008af4:	4906      	ldr	r1, [pc, #24]	; (8008b10 <__assert_func+0x34>)
 8008af6:	462b      	mov	r3, r5
 8008af8:	f000 f80e 	bl	8008b18 <fiprintf>
 8008afc:	f000 fa72 	bl	8008fe4 <abort>
 8008b00:	4b04      	ldr	r3, [pc, #16]	; (8008b14 <__assert_func+0x38>)
 8008b02:	461c      	mov	r4, r3
 8008b04:	e7f3      	b.n	8008aee <__assert_func+0x12>
 8008b06:	bf00      	nop
 8008b08:	20000014 	.word	0x20000014
 8008b0c:	0800a1fd 	.word	0x0800a1fd
 8008b10:	0800a20a 	.word	0x0800a20a
 8008b14:	0800a238 	.word	0x0800a238

08008b18 <fiprintf>:
 8008b18:	b40e      	push	{r1, r2, r3}
 8008b1a:	b503      	push	{r0, r1, lr}
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	ab03      	add	r3, sp, #12
 8008b20:	4805      	ldr	r0, [pc, #20]	; (8008b38 <fiprintf+0x20>)
 8008b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b26:	6800      	ldr	r0, [r0, #0]
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	f000 f86b 	bl	8008c04 <_vfiprintf_r>
 8008b2e:	b002      	add	sp, #8
 8008b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b34:	b003      	add	sp, #12
 8008b36:	4770      	bx	lr
 8008b38:	20000014 	.word	0x20000014

08008b3c <__malloc_lock>:
 8008b3c:	4801      	ldr	r0, [pc, #4]	; (8008b44 <__malloc_lock+0x8>)
 8008b3e:	f000 bc11 	b.w	8009364 <__retarget_lock_acquire_recursive>
 8008b42:	bf00      	nop
 8008b44:	20000840 	.word	0x20000840

08008b48 <__malloc_unlock>:
 8008b48:	4801      	ldr	r0, [pc, #4]	; (8008b50 <__malloc_unlock+0x8>)
 8008b4a:	f000 bc0c 	b.w	8009366 <__retarget_lock_release_recursive>
 8008b4e:	bf00      	nop
 8008b50:	20000840 	.word	0x20000840

08008b54 <_realloc_r>:
 8008b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b58:	4680      	mov	r8, r0
 8008b5a:	4614      	mov	r4, r2
 8008b5c:	460e      	mov	r6, r1
 8008b5e:	b921      	cbnz	r1, 8008b6a <_realloc_r+0x16>
 8008b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b64:	4611      	mov	r1, r2
 8008b66:	f7ff bdaf 	b.w	80086c8 <_malloc_r>
 8008b6a:	b92a      	cbnz	r2, 8008b78 <_realloc_r+0x24>
 8008b6c:	f7ff fd40 	bl	80085f0 <_free_r>
 8008b70:	4625      	mov	r5, r4
 8008b72:	4628      	mov	r0, r5
 8008b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b78:	f000 fc5c 	bl	8009434 <_malloc_usable_size_r>
 8008b7c:	4284      	cmp	r4, r0
 8008b7e:	4607      	mov	r7, r0
 8008b80:	d802      	bhi.n	8008b88 <_realloc_r+0x34>
 8008b82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b86:	d812      	bhi.n	8008bae <_realloc_r+0x5a>
 8008b88:	4621      	mov	r1, r4
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	f7ff fd9c 	bl	80086c8 <_malloc_r>
 8008b90:	4605      	mov	r5, r0
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d0ed      	beq.n	8008b72 <_realloc_r+0x1e>
 8008b96:	42bc      	cmp	r4, r7
 8008b98:	4622      	mov	r2, r4
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	bf28      	it	cs
 8008b9e:	463a      	movcs	r2, r7
 8008ba0:	f7fc f894 	bl	8004ccc <memcpy>
 8008ba4:	4631      	mov	r1, r6
 8008ba6:	4640      	mov	r0, r8
 8008ba8:	f7ff fd22 	bl	80085f0 <_free_r>
 8008bac:	e7e1      	b.n	8008b72 <_realloc_r+0x1e>
 8008bae:	4635      	mov	r5, r6
 8008bb0:	e7df      	b.n	8008b72 <_realloc_r+0x1e>

08008bb2 <__sfputc_r>:
 8008bb2:	6893      	ldr	r3, [r2, #8]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	b410      	push	{r4}
 8008bba:	6093      	str	r3, [r2, #8]
 8008bbc:	da08      	bge.n	8008bd0 <__sfputc_r+0x1e>
 8008bbe:	6994      	ldr	r4, [r2, #24]
 8008bc0:	42a3      	cmp	r3, r4
 8008bc2:	db01      	blt.n	8008bc8 <__sfputc_r+0x16>
 8008bc4:	290a      	cmp	r1, #10
 8008bc6:	d103      	bne.n	8008bd0 <__sfputc_r+0x1e>
 8008bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bcc:	f000 b94a 	b.w	8008e64 <__swbuf_r>
 8008bd0:	6813      	ldr	r3, [r2, #0]
 8008bd2:	1c58      	adds	r0, r3, #1
 8008bd4:	6010      	str	r0, [r2, #0]
 8008bd6:	7019      	strb	r1, [r3, #0]
 8008bd8:	4608      	mov	r0, r1
 8008bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <__sfputs_r>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	4606      	mov	r6, r0
 8008be4:	460f      	mov	r7, r1
 8008be6:	4614      	mov	r4, r2
 8008be8:	18d5      	adds	r5, r2, r3
 8008bea:	42ac      	cmp	r4, r5
 8008bec:	d101      	bne.n	8008bf2 <__sfputs_r+0x12>
 8008bee:	2000      	movs	r0, #0
 8008bf0:	e007      	b.n	8008c02 <__sfputs_r+0x22>
 8008bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf6:	463a      	mov	r2, r7
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f7ff ffda 	bl	8008bb2 <__sfputc_r>
 8008bfe:	1c43      	adds	r3, r0, #1
 8008c00:	d1f3      	bne.n	8008bea <__sfputs_r+0xa>
 8008c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c04 <_vfiprintf_r>:
 8008c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c08:	460d      	mov	r5, r1
 8008c0a:	b09d      	sub	sp, #116	; 0x74
 8008c0c:	4614      	mov	r4, r2
 8008c0e:	4698      	mov	r8, r3
 8008c10:	4606      	mov	r6, r0
 8008c12:	b118      	cbz	r0, 8008c1c <_vfiprintf_r+0x18>
 8008c14:	6983      	ldr	r3, [r0, #24]
 8008c16:	b90b      	cbnz	r3, 8008c1c <_vfiprintf_r+0x18>
 8008c18:	f000 fb06 	bl	8009228 <__sinit>
 8008c1c:	4b89      	ldr	r3, [pc, #548]	; (8008e44 <_vfiprintf_r+0x240>)
 8008c1e:	429d      	cmp	r5, r3
 8008c20:	d11b      	bne.n	8008c5a <_vfiprintf_r+0x56>
 8008c22:	6875      	ldr	r5, [r6, #4]
 8008c24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c26:	07d9      	lsls	r1, r3, #31
 8008c28:	d405      	bmi.n	8008c36 <_vfiprintf_r+0x32>
 8008c2a:	89ab      	ldrh	r3, [r5, #12]
 8008c2c:	059a      	lsls	r2, r3, #22
 8008c2e:	d402      	bmi.n	8008c36 <_vfiprintf_r+0x32>
 8008c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c32:	f000 fb97 	bl	8009364 <__retarget_lock_acquire_recursive>
 8008c36:	89ab      	ldrh	r3, [r5, #12]
 8008c38:	071b      	lsls	r3, r3, #28
 8008c3a:	d501      	bpl.n	8008c40 <_vfiprintf_r+0x3c>
 8008c3c:	692b      	ldr	r3, [r5, #16]
 8008c3e:	b9eb      	cbnz	r3, 8008c7c <_vfiprintf_r+0x78>
 8008c40:	4629      	mov	r1, r5
 8008c42:	4630      	mov	r0, r6
 8008c44:	f000 f960 	bl	8008f08 <__swsetup_r>
 8008c48:	b1c0      	cbz	r0, 8008c7c <_vfiprintf_r+0x78>
 8008c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c4c:	07dc      	lsls	r4, r3, #31
 8008c4e:	d50e      	bpl.n	8008c6e <_vfiprintf_r+0x6a>
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	b01d      	add	sp, #116	; 0x74
 8008c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5a:	4b7b      	ldr	r3, [pc, #492]	; (8008e48 <_vfiprintf_r+0x244>)
 8008c5c:	429d      	cmp	r5, r3
 8008c5e:	d101      	bne.n	8008c64 <_vfiprintf_r+0x60>
 8008c60:	68b5      	ldr	r5, [r6, #8]
 8008c62:	e7df      	b.n	8008c24 <_vfiprintf_r+0x20>
 8008c64:	4b79      	ldr	r3, [pc, #484]	; (8008e4c <_vfiprintf_r+0x248>)
 8008c66:	429d      	cmp	r5, r3
 8008c68:	bf08      	it	eq
 8008c6a:	68f5      	ldreq	r5, [r6, #12]
 8008c6c:	e7da      	b.n	8008c24 <_vfiprintf_r+0x20>
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	0598      	lsls	r0, r3, #22
 8008c72:	d4ed      	bmi.n	8008c50 <_vfiprintf_r+0x4c>
 8008c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c76:	f000 fb76 	bl	8009366 <__retarget_lock_release_recursive>
 8008c7a:	e7e9      	b.n	8008c50 <_vfiprintf_r+0x4c>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c80:	2320      	movs	r3, #32
 8008c82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c8a:	2330      	movs	r3, #48	; 0x30
 8008c8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e50 <_vfiprintf_r+0x24c>
 8008c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c94:	f04f 0901 	mov.w	r9, #1
 8008c98:	4623      	mov	r3, r4
 8008c9a:	469a      	mov	sl, r3
 8008c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ca0:	b10a      	cbz	r2, 8008ca6 <_vfiprintf_r+0xa2>
 8008ca2:	2a25      	cmp	r2, #37	; 0x25
 8008ca4:	d1f9      	bne.n	8008c9a <_vfiprintf_r+0x96>
 8008ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8008caa:	d00b      	beq.n	8008cc4 <_vfiprintf_r+0xc0>
 8008cac:	465b      	mov	r3, fp
 8008cae:	4622      	mov	r2, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7ff ff94 	bl	8008be0 <__sfputs_r>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	f000 80aa 	beq.w	8008e12 <_vfiprintf_r+0x20e>
 8008cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cc0:	445a      	add	r2, fp
 8008cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8008cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 80a2 	beq.w	8008e12 <_vfiprintf_r+0x20e>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cd8:	f10a 0a01 	add.w	sl, sl, #1
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	9307      	str	r3, [sp, #28]
 8008ce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ce4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ce6:	4654      	mov	r4, sl
 8008ce8:	2205      	movs	r2, #5
 8008cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cee:	4858      	ldr	r0, [pc, #352]	; (8008e50 <_vfiprintf_r+0x24c>)
 8008cf0:	f7f7 fa7e 	bl	80001f0 <memchr>
 8008cf4:	9a04      	ldr	r2, [sp, #16]
 8008cf6:	b9d8      	cbnz	r0, 8008d30 <_vfiprintf_r+0x12c>
 8008cf8:	06d1      	lsls	r1, r2, #27
 8008cfa:	bf44      	itt	mi
 8008cfc:	2320      	movmi	r3, #32
 8008cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d02:	0713      	lsls	r3, r2, #28
 8008d04:	bf44      	itt	mi
 8008d06:	232b      	movmi	r3, #43	; 0x2b
 8008d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d10:	2b2a      	cmp	r3, #42	; 0x2a
 8008d12:	d015      	beq.n	8008d40 <_vfiprintf_r+0x13c>
 8008d14:	9a07      	ldr	r2, [sp, #28]
 8008d16:	4654      	mov	r4, sl
 8008d18:	2000      	movs	r0, #0
 8008d1a:	f04f 0c0a 	mov.w	ip, #10
 8008d1e:	4621      	mov	r1, r4
 8008d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d24:	3b30      	subs	r3, #48	; 0x30
 8008d26:	2b09      	cmp	r3, #9
 8008d28:	d94e      	bls.n	8008dc8 <_vfiprintf_r+0x1c4>
 8008d2a:	b1b0      	cbz	r0, 8008d5a <_vfiprintf_r+0x156>
 8008d2c:	9207      	str	r2, [sp, #28]
 8008d2e:	e014      	b.n	8008d5a <_vfiprintf_r+0x156>
 8008d30:	eba0 0308 	sub.w	r3, r0, r8
 8008d34:	fa09 f303 	lsl.w	r3, r9, r3
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	9304      	str	r3, [sp, #16]
 8008d3c:	46a2      	mov	sl, r4
 8008d3e:	e7d2      	b.n	8008ce6 <_vfiprintf_r+0xe2>
 8008d40:	9b03      	ldr	r3, [sp, #12]
 8008d42:	1d19      	adds	r1, r3, #4
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	9103      	str	r1, [sp, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	bfbb      	ittet	lt
 8008d4c:	425b      	neglt	r3, r3
 8008d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d52:	9307      	strge	r3, [sp, #28]
 8008d54:	9307      	strlt	r3, [sp, #28]
 8008d56:	bfb8      	it	lt
 8008d58:	9204      	strlt	r2, [sp, #16]
 8008d5a:	7823      	ldrb	r3, [r4, #0]
 8008d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d5e:	d10c      	bne.n	8008d7a <_vfiprintf_r+0x176>
 8008d60:	7863      	ldrb	r3, [r4, #1]
 8008d62:	2b2a      	cmp	r3, #42	; 0x2a
 8008d64:	d135      	bne.n	8008dd2 <_vfiprintf_r+0x1ce>
 8008d66:	9b03      	ldr	r3, [sp, #12]
 8008d68:	1d1a      	adds	r2, r3, #4
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	9203      	str	r2, [sp, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	bfb8      	it	lt
 8008d72:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d76:	3402      	adds	r4, #2
 8008d78:	9305      	str	r3, [sp, #20]
 8008d7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e60 <_vfiprintf_r+0x25c>
 8008d7e:	7821      	ldrb	r1, [r4, #0]
 8008d80:	2203      	movs	r2, #3
 8008d82:	4650      	mov	r0, sl
 8008d84:	f7f7 fa34 	bl	80001f0 <memchr>
 8008d88:	b140      	cbz	r0, 8008d9c <_vfiprintf_r+0x198>
 8008d8a:	2340      	movs	r3, #64	; 0x40
 8008d8c:	eba0 000a 	sub.w	r0, r0, sl
 8008d90:	fa03 f000 	lsl.w	r0, r3, r0
 8008d94:	9b04      	ldr	r3, [sp, #16]
 8008d96:	4303      	orrs	r3, r0
 8008d98:	3401      	adds	r4, #1
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da0:	482c      	ldr	r0, [pc, #176]	; (8008e54 <_vfiprintf_r+0x250>)
 8008da2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008da6:	2206      	movs	r2, #6
 8008da8:	f7f7 fa22 	bl	80001f0 <memchr>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d03f      	beq.n	8008e30 <_vfiprintf_r+0x22c>
 8008db0:	4b29      	ldr	r3, [pc, #164]	; (8008e58 <_vfiprintf_r+0x254>)
 8008db2:	bb1b      	cbnz	r3, 8008dfc <_vfiprintf_r+0x1f8>
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	3307      	adds	r3, #7
 8008db8:	f023 0307 	bic.w	r3, r3, #7
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	9303      	str	r3, [sp, #12]
 8008dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc2:	443b      	add	r3, r7
 8008dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc6:	e767      	b.n	8008c98 <_vfiprintf_r+0x94>
 8008dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dcc:	460c      	mov	r4, r1
 8008dce:	2001      	movs	r0, #1
 8008dd0:	e7a5      	b.n	8008d1e <_vfiprintf_r+0x11a>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	3401      	adds	r4, #1
 8008dd6:	9305      	str	r3, [sp, #20]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	f04f 0c0a 	mov.w	ip, #10
 8008dde:	4620      	mov	r0, r4
 8008de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008de4:	3a30      	subs	r2, #48	; 0x30
 8008de6:	2a09      	cmp	r2, #9
 8008de8:	d903      	bls.n	8008df2 <_vfiprintf_r+0x1ee>
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0c5      	beq.n	8008d7a <_vfiprintf_r+0x176>
 8008dee:	9105      	str	r1, [sp, #20]
 8008df0:	e7c3      	b.n	8008d7a <_vfiprintf_r+0x176>
 8008df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008df6:	4604      	mov	r4, r0
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e7f0      	b.n	8008dde <_vfiprintf_r+0x1da>
 8008dfc:	ab03      	add	r3, sp, #12
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	462a      	mov	r2, r5
 8008e02:	4b16      	ldr	r3, [pc, #88]	; (8008e5c <_vfiprintf_r+0x258>)
 8008e04:	a904      	add	r1, sp, #16
 8008e06:	4630      	mov	r0, r6
 8008e08:	f7fc f830 	bl	8004e6c <_printf_float>
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	1c78      	adds	r0, r7, #1
 8008e10:	d1d6      	bne.n	8008dc0 <_vfiprintf_r+0x1bc>
 8008e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e14:	07d9      	lsls	r1, r3, #31
 8008e16:	d405      	bmi.n	8008e24 <_vfiprintf_r+0x220>
 8008e18:	89ab      	ldrh	r3, [r5, #12]
 8008e1a:	059a      	lsls	r2, r3, #22
 8008e1c:	d402      	bmi.n	8008e24 <_vfiprintf_r+0x220>
 8008e1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e20:	f000 faa1 	bl	8009366 <__retarget_lock_release_recursive>
 8008e24:	89ab      	ldrh	r3, [r5, #12]
 8008e26:	065b      	lsls	r3, r3, #25
 8008e28:	f53f af12 	bmi.w	8008c50 <_vfiprintf_r+0x4c>
 8008e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e2e:	e711      	b.n	8008c54 <_vfiprintf_r+0x50>
 8008e30:	ab03      	add	r3, sp, #12
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	462a      	mov	r2, r5
 8008e36:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <_vfiprintf_r+0x258>)
 8008e38:	a904      	add	r1, sp, #16
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f7fc faba 	bl	80053b4 <_printf_i>
 8008e40:	e7e4      	b.n	8008e0c <_vfiprintf_r+0x208>
 8008e42:	bf00      	nop
 8008e44:	0800a25c 	.word	0x0800a25c
 8008e48:	0800a27c 	.word	0x0800a27c
 8008e4c:	0800a23c 	.word	0x0800a23c
 8008e50:	0800a1ec 	.word	0x0800a1ec
 8008e54:	0800a1f6 	.word	0x0800a1f6
 8008e58:	08004e6d 	.word	0x08004e6d
 8008e5c:	08008be1 	.word	0x08008be1
 8008e60:	0800a1f2 	.word	0x0800a1f2

08008e64 <__swbuf_r>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	460e      	mov	r6, r1
 8008e68:	4614      	mov	r4, r2
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	b118      	cbz	r0, 8008e76 <__swbuf_r+0x12>
 8008e6e:	6983      	ldr	r3, [r0, #24]
 8008e70:	b90b      	cbnz	r3, 8008e76 <__swbuf_r+0x12>
 8008e72:	f000 f9d9 	bl	8009228 <__sinit>
 8008e76:	4b21      	ldr	r3, [pc, #132]	; (8008efc <__swbuf_r+0x98>)
 8008e78:	429c      	cmp	r4, r3
 8008e7a:	d12b      	bne.n	8008ed4 <__swbuf_r+0x70>
 8008e7c:	686c      	ldr	r4, [r5, #4]
 8008e7e:	69a3      	ldr	r3, [r4, #24]
 8008e80:	60a3      	str	r3, [r4, #8]
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	071a      	lsls	r2, r3, #28
 8008e86:	d52f      	bpl.n	8008ee8 <__swbuf_r+0x84>
 8008e88:	6923      	ldr	r3, [r4, #16]
 8008e8a:	b36b      	cbz	r3, 8008ee8 <__swbuf_r+0x84>
 8008e8c:	6923      	ldr	r3, [r4, #16]
 8008e8e:	6820      	ldr	r0, [r4, #0]
 8008e90:	1ac0      	subs	r0, r0, r3
 8008e92:	6963      	ldr	r3, [r4, #20]
 8008e94:	b2f6      	uxtb	r6, r6
 8008e96:	4283      	cmp	r3, r0
 8008e98:	4637      	mov	r7, r6
 8008e9a:	dc04      	bgt.n	8008ea6 <__swbuf_r+0x42>
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f000 f92e 	bl	8009100 <_fflush_r>
 8008ea4:	bb30      	cbnz	r0, 8008ef4 <__swbuf_r+0x90>
 8008ea6:	68a3      	ldr	r3, [r4, #8]
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	60a3      	str	r3, [r4, #8]
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	1c5a      	adds	r2, r3, #1
 8008eb0:	6022      	str	r2, [r4, #0]
 8008eb2:	701e      	strb	r6, [r3, #0]
 8008eb4:	6963      	ldr	r3, [r4, #20]
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	4283      	cmp	r3, r0
 8008eba:	d004      	beq.n	8008ec6 <__swbuf_r+0x62>
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	07db      	lsls	r3, r3, #31
 8008ec0:	d506      	bpl.n	8008ed0 <__swbuf_r+0x6c>
 8008ec2:	2e0a      	cmp	r6, #10
 8008ec4:	d104      	bne.n	8008ed0 <__swbuf_r+0x6c>
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f000 f919 	bl	8009100 <_fflush_r>
 8008ece:	b988      	cbnz	r0, 8008ef4 <__swbuf_r+0x90>
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed4:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <__swbuf_r+0x9c>)
 8008ed6:	429c      	cmp	r4, r3
 8008ed8:	d101      	bne.n	8008ede <__swbuf_r+0x7a>
 8008eda:	68ac      	ldr	r4, [r5, #8]
 8008edc:	e7cf      	b.n	8008e7e <__swbuf_r+0x1a>
 8008ede:	4b09      	ldr	r3, [pc, #36]	; (8008f04 <__swbuf_r+0xa0>)
 8008ee0:	429c      	cmp	r4, r3
 8008ee2:	bf08      	it	eq
 8008ee4:	68ec      	ldreq	r4, [r5, #12]
 8008ee6:	e7ca      	b.n	8008e7e <__swbuf_r+0x1a>
 8008ee8:	4621      	mov	r1, r4
 8008eea:	4628      	mov	r0, r5
 8008eec:	f000 f80c 	bl	8008f08 <__swsetup_r>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d0cb      	beq.n	8008e8c <__swbuf_r+0x28>
 8008ef4:	f04f 37ff 	mov.w	r7, #4294967295
 8008ef8:	e7ea      	b.n	8008ed0 <__swbuf_r+0x6c>
 8008efa:	bf00      	nop
 8008efc:	0800a25c 	.word	0x0800a25c
 8008f00:	0800a27c 	.word	0x0800a27c
 8008f04:	0800a23c 	.word	0x0800a23c

08008f08 <__swsetup_r>:
 8008f08:	4b32      	ldr	r3, [pc, #200]	; (8008fd4 <__swsetup_r+0xcc>)
 8008f0a:	b570      	push	{r4, r5, r6, lr}
 8008f0c:	681d      	ldr	r5, [r3, #0]
 8008f0e:	4606      	mov	r6, r0
 8008f10:	460c      	mov	r4, r1
 8008f12:	b125      	cbz	r5, 8008f1e <__swsetup_r+0x16>
 8008f14:	69ab      	ldr	r3, [r5, #24]
 8008f16:	b913      	cbnz	r3, 8008f1e <__swsetup_r+0x16>
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f000 f985 	bl	8009228 <__sinit>
 8008f1e:	4b2e      	ldr	r3, [pc, #184]	; (8008fd8 <__swsetup_r+0xd0>)
 8008f20:	429c      	cmp	r4, r3
 8008f22:	d10f      	bne.n	8008f44 <__swsetup_r+0x3c>
 8008f24:	686c      	ldr	r4, [r5, #4]
 8008f26:	89a3      	ldrh	r3, [r4, #12]
 8008f28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f2c:	0719      	lsls	r1, r3, #28
 8008f2e:	d42c      	bmi.n	8008f8a <__swsetup_r+0x82>
 8008f30:	06dd      	lsls	r5, r3, #27
 8008f32:	d411      	bmi.n	8008f58 <__swsetup_r+0x50>
 8008f34:	2309      	movs	r3, #9
 8008f36:	6033      	str	r3, [r6, #0]
 8008f38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f42:	e03e      	b.n	8008fc2 <__swsetup_r+0xba>
 8008f44:	4b25      	ldr	r3, [pc, #148]	; (8008fdc <__swsetup_r+0xd4>)
 8008f46:	429c      	cmp	r4, r3
 8008f48:	d101      	bne.n	8008f4e <__swsetup_r+0x46>
 8008f4a:	68ac      	ldr	r4, [r5, #8]
 8008f4c:	e7eb      	b.n	8008f26 <__swsetup_r+0x1e>
 8008f4e:	4b24      	ldr	r3, [pc, #144]	; (8008fe0 <__swsetup_r+0xd8>)
 8008f50:	429c      	cmp	r4, r3
 8008f52:	bf08      	it	eq
 8008f54:	68ec      	ldreq	r4, [r5, #12]
 8008f56:	e7e6      	b.n	8008f26 <__swsetup_r+0x1e>
 8008f58:	0758      	lsls	r0, r3, #29
 8008f5a:	d512      	bpl.n	8008f82 <__swsetup_r+0x7a>
 8008f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f5e:	b141      	cbz	r1, 8008f72 <__swsetup_r+0x6a>
 8008f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f64:	4299      	cmp	r1, r3
 8008f66:	d002      	beq.n	8008f6e <__swsetup_r+0x66>
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f7ff fb41 	bl	80085f0 <_free_r>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	6363      	str	r3, [r4, #52]	; 0x34
 8008f72:	89a3      	ldrh	r3, [r4, #12]
 8008f74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f78:	81a3      	strh	r3, [r4, #12]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	6063      	str	r3, [r4, #4]
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	89a3      	ldrh	r3, [r4, #12]
 8008f84:	f043 0308 	orr.w	r3, r3, #8
 8008f88:	81a3      	strh	r3, [r4, #12]
 8008f8a:	6923      	ldr	r3, [r4, #16]
 8008f8c:	b94b      	cbnz	r3, 8008fa2 <__swsetup_r+0x9a>
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f98:	d003      	beq.n	8008fa2 <__swsetup_r+0x9a>
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	f000 fa09 	bl	80093b4 <__smakebuf_r>
 8008fa2:	89a0      	ldrh	r0, [r4, #12]
 8008fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fa8:	f010 0301 	ands.w	r3, r0, #1
 8008fac:	d00a      	beq.n	8008fc4 <__swsetup_r+0xbc>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60a3      	str	r3, [r4, #8]
 8008fb2:	6963      	ldr	r3, [r4, #20]
 8008fb4:	425b      	negs	r3, r3
 8008fb6:	61a3      	str	r3, [r4, #24]
 8008fb8:	6923      	ldr	r3, [r4, #16]
 8008fba:	b943      	cbnz	r3, 8008fce <__swsetup_r+0xc6>
 8008fbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fc0:	d1ba      	bne.n	8008f38 <__swsetup_r+0x30>
 8008fc2:	bd70      	pop	{r4, r5, r6, pc}
 8008fc4:	0781      	lsls	r1, r0, #30
 8008fc6:	bf58      	it	pl
 8008fc8:	6963      	ldrpl	r3, [r4, #20]
 8008fca:	60a3      	str	r3, [r4, #8]
 8008fcc:	e7f4      	b.n	8008fb8 <__swsetup_r+0xb0>
 8008fce:	2000      	movs	r0, #0
 8008fd0:	e7f7      	b.n	8008fc2 <__swsetup_r+0xba>
 8008fd2:	bf00      	nop
 8008fd4:	20000014 	.word	0x20000014
 8008fd8:	0800a25c 	.word	0x0800a25c
 8008fdc:	0800a27c 	.word	0x0800a27c
 8008fe0:	0800a23c 	.word	0x0800a23c

08008fe4 <abort>:
 8008fe4:	b508      	push	{r3, lr}
 8008fe6:	2006      	movs	r0, #6
 8008fe8:	f000 fa54 	bl	8009494 <raise>
 8008fec:	2001      	movs	r0, #1
 8008fee:	f7f8 fc99 	bl	8001924 <_exit>
	...

08008ff4 <__sflush_r>:
 8008ff4:	898a      	ldrh	r2, [r1, #12]
 8008ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	0710      	lsls	r0, r2, #28
 8008ffe:	460c      	mov	r4, r1
 8009000:	d458      	bmi.n	80090b4 <__sflush_r+0xc0>
 8009002:	684b      	ldr	r3, [r1, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	dc05      	bgt.n	8009014 <__sflush_r+0x20>
 8009008:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800900a:	2b00      	cmp	r3, #0
 800900c:	dc02      	bgt.n	8009014 <__sflush_r+0x20>
 800900e:	2000      	movs	r0, #0
 8009010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009016:	2e00      	cmp	r6, #0
 8009018:	d0f9      	beq.n	800900e <__sflush_r+0x1a>
 800901a:	2300      	movs	r3, #0
 800901c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009020:	682f      	ldr	r7, [r5, #0]
 8009022:	602b      	str	r3, [r5, #0]
 8009024:	d032      	beq.n	800908c <__sflush_r+0x98>
 8009026:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	075a      	lsls	r2, r3, #29
 800902c:	d505      	bpl.n	800903a <__sflush_r+0x46>
 800902e:	6863      	ldr	r3, [r4, #4]
 8009030:	1ac0      	subs	r0, r0, r3
 8009032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009034:	b10b      	cbz	r3, 800903a <__sflush_r+0x46>
 8009036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009038:	1ac0      	subs	r0, r0, r3
 800903a:	2300      	movs	r3, #0
 800903c:	4602      	mov	r2, r0
 800903e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009040:	6a21      	ldr	r1, [r4, #32]
 8009042:	4628      	mov	r0, r5
 8009044:	47b0      	blx	r6
 8009046:	1c43      	adds	r3, r0, #1
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	d106      	bne.n	800905a <__sflush_r+0x66>
 800904c:	6829      	ldr	r1, [r5, #0]
 800904e:	291d      	cmp	r1, #29
 8009050:	d82c      	bhi.n	80090ac <__sflush_r+0xb8>
 8009052:	4a2a      	ldr	r2, [pc, #168]	; (80090fc <__sflush_r+0x108>)
 8009054:	40ca      	lsrs	r2, r1
 8009056:	07d6      	lsls	r6, r2, #31
 8009058:	d528      	bpl.n	80090ac <__sflush_r+0xb8>
 800905a:	2200      	movs	r2, #0
 800905c:	6062      	str	r2, [r4, #4]
 800905e:	04d9      	lsls	r1, r3, #19
 8009060:	6922      	ldr	r2, [r4, #16]
 8009062:	6022      	str	r2, [r4, #0]
 8009064:	d504      	bpl.n	8009070 <__sflush_r+0x7c>
 8009066:	1c42      	adds	r2, r0, #1
 8009068:	d101      	bne.n	800906e <__sflush_r+0x7a>
 800906a:	682b      	ldr	r3, [r5, #0]
 800906c:	b903      	cbnz	r3, 8009070 <__sflush_r+0x7c>
 800906e:	6560      	str	r0, [r4, #84]	; 0x54
 8009070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009072:	602f      	str	r7, [r5, #0]
 8009074:	2900      	cmp	r1, #0
 8009076:	d0ca      	beq.n	800900e <__sflush_r+0x1a>
 8009078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800907c:	4299      	cmp	r1, r3
 800907e:	d002      	beq.n	8009086 <__sflush_r+0x92>
 8009080:	4628      	mov	r0, r5
 8009082:	f7ff fab5 	bl	80085f0 <_free_r>
 8009086:	2000      	movs	r0, #0
 8009088:	6360      	str	r0, [r4, #52]	; 0x34
 800908a:	e7c1      	b.n	8009010 <__sflush_r+0x1c>
 800908c:	6a21      	ldr	r1, [r4, #32]
 800908e:	2301      	movs	r3, #1
 8009090:	4628      	mov	r0, r5
 8009092:	47b0      	blx	r6
 8009094:	1c41      	adds	r1, r0, #1
 8009096:	d1c7      	bne.n	8009028 <__sflush_r+0x34>
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0c4      	beq.n	8009028 <__sflush_r+0x34>
 800909e:	2b1d      	cmp	r3, #29
 80090a0:	d001      	beq.n	80090a6 <__sflush_r+0xb2>
 80090a2:	2b16      	cmp	r3, #22
 80090a4:	d101      	bne.n	80090aa <__sflush_r+0xb6>
 80090a6:	602f      	str	r7, [r5, #0]
 80090a8:	e7b1      	b.n	800900e <__sflush_r+0x1a>
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b0:	81a3      	strh	r3, [r4, #12]
 80090b2:	e7ad      	b.n	8009010 <__sflush_r+0x1c>
 80090b4:	690f      	ldr	r7, [r1, #16]
 80090b6:	2f00      	cmp	r7, #0
 80090b8:	d0a9      	beq.n	800900e <__sflush_r+0x1a>
 80090ba:	0793      	lsls	r3, r2, #30
 80090bc:	680e      	ldr	r6, [r1, #0]
 80090be:	bf08      	it	eq
 80090c0:	694b      	ldreq	r3, [r1, #20]
 80090c2:	600f      	str	r7, [r1, #0]
 80090c4:	bf18      	it	ne
 80090c6:	2300      	movne	r3, #0
 80090c8:	eba6 0807 	sub.w	r8, r6, r7
 80090cc:	608b      	str	r3, [r1, #8]
 80090ce:	f1b8 0f00 	cmp.w	r8, #0
 80090d2:	dd9c      	ble.n	800900e <__sflush_r+0x1a>
 80090d4:	6a21      	ldr	r1, [r4, #32]
 80090d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090d8:	4643      	mov	r3, r8
 80090da:	463a      	mov	r2, r7
 80090dc:	4628      	mov	r0, r5
 80090de:	47b0      	blx	r6
 80090e0:	2800      	cmp	r0, #0
 80090e2:	dc06      	bgt.n	80090f2 <__sflush_r+0xfe>
 80090e4:	89a3      	ldrh	r3, [r4, #12]
 80090e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ea:	81a3      	strh	r3, [r4, #12]
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295
 80090f0:	e78e      	b.n	8009010 <__sflush_r+0x1c>
 80090f2:	4407      	add	r7, r0
 80090f4:	eba8 0800 	sub.w	r8, r8, r0
 80090f8:	e7e9      	b.n	80090ce <__sflush_r+0xda>
 80090fa:	bf00      	nop
 80090fc:	20400001 	.word	0x20400001

08009100 <_fflush_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	690b      	ldr	r3, [r1, #16]
 8009104:	4605      	mov	r5, r0
 8009106:	460c      	mov	r4, r1
 8009108:	b913      	cbnz	r3, 8009110 <_fflush_r+0x10>
 800910a:	2500      	movs	r5, #0
 800910c:	4628      	mov	r0, r5
 800910e:	bd38      	pop	{r3, r4, r5, pc}
 8009110:	b118      	cbz	r0, 800911a <_fflush_r+0x1a>
 8009112:	6983      	ldr	r3, [r0, #24]
 8009114:	b90b      	cbnz	r3, 800911a <_fflush_r+0x1a>
 8009116:	f000 f887 	bl	8009228 <__sinit>
 800911a:	4b14      	ldr	r3, [pc, #80]	; (800916c <_fflush_r+0x6c>)
 800911c:	429c      	cmp	r4, r3
 800911e:	d11b      	bne.n	8009158 <_fflush_r+0x58>
 8009120:	686c      	ldr	r4, [r5, #4]
 8009122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d0ef      	beq.n	800910a <_fflush_r+0xa>
 800912a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800912c:	07d0      	lsls	r0, r2, #31
 800912e:	d404      	bmi.n	800913a <_fflush_r+0x3a>
 8009130:	0599      	lsls	r1, r3, #22
 8009132:	d402      	bmi.n	800913a <_fflush_r+0x3a>
 8009134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009136:	f000 f915 	bl	8009364 <__retarget_lock_acquire_recursive>
 800913a:	4628      	mov	r0, r5
 800913c:	4621      	mov	r1, r4
 800913e:	f7ff ff59 	bl	8008ff4 <__sflush_r>
 8009142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009144:	07da      	lsls	r2, r3, #31
 8009146:	4605      	mov	r5, r0
 8009148:	d4e0      	bmi.n	800910c <_fflush_r+0xc>
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	059b      	lsls	r3, r3, #22
 800914e:	d4dd      	bmi.n	800910c <_fflush_r+0xc>
 8009150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009152:	f000 f908 	bl	8009366 <__retarget_lock_release_recursive>
 8009156:	e7d9      	b.n	800910c <_fflush_r+0xc>
 8009158:	4b05      	ldr	r3, [pc, #20]	; (8009170 <_fflush_r+0x70>)
 800915a:	429c      	cmp	r4, r3
 800915c:	d101      	bne.n	8009162 <_fflush_r+0x62>
 800915e:	68ac      	ldr	r4, [r5, #8]
 8009160:	e7df      	b.n	8009122 <_fflush_r+0x22>
 8009162:	4b04      	ldr	r3, [pc, #16]	; (8009174 <_fflush_r+0x74>)
 8009164:	429c      	cmp	r4, r3
 8009166:	bf08      	it	eq
 8009168:	68ec      	ldreq	r4, [r5, #12]
 800916a:	e7da      	b.n	8009122 <_fflush_r+0x22>
 800916c:	0800a25c 	.word	0x0800a25c
 8009170:	0800a27c 	.word	0x0800a27c
 8009174:	0800a23c 	.word	0x0800a23c

08009178 <std>:
 8009178:	2300      	movs	r3, #0
 800917a:	b510      	push	{r4, lr}
 800917c:	4604      	mov	r4, r0
 800917e:	e9c0 3300 	strd	r3, r3, [r0]
 8009182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009186:	6083      	str	r3, [r0, #8]
 8009188:	8181      	strh	r1, [r0, #12]
 800918a:	6643      	str	r3, [r0, #100]	; 0x64
 800918c:	81c2      	strh	r2, [r0, #14]
 800918e:	6183      	str	r3, [r0, #24]
 8009190:	4619      	mov	r1, r3
 8009192:	2208      	movs	r2, #8
 8009194:	305c      	adds	r0, #92	; 0x5c
 8009196:	f7fb fdc1 	bl	8004d1c <memset>
 800919a:	4b05      	ldr	r3, [pc, #20]	; (80091b0 <std+0x38>)
 800919c:	6263      	str	r3, [r4, #36]	; 0x24
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <std+0x3c>)
 80091a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80091a2:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <std+0x40>)
 80091a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091a6:	4b05      	ldr	r3, [pc, #20]	; (80091bc <std+0x44>)
 80091a8:	6224      	str	r4, [r4, #32]
 80091aa:	6323      	str	r3, [r4, #48]	; 0x30
 80091ac:	bd10      	pop	{r4, pc}
 80091ae:	bf00      	nop
 80091b0:	080094cd 	.word	0x080094cd
 80091b4:	080094ef 	.word	0x080094ef
 80091b8:	08009527 	.word	0x08009527
 80091bc:	0800954b 	.word	0x0800954b

080091c0 <_cleanup_r>:
 80091c0:	4901      	ldr	r1, [pc, #4]	; (80091c8 <_cleanup_r+0x8>)
 80091c2:	f000 b8af 	b.w	8009324 <_fwalk_reent>
 80091c6:	bf00      	nop
 80091c8:	08009101 	.word	0x08009101

080091cc <__sfmoreglue>:
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	2268      	movs	r2, #104	; 0x68
 80091d0:	1e4d      	subs	r5, r1, #1
 80091d2:	4355      	muls	r5, r2
 80091d4:	460e      	mov	r6, r1
 80091d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091da:	f7ff fa75 	bl	80086c8 <_malloc_r>
 80091de:	4604      	mov	r4, r0
 80091e0:	b140      	cbz	r0, 80091f4 <__sfmoreglue+0x28>
 80091e2:	2100      	movs	r1, #0
 80091e4:	e9c0 1600 	strd	r1, r6, [r0]
 80091e8:	300c      	adds	r0, #12
 80091ea:	60a0      	str	r0, [r4, #8]
 80091ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091f0:	f7fb fd94 	bl	8004d1c <memset>
 80091f4:	4620      	mov	r0, r4
 80091f6:	bd70      	pop	{r4, r5, r6, pc}

080091f8 <__sfp_lock_acquire>:
 80091f8:	4801      	ldr	r0, [pc, #4]	; (8009200 <__sfp_lock_acquire+0x8>)
 80091fa:	f000 b8b3 	b.w	8009364 <__retarget_lock_acquire_recursive>
 80091fe:	bf00      	nop
 8009200:	20000841 	.word	0x20000841

08009204 <__sfp_lock_release>:
 8009204:	4801      	ldr	r0, [pc, #4]	; (800920c <__sfp_lock_release+0x8>)
 8009206:	f000 b8ae 	b.w	8009366 <__retarget_lock_release_recursive>
 800920a:	bf00      	nop
 800920c:	20000841 	.word	0x20000841

08009210 <__sinit_lock_acquire>:
 8009210:	4801      	ldr	r0, [pc, #4]	; (8009218 <__sinit_lock_acquire+0x8>)
 8009212:	f000 b8a7 	b.w	8009364 <__retarget_lock_acquire_recursive>
 8009216:	bf00      	nop
 8009218:	20000842 	.word	0x20000842

0800921c <__sinit_lock_release>:
 800921c:	4801      	ldr	r0, [pc, #4]	; (8009224 <__sinit_lock_release+0x8>)
 800921e:	f000 b8a2 	b.w	8009366 <__retarget_lock_release_recursive>
 8009222:	bf00      	nop
 8009224:	20000842 	.word	0x20000842

08009228 <__sinit>:
 8009228:	b510      	push	{r4, lr}
 800922a:	4604      	mov	r4, r0
 800922c:	f7ff fff0 	bl	8009210 <__sinit_lock_acquire>
 8009230:	69a3      	ldr	r3, [r4, #24]
 8009232:	b11b      	cbz	r3, 800923c <__sinit+0x14>
 8009234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009238:	f7ff bff0 	b.w	800921c <__sinit_lock_release>
 800923c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009240:	6523      	str	r3, [r4, #80]	; 0x50
 8009242:	4b13      	ldr	r3, [pc, #76]	; (8009290 <__sinit+0x68>)
 8009244:	4a13      	ldr	r2, [pc, #76]	; (8009294 <__sinit+0x6c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	62a2      	str	r2, [r4, #40]	; 0x28
 800924a:	42a3      	cmp	r3, r4
 800924c:	bf04      	itt	eq
 800924e:	2301      	moveq	r3, #1
 8009250:	61a3      	streq	r3, [r4, #24]
 8009252:	4620      	mov	r0, r4
 8009254:	f000 f820 	bl	8009298 <__sfp>
 8009258:	6060      	str	r0, [r4, #4]
 800925a:	4620      	mov	r0, r4
 800925c:	f000 f81c 	bl	8009298 <__sfp>
 8009260:	60a0      	str	r0, [r4, #8]
 8009262:	4620      	mov	r0, r4
 8009264:	f000 f818 	bl	8009298 <__sfp>
 8009268:	2200      	movs	r2, #0
 800926a:	60e0      	str	r0, [r4, #12]
 800926c:	2104      	movs	r1, #4
 800926e:	6860      	ldr	r0, [r4, #4]
 8009270:	f7ff ff82 	bl	8009178 <std>
 8009274:	68a0      	ldr	r0, [r4, #8]
 8009276:	2201      	movs	r2, #1
 8009278:	2109      	movs	r1, #9
 800927a:	f7ff ff7d 	bl	8009178 <std>
 800927e:	68e0      	ldr	r0, [r4, #12]
 8009280:	2202      	movs	r2, #2
 8009282:	2112      	movs	r1, #18
 8009284:	f7ff ff78 	bl	8009178 <std>
 8009288:	2301      	movs	r3, #1
 800928a:	61a3      	str	r3, [r4, #24]
 800928c:	e7d2      	b.n	8009234 <__sinit+0xc>
 800928e:	bf00      	nop
 8009290:	08009df8 	.word	0x08009df8
 8009294:	080091c1 	.word	0x080091c1

08009298 <__sfp>:
 8009298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929a:	4607      	mov	r7, r0
 800929c:	f7ff ffac 	bl	80091f8 <__sfp_lock_acquire>
 80092a0:	4b1e      	ldr	r3, [pc, #120]	; (800931c <__sfp+0x84>)
 80092a2:	681e      	ldr	r6, [r3, #0]
 80092a4:	69b3      	ldr	r3, [r6, #24]
 80092a6:	b913      	cbnz	r3, 80092ae <__sfp+0x16>
 80092a8:	4630      	mov	r0, r6
 80092aa:	f7ff ffbd 	bl	8009228 <__sinit>
 80092ae:	3648      	adds	r6, #72	; 0x48
 80092b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	d503      	bpl.n	80092c0 <__sfp+0x28>
 80092b8:	6833      	ldr	r3, [r6, #0]
 80092ba:	b30b      	cbz	r3, 8009300 <__sfp+0x68>
 80092bc:	6836      	ldr	r6, [r6, #0]
 80092be:	e7f7      	b.n	80092b0 <__sfp+0x18>
 80092c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092c4:	b9d5      	cbnz	r5, 80092fc <__sfp+0x64>
 80092c6:	4b16      	ldr	r3, [pc, #88]	; (8009320 <__sfp+0x88>)
 80092c8:	60e3      	str	r3, [r4, #12]
 80092ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092ce:	6665      	str	r5, [r4, #100]	; 0x64
 80092d0:	f000 f847 	bl	8009362 <__retarget_lock_init_recursive>
 80092d4:	f7ff ff96 	bl	8009204 <__sfp_lock_release>
 80092d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092e0:	6025      	str	r5, [r4, #0]
 80092e2:	61a5      	str	r5, [r4, #24]
 80092e4:	2208      	movs	r2, #8
 80092e6:	4629      	mov	r1, r5
 80092e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092ec:	f7fb fd16 	bl	8004d1c <memset>
 80092f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092f8:	4620      	mov	r0, r4
 80092fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092fc:	3468      	adds	r4, #104	; 0x68
 80092fe:	e7d9      	b.n	80092b4 <__sfp+0x1c>
 8009300:	2104      	movs	r1, #4
 8009302:	4638      	mov	r0, r7
 8009304:	f7ff ff62 	bl	80091cc <__sfmoreglue>
 8009308:	4604      	mov	r4, r0
 800930a:	6030      	str	r0, [r6, #0]
 800930c:	2800      	cmp	r0, #0
 800930e:	d1d5      	bne.n	80092bc <__sfp+0x24>
 8009310:	f7ff ff78 	bl	8009204 <__sfp_lock_release>
 8009314:	230c      	movs	r3, #12
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	e7ee      	b.n	80092f8 <__sfp+0x60>
 800931a:	bf00      	nop
 800931c:	08009df8 	.word	0x08009df8
 8009320:	ffff0001 	.word	0xffff0001

08009324 <_fwalk_reent>:
 8009324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009328:	4606      	mov	r6, r0
 800932a:	4688      	mov	r8, r1
 800932c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009330:	2700      	movs	r7, #0
 8009332:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009336:	f1b9 0901 	subs.w	r9, r9, #1
 800933a:	d505      	bpl.n	8009348 <_fwalk_reent+0x24>
 800933c:	6824      	ldr	r4, [r4, #0]
 800933e:	2c00      	cmp	r4, #0
 8009340:	d1f7      	bne.n	8009332 <_fwalk_reent+0xe>
 8009342:	4638      	mov	r0, r7
 8009344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009348:	89ab      	ldrh	r3, [r5, #12]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d907      	bls.n	800935e <_fwalk_reent+0x3a>
 800934e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009352:	3301      	adds	r3, #1
 8009354:	d003      	beq.n	800935e <_fwalk_reent+0x3a>
 8009356:	4629      	mov	r1, r5
 8009358:	4630      	mov	r0, r6
 800935a:	47c0      	blx	r8
 800935c:	4307      	orrs	r7, r0
 800935e:	3568      	adds	r5, #104	; 0x68
 8009360:	e7e9      	b.n	8009336 <_fwalk_reent+0x12>

08009362 <__retarget_lock_init_recursive>:
 8009362:	4770      	bx	lr

08009364 <__retarget_lock_acquire_recursive>:
 8009364:	4770      	bx	lr

08009366 <__retarget_lock_release_recursive>:
 8009366:	4770      	bx	lr

08009368 <__swhatbuf_r>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	460e      	mov	r6, r1
 800936c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009370:	2900      	cmp	r1, #0
 8009372:	b096      	sub	sp, #88	; 0x58
 8009374:	4614      	mov	r4, r2
 8009376:	461d      	mov	r5, r3
 8009378:	da08      	bge.n	800938c <__swhatbuf_r+0x24>
 800937a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	602a      	str	r2, [r5, #0]
 8009382:	061a      	lsls	r2, r3, #24
 8009384:	d410      	bmi.n	80093a8 <__swhatbuf_r+0x40>
 8009386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800938a:	e00e      	b.n	80093aa <__swhatbuf_r+0x42>
 800938c:	466a      	mov	r2, sp
 800938e:	f000 f903 	bl	8009598 <_fstat_r>
 8009392:	2800      	cmp	r0, #0
 8009394:	dbf1      	blt.n	800937a <__swhatbuf_r+0x12>
 8009396:	9a01      	ldr	r2, [sp, #4]
 8009398:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800939c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093a0:	425a      	negs	r2, r3
 80093a2:	415a      	adcs	r2, r3
 80093a4:	602a      	str	r2, [r5, #0]
 80093a6:	e7ee      	b.n	8009386 <__swhatbuf_r+0x1e>
 80093a8:	2340      	movs	r3, #64	; 0x40
 80093aa:	2000      	movs	r0, #0
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	b016      	add	sp, #88	; 0x58
 80093b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080093b4 <__smakebuf_r>:
 80093b4:	898b      	ldrh	r3, [r1, #12]
 80093b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093b8:	079d      	lsls	r5, r3, #30
 80093ba:	4606      	mov	r6, r0
 80093bc:	460c      	mov	r4, r1
 80093be:	d507      	bpl.n	80093d0 <__smakebuf_r+0x1c>
 80093c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	6123      	str	r3, [r4, #16]
 80093c8:	2301      	movs	r3, #1
 80093ca:	6163      	str	r3, [r4, #20]
 80093cc:	b002      	add	sp, #8
 80093ce:	bd70      	pop	{r4, r5, r6, pc}
 80093d0:	ab01      	add	r3, sp, #4
 80093d2:	466a      	mov	r2, sp
 80093d4:	f7ff ffc8 	bl	8009368 <__swhatbuf_r>
 80093d8:	9900      	ldr	r1, [sp, #0]
 80093da:	4605      	mov	r5, r0
 80093dc:	4630      	mov	r0, r6
 80093de:	f7ff f973 	bl	80086c8 <_malloc_r>
 80093e2:	b948      	cbnz	r0, 80093f8 <__smakebuf_r+0x44>
 80093e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093e8:	059a      	lsls	r2, r3, #22
 80093ea:	d4ef      	bmi.n	80093cc <__smakebuf_r+0x18>
 80093ec:	f023 0303 	bic.w	r3, r3, #3
 80093f0:	f043 0302 	orr.w	r3, r3, #2
 80093f4:	81a3      	strh	r3, [r4, #12]
 80093f6:	e7e3      	b.n	80093c0 <__smakebuf_r+0xc>
 80093f8:	4b0d      	ldr	r3, [pc, #52]	; (8009430 <__smakebuf_r+0x7c>)
 80093fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80093fc:	89a3      	ldrh	r3, [r4, #12]
 80093fe:	6020      	str	r0, [r4, #0]
 8009400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009404:	81a3      	strh	r3, [r4, #12]
 8009406:	9b00      	ldr	r3, [sp, #0]
 8009408:	6163      	str	r3, [r4, #20]
 800940a:	9b01      	ldr	r3, [sp, #4]
 800940c:	6120      	str	r0, [r4, #16]
 800940e:	b15b      	cbz	r3, 8009428 <__smakebuf_r+0x74>
 8009410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009414:	4630      	mov	r0, r6
 8009416:	f000 f8d1 	bl	80095bc <_isatty_r>
 800941a:	b128      	cbz	r0, 8009428 <__smakebuf_r+0x74>
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	f023 0303 	bic.w	r3, r3, #3
 8009422:	f043 0301 	orr.w	r3, r3, #1
 8009426:	81a3      	strh	r3, [r4, #12]
 8009428:	89a0      	ldrh	r0, [r4, #12]
 800942a:	4305      	orrs	r5, r0
 800942c:	81a5      	strh	r5, [r4, #12]
 800942e:	e7cd      	b.n	80093cc <__smakebuf_r+0x18>
 8009430:	080091c1 	.word	0x080091c1

08009434 <_malloc_usable_size_r>:
 8009434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009438:	1f18      	subs	r0, r3, #4
 800943a:	2b00      	cmp	r3, #0
 800943c:	bfbc      	itt	lt
 800943e:	580b      	ldrlt	r3, [r1, r0]
 8009440:	18c0      	addlt	r0, r0, r3
 8009442:	4770      	bx	lr

08009444 <_raise_r>:
 8009444:	291f      	cmp	r1, #31
 8009446:	b538      	push	{r3, r4, r5, lr}
 8009448:	4604      	mov	r4, r0
 800944a:	460d      	mov	r5, r1
 800944c:	d904      	bls.n	8009458 <_raise_r+0x14>
 800944e:	2316      	movs	r3, #22
 8009450:	6003      	str	r3, [r0, #0]
 8009452:	f04f 30ff 	mov.w	r0, #4294967295
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800945a:	b112      	cbz	r2, 8009462 <_raise_r+0x1e>
 800945c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009460:	b94b      	cbnz	r3, 8009476 <_raise_r+0x32>
 8009462:	4620      	mov	r0, r4
 8009464:	f000 f830 	bl	80094c8 <_getpid_r>
 8009468:	462a      	mov	r2, r5
 800946a:	4601      	mov	r1, r0
 800946c:	4620      	mov	r0, r4
 800946e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009472:	f000 b817 	b.w	80094a4 <_kill_r>
 8009476:	2b01      	cmp	r3, #1
 8009478:	d00a      	beq.n	8009490 <_raise_r+0x4c>
 800947a:	1c59      	adds	r1, r3, #1
 800947c:	d103      	bne.n	8009486 <_raise_r+0x42>
 800947e:	2316      	movs	r3, #22
 8009480:	6003      	str	r3, [r0, #0]
 8009482:	2001      	movs	r0, #1
 8009484:	e7e7      	b.n	8009456 <_raise_r+0x12>
 8009486:	2400      	movs	r4, #0
 8009488:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800948c:	4628      	mov	r0, r5
 800948e:	4798      	blx	r3
 8009490:	2000      	movs	r0, #0
 8009492:	e7e0      	b.n	8009456 <_raise_r+0x12>

08009494 <raise>:
 8009494:	4b02      	ldr	r3, [pc, #8]	; (80094a0 <raise+0xc>)
 8009496:	4601      	mov	r1, r0
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	f7ff bfd3 	b.w	8009444 <_raise_r>
 800949e:	bf00      	nop
 80094a0:	20000014 	.word	0x20000014

080094a4 <_kill_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	4d07      	ldr	r5, [pc, #28]	; (80094c4 <_kill_r+0x20>)
 80094a8:	2300      	movs	r3, #0
 80094aa:	4604      	mov	r4, r0
 80094ac:	4608      	mov	r0, r1
 80094ae:	4611      	mov	r1, r2
 80094b0:	602b      	str	r3, [r5, #0]
 80094b2:	f7f8 fa27 	bl	8001904 <_kill>
 80094b6:	1c43      	adds	r3, r0, #1
 80094b8:	d102      	bne.n	80094c0 <_kill_r+0x1c>
 80094ba:	682b      	ldr	r3, [r5, #0]
 80094bc:	b103      	cbz	r3, 80094c0 <_kill_r+0x1c>
 80094be:	6023      	str	r3, [r4, #0]
 80094c0:	bd38      	pop	{r3, r4, r5, pc}
 80094c2:	bf00      	nop
 80094c4:	2000083c 	.word	0x2000083c

080094c8 <_getpid_r>:
 80094c8:	f7f8 ba14 	b.w	80018f4 <_getpid>

080094cc <__sread>:
 80094cc:	b510      	push	{r4, lr}
 80094ce:	460c      	mov	r4, r1
 80094d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d4:	f000 f894 	bl	8009600 <_read_r>
 80094d8:	2800      	cmp	r0, #0
 80094da:	bfab      	itete	ge
 80094dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094de:	89a3      	ldrhlt	r3, [r4, #12]
 80094e0:	181b      	addge	r3, r3, r0
 80094e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094e6:	bfac      	ite	ge
 80094e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094ea:	81a3      	strhlt	r3, [r4, #12]
 80094ec:	bd10      	pop	{r4, pc}

080094ee <__swrite>:
 80094ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f2:	461f      	mov	r7, r3
 80094f4:	898b      	ldrh	r3, [r1, #12]
 80094f6:	05db      	lsls	r3, r3, #23
 80094f8:	4605      	mov	r5, r0
 80094fa:	460c      	mov	r4, r1
 80094fc:	4616      	mov	r6, r2
 80094fe:	d505      	bpl.n	800950c <__swrite+0x1e>
 8009500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009504:	2302      	movs	r3, #2
 8009506:	2200      	movs	r2, #0
 8009508:	f000 f868 	bl	80095dc <_lseek_r>
 800950c:	89a3      	ldrh	r3, [r4, #12]
 800950e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009516:	81a3      	strh	r3, [r4, #12]
 8009518:	4632      	mov	r2, r6
 800951a:	463b      	mov	r3, r7
 800951c:	4628      	mov	r0, r5
 800951e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009522:	f000 b817 	b.w	8009554 <_write_r>

08009526 <__sseek>:
 8009526:	b510      	push	{r4, lr}
 8009528:	460c      	mov	r4, r1
 800952a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952e:	f000 f855 	bl	80095dc <_lseek_r>
 8009532:	1c43      	adds	r3, r0, #1
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	bf15      	itete	ne
 8009538:	6560      	strne	r0, [r4, #84]	; 0x54
 800953a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800953e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009542:	81a3      	strheq	r3, [r4, #12]
 8009544:	bf18      	it	ne
 8009546:	81a3      	strhne	r3, [r4, #12]
 8009548:	bd10      	pop	{r4, pc}

0800954a <__sclose>:
 800954a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800954e:	f000 b813 	b.w	8009578 <_close_r>
	...

08009554 <_write_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4d07      	ldr	r5, [pc, #28]	; (8009574 <_write_r+0x20>)
 8009558:	4604      	mov	r4, r0
 800955a:	4608      	mov	r0, r1
 800955c:	4611      	mov	r1, r2
 800955e:	2200      	movs	r2, #0
 8009560:	602a      	str	r2, [r5, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	f7f8 fa05 	bl	8001972 <_write>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	d102      	bne.n	8009572 <_write_r+0x1e>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	b103      	cbz	r3, 8009572 <_write_r+0x1e>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	2000083c 	.word	0x2000083c

08009578 <_close_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d06      	ldr	r5, [pc, #24]	; (8009594 <_close_r+0x1c>)
 800957c:	2300      	movs	r3, #0
 800957e:	4604      	mov	r4, r0
 8009580:	4608      	mov	r0, r1
 8009582:	602b      	str	r3, [r5, #0]
 8009584:	f7f8 fa11 	bl	80019aa <_close>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d102      	bne.n	8009592 <_close_r+0x1a>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	b103      	cbz	r3, 8009592 <_close_r+0x1a>
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	2000083c 	.word	0x2000083c

08009598 <_fstat_r>:
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	4d07      	ldr	r5, [pc, #28]	; (80095b8 <_fstat_r+0x20>)
 800959c:	2300      	movs	r3, #0
 800959e:	4604      	mov	r4, r0
 80095a0:	4608      	mov	r0, r1
 80095a2:	4611      	mov	r1, r2
 80095a4:	602b      	str	r3, [r5, #0]
 80095a6:	f7f8 fa0c 	bl	80019c2 <_fstat>
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	d102      	bne.n	80095b4 <_fstat_r+0x1c>
 80095ae:	682b      	ldr	r3, [r5, #0]
 80095b0:	b103      	cbz	r3, 80095b4 <_fstat_r+0x1c>
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	bd38      	pop	{r3, r4, r5, pc}
 80095b6:	bf00      	nop
 80095b8:	2000083c 	.word	0x2000083c

080095bc <_isatty_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	4d06      	ldr	r5, [pc, #24]	; (80095d8 <_isatty_r+0x1c>)
 80095c0:	2300      	movs	r3, #0
 80095c2:	4604      	mov	r4, r0
 80095c4:	4608      	mov	r0, r1
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	f7f8 fa0b 	bl	80019e2 <_isatty>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_isatty_r+0x1a>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_isatty_r+0x1a>
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	2000083c 	.word	0x2000083c

080095dc <_lseek_r>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	4d07      	ldr	r5, [pc, #28]	; (80095fc <_lseek_r+0x20>)
 80095e0:	4604      	mov	r4, r0
 80095e2:	4608      	mov	r0, r1
 80095e4:	4611      	mov	r1, r2
 80095e6:	2200      	movs	r2, #0
 80095e8:	602a      	str	r2, [r5, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	f7f8 fa04 	bl	80019f8 <_lseek>
 80095f0:	1c43      	adds	r3, r0, #1
 80095f2:	d102      	bne.n	80095fa <_lseek_r+0x1e>
 80095f4:	682b      	ldr	r3, [r5, #0]
 80095f6:	b103      	cbz	r3, 80095fa <_lseek_r+0x1e>
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	bd38      	pop	{r3, r4, r5, pc}
 80095fc:	2000083c 	.word	0x2000083c

08009600 <_read_r>:
 8009600:	b538      	push	{r3, r4, r5, lr}
 8009602:	4d07      	ldr	r5, [pc, #28]	; (8009620 <_read_r+0x20>)
 8009604:	4604      	mov	r4, r0
 8009606:	4608      	mov	r0, r1
 8009608:	4611      	mov	r1, r2
 800960a:	2200      	movs	r2, #0
 800960c:	602a      	str	r2, [r5, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	f7f8 f992 	bl	8001938 <_read>
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	d102      	bne.n	800961e <_read_r+0x1e>
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	b103      	cbz	r3, 800961e <_read_r+0x1e>
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	bd38      	pop	{r3, r4, r5, pc}
 8009620:	2000083c 	.word	0x2000083c

08009624 <_init>:
 8009624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009626:	bf00      	nop
 8009628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962a:	bc08      	pop	{r3}
 800962c:	469e      	mov	lr, r3
 800962e:	4770      	bx	lr

08009630 <_fini>:
 8009630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009632:	bf00      	nop
 8009634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009636:	bc08      	pop	{r3}
 8009638:	469e      	mov	lr, r3
 800963a:	4770      	bx	lr
