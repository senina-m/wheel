
pwm_input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008da0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  08008f40  08008f40  00018f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aec  08009aec  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009aec  08009aec  00019aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009af4  08009af4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009af4  08009af4  00019af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009af8  08009af8  00019af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  200001e4  08009ce0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  08009ce0  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb81  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e6  00000000  00000000  0002ed95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00030f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00031e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177fd  00000000  00000000  00032bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108fe  00000000  00000000  0004a3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090684  00000000  00000000  0005acc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb347  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc0  00000000  00000000  000eb398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f28 	.word	0x08008f28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08008f28 	.word	0x08008f28

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f62:	f000 fd79 	bl	8001a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f66:	f000 f883 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6a:	f000 f9d3 	bl	8001314 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f6e:	f000 f8e9 	bl	8001144 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f72:	f000 f977 	bl	8001264 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f76:	f000 f913 	bl	80011a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000f7a:	f004 fea9 	bl	8005cd0 <ssd1306_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000f7e:	210c      	movs	r1, #12
 8000f80:	4834      	ldr	r0, [pc, #208]	; (8001054 <main+0xf8>)
 8000f82:	f003 fdad 	bl	8004ae0 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f86:	2100      	movs	r1, #0
 8000f88:	4833      	ldr	r0, [pc, #204]	; (8001058 <main+0xfc>)
 8000f8a:	f003 fea9 	bl	8004ce0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000f8e:	2104      	movs	r1, #4
 8000f90:	4831      	ldr	r0, [pc, #196]	; (8001058 <main+0xfc>)
 8000f92:	f003 fea5 	bl	8004ce0 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	printNum(3);
	for(int i = 0; i < 4; i++) {
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	e028      	b.n	8000fee <main+0x92>
	   print_text("up", i);
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	482f      	ldr	r0, [pc, #188]	; (800105c <main+0x100>)
 8000fa0:	f000 fa6e 	bl	8001480 <print_text>
	   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, i);
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <main+0xf8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40
	   HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb0:	482b      	ldr	r0, [pc, #172]	; (8001060 <main+0x104>)
 8000fb2:	f001 f8c6 	bl	8002142 <HAL_GPIO_TogglePin>
	   print_pwm(period, pulseWidth);
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <main+0x108>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a2b      	ldr	r2, [pc, #172]	; (8001068 <main+0x10c>)
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fa81 	bl	80014c8 <print_pwm>
	   print_num(convert_v(period, pulseWidth));
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <main+0x108>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a27      	ldr	r2, [pc, #156]	; (8001068 <main+0x10c>)
 8000fcc:	6812      	ldr	r2, [r2, #0]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fa29 	bl	8001428 <convert_v>
 8000fd6:	eef0 7a40 	vmov.f32	s15, s0
 8000fda:	eeb0 0a67 	vmov.f32	s0, s15
 8000fde:	f000 f9f9 	bl	80013d4 <print_num>
	   HAL_Delay(100);
 8000fe2:	2064      	movs	r0, #100	; 0x64
 8000fe4:	f000 fdaa 	bl	8001b3c <HAL_Delay>
	for(int i = 0; i < 4; i++) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3301      	adds	r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	ddd3      	ble.n	8000f9c <main+0x40>
	}
	for(int i = 4; i > 0; i--) {
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	e028      	b.n	800104c <main+0xf0>
		print_text("down", i);
 8000ffa:	6839      	ldr	r1, [r7, #0]
 8000ffc:	481b      	ldr	r0, [pc, #108]	; (800106c <main+0x110>)
 8000ffe:	f000 fa3f 	bl	8001480 <print_text>
	   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, i);
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <main+0xf8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	641a      	str	r2, [r3, #64]	; 0x40
	   HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800100a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100e:	4814      	ldr	r0, [pc, #80]	; (8001060 <main+0x104>)
 8001010:	f001 f897 	bl	8002142 <HAL_GPIO_TogglePin>
	   print_pwm(period, pulseWidth);
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <main+0x108>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a13      	ldr	r2, [pc, #76]	; (8001068 <main+0x10c>)
 800101a:	6812      	ldr	r2, [r2, #0]
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fa52 	bl	80014c8 <print_pwm>
	   print_num(convert_v(period, pulseWidth));
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <main+0x108>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <main+0x10c>)
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f9fa 	bl	8001428 <convert_v>
 8001034:	eef0 7a40 	vmov.f32	s15, s0
 8001038:	eeb0 0a67 	vmov.f32	s0, s15
 800103c:	f000 f9ca 	bl	80013d4 <print_num>
	   HAL_Delay(100);
 8001040:	2064      	movs	r0, #100	; 0x64
 8001042:	f000 fd7b 	bl	8001b3c <HAL_Delay>
	for(int i = 4; i > 0; i--) {
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	3b01      	subs	r3, #1
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	dcd3      	bgt.n	8000ffa <main+0x9e>
	for(int i = 0; i < 4; i++) {
 8001052:	e7a0      	b.n	8000f96 <main+0x3a>
 8001054:	2000029c 	.word	0x2000029c
 8001058:	20000254 	.word	0x20000254
 800105c:	08008f40 	.word	0x08008f40
 8001060:	40020800 	.word	0x40020800
 8001064:	200003ac 	.word	0x200003ac
 8001068:	200003b0 	.word	0x200003b0
 800106c:	08008f44 	.word	0x08008f44

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	; 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2230      	movs	r2, #48	; 0x30
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f005 f87a 	bl	8006178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <SystemClock_Config+0xcc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <SystemClock_Config+0xcc>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b25      	ldr	r3, [pc, #148]	; (800113c <SystemClock_Config+0xcc>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <SystemClock_Config+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a21      	ldr	r2, [pc, #132]	; (8001140 <SystemClock_Config+0xd0>)
 80010ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <SystemClock_Config+0xd0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010cc:	2302      	movs	r3, #2
 80010ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d4:	2310      	movs	r3, #16
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d8:	2302      	movs	r3, #2
 80010da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010dc:	2300      	movs	r3, #0
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010e0:	2308      	movs	r3, #8
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010e4:	2348      	movs	r3, #72	; 0x48
 80010e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80010e8:	2306      	movs	r3, #6
 80010ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ec:	2304      	movs	r3, #4
 80010ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 f85f 	bl	80041b8 <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001100:	f000 fa42 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	230f      	movs	r3, #15
 8001106:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001108:	2302      	movs	r3, #2
 800110a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001116:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800111a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f003 fac0 	bl	80046a8 <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800112e:	f000 fa2b 	bl	8001588 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3750      	adds	r7, #80	; 0x50
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_I2C1_Init+0x50>)
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <MX_I2C1_Init+0x54>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_I2C1_Init+0x50>)
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_I2C1_Init+0x58>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_I2C1_Init+0x50>)
 8001162:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001166:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_I2C1_Init+0x50>)
 8001182:	f000 fff9 	bl	8002178 <HAL_I2C_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800118c:	f000 f9fc 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000200 	.word	0x20000200
 8001198:	40005400 	.word	0x40005400
 800119c:	000186a0 	.word	0x000186a0

080011a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <MX_TIM2_Init+0xc0>)
 80011be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 192-1;
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <MX_TIM2_Init+0xc0>)
 80011c6:	22bf      	movs	r2, #191	; 0xbf
 80011c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <MX_TIM2_Init+0xc0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <MX_TIM2_Init+0xc0>)
 80011d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MX_TIM2_Init+0xc0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <MX_TIM2_Init+0xc0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80011e4:	481e      	ldr	r0, [pc, #120]	; (8001260 <MX_TIM2_Init+0xc0>)
 80011e6:	f003 fd2b 	bl	8004c40 <HAL_TIM_IC_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011f0:	f000 f9ca 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	4817      	ldr	r0, [pc, #92]	; (8001260 <MX_TIM2_Init+0xc0>)
 8001204:	f004 fca8 	bl	8005b58 <HAL_TIMEx_MasterConfigSynchronization>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800120e:	f000 f9bb 	bl	8001588 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001216:	2301      	movs	r3, #1
 8001218:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001222:	463b      	mov	r3, r7
 8001224:	2200      	movs	r2, #0
 8001226:	4619      	mov	r1, r3
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <MX_TIM2_Init+0xc0>)
 800122a:	f003 ff7b 	bl	8005124 <HAL_TIM_IC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001234:	f000 f9a8 	bl	8001588 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001238:	2302      	movs	r3, #2
 800123a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800123c:	2302      	movs	r3, #2
 800123e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	2204      	movs	r2, #4
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_TIM2_Init+0xc0>)
 8001248:	f003 ff6c 	bl	8005124 <HAL_TIM_IC_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001252:	f000 f999 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000254 	.word	0x20000254

08001264 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126a:	f107 0320 	add.w	r3, r7, #32
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <MX_TIM3_Init+0xa8>)
 8001288:	4a21      	ldr	r2, [pc, #132]	; (8001310 <MX_TIM3_Init+0xac>)
 800128a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 192-1;
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_TIM3_Init+0xa8>)
 800128e:	22bf      	movs	r2, #191	; 0xbf
 8001290:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <MX_TIM3_Init+0xa8>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4-1;
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_TIM3_Init+0xa8>)
 800129a:	2203      	movs	r2, #3
 800129c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_TIM3_Init+0xa8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_TIM3_Init+0xa8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012aa:	4818      	ldr	r0, [pc, #96]	; (800130c <MX_TIM3_Init+0xa8>)
 80012ac:	f003 fbc8 	bl	8004a40 <HAL_TIM_PWM_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80012b6:	f000 f967 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	4619      	mov	r1, r3
 80012c8:	4810      	ldr	r0, [pc, #64]	; (800130c <MX_TIM3_Init+0xa8>)
 80012ca:	f004 fc45 	bl	8005b58 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80012d4:	f000 f958 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d8:	2360      	movs	r3, #96	; 0x60
 80012da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	220c      	movs	r2, #12
 80012ec:	4619      	mov	r1, r3
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <MX_TIM3_Init+0xa8>)
 80012f0:	f003 ffb4 	bl	800525c <HAL_TIM_PWM_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80012fa:	f000 f945 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012fe:	4803      	ldr	r0, [pc, #12]	; (800130c <MX_TIM3_Init+0xa8>)
 8001300:	f000 fa30 	bl	8001764 <HAL_TIM_MspPostInit>

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000029c 	.word	0x2000029c
 8001310:	40000400 	.word	0x40000400

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b27      	ldr	r3, [pc, #156]	; (80013cc <MX_GPIO_Init+0xb8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a26      	ldr	r2, [pc, #152]	; (80013cc <MX_GPIO_Init+0xb8>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <MX_GPIO_Init+0xb8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <MX_GPIO_Init+0xb8>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <MX_GPIO_Init+0xb8>)
 8001350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_GPIO_Init+0xb8>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_GPIO_Init+0xb8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a18      	ldr	r2, [pc, #96]	; (80013cc <MX_GPIO_Init+0xb8>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_GPIO_Init+0xb8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_GPIO_Init+0xb8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a11      	ldr	r2, [pc, #68]	; (80013cc <MX_GPIO_Init+0xb8>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_GPIO_Init+0xb8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a0:	480b      	ldr	r0, [pc, #44]	; (80013d0 <MX_GPIO_Init+0xbc>)
 80013a2:	f000 feb5 	bl	8002110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80013a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_GPIO_Init+0xbc>)
 80013c0:	f000 fd22 	bl	8001e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020800 	.word	0x40020800

080013d4 <print_num>:

/* USER CODE BEGIN 4 */
static void print_num(float x){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af02      	add	r7, sp, #8
 80013da:	ed87 0a01 	vstr	s0, [r7, #4]
	snprintf(voltageBuff, sizeof(voltageBuff), "Voltage: %.6f  ", x);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff f8ba 	bl	8000558 <__aeabi_f2d>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	e9cd 2300 	strd	r2, r3, [sp]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <print_num+0x44>)
 80013ee:	2164      	movs	r1, #100	; 0x64
 80013f0:	480a      	ldr	r0, [pc, #40]	; (800141c <print_num+0x48>)
 80013f2:	f005 fb33 	bl	8006a5c <sniprintf>
//	snprintf(voltageBuff, sizeof(voltageBuff), "Voltage: %i", x);
	ssd1306_SetCursor(0, 30);
 80013f6:	211e      	movs	r1, #30
 80013f8:	2000      	movs	r0, #0
 80013fa:	f004 fe21 	bl	8006040 <ssd1306_SetCursor>
	ssd1306_WriteString(voltageBuff, Font_7x10, White);
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <print_num+0x4c>)
 8001400:	2301      	movs	r3, #1
 8001402:	ca06      	ldmia	r2, {r1, r2}
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <print_num+0x48>)
 8001406:	f004 fdf5 	bl	8005ff4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800140a:	f004 fcef 	bl	8005dec <ssd1306_UpdateScreen>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	08008f4c 	.word	0x08008f4c
 800141c:	200002e4 	.word	0x200002e4
 8001420:	2000000c 	.word	0x2000000c
 8001424:	00000000 	.word	0x00000000

08001428 <convert_v>:


static float convert_v(uint32_t period, uint32_t pulseWidth){
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	return 3.3*pulseWidth/period;
 8001432:	6838      	ldr	r0, [r7, #0]
 8001434:	f7ff f86e 	bl	8000514 <__aeabi_ui2d>
 8001438:	a30f      	add	r3, pc, #60	; (adr r3, 8001478 <convert_v+0x50>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7ff f8e3 	bl	8000608 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4614      	mov	r4, r2
 8001448:	461d      	mov	r5, r3
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff f862 	bl	8000514 <__aeabi_ui2d>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7ff fa00 	bl	800085c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fba8 	bl	8000bb8 <__aeabi_d2f>
 8001468:	4603      	mov	r3, r0
 800146a:	ee07 3a90 	vmov	s15, r3
}
 800146e:	eeb0 0a67 	vmov.f32	s0, s15
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bdb0      	pop	{r4, r5, r7, pc}
 8001478:	66666666 	.word	0x66666666
 800147c:	400a6666 	.word	0x400a6666

08001480 <print_text>:

static void print_text(char* text, int i){
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af02      	add	r7, sp, #8
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
	snprintf(textBuff, sizeof(textBuff), "%s: %i   ", text, i);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <print_text+0x3c>)
 8001492:	2164      	movs	r1, #100	; 0x64
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <print_text+0x40>)
 8001496:	f005 fae1 	bl	8006a5c <sniprintf>
	ssd1306_SetCursor(0, 45);
 800149a:	212d      	movs	r1, #45	; 0x2d
 800149c:	2000      	movs	r0, #0
 800149e:	f004 fdcf 	bl	8006040 <ssd1306_SetCursor>
	ssd1306_WriteString(textBuff, Font_7x10, White);
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <print_text+0x44>)
 80014a4:	2301      	movs	r3, #1
 80014a6:	ca06      	ldmia	r2, {r1, r2}
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <print_text+0x40>)
 80014aa:	f004 fda3 	bl	8005ff4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80014ae:	f004 fc9d 	bl	8005dec <ssd1306_UpdateScreen>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	08008f5c 	.word	0x08008f5c
 80014c0:	20000418 	.word	0x20000418
 80014c4:	2000000c 	.word	0x2000000c

080014c8 <print_pwm>:

static void print_pwm(uint32_t period, uint32_t pulseWidth){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	snprintf(periodBuff, sizeof(periodBuff), "period: %li   ", period);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <print_pwm+0x58>)
 80014d6:	2164      	movs	r1, #100	; 0x64
 80014d8:	4812      	ldr	r0, [pc, #72]	; (8001524 <print_pwm+0x5c>)
 80014da:	f005 fabf 	bl	8006a5c <sniprintf>
	snprintf(pulseWidthBuff, sizeof(pulseWidthBuff), "pulseWidth: %li  ", pulseWidth);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	4a11      	ldr	r2, [pc, #68]	; (8001528 <print_pwm+0x60>)
 80014e2:	2164      	movs	r1, #100	; 0x64
 80014e4:	4811      	ldr	r0, [pc, #68]	; (800152c <print_pwm+0x64>)
 80014e6:	f005 fab9 	bl	8006a5c <sniprintf>
	ssd1306_SetCursor(0, 0);
 80014ea:	2100      	movs	r1, #0
 80014ec:	2000      	movs	r0, #0
 80014ee:	f004 fda7 	bl	8006040 <ssd1306_SetCursor>
	ssd1306_WriteString(periodBuff, Font_7x10, White);
 80014f2:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <print_pwm+0x68>)
 80014f4:	2301      	movs	r3, #1
 80014f6:	ca06      	ldmia	r2, {r1, r2}
 80014f8:	480a      	ldr	r0, [pc, #40]	; (8001524 <print_pwm+0x5c>)
 80014fa:	f004 fd7b 	bl	8005ff4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 15);
 80014fe:	210f      	movs	r1, #15
 8001500:	2000      	movs	r0, #0
 8001502:	f004 fd9d 	bl	8006040 <ssd1306_SetCursor>
	ssd1306_WriteString(pulseWidthBuff, Font_7x10, White);
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <print_pwm+0x68>)
 8001508:	2301      	movs	r3, #1
 800150a:	ca06      	ldmia	r2, {r1, r2}
 800150c:	4807      	ldr	r0, [pc, #28]	; (800152c <print_pwm+0x64>)
 800150e:	f004 fd71 	bl	8005ff4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001512:	f004 fc6b 	bl	8005dec <ssd1306_UpdateScreen>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	08008f68 	.word	0x08008f68
 8001524:	20000348 	.word	0x20000348
 8001528:	08008f78 	.word	0x08008f78
 800152c:	200003b4 	.word	0x200003b4
 8001530:	2000000c 	.word	0x2000000c

08001534 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001544:	d115      	bne.n	8001572 <HAL_TIM_IC_CaptureCallback+0x3e>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7f1b      	ldrb	r3, [r3, #28]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d111      	bne.n	8001572 <HAL_TIM_IC_CaptureCallback+0x3e>
        {
            TIM2->CNT = 0;
 800154e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	; 0x24

            period = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001556:	2100      	movs	r1, #0
 8001558:	4808      	ldr	r0, [pc, #32]	; (800157c <HAL_TIM_IC_CaptureCallback+0x48>)
 800155a:	f003 ff41 	bl	80053e0 <HAL_TIM_ReadCapturedValue>
 800155e:	4603      	mov	r3, r0
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001562:	6013      	str	r3, [r2, #0]
            pulseWidth = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001564:	2104      	movs	r1, #4
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <HAL_TIM_IC_CaptureCallback+0x48>)
 8001568:	f003 ff3a 	bl	80053e0 <HAL_TIM_ReadCapturedValue>
 800156c:	4603      	mov	r3, r0
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001570:	6013      	str	r3, [r2, #0]
        }
    }
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000254 	.word	0x20000254
 8001580:	200003ac 	.word	0x200003ac
 8001584:	200003b0 	.word	0x200003b0

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	e7fe      	b.n	8001590 <Error_Handler+0x8>
	...

08001594 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <HAL_MspInit+0x4c>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <HAL_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <HAL_MspInit+0x4c>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_MspInit+0x4c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <HAL_I2C_MspInit+0x94>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d133      	bne.n	800166e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_I2C_MspInit+0x98>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a1b      	ldr	r2, [pc, #108]	; (800167c <HAL_I2C_MspInit+0x98>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_I2C_MspInit+0x98>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001622:	23c0      	movs	r3, #192	; 0xc0
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001626:	2312      	movs	r3, #18
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001632:	2304      	movs	r3, #4
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4810      	ldr	r0, [pc, #64]	; (8001680 <HAL_I2C_MspInit+0x9c>)
 800163e:	f000 fbe3 	bl	8001e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_I2C_MspInit+0x98>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a0c      	ldr	r2, [pc, #48]	; (800167c <HAL_I2C_MspInit+0x98>)
 800164c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_I2C_MspInit+0x98>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	201f      	movs	r0, #31
 8001664:	f000 fb69 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001668:	201f      	movs	r0, #31
 800166a:	f000 fb82 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40005400 	.word	0x40005400
 800167c:	40023800 	.word	0x40023800
 8001680:	40020400 	.word	0x40020400

08001684 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a4:	d133      	bne.n	800170e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_TIM_IC_MspInit+0x94>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <HAL_TIM_IC_MspInit+0x94>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_TIM_IC_MspInit+0x94>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_TIM_IC_MspInit+0x94>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a13      	ldr	r2, [pc, #76]	; (8001718 <HAL_TIM_IC_MspInit+0x94>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_TIM_IC_MspInit+0x94>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016de:	2301      	movs	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ee:	2301      	movs	r3, #1
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4808      	ldr	r0, [pc, #32]	; (800171c <HAL_TIM_IC_MspInit+0x98>)
 80016fa:	f000 fb85 	bl	8001e08 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	201c      	movs	r0, #28
 8001704:	f000 fb19 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001708:	201c      	movs	r0, #28
 800170a:	f000 fb32 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	; 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000

08001720 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0b      	ldr	r2, [pc, #44]	; (800175c <HAL_TIM_PWM_MspInit+0x3c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10d      	bne.n	800174e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_TIM_PWM_MspInit+0x40>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <HAL_TIM_PWM_MspInit+0x40>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <HAL_TIM_PWM_MspInit+0x40>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40000400 	.word	0x40000400
 8001760:	40023800 	.word	0x40023800

08001764 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a12      	ldr	r2, [pc, #72]	; (80017cc <HAL_TIM_MspPostInit+0x68>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d11d      	bne.n	80017c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_TIM_MspPostInit+0x6c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <HAL_TIM_MspPostInit+0x6c>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_TIM_MspPostInit+0x6c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017a2:	2302      	movs	r3, #2
 80017a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017b2:	2302      	movs	r3, #2
 80017b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <HAL_TIM_MspPostInit+0x70>)
 80017be:	f000 fb23 	bl	8001e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017c2:	bf00      	nop
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40000400 	.word	0x40000400
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020400 	.word	0x40020400

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <NMI_Handler+0x4>

080017de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <MemManage_Handler+0x4>

080017ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001824:	f000 f96a 	bl	8001afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <TIM2_IRQHandler+0x10>)
 8001832:	f003 fb6f 	bl	8004f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000254 	.word	0x20000254

08001840 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <I2C1_EV_IRQHandler+0x10>)
 8001846:	f000 fed5 	bl	80025f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000200 	.word	0x20000200

08001854 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return 1;
 8001858:	2301      	movs	r3, #1
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_kill>:

int _kill(int pid, int sig)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800186e:	f004 fc31 	bl	80060d4 <__errno>
 8001872:	4603      	mov	r3, r0
 8001874:	2216      	movs	r2, #22
 8001876:	601a      	str	r2, [r3, #0]
  return -1;
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_exit>:

void _exit (int status)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ffe7 	bl	8001864 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001896:	e7fe      	b.n	8001896 <_exit+0x12>

08001898 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e00a      	b.n	80018c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018aa:	f3af 8000 	nop.w
 80018ae:	4601      	mov	r1, r0
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	60ba      	str	r2, [r7, #8]
 80018b6:	b2ca      	uxtb	r2, r1
 80018b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	3301      	adds	r3, #1
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	dbf0      	blt.n	80018aa <_read+0x12>
  }

  return len;
 80018c8:	687b      	ldr	r3, [r7, #4]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e009      	b.n	80018f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60ba      	str	r2, [r7, #8]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3301      	adds	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbf1      	blt.n	80018e4 <_write+0x12>
  }
  return len;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_close>:

int _close(int file)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001932:	605a      	str	r2, [r3, #4]
  return 0;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <_isatty>:

int _isatty(int file)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800197c:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <_sbrk+0x5c>)
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <_sbrk+0x60>)
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <_sbrk+0x64>)
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <_sbrk+0x68>)
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d207      	bcs.n	80019b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a4:	f004 fb96 	bl	80060d4 <__errno>
 80019a8:	4603      	mov	r3, r0
 80019aa:	220c      	movs	r2, #12
 80019ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	e009      	b.n	80019c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <_sbrk+0x64>)
 80019c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c6:	68fb      	ldr	r3, [r7, #12]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20020000 	.word	0x20020000
 80019d4:	00000400 	.word	0x00000400
 80019d8:	2000047c 	.word	0x2000047c
 80019dc:	200008a0 	.word	0x200008a0

080019e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <SystemInit+0x20>)
 80019e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <SystemInit+0x20>)
 80019ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
    ldr   sp, =_estack    		 /* set stack pointer */
 8001a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a08:	480d      	ldr	r0, [pc, #52]	; (8001a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a0a:	490e      	ldr	r1, [pc, #56]	; (8001a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a20:	4c0b      	ldr	r4, [pc, #44]	; (8001a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a2e:	f7ff ffd7 	bl	80019e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a32:	f004 fb55 	bl	80060e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a36:	f7ff fa91 	bl	8000f5c <main>
  bx  lr    
 8001a3a:	4770      	bx	lr
    ldr   sp, =_estack    		 /* set stack pointer */
 8001a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a44:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001a48:	08009afc 	.word	0x08009afc
  ldr r2, =_sbss
 8001a4c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001a50:	2000089c 	.word	0x2000089c

08001a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a54:	e7fe      	b.n	8001a54 <ADC_IRQHandler>
	...

08001a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_Init+0x40>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <HAL_Init+0x40>)
 8001a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_Init+0x40>)
 8001a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <HAL_Init+0x40>)
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a80:	2003      	movs	r0, #3
 8001a82:	f000 f94f 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a86:	200f      	movs	r0, #15
 8001a88:	f000 f808 	bl	8001a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a8c:	f7ff fd82 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023c00 	.word	0x40023c00

08001a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_InitTick+0x54>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_InitTick+0x58>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f967 	bl	8001d8e <HAL_SYSTICK_Config>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00e      	b.n	8001ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d80a      	bhi.n	8001ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f000 f92f 	bl	8001d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001adc:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <HAL_InitTick+0x5c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000008 	.word	0x20000008
 8001af8:	20000004 	.word	0x20000004

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x24>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_IncTick+0x24>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	20000480 	.word	0x20000480

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000480 	.word	0x20000480

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff ffee 	bl	8001b24 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d005      	beq.n	8001b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_Delay+0x44>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b62:	bf00      	nop
 8001b64:	f7ff ffde 	bl	8001b24 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d8f7      	bhi.n	8001b64 <HAL_Delay+0x28>
  {
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000008 	.word	0x20000008

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4907      	ldr	r1, [pc, #28]	; (8001c20 <__NVIC_EnableIRQ+0x38>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f7ff ff8e 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff29 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4c:	f7ff ff3e 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff ff8e 	bl	8001c78 <NVIC_EncodePriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff5d 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff31 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffa2 	bl	8001ce0 <SysTick_Config>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d004      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2280      	movs	r2, #128	; 0x80
 8001dbe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e00c      	b.n	8001dde <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2205      	movs	r2, #5
 8001dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df8:	b2db      	uxtb	r3, r3
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	e159      	b.n	80020d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e24:	2201      	movs	r2, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	f040 8148 	bne.w	80020d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d005      	beq.n	8001e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d130      	bne.n	8001ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2203      	movs	r2, #3
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f003 0201 	and.w	r2, r3, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d017      	beq.n	8001ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d123      	bne.n	8001f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	08da      	lsrs	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3208      	adds	r2, #8
 8001f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	08da      	lsrs	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3208      	adds	r2, #8
 8001f46:	69b9      	ldr	r1, [r7, #24]
 8001f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0203 	and.w	r2, r3, #3
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80a2 	beq.w	80020d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b57      	ldr	r3, [pc, #348]	; (80020f0 <HAL_GPIO_Init+0x2e8>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	4a56      	ldr	r2, [pc, #344]	; (80020f0 <HAL_GPIO_Init+0x2e8>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9e:	4b54      	ldr	r3, [pc, #336]	; (80020f0 <HAL_GPIO_Init+0x2e8>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001faa:	4a52      	ldr	r2, [pc, #328]	; (80020f4 <HAL_GPIO_Init+0x2ec>)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a49      	ldr	r2, [pc, #292]	; (80020f8 <HAL_GPIO_Init+0x2f0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d019      	beq.n	800200a <HAL_GPIO_Init+0x202>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a48      	ldr	r2, [pc, #288]	; (80020fc <HAL_GPIO_Init+0x2f4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_GPIO_Init+0x1fe>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a47      	ldr	r2, [pc, #284]	; (8002100 <HAL_GPIO_Init+0x2f8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00d      	beq.n	8002002 <HAL_GPIO_Init+0x1fa>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a46      	ldr	r2, [pc, #280]	; (8002104 <HAL_GPIO_Init+0x2fc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d007      	beq.n	8001ffe <HAL_GPIO_Init+0x1f6>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a45      	ldr	r2, [pc, #276]	; (8002108 <HAL_GPIO_Init+0x300>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_GPIO_Init+0x1f2>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e008      	b.n	800200c <HAL_GPIO_Init+0x204>
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x204>
 8001ffe:	2303      	movs	r3, #3
 8002000:	e004      	b.n	800200c <HAL_GPIO_Init+0x204>
 8002002:	2302      	movs	r3, #2
 8002004:	e002      	b.n	800200c <HAL_GPIO_Init+0x204>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_GPIO_Init+0x204>
 800200a:	2300      	movs	r3, #0
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	f002 0203 	and.w	r2, r2, #3
 8002012:	0092      	lsls	r2, r2, #2
 8002014:	4093      	lsls	r3, r2
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800201c:	4935      	ldr	r1, [pc, #212]	; (80020f4 <HAL_GPIO_Init+0x2ec>)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	3302      	adds	r3, #2
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202a:	4b38      	ldr	r3, [pc, #224]	; (800210c <HAL_GPIO_Init+0x304>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800204e:	4a2f      	ldr	r2, [pc, #188]	; (800210c <HAL_GPIO_Init+0x304>)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002054:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_GPIO_Init+0x304>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002078:	4a24      	ldr	r2, [pc, #144]	; (800210c <HAL_GPIO_Init+0x304>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_GPIO_Init+0x304>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020a2:	4a1a      	ldr	r2, [pc, #104]	; (800210c <HAL_GPIO_Init+0x304>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_GPIO_Init+0x304>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020cc:	4a0f      	ldr	r2, [pc, #60]	; (800210c <HAL_GPIO_Init+0x304>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3301      	adds	r3, #1
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	2b0f      	cmp	r3, #15
 80020dc:	f67f aea2 	bls.w	8001e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	3724      	adds	r7, #36	; 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40013800 	.word	0x40013800
 80020f8:	40020000 	.word	0x40020000
 80020fc:	40020400 	.word	0x40020400
 8002100:	40020800 	.word	0x40020800
 8002104:	40020c00 	.word	0x40020c00
 8002108:	40021000 	.word	0x40021000
 800210c:	40013c00 	.word	0x40013c00

08002110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	807b      	strh	r3, [r7, #2]
 800211c:	4613      	mov	r3, r2
 800211e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002120:	787b      	ldrb	r3, [r7, #1]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800212c:	e003      	b.n	8002136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800212e:	887b      	ldrh	r3, [r7, #2]
 8002130:	041a      	lsls	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	619a      	str	r2, [r3, #24]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002142:	b480      	push	{r7}
 8002144:	b085      	sub	sp, #20
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002154:	887a      	ldrh	r2, [r7, #2]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4013      	ands	r3, r2
 800215a:	041a      	lsls	r2, r3, #16
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	43d9      	mvns	r1, r3
 8002160:	887b      	ldrh	r3, [r7, #2]
 8002162:	400b      	ands	r3, r1
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	619a      	str	r2, [r3, #24]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e12b      	b.n	80023e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fa20 	bl	80015e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2224      	movs	r2, #36	; 0x24
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021dc:	f002 fc1c 	bl	8004a18 <HAL_RCC_GetPCLK1Freq>
 80021e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4a81      	ldr	r2, [pc, #516]	; (80023ec <HAL_I2C_Init+0x274>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d807      	bhi.n	80021fc <HAL_I2C_Init+0x84>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4a80      	ldr	r2, [pc, #512]	; (80023f0 <HAL_I2C_Init+0x278>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	bf94      	ite	ls
 80021f4:	2301      	movls	r3, #1
 80021f6:	2300      	movhi	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e006      	b.n	800220a <HAL_I2C_Init+0x92>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4a7d      	ldr	r2, [pc, #500]	; (80023f4 <HAL_I2C_Init+0x27c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	bf94      	ite	ls
 8002204:	2301      	movls	r3, #1
 8002206:	2300      	movhi	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0e7      	b.n	80023e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a78      	ldr	r2, [pc, #480]	; (80023f8 <HAL_I2C_Init+0x280>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0c9b      	lsrs	r3, r3, #18
 800221c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	430a      	orrs	r2, r1
 8002230:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a6a      	ldr	r2, [pc, #424]	; (80023ec <HAL_I2C_Init+0x274>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d802      	bhi.n	800224c <HAL_I2C_Init+0xd4>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3301      	adds	r3, #1
 800224a:	e009      	b.n	8002260 <HAL_I2C_Init+0xe8>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	4a69      	ldr	r2, [pc, #420]	; (80023fc <HAL_I2C_Init+0x284>)
 8002258:	fba2 2303 	umull	r2, r3, r2, r3
 800225c:	099b      	lsrs	r3, r3, #6
 800225e:	3301      	adds	r3, #1
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	430b      	orrs	r3, r1
 8002266:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002272:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	495c      	ldr	r1, [pc, #368]	; (80023ec <HAL_I2C_Init+0x274>)
 800227c:	428b      	cmp	r3, r1
 800227e:	d819      	bhi.n	80022b4 <HAL_I2C_Init+0x13c>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1e59      	subs	r1, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fbb1 f3f3 	udiv	r3, r1, r3
 800228e:	1c59      	adds	r1, r3, #1
 8002290:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002294:	400b      	ands	r3, r1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_I2C_Init+0x138>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1e59      	subs	r1, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a8:	3301      	adds	r3, #1
 80022aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ae:	e051      	b.n	8002354 <HAL_I2C_Init+0x1dc>
 80022b0:	2304      	movs	r3, #4
 80022b2:	e04f      	b.n	8002354 <HAL_I2C_Init+0x1dc>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d111      	bne.n	80022e0 <HAL_I2C_Init+0x168>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1e58      	subs	r0, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	440b      	add	r3, r1
 80022ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ce:	3301      	adds	r3, #1
 80022d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf0c      	ite	eq
 80022d8:	2301      	moveq	r3, #1
 80022da:	2300      	movne	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	e012      	b.n	8002306 <HAL_I2C_Init+0x18e>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1e58      	subs	r0, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	0099      	lsls	r1, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf0c      	ite	eq
 8002300:	2301      	moveq	r3, #1
 8002302:	2300      	movne	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Init+0x196>
 800230a:	2301      	movs	r3, #1
 800230c:	e022      	b.n	8002354 <HAL_I2C_Init+0x1dc>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10e      	bne.n	8002334 <HAL_I2C_Init+0x1bc>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1e58      	subs	r0, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6859      	ldr	r1, [r3, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	440b      	add	r3, r1
 8002324:	fbb0 f3f3 	udiv	r3, r0, r3
 8002328:	3301      	adds	r3, #1
 800232a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002332:	e00f      	b.n	8002354 <HAL_I2C_Init+0x1dc>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1e58      	subs	r0, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6859      	ldr	r1, [r3, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	0099      	lsls	r1, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	fbb0 f3f3 	udiv	r3, r0, r3
 800234a:	3301      	adds	r3, #1
 800234c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002350:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	6809      	ldr	r1, [r1, #0]
 8002358:	4313      	orrs	r3, r2
 800235a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002382:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6911      	ldr	r1, [r2, #16]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68d2      	ldr	r2, [r2, #12]
 800238e:	4311      	orrs	r1, r2
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	430b      	orrs	r3, r1
 8002396:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695a      	ldr	r2, [r3, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	000186a0 	.word	0x000186a0
 80023f0:	001e847f 	.word	0x001e847f
 80023f4:	003d08ff 	.word	0x003d08ff
 80023f8:	431bde83 	.word	0x431bde83
 80023fc:	10624dd3 	.word	0x10624dd3

08002400 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	4608      	mov	r0, r1
 800240a:	4611      	mov	r1, r2
 800240c:	461a      	mov	r2, r3
 800240e:	4603      	mov	r3, r0
 8002410:	817b      	strh	r3, [r7, #10]
 8002412:	460b      	mov	r3, r1
 8002414:	813b      	strh	r3, [r7, #8]
 8002416:	4613      	mov	r3, r2
 8002418:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800241a:	f7ff fb83 	bl	8001b24 <HAL_GetTick>
 800241e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b20      	cmp	r3, #32
 800242a:	f040 80d9 	bne.w	80025e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2319      	movs	r3, #25
 8002434:	2201      	movs	r2, #1
 8002436:	496d      	ldr	r1, [pc, #436]	; (80025ec <HAL_I2C_Mem_Write+0x1ec>)
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f001 fce9 	bl	8003e10 <I2C_WaitOnFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002444:	2302      	movs	r3, #2
 8002446:	e0cc      	b.n	80025e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_I2C_Mem_Write+0x56>
 8002452:	2302      	movs	r3, #2
 8002454:	e0c5      	b.n	80025e2 <HAL_I2C_Mem_Write+0x1e2>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b01      	cmp	r3, #1
 800246a:	d007      	beq.n	800247c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2221      	movs	r2, #33	; 0x21
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2240      	movs	r2, #64	; 0x40
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a3a      	ldr	r2, [r7, #32]
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4a4d      	ldr	r2, [pc, #308]	; (80025f0 <HAL_I2C_Mem_Write+0x1f0>)
 80024bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024be:	88f8      	ldrh	r0, [r7, #6]
 80024c0:	893a      	ldrh	r2, [r7, #8]
 80024c2:	8979      	ldrh	r1, [r7, #10]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	4603      	mov	r3, r0
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f001 fb60 	bl	8003b94 <I2C_RequestMemoryWrite>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d052      	beq.n	8002580 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e081      	b.n	80025e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f001 fd6a 	bl	8003fbc <I2C_WaitOnTXEFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00d      	beq.n	800250a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d107      	bne.n	8002506 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002504:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06b      	b.n	80025e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b04      	cmp	r3, #4
 8002546:	d11b      	bne.n	8002580 <HAL_I2C_Mem_Write+0x180>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254c:	2b00      	cmp	r3, #0
 800254e:	d017      	beq.n	8002580 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1aa      	bne.n	80024de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f001 fd56 	bl	800403e <I2C_WaitOnBTFFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00d      	beq.n	80025b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	2b04      	cmp	r3, #4
 800259e:	d107      	bne.n	80025b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e016      	b.n	80025e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	e000      	b.n	80025e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025e0:	2302      	movs	r3, #2
  }
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	00100002 	.word	0x00100002
 80025f0:	ffff0000 	.word	0xffff0000

080025f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002614:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b10      	cmp	r3, #16
 8002622:	d003      	beq.n	800262c <HAL_I2C_EV_IRQHandler+0x38>
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b40      	cmp	r3, #64	; 0x40
 8002628:	f040 80c1 	bne.w	80027ae <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10d      	bne.n	8002662 <HAL_I2C_EV_IRQHandler+0x6e>
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800264c:	d003      	beq.n	8002656 <HAL_I2C_EV_IRQHandler+0x62>
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002654:	d101      	bne.n	800265a <HAL_I2C_EV_IRQHandler+0x66>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_I2C_EV_IRQHandler+0x68>
 800265a:	2300      	movs	r3, #0
 800265c:	2b01      	cmp	r3, #1
 800265e:	f000 8132 	beq.w	80028c6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00c      	beq.n	8002686 <HAL_I2C_EV_IRQHandler+0x92>
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	0a5b      	lsrs	r3, r3, #9
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f001 fd82 	bl	8004182 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fcdc 	bl	800303c <I2C_Master_SB>
 8002684:	e092      	b.n	80027ac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	08db      	lsrs	r3, r3, #3
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d009      	beq.n	80026a6 <HAL_I2C_EV_IRQHandler+0xb2>
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	0a5b      	lsrs	r3, r3, #9
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fd52 	bl	8003148 <I2C_Master_ADD10>
 80026a4:	e082      	b.n	80027ac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_I2C_EV_IRQHandler+0xd2>
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	0a5b      	lsrs	r3, r3, #9
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fd6c 	bl	800319c <I2C_Master_ADDR>
 80026c4:	e072      	b.n	80027ac <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d03b      	beq.n	800274a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e0:	f000 80f3 	beq.w	80028ca <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	09db      	lsrs	r3, r3, #7
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00f      	beq.n	8002710 <HAL_I2C_EV_IRQHandler+0x11c>
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	0a9b      	lsrs	r3, r3, #10
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d009      	beq.n	8002710 <HAL_I2C_EV_IRQHandler+0x11c>
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d103      	bne.n	8002710 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f94c 	bl	80029a6 <I2C_MasterTransmit_TXE>
 800270e:	e04d      	b.n	80027ac <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80d6 	beq.w	80028ca <HAL_I2C_EV_IRQHandler+0x2d6>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	0a5b      	lsrs	r3, r3, #9
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80cf 	beq.w	80028ca <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800272c:	7bbb      	ldrb	r3, [r7, #14]
 800272e:	2b21      	cmp	r3, #33	; 0x21
 8002730:	d103      	bne.n	800273a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f9d3 	bl	8002ade <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002738:	e0c7      	b.n	80028ca <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b40      	cmp	r3, #64	; 0x40
 800273e:	f040 80c4 	bne.w	80028ca <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fa41 	bl	8002bca <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002748:	e0bf      	b.n	80028ca <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002758:	f000 80b7 	beq.w	80028ca <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	099b      	lsrs	r3, r3, #6
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00f      	beq.n	8002788 <HAL_I2C_EV_IRQHandler+0x194>
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	0a9b      	lsrs	r3, r3, #10
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d009      	beq.n	8002788 <HAL_I2C_EV_IRQHandler+0x194>
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d103      	bne.n	8002788 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fab6 	bl	8002cf2 <I2C_MasterReceive_RXNE>
 8002786:	e011      	b.n	80027ac <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 809a 	beq.w	80028ca <HAL_I2C_EV_IRQHandler+0x2d6>
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	0a5b      	lsrs	r3, r3, #9
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8093 	beq.w	80028ca <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fb5f 	bl	8002e68 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027aa:	e08e      	b.n	80028ca <HAL_I2C_EV_IRQHandler+0x2d6>
 80027ac:	e08d      	b.n	80028ca <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	e007      	b.n	80027d0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	085b      	lsrs	r3, r3, #1
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d012      	beq.n	8002802 <HAL_I2C_EV_IRQHandler+0x20e>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	0a5b      	lsrs	r3, r3, #9
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00c      	beq.n	8002802 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80027f8:	69b9      	ldr	r1, [r7, #24]
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 ff1d 	bl	800363a <I2C_Slave_ADDR>
 8002800:	e066      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <HAL_I2C_EV_IRQHandler+0x22e>
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	0a5b      	lsrs	r3, r3, #9
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 ff58 	bl	80036d0 <I2C_Slave_STOPF>
 8002820:	e056      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002822:	7bbb      	ldrb	r3, [r7, #14]
 8002824:	2b21      	cmp	r3, #33	; 0x21
 8002826:	d002      	beq.n	800282e <HAL_I2C_EV_IRQHandler+0x23a>
 8002828:	7bbb      	ldrb	r3, [r7, #14]
 800282a:	2b29      	cmp	r3, #41	; 0x29
 800282c:	d125      	bne.n	800287a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	09db      	lsrs	r3, r3, #7
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00f      	beq.n	800285a <HAL_I2C_EV_IRQHandler+0x266>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	0a9b      	lsrs	r3, r3, #10
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <HAL_I2C_EV_IRQHandler+0x266>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fe33 	bl	80034be <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002858:	e039      	b.n	80028ce <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d033      	beq.n	80028ce <HAL_I2C_EV_IRQHandler+0x2da>
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	0a5b      	lsrs	r3, r3, #9
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d02d      	beq.n	80028ce <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fe60 	bl	8003538 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002878:	e029      	b.n	80028ce <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	099b      	lsrs	r3, r3, #6
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00f      	beq.n	80028a6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	0a9b      	lsrs	r3, r3, #10
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d103      	bne.n	80028a6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fe6b 	bl	800357a <I2C_SlaveReceive_RXNE>
 80028a4:	e014      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00e      	beq.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	0a5b      	lsrs	r3, r3, #9
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fe99 	bl	80035f6 <I2C_SlaveReceive_BTF>
 80028c4:	e004      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80028c6:	bf00      	nop
 80028c8:	e002      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ca:	bf00      	nop
 80028cc:	e000      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028ce:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80028d0:	3720      	adds	r7, #32
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	70fb      	strb	r3, [r7, #3]
 8002932:	4613      	mov	r3, r2
 8002934:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029bc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d150      	bne.n	8002a6e <I2C_MasterTransmit_TXE+0xc8>
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b21      	cmp	r3, #33	; 0x21
 80029d0:	d14d      	bne.n	8002a6e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d01d      	beq.n	8002a14 <I2C_MasterTransmit_TXE+0x6e>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d01a      	beq.n	8002a14 <I2C_MasterTransmit_TXE+0x6e>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029e4:	d016      	beq.n	8002a14 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029f4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2211      	movs	r2, #17
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ff62 	bl	80028d6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a12:	e060      	b.n	8002ad6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a22:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a32:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b40      	cmp	r3, #64	; 0x40
 8002a4c:	d107      	bne.n	8002a5e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ff7d 	bl	8002956 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a5c:	e03b      	b.n	8002ad6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ff35 	bl	80028d6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a6c:	e033      	b.n	8002ad6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b21      	cmp	r3, #33	; 0x21
 8002a72:	d005      	beq.n	8002a80 <I2C_MasterTransmit_TXE+0xda>
 8002a74:	7bbb      	ldrb	r3, [r7, #14]
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d12d      	bne.n	8002ad6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	2b22      	cmp	r3, #34	; 0x22
 8002a7e:	d12a      	bne.n	8002ad6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d108      	bne.n	8002a9c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a98:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002a9a:	e01c      	b.n	8002ad6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d103      	bne.n	8002ab0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f88e 	bl	8002bca <I2C_MemoryTransmit_TXE_BTF>
}
 8002aae:	e012      	b.n	8002ad6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ad4:	e7ff      	b.n	8002ad6 <I2C_MasterTransmit_TXE+0x130>
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b21      	cmp	r3, #33	; 0x21
 8002af6:	d164      	bne.n	8002bc2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d012      	beq.n	8002b28 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002b26:	e04c      	b.n	8002bc2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d01d      	beq.n	8002b6a <I2C_MasterTransmit_BTF+0x8c>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d01a      	beq.n	8002b6a <I2C_MasterTransmit_BTF+0x8c>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b3a:	d016      	beq.n	8002b6a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b4a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2211      	movs	r2, #17
 8002b50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff feb7 	bl	80028d6 <HAL_I2C_MasterTxCpltCallback>
}
 8002b68:	e02b      	b.n	8002bc2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b78:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b88:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	d107      	bne.n	8002bb4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fed2 	bl	8002956 <HAL_I2C_MemTxCpltCallback>
}
 8002bb2:	e006      	b.n	8002bc2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff fe8a 	bl	80028d6 <HAL_I2C_MasterTxCpltCallback>
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d11d      	bne.n	8002c1e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d10b      	bne.n	8002c02 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfa:	1c9a      	adds	r2, r3, #2
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002c00:	e073      	b.n	8002cea <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	121b      	asrs	r3, r3, #8
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c1c:	e065      	b.n	8002cea <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d10b      	bne.n	8002c3e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c3c:	e055      	b.n	8002cea <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d151      	bne.n	8002cea <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b22      	cmp	r3, #34	; 0x22
 8002c4a:	d10d      	bne.n	8002c68 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c5a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c66:	e040      	b.n	8002cea <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d015      	beq.n	8002c9e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	2b21      	cmp	r3, #33	; 0x21
 8002c76:	d112      	bne.n	8002c9e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c9c:	e025      	b.n	8002cea <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d120      	bne.n	8002cea <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b21      	cmp	r3, #33	; 0x21
 8002cac:	d11d      	bne.n	8002cea <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cbc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ccc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff fe36 	bl	8002956 <HAL_I2C_MemTxCpltCallback>
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b22      	cmp	r3, #34	; 0x22
 8002d04:	f040 80ac 	bne.w	8002e60 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d921      	bls.n	8002d5a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	f040 808c 	bne.w	8002e60 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d56:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002d58:	e082      	b.n	8002e60 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d075      	beq.n	8002e4e <I2C_MasterReceive_RXNE+0x15c>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d002      	beq.n	8002d6e <I2C_MasterReceive_RXNE+0x7c>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d16f      	bne.n	8002e4e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f001 f9a6 	bl	80040c0 <I2C_WaitOnSTOPRequestThroughIT>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d142      	bne.n	8002e00 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d88:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d98:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b40      	cmp	r3, #64	; 0x40
 8002dd2:	d10a      	bne.n	8002dea <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff fdc1 	bl	800296a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002de8:	e03a      	b.n	8002e60 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2212      	movs	r2, #18
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff fd76 	bl	80028ea <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002dfe:	e02f      	b.n	8002e60 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e0e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff fd99 	bl	800297e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e4c:	e008      	b.n	8002e60 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5c:	605a      	str	r2, [r3, #4]
}
 8002e5e:	e7ff      	b.n	8002e60 <I2C_MasterReceive_RXNE+0x16e>
 8002e60:	bf00      	nop
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d11b      	bne.n	8002eb8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e8e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002eb6:	e0bd      	b.n	8003034 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d129      	bne.n	8002f16 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d00a      	beq.n	8002eee <I2C_MasterReceive_BTF+0x86>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d007      	beq.n	8002eee <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f14:	e08e      	b.n	8003034 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d176      	bne.n	800300e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d002      	beq.n	8002f2c <I2C_MasterReceive_BTF+0xc4>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b10      	cmp	r3, #16
 8002f2a:	d108      	bne.n	8002f3e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e019      	b.n	8002f72 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d002      	beq.n	8002f4a <I2C_MasterReceive_BTF+0xe2>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d108      	bne.n	8002f5c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e00a      	b.n	8002f72 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d007      	beq.n	8002f72 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f70:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002fcc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d10a      	bne.n	8002ff8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff fcba 	bl	800296a <HAL_I2C_MemRxCpltCallback>
}
 8002ff6:	e01d      	b.n	8003034 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2212      	movs	r2, #18
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff fc6f 	bl	80028ea <HAL_I2C_MasterRxCpltCallback>
}
 800300c:	e012      	b.n	8003034 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d117      	bne.n	8003080 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003054:	2b00      	cmp	r3, #0
 8003056:	d109      	bne.n	800306c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	b2db      	uxtb	r3, r3
 800305e:	461a      	mov	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003068:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800306a:	e067      	b.n	800313c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	b2da      	uxtb	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	611a      	str	r2, [r3, #16]
}
 800307e:	e05d      	b.n	800313c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003088:	d133      	bne.n	80030f2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b21      	cmp	r3, #33	; 0x21
 8003094:	d109      	bne.n	80030aa <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030a6:	611a      	str	r2, [r3, #16]
 80030a8:	e008      	b.n	80030bc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d004      	beq.n	80030ce <I2C_Master_SB+0x92>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d108      	bne.n	80030e0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d032      	beq.n	800313c <I2C_Master_SB+0x100>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d02d      	beq.n	800313c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ee:	605a      	str	r2, [r3, #4]
}
 80030f0:	e024      	b.n	800313c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10e      	bne.n	8003118 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	b29b      	uxth	r3, r3
 8003100:	11db      	asrs	r3, r3, #7
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f003 0306 	and.w	r3, r3, #6
 8003108:	b2db      	uxtb	r3, r3
 800310a:	f063 030f 	orn	r3, r3, #15
 800310e:	b2da      	uxtb	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	611a      	str	r2, [r3, #16]
}
 8003116:	e011      	b.n	800313c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10d      	bne.n	800313c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	b29b      	uxth	r3, r3
 8003126:	11db      	asrs	r3, r3, #7
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f003 0306 	and.w	r3, r3, #6
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f063 030e 	orn	r3, r3, #14
 8003134:	b2da      	uxtb	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	611a      	str	r2, [r3, #16]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	b2da      	uxtb	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003160:	2b00      	cmp	r3, #0
 8003162:	d004      	beq.n	800316e <I2C_Master_ADD10+0x26>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d108      	bne.n	8003180 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00c      	beq.n	8003190 <I2C_Master_ADD10+0x48>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800318e:	605a      	str	r2, [r3, #4]
  }
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800319c:	b480      	push	{r7}
 800319e:	b091      	sub	sp, #68	; 0x44
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b22      	cmp	r3, #34	; 0x22
 80031c4:	f040 8169 	bne.w	800349a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10f      	bne.n	80031f0 <I2C_Master_ADDR+0x54>
 80031d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d10b      	bne.n	80031f0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d8:	2300      	movs	r3, #0
 80031da:	633b      	str	r3, [r7, #48]	; 0x30
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	633b      	str	r3, [r7, #48]	; 0x30
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	e160      	b.n	80034b2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d11d      	bne.n	8003234 <I2C_Master_ADDR+0x98>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003200:	d118      	bne.n	8003234 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003202:	2300      	movs	r3, #0
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003226:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	651a      	str	r2, [r3, #80]	; 0x50
 8003232:	e13e      	b.n	80034b2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d113      	bne.n	8003266 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e115      	b.n	8003492 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	f040 808a 	bne.w	8003386 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003274:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003278:	d137      	bne.n	80032ea <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003288:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003298:	d113      	bne.n	80032c2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032aa:	2300      	movs	r3, #0
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	e0e7      	b.n	8003492 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c2:	2300      	movs	r3, #0
 80032c4:	623b      	str	r3, [r7, #32]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	623b      	str	r3, [r7, #32]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	623b      	str	r3, [r7, #32]
 80032d6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	e0d3      	b.n	8003492 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80032ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d02e      	beq.n	800334e <I2C_Master_ADDR+0x1b2>
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d02b      	beq.n	800334e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80032f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f8:	2b12      	cmp	r3, #18
 80032fa:	d102      	bne.n	8003302 <I2C_Master_ADDR+0x166>
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d125      	bne.n	800334e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	2b04      	cmp	r3, #4
 8003306:	d00e      	beq.n	8003326 <I2C_Master_ADDR+0x18a>
 8003308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330a:	2b02      	cmp	r3, #2
 800330c:	d00b      	beq.n	8003326 <I2C_Master_ADDR+0x18a>
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	2b10      	cmp	r3, #16
 8003312:	d008      	beq.n	8003326 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e007      	b.n	8003336 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003334:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	e0a1      	b.n	8003492 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e085      	b.n	8003492 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d14d      	bne.n	800342c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	2b04      	cmp	r3, #4
 8003394:	d016      	beq.n	80033c4 <I2C_Master_ADDR+0x228>
 8003396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003398:	2b02      	cmp	r3, #2
 800339a:	d013      	beq.n	80033c4 <I2C_Master_ADDR+0x228>
 800339c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d010      	beq.n	80033c4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e007      	b.n	80033d4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033d2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e2:	d117      	bne.n	8003414 <I2C_Master_ADDR+0x278>
 80033e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033ea:	d00b      	beq.n	8003404 <I2C_Master_ADDR+0x268>
 80033ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d008      	beq.n	8003404 <I2C_Master_ADDR+0x268>
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d005      	beq.n	8003404 <I2C_Master_ADDR+0x268>
 80033f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fa:	2b10      	cmp	r3, #16
 80033fc:	d002      	beq.n	8003404 <I2C_Master_ADDR+0x268>
 80033fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003400:	2b20      	cmp	r3, #32
 8003402:	d107      	bne.n	8003414 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003412:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	e032      	b.n	8003492 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800343a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800344a:	d117      	bne.n	800347c <I2C_Master_ADDR+0x2e0>
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003452:	d00b      	beq.n	800346c <I2C_Master_ADDR+0x2d0>
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	2b01      	cmp	r3, #1
 8003458:	d008      	beq.n	800346c <I2C_Master_ADDR+0x2d0>
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345c:	2b08      	cmp	r3, #8
 800345e:	d005      	beq.n	800346c <I2C_Master_ADDR+0x2d0>
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	2b10      	cmp	r3, #16
 8003464:	d002      	beq.n	800346c <I2C_Master_ADDR+0x2d0>
 8003466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003468:	2b20      	cmp	r3, #32
 800346a:	d107      	bne.n	800347c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800347a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003498:	e00b      	b.n	80034b2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
}
 80034b0:	e7ff      	b.n	80034b2 <I2C_Master_ADDR+0x316>
 80034b2:	bf00      	nop
 80034b4:	3744      	adds	r7, #68	; 0x44
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d02b      	beq.n	8003530 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d114      	bne.n	8003530 <I2C_SlaveTransmit_TXE+0x72>
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	2b29      	cmp	r3, #41	; 0x29
 800350a:	d111      	bne.n	8003530 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2221      	movs	r2, #33	; 0x21
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2228      	movs	r2, #40	; 0x28
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff f9e7 	bl	80028fe <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d011      	beq.n	800356e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	781a      	ldrb	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003588:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d02c      	beq.n	80035ee <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d114      	bne.n	80035ee <I2C_SlaveReceive_RXNE+0x74>
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	2b2a      	cmp	r3, #42	; 0x2a
 80035c8:	d111      	bne.n	80035ee <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2222      	movs	r2, #34	; 0x22
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2228      	movs	r2, #40	; 0x28
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff f992 	bl	8002912 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80035ee:	bf00      	nop
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d012      	beq.n	800362e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003644:	2300      	movs	r3, #0
 8003646:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003654:	2b28      	cmp	r3, #40	; 0x28
 8003656:	d127      	bne.n	80036a8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003666:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	089b      	lsrs	r3, r3, #2
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	09db      	lsrs	r3, r3, #7
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d103      	bne.n	800368c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	81bb      	strh	r3, [r7, #12]
 800368a:	e002      	b.n	8003692 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800369a:	89ba      	ldrh	r2, [r7, #12]
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	4619      	mov	r1, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff f940 	bl	8002926 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80036a6:	e00e      	b.n	80036c6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a8:	2300      	movs	r3, #0
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80036f0:	2300      	movs	r3, #0
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372c:	d172      	bne.n	8003814 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	2b22      	cmp	r3, #34	; 0x22
 8003732:	d002      	beq.n	800373a <I2C_Slave_STOPF+0x6a>
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b2a      	cmp	r3, #42	; 0x2a
 8003738:	d135      	bne.n	80037a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f043 0204 	orr.w	r2, r3, #4
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800376c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fb39 	bl	8001dea <HAL_DMA_GetState>
 8003778:	4603      	mov	r3, r0
 800377a:	2b01      	cmp	r3, #1
 800377c:	d049      	beq.n	8003812 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	4a69      	ldr	r2, [pc, #420]	; (8003928 <I2C_Slave_STOPF+0x258>)
 8003784:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe fb0b 	bl	8001da6 <HAL_DMA_Abort_IT>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d03d      	beq.n	8003812 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037a0:	4610      	mov	r0, r2
 80037a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037a4:	e035      	b.n	8003812 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f043 0204 	orr.w	r2, r3, #4
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fb03 	bl	8001dea <HAL_DMA_GetState>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d014      	beq.n	8003814 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ee:	4a4e      	ldr	r2, [pc, #312]	; (8003928 <I2C_Slave_STOPF+0x258>)
 80037f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fad5 	bl	8001da6 <HAL_DMA_Abort_IT>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d008      	beq.n	8003814 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800380c:	4610      	mov	r0, r2
 800380e:	4798      	blx	r3
 8003810:	e000      	b.n	8003814 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003812:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d03e      	beq.n	800389c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b04      	cmp	r3, #4
 800382a:	d112      	bne.n	8003852 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d112      	bne.n	8003886 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	f043 0204 	orr.w	r2, r3, #4
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f843 	bl	8003930 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80038aa:	e039      	b.n	8003920 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	2b2a      	cmp	r3, #42	; 0x2a
 80038b0:	d109      	bne.n	80038c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2228      	movs	r2, #40	; 0x28
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff f826 	bl	8002912 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b28      	cmp	r3, #40	; 0x28
 80038d0:	d111      	bne.n	80038f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a15      	ldr	r2, [pc, #84]	; (800392c <I2C_Slave_STOPF+0x25c>)
 80038d6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff f827 	bl	8002942 <HAL_I2C_ListenCpltCallback>
}
 80038f4:	e014      	b.n	8003920 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	2b22      	cmp	r3, #34	; 0x22
 80038fc:	d002      	beq.n	8003904 <I2C_Slave_STOPF+0x234>
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	2b22      	cmp	r3, #34	; 0x22
 8003902:	d10d      	bne.n	8003920 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fe fff9 	bl	8002912 <HAL_I2C_SlaveRxCpltCallback>
}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	08003cc1 	.word	0x08003cc1
 800392c:	ffff0000 	.word	0xffff0000

08003930 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003946:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003948:	7bbb      	ldrb	r3, [r7, #14]
 800394a:	2b10      	cmp	r3, #16
 800394c:	d002      	beq.n	8003954 <I2C_ITError+0x24>
 800394e:	7bbb      	ldrb	r3, [r7, #14]
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d10a      	bne.n	800396a <I2C_ITError+0x3a>
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b22      	cmp	r3, #34	; 0x22
 8003958:	d107      	bne.n	800396a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003968:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003970:	2b28      	cmp	r3, #40	; 0x28
 8003972:	d107      	bne.n	8003984 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2228      	movs	r2, #40	; 0x28
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003982:	e015      	b.n	80039b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003992:	d00a      	beq.n	80039aa <I2C_ITError+0x7a>
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b60      	cmp	r3, #96	; 0x60
 8003998:	d007      	beq.n	80039aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039be:	d162      	bne.n	8003a86 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d020      	beq.n	8003a20 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e2:	4a6a      	ldr	r2, [pc, #424]	; (8003b8c <I2C_ITError+0x25c>)
 80039e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe f9db 	bl	8001da6 <HAL_DMA_Abort_IT>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8089 	beq.w	8003b0a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	4798      	blx	r3
 8003a1e:	e074      	b.n	8003b0a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	4a59      	ldr	r2, [pc, #356]	; (8003b8c <I2C_ITError+0x25c>)
 8003a26:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe f9ba 	bl	8001da6 <HAL_DMA_Abort_IT>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d068      	beq.n	8003b0a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b40      	cmp	r3, #64	; 0x40
 8003a44:	d10b      	bne.n	8003a5e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a80:	4610      	mov	r0, r2
 8003a82:	4798      	blx	r3
 8003a84:	e041      	b.n	8003b0a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b60      	cmp	r3, #96	; 0x60
 8003a90:	d125      	bne.n	8003ade <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	d10b      	bne.n	8003ac6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0201 	bic.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fe ff5b 	bl	8002992 <HAL_I2C_AbortCpltCallback>
 8003adc:	e015      	b.n	8003b0a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d10b      	bne.n	8003b04 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7fe ff3a 	bl	800297e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10e      	bne.n	8003b38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d007      	beq.n	8003b48 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b46:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d113      	bne.n	8003b84 <I2C_ITError+0x254>
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	2b28      	cmp	r3, #40	; 0x28
 8003b60:	d110      	bne.n	8003b84 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <I2C_ITError+0x260>)
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fe fedf 	bl	8002942 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	08003cc1 	.word	0x08003cc1
 8003b90:	ffff0000 	.word	0xffff0000

08003b94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	817b      	strh	r3, [r7, #10]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	813b      	strh	r3, [r7, #8]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f920 	bl	8003e10 <I2C_WaitOnFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00d      	beq.n	8003bf2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be4:	d103      	bne.n	8003bee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e05f      	b.n	8003cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bf2:	897b      	ldrh	r3, [r7, #10]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	6a3a      	ldr	r2, [r7, #32]
 8003c06:	492d      	ldr	r1, [pc, #180]	; (8003cbc <I2C_RequestMemoryWrite+0x128>)
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f958 	bl	8003ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e04c      	b.n	8003cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c30:	6a39      	ldr	r1, [r7, #32]
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f9c2 	bl	8003fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00d      	beq.n	8003c5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d107      	bne.n	8003c56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e02b      	b.n	8003cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d105      	bne.n	8003c6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c60:	893b      	ldrh	r3, [r7, #8]
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	611a      	str	r2, [r3, #16]
 8003c6a:	e021      	b.n	8003cb0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c6c:	893b      	ldrh	r3, [r7, #8]
 8003c6e:	0a1b      	lsrs	r3, r3, #8
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7c:	6a39      	ldr	r1, [r7, #32]
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f99c 	bl	8003fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00d      	beq.n	8003ca6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d107      	bne.n	8003ca2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e005      	b.n	8003cb2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca6:	893b      	ldrh	r3, [r7, #8]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	00010002 	.word	0x00010002

08003cc0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cda:	4b4b      	ldr	r3, [pc, #300]	; (8003e08 <I2C_DMAAbort+0x148>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	08db      	lsrs	r3, r3, #3
 8003ce0:	4a4a      	ldr	r2, [pc, #296]	; (8003e0c <I2C_DMAAbort+0x14c>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	0a1a      	lsrs	r2, r3, #8
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	00da      	lsls	r2, r3, #3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f043 0220 	orr.w	r2, r3, #32
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003d06:	e00a      	b.n	8003d1e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1c:	d0ea      	beq.n	8003cf4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2200      	movs	r2, #0
 8003d52:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d60:	2200      	movs	r2, #0
 8003d62:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	2200      	movs	r2, #0
 8003d72:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b60      	cmp	r3, #96	; 0x60
 8003d8e:	d10e      	bne.n	8003dae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2200      	movs	r2, #0
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003da6:	6978      	ldr	r0, [r7, #20]
 8003da8:	f7fe fdf3 	bl	8002992 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003dac:	e027      	b.n	8003dfe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dae:	7cfb      	ldrb	r3, [r7, #19]
 8003db0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003db4:	2b28      	cmp	r3, #40	; 0x28
 8003db6:	d117      	bne.n	8003de8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dd6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2228      	movs	r2, #40	; 0x28
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003de6:	e007      	b.n	8003df8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003df8:	6978      	ldr	r0, [r7, #20]
 8003dfa:	f7fe fdc0 	bl	800297e <HAL_I2C_ErrorCallback>
}
 8003dfe:	bf00      	nop
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	14f8b589 	.word	0x14f8b589

08003e10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e20:	e025      	b.n	8003e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d021      	beq.n	8003e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fd fe7b 	bl	8001b24 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d116      	bne.n	8003e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e023      	b.n	8003eb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d10d      	bne.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	43da      	mvns	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4013      	ands	r3, r2
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bf0c      	ite	eq
 8003e8a:	2301      	moveq	r3, #1
 8003e8c:	2300      	movne	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	e00c      	b.n	8003eae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	43da      	mvns	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	bf0c      	ite	eq
 8003ea6:	2301      	moveq	r3, #1
 8003ea8:	2300      	movne	r3, #0
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d0b6      	beq.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ecc:	e051      	b.n	8003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003edc:	d123      	bne.n	8003f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ef6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f043 0204 	orr.w	r2, r3, #4
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e046      	b.n	8003fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2c:	d021      	beq.n	8003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2e:	f7fd fdf9 	bl	8001b24 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d302      	bcc.n	8003f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d116      	bne.n	8003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f043 0220 	orr.w	r2, r3, #32
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e020      	b.n	8003fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d10c      	bne.n	8003f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	43da      	mvns	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4013      	ands	r3, r2
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bf14      	ite	ne
 8003f8e:	2301      	movne	r3, #1
 8003f90:	2300      	moveq	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	e00b      	b.n	8003fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	43da      	mvns	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf14      	ite	ne
 8003fa8:	2301      	movne	r3, #1
 8003faa:	2300      	moveq	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d18d      	bne.n	8003ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc8:	e02d      	b.n	8004026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f8aa 	bl	8004124 <I2C_IsAcknowledgeFailed>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e02d      	b.n	8004036 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d021      	beq.n	8004026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe2:	f7fd fd9f 	bl	8001b24 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d302      	bcc.n	8003ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d116      	bne.n	8004026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f043 0220 	orr.w	r2, r3, #32
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e007      	b.n	8004036 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004030:	2b80      	cmp	r3, #128	; 0x80
 8004032:	d1ca      	bne.n	8003fca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800404a:	e02d      	b.n	80040a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f869 	bl	8004124 <I2C_IsAcknowledgeFailed>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e02d      	b.n	80040b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d021      	beq.n	80040a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004064:	f7fd fd5e 	bl	8001b24 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	429a      	cmp	r2, r3
 8004072:	d302      	bcc.n	800407a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d116      	bne.n	80040a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	f043 0220 	orr.w	r2, r3, #32
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e007      	b.n	80040b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d1ca      	bne.n	800404c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80040cc:	4b13      	ldr	r3, [pc, #76]	; (800411c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	08db      	lsrs	r3, r3, #3
 80040d2:	4a13      	ldr	r2, [pc, #76]	; (8004120 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	0a1a      	lsrs	r2, r3, #8
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d107      	bne.n	80040fe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f043 0220 	orr.w	r2, r3, #32
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e008      	b.n	8004110 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800410c:	d0e9      	beq.n	80040e2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	20000000 	.word	0x20000000
 8004120:	14f8b589 	.word	0x14f8b589

08004124 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413a:	d11b      	bne.n	8004174 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004144:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	f043 0204 	orr.w	r2, r3, #4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004192:	d103      	bne.n	800419c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800419a:	e007      	b.n	80041ac <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80041a4:	d102      	bne.n	80041ac <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2208      	movs	r2, #8
 80041aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e267      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d075      	beq.n	80042c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041d6:	4b88      	ldr	r3, [pc, #544]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d00c      	beq.n	80041fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041e2:	4b85      	ldr	r3, [pc, #532]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d112      	bne.n	8004214 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ee:	4b82      	ldr	r3, [pc, #520]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041fa:	d10b      	bne.n	8004214 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fc:	4b7e      	ldr	r3, [pc, #504]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d05b      	beq.n	80042c0 <HAL_RCC_OscConfig+0x108>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d157      	bne.n	80042c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e242      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421c:	d106      	bne.n	800422c <HAL_RCC_OscConfig+0x74>
 800421e:	4b76      	ldr	r3, [pc, #472]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a75      	ldr	r2, [pc, #468]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e01d      	b.n	8004268 <HAL_RCC_OscConfig+0xb0>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004234:	d10c      	bne.n	8004250 <HAL_RCC_OscConfig+0x98>
 8004236:	4b70      	ldr	r3, [pc, #448]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a6f      	ldr	r2, [pc, #444]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 800423c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	4b6d      	ldr	r3, [pc, #436]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6c      	ldr	r2, [pc, #432]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e00b      	b.n	8004268 <HAL_RCC_OscConfig+0xb0>
 8004250:	4b69      	ldr	r3, [pc, #420]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a68      	ldr	r2, [pc, #416]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b66      	ldr	r3, [pc, #408]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a65      	ldr	r2, [pc, #404]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d013      	beq.n	8004298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7fd fc58 	bl	8001b24 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004278:	f7fd fc54 	bl	8001b24 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e207      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	4b5b      	ldr	r3, [pc, #364]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0xc0>
 8004296:	e014      	b.n	80042c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fd fc44 	bl	8001b24 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a0:	f7fd fc40 	bl	8001b24 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	; 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e1f3      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b2:	4b51      	ldr	r3, [pc, #324]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0xe8>
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d063      	beq.n	8004396 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ce:	4b4a      	ldr	r3, [pc, #296]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00b      	beq.n	80042f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042da:	4b47      	ldr	r3, [pc, #284]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d11c      	bne.n	8004320 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e6:	4b44      	ldr	r3, [pc, #272]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d116      	bne.n	8004320 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f2:	4b41      	ldr	r3, [pc, #260]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_RCC_OscConfig+0x152>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d001      	beq.n	800430a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e1c7      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430a:	4b3b      	ldr	r3, [pc, #236]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4937      	ldr	r1, [pc, #220]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 800431a:	4313      	orrs	r3, r2
 800431c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431e:	e03a      	b.n	8004396 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d020      	beq.n	800436a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004328:	4b34      	ldr	r3, [pc, #208]	; (80043fc <HAL_RCC_OscConfig+0x244>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432e:	f7fd fbf9 	bl	8001b24 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004336:	f7fd fbf5 	bl	8001b24 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e1a8      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004348:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004354:	4b28      	ldr	r3, [pc, #160]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4925      	ldr	r1, [pc, #148]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 8004364:	4313      	orrs	r3, r2
 8004366:	600b      	str	r3, [r1, #0]
 8004368:	e015      	b.n	8004396 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800436a:	4b24      	ldr	r3, [pc, #144]	; (80043fc <HAL_RCC_OscConfig+0x244>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fd fbd8 	bl	8001b24 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004378:	f7fd fbd4 	bl	8001b24 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e187      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d036      	beq.n	8004410 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d016      	beq.n	80043d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043aa:	4b15      	ldr	r3, [pc, #84]	; (8004400 <HAL_RCC_OscConfig+0x248>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b0:	f7fd fbb8 	bl	8001b24 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b8:	f7fd fbb4 	bl	8001b24 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e167      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCC_OscConfig+0x240>)
 80043cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f0      	beq.n	80043b8 <HAL_RCC_OscConfig+0x200>
 80043d6:	e01b      	b.n	8004410 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <HAL_RCC_OscConfig+0x248>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043de:	f7fd fba1 	bl	8001b24 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e4:	e00e      	b.n	8004404 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e6:	f7fd fb9d 	bl	8001b24 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d907      	bls.n	8004404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e150      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
 80043f8:	40023800 	.word	0x40023800
 80043fc:	42470000 	.word	0x42470000
 8004400:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004404:	4b88      	ldr	r3, [pc, #544]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1ea      	bne.n	80043e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8097 	beq.w	800454c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800441e:	2300      	movs	r3, #0
 8004420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004422:	4b81      	ldr	r3, [pc, #516]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10f      	bne.n	800444e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	4b7d      	ldr	r3, [pc, #500]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	4a7c      	ldr	r2, [pc, #496]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6413      	str	r3, [r2, #64]	; 0x40
 800443e:	4b7a      	ldr	r3, [pc, #488]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444e:	4b77      	ldr	r3, [pc, #476]	; (800462c <HAL_RCC_OscConfig+0x474>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d118      	bne.n	800448c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800445a:	4b74      	ldr	r3, [pc, #464]	; (800462c <HAL_RCC_OscConfig+0x474>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a73      	ldr	r2, [pc, #460]	; (800462c <HAL_RCC_OscConfig+0x474>)
 8004460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004466:	f7fd fb5d 	bl	8001b24 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446e:	f7fd fb59 	bl	8001b24 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e10c      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	4b6a      	ldr	r3, [pc, #424]	; (800462c <HAL_RCC_OscConfig+0x474>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d106      	bne.n	80044a2 <HAL_RCC_OscConfig+0x2ea>
 8004494:	4b64      	ldr	r3, [pc, #400]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	4a63      	ldr	r2, [pc, #396]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6713      	str	r3, [r2, #112]	; 0x70
 80044a0:	e01c      	b.n	80044dc <HAL_RCC_OscConfig+0x324>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b05      	cmp	r3, #5
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x30c>
 80044aa:	4b5f      	ldr	r3, [pc, #380]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	4a5e      	ldr	r2, [pc, #376]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044b0:	f043 0304 	orr.w	r3, r3, #4
 80044b4:	6713      	str	r3, [r2, #112]	; 0x70
 80044b6:	4b5c      	ldr	r3, [pc, #368]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	4a5b      	ldr	r2, [pc, #364]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	6713      	str	r3, [r2, #112]	; 0x70
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0x324>
 80044c4:	4b58      	ldr	r3, [pc, #352]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c8:	4a57      	ldr	r2, [pc, #348]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	6713      	str	r3, [r2, #112]	; 0x70
 80044d0:	4b55      	ldr	r3, [pc, #340]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a54      	ldr	r2, [pc, #336]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80044d6:	f023 0304 	bic.w	r3, r3, #4
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d015      	beq.n	8004510 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e4:	f7fd fb1e 	bl	8001b24 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ec:	f7fd fb1a 	bl	8001b24 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e0cb      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004502:	4b49      	ldr	r3, [pc, #292]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0ee      	beq.n	80044ec <HAL_RCC_OscConfig+0x334>
 800450e:	e014      	b.n	800453a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004510:	f7fd fb08 	bl	8001b24 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004516:	e00a      	b.n	800452e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004518:	f7fd fb04 	bl	8001b24 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e0b5      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452e:	4b3e      	ldr	r3, [pc, #248]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1ee      	bne.n	8004518 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800453a:	7dfb      	ldrb	r3, [r7, #23]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d105      	bne.n	800454c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004540:	4b39      	ldr	r3, [pc, #228]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	4a38      	ldr	r2, [pc, #224]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800454a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80a1 	beq.w	8004698 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004556:	4b34      	ldr	r3, [pc, #208]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b08      	cmp	r3, #8
 8004560:	d05c      	beq.n	800461c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d141      	bne.n	80045ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456a:	4b31      	ldr	r3, [pc, #196]	; (8004630 <HAL_RCC_OscConfig+0x478>)
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fd fad8 	bl	8001b24 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004578:	f7fd fad4 	bl	8001b24 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e087      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	4b27      	ldr	r3, [pc, #156]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69da      	ldr	r2, [r3, #28]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	019b      	lsls	r3, r3, #6
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	3b01      	subs	r3, #1
 80045b0:	041b      	lsls	r3, r3, #16
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	491b      	ldr	r1, [pc, #108]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c0:	4b1b      	ldr	r3, [pc, #108]	; (8004630 <HAL_RCC_OscConfig+0x478>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c6:	f7fd faad 	bl	8001b24 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ce:	f7fd faa9 	bl	8001b24 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e05c      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e0:	4b11      	ldr	r3, [pc, #68]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x416>
 80045ec:	e054      	b.n	8004698 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ee:	4b10      	ldr	r3, [pc, #64]	; (8004630 <HAL_RCC_OscConfig+0x478>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fd fa96 	bl	8001b24 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fc:	f7fd fa92 	bl	8001b24 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e045      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	4b06      	ldr	r3, [pc, #24]	; (8004628 <HAL_RCC_OscConfig+0x470>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x444>
 800461a:	e03d      	b.n	8004698 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d107      	bne.n	8004634 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e038      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
 8004628:	40023800 	.word	0x40023800
 800462c:	40007000 	.word	0x40007000
 8004630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004634:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_RCC_OscConfig+0x4ec>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d028      	beq.n	8004694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d121      	bne.n	8004694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d11a      	bne.n	8004694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004664:	4013      	ands	r3, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800466a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800466c:	4293      	cmp	r3, r2
 800466e:	d111      	bne.n	8004694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	3b01      	subs	r3, #1
 800467e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d107      	bne.n	8004694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40023800 	.word	0x40023800

080046a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e0cc      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046bc:	4b68      	ldr	r3, [pc, #416]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d90c      	bls.n	80046e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ca:	4b65      	ldr	r3, [pc, #404]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d2:	4b63      	ldr	r3, [pc, #396]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0b8      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046fc:	4b59      	ldr	r3, [pc, #356]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	4a58      	ldr	r2, [pc, #352]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004706:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004714:	4b53      	ldr	r3, [pc, #332]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	4a52      	ldr	r2, [pc, #328]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800471e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004720:	4b50      	ldr	r3, [pc, #320]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	494d      	ldr	r1, [pc, #308]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d044      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004746:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d119      	bne.n	8004786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e07f      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d003      	beq.n	8004766 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004762:	2b03      	cmp	r3, #3
 8004764:	d107      	bne.n	8004776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004766:	4b3f      	ldr	r3, [pc, #252]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d109      	bne.n	8004786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e06f      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004776:	4b3b      	ldr	r3, [pc, #236]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e067      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004786:	4b37      	ldr	r3, [pc, #220]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f023 0203 	bic.w	r2, r3, #3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	4934      	ldr	r1, [pc, #208]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	4313      	orrs	r3, r2
 8004796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004798:	f7fd f9c4 	bl	8001b24 <HAL_GetTick>
 800479c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479e:	e00a      	b.n	80047b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a0:	f7fd f9c0 	bl	8001b24 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e04f      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b6:	4b2b      	ldr	r3, [pc, #172]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 020c 	and.w	r2, r3, #12
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d1eb      	bne.n	80047a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047c8:	4b25      	ldr	r3, [pc, #148]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d20c      	bcs.n	80047f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d6:	4b22      	ldr	r3, [pc, #136]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e032      	b.n	8004856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047fc:	4b19      	ldr	r3, [pc, #100]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4916      	ldr	r1, [pc, #88]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800481a:	4b12      	ldr	r3, [pc, #72]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	490e      	ldr	r1, [pc, #56]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800482e:	f000 f821 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 8004832:	4602      	mov	r2, r0
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	490a      	ldr	r1, [pc, #40]	; (8004868 <HAL_RCC_ClockConfig+0x1c0>)
 8004840:	5ccb      	ldrb	r3, [r1, r3]
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	4a09      	ldr	r2, [pc, #36]	; (800486c <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <HAL_RCC_ClockConfig+0x1c8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fd f924 	bl	8001a9c <HAL_InitTick>

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40023c00 	.word	0x40023c00
 8004864:	40023800 	.word	0x40023800
 8004868:	08008f8c 	.word	0x08008f8c
 800486c:	20000000 	.word	0x20000000
 8004870:	20000004 	.word	0x20000004

08004874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004878:	b090      	sub	sp, #64	; 0x40
 800487a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	637b      	str	r3, [r7, #52]	; 0x34
 8004880:	2300      	movs	r3, #0
 8004882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004884:	2300      	movs	r3, #0
 8004886:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800488c:	4b59      	ldr	r3, [pc, #356]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 030c 	and.w	r3, r3, #12
 8004894:	2b08      	cmp	r3, #8
 8004896:	d00d      	beq.n	80048b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004898:	2b08      	cmp	r3, #8
 800489a:	f200 80a1 	bhi.w	80049e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <HAL_RCC_GetSysClockFreq+0x34>
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d003      	beq.n	80048ae <HAL_RCC_GetSysClockFreq+0x3a>
 80048a6:	e09b      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048a8:	4b53      	ldr	r3, [pc, #332]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80048aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80048ac:	e09b      	b.n	80049e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ae:	4b53      	ldr	r3, [pc, #332]	; (80049fc <HAL_RCC_GetSysClockFreq+0x188>)
 80048b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048b2:	e098      	b.n	80049e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048b4:	4b4f      	ldr	r3, [pc, #316]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048be:	4b4d      	ldr	r3, [pc, #308]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d028      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ca:	4b4a      	ldr	r3, [pc, #296]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	099b      	lsrs	r3, r3, #6
 80048d0:	2200      	movs	r2, #0
 80048d2:	623b      	str	r3, [r7, #32]
 80048d4:	627a      	str	r2, [r7, #36]	; 0x24
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048dc:	2100      	movs	r1, #0
 80048de:	4b47      	ldr	r3, [pc, #284]	; (80049fc <HAL_RCC_GetSysClockFreq+0x188>)
 80048e0:	fb03 f201 	mul.w	r2, r3, r1
 80048e4:	2300      	movs	r3, #0
 80048e6:	fb00 f303 	mul.w	r3, r0, r3
 80048ea:	4413      	add	r3, r2
 80048ec:	4a43      	ldr	r2, [pc, #268]	; (80049fc <HAL_RCC_GetSysClockFreq+0x188>)
 80048ee:	fba0 1202 	umull	r1, r2, r0, r2
 80048f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048f4:	460a      	mov	r2, r1
 80048f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80048f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048fa:	4413      	add	r3, r2
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004900:	2200      	movs	r2, #0
 8004902:	61bb      	str	r3, [r7, #24]
 8004904:	61fa      	str	r2, [r7, #28]
 8004906:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800490a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800490e:	f7fc f9a3 	bl	8000c58 <__aeabi_uldivmod>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4613      	mov	r3, r2
 8004918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800491a:	e053      	b.n	80049c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491c:	4b35      	ldr	r3, [pc, #212]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	099b      	lsrs	r3, r3, #6
 8004922:	2200      	movs	r2, #0
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	617a      	str	r2, [r7, #20]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800492e:	f04f 0b00 	mov.w	fp, #0
 8004932:	4652      	mov	r2, sl
 8004934:	465b      	mov	r3, fp
 8004936:	f04f 0000 	mov.w	r0, #0
 800493a:	f04f 0100 	mov.w	r1, #0
 800493e:	0159      	lsls	r1, r3, #5
 8004940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004944:	0150      	lsls	r0, r2, #5
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	ebb2 080a 	subs.w	r8, r2, sl
 800494e:	eb63 090b 	sbc.w	r9, r3, fp
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800495e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004962:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004966:	ebb2 0408 	subs.w	r4, r2, r8
 800496a:	eb63 0509 	sbc.w	r5, r3, r9
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	00eb      	lsls	r3, r5, #3
 8004978:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800497c:	00e2      	lsls	r2, r4, #3
 800497e:	4614      	mov	r4, r2
 8004980:	461d      	mov	r5, r3
 8004982:	eb14 030a 	adds.w	r3, r4, sl
 8004986:	603b      	str	r3, [r7, #0]
 8004988:	eb45 030b 	adc.w	r3, r5, fp
 800498c:	607b      	str	r3, [r7, #4]
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800499a:	4629      	mov	r1, r5
 800499c:	028b      	lsls	r3, r1, #10
 800499e:	4621      	mov	r1, r4
 80049a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049a4:	4621      	mov	r1, r4
 80049a6:	028a      	lsls	r2, r1, #10
 80049a8:	4610      	mov	r0, r2
 80049aa:	4619      	mov	r1, r3
 80049ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ae:	2200      	movs	r2, #0
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	60fa      	str	r2, [r7, #12]
 80049b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049b8:	f7fc f94e 	bl	8000c58 <__aeabi_uldivmod>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4613      	mov	r3, r2
 80049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	3301      	adds	r3, #1
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80049d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049de:	e002      	b.n	80049e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80049e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3740      	adds	r7, #64	; 0x40
 80049ec:	46bd      	mov	sp, r7
 80049ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049f2:	bf00      	nop
 80049f4:	40023800 	.word	0x40023800
 80049f8:	00f42400 	.word	0x00f42400
 80049fc:	017d7840 	.word	0x017d7840

08004a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a04:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a06:	681b      	ldr	r3, [r3, #0]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20000000 	.word	0x20000000

08004a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a1c:	f7ff fff0 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8004a20:	4602      	mov	r2, r0
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	0a9b      	lsrs	r3, r3, #10
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	4903      	ldr	r1, [pc, #12]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a2e:	5ccb      	ldrb	r3, [r1, r3]
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	08008f9c 	.word	0x08008f9c

08004a40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e041      	b.n	8004ad6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fc fe5a 	bl	8001720 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f000 fd1a 	bl	80054b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <HAL_TIM_PWM_Start+0x24>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e022      	b.n	8004b4a <HAL_TIM_PWM_Start+0x6a>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d109      	bne.n	8004b1e <HAL_TIM_PWM_Start+0x3e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	bf14      	ite	ne
 8004b16:	2301      	movne	r3, #1
 8004b18:	2300      	moveq	r3, #0
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	e015      	b.n	8004b4a <HAL_TIM_PWM_Start+0x6a>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d109      	bne.n	8004b38 <HAL_TIM_PWM_Start+0x58>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	bf14      	ite	ne
 8004b30:	2301      	movne	r3, #1
 8004b32:	2300      	moveq	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e008      	b.n	8004b4a <HAL_TIM_PWM_Start+0x6a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	bf14      	ite	ne
 8004b44:	2301      	movne	r3, #1
 8004b46:	2300      	moveq	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e068      	b.n	8004c24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_PWM_Start+0x82>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b60:	e013      	b.n	8004b8a <HAL_TIM_PWM_Start+0xaa>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_PWM_Start+0x92>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b70:	e00b      	b.n	8004b8a <HAL_TIM_PWM_Start+0xaa>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d104      	bne.n	8004b82 <HAL_TIM_PWM_Start+0xa2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b80:	e003      	b.n	8004b8a <HAL_TIM_PWM_Start+0xaa>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	6839      	ldr	r1, [r7, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 ffba 	bl	8005b0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a23      	ldr	r2, [pc, #140]	; (8004c2c <HAL_TIM_PWM_Start+0x14c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d107      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1d      	ldr	r2, [pc, #116]	; (8004c2c <HAL_TIM_PWM_Start+0x14c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d018      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc4:	d013      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a19      	ldr	r2, [pc, #100]	; (8004c30 <HAL_TIM_PWM_Start+0x150>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00e      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a17      	ldr	r2, [pc, #92]	; (8004c34 <HAL_TIM_PWM_Start+0x154>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d009      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a16      	ldr	r2, [pc, #88]	; (8004c38 <HAL_TIM_PWM_Start+0x158>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d004      	beq.n	8004bee <HAL_TIM_PWM_Start+0x10e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a14      	ldr	r2, [pc, #80]	; (8004c3c <HAL_TIM_PWM_Start+0x15c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d111      	bne.n	8004c12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b06      	cmp	r3, #6
 8004bfe:	d010      	beq.n	8004c22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c10:	e007      	b.n	8004c22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0201 	orr.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	40000400 	.word	0x40000400
 8004c34:	40000800 	.word	0x40000800
 8004c38:	40000c00 	.word	0x40000c00
 8004c3c:	40014000 	.word	0x40014000

08004c40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e041      	b.n	8004cd6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fc fd0c 	bl	8001684 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f000 fc1a 	bl	80054b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d104      	bne.n	8004cfe <HAL_TIM_IC_Start_IT+0x1e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	e013      	b.n	8004d26 <HAL_TIM_IC_Start_IT+0x46>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d104      	bne.n	8004d0e <HAL_TIM_IC_Start_IT+0x2e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	e00b      	b.n	8004d26 <HAL_TIM_IC_Start_IT+0x46>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d104      	bne.n	8004d1e <HAL_TIM_IC_Start_IT+0x3e>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	e003      	b.n	8004d26 <HAL_TIM_IC_Start_IT+0x46>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d104      	bne.n	8004d38 <HAL_TIM_IC_Start_IT+0x58>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	e013      	b.n	8004d60 <HAL_TIM_IC_Start_IT+0x80>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d104      	bne.n	8004d48 <HAL_TIM_IC_Start_IT+0x68>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	e00b      	b.n	8004d60 <HAL_TIM_IC_Start_IT+0x80>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d104      	bne.n	8004d58 <HAL_TIM_IC_Start_IT+0x78>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e003      	b.n	8004d60 <HAL_TIM_IC_Start_IT+0x80>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d62:	7bbb      	ldrb	r3, [r7, #14]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d102      	bne.n	8004d6e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d68:	7b7b      	ldrb	r3, [r7, #13]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d001      	beq.n	8004d72 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e0c2      	b.n	8004ef8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_IC_Start_IT+0xa2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d80:	e013      	b.n	8004daa <HAL_TIM_IC_Start_IT+0xca>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_IC_Start_IT+0xb2>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d90:	e00b      	b.n	8004daa <HAL_TIM_IC_Start_IT+0xca>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_IC_Start_IT+0xc2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da0:	e003      	b.n	8004daa <HAL_TIM_IC_Start_IT+0xca>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <HAL_TIM_IC_Start_IT+0xda>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db8:	e013      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0x102>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d104      	bne.n	8004dca <HAL_TIM_IC_Start_IT+0xea>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dc8:	e00b      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0x102>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d104      	bne.n	8004dda <HAL_TIM_IC_Start_IT+0xfa>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd8:	e003      	b.n	8004de2 <HAL_TIM_IC_Start_IT+0x102>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b0c      	cmp	r3, #12
 8004de6:	d841      	bhi.n	8004e6c <HAL_TIM_IC_Start_IT+0x18c>
 8004de8:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <HAL_TIM_IC_Start_IT+0x110>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e25 	.word	0x08004e25
 8004df4:	08004e6d 	.word	0x08004e6d
 8004df8:	08004e6d 	.word	0x08004e6d
 8004dfc:	08004e6d 	.word	0x08004e6d
 8004e00:	08004e37 	.word	0x08004e37
 8004e04:	08004e6d 	.word	0x08004e6d
 8004e08:	08004e6d 	.word	0x08004e6d
 8004e0c:	08004e6d 	.word	0x08004e6d
 8004e10:	08004e49 	.word	0x08004e49
 8004e14:	08004e6d 	.word	0x08004e6d
 8004e18:	08004e6d 	.word	0x08004e6d
 8004e1c:	08004e6d 	.word	0x08004e6d
 8004e20:	08004e5b 	.word	0x08004e5b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0202 	orr.w	r2, r2, #2
 8004e32:	60da      	str	r2, [r3, #12]
      break;
 8004e34:	e01d      	b.n	8004e72 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0204 	orr.w	r2, r2, #4
 8004e44:	60da      	str	r2, [r3, #12]
      break;
 8004e46:	e014      	b.n	8004e72 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0208 	orr.w	r2, r2, #8
 8004e56:	60da      	str	r2, [r3, #12]
      break;
 8004e58:	e00b      	b.n	8004e72 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0210 	orr.w	r2, r2, #16
 8004e68:	60da      	str	r2, [r3, #12]
      break;
 8004e6a:	e002      	b.n	8004e72 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e70:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d13e      	bne.n	8004ef6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	6839      	ldr	r1, [r7, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fe43 	bl	8005b0c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a1d      	ldr	r2, [pc, #116]	; (8004f00 <HAL_TIM_IC_Start_IT+0x220>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d018      	beq.n	8004ec2 <HAL_TIM_IC_Start_IT+0x1e2>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e98:	d013      	beq.n	8004ec2 <HAL_TIM_IC_Start_IT+0x1e2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a19      	ldr	r2, [pc, #100]	; (8004f04 <HAL_TIM_IC_Start_IT+0x224>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00e      	beq.n	8004ec2 <HAL_TIM_IC_Start_IT+0x1e2>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <HAL_TIM_IC_Start_IT+0x228>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d009      	beq.n	8004ec2 <HAL_TIM_IC_Start_IT+0x1e2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a16      	ldr	r2, [pc, #88]	; (8004f0c <HAL_TIM_IC_Start_IT+0x22c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <HAL_TIM_IC_Start_IT+0x1e2>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a14      	ldr	r2, [pc, #80]	; (8004f10 <HAL_TIM_IC_Start_IT+0x230>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d111      	bne.n	8004ee6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b06      	cmp	r3, #6
 8004ed2:	d010      	beq.n	8004ef6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee4:	e007      	b.n	8004ef6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0201 	orr.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	40014000 	.word	0x40014000

08004f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d122      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d11b      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0202 	mvn.w	r2, #2
 8004f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fc faec 	bl	8001534 <HAL_TIM_IC_CaptureCallback>
 8004f5c:	e005      	b.n	8004f6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa8c 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fa93 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d122      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d11b      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0204 	mvn.w	r2, #4
 8004f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fc fac2 	bl	8001534 <HAL_TIM_IC_CaptureCallback>
 8004fb0:	e005      	b.n	8004fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fa62 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fa69 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d122      	bne.n	8005018 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d11b      	bne.n	8005018 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0208 	mvn.w	r2, #8
 8004fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2204      	movs	r2, #4
 8004fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fc fa98 	bl	8001534 <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fa38 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fa3f 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b10      	cmp	r3, #16
 8005024:	d122      	bne.n	800506c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b10      	cmp	r3, #16
 8005032:	d11b      	bne.n	800506c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0210 	mvn.w	r2, #16
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2208      	movs	r2, #8
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fc fa6e 	bl	8001534 <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fa0e 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fa15 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b01      	cmp	r3, #1
 8005078:	d10e      	bne.n	8005098 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b01      	cmp	r3, #1
 8005086:	d107      	bne.n	8005098 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0201 	mvn.w	r2, #1
 8005090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f9e8 	bl	8005468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b80      	cmp	r3, #128	; 0x80
 80050a4:	d10e      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b0:	2b80      	cmp	r3, #128	; 0x80
 80050b2:	d107      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fdc2 	bl	8005c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d10e      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b40      	cmp	r3, #64	; 0x40
 80050de:	d107      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f9da 	bl	80054a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b20      	cmp	r3, #32
 80050fc:	d10e      	bne.n	800511c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b20      	cmp	r3, #32
 800510a:	d107      	bne.n	800511c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0220 	mvn.w	r2, #32
 8005114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fd8c 	bl	8005c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005130:	2300      	movs	r3, #0
 8005132:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_TIM_IC_ConfigChannel+0x1e>
 800513e:	2302      	movs	r3, #2
 8005140:	e088      	b.n	8005254 <HAL_TIM_IC_ConfigChannel+0x130>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11b      	bne.n	8005188 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6818      	ldr	r0, [r3, #0]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	6819      	ldr	r1, [r3, #0]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f000 fbb6 	bl	80058d0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 020c 	bic.w	r2, r2, #12
 8005172:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6999      	ldr	r1, [r3, #24]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	619a      	str	r2, [r3, #24]
 8005186:	e060      	b.n	800524a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b04      	cmp	r3, #4
 800518c:	d11c      	bne.n	80051c8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	6819      	ldr	r1, [r3, #0]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f000 fbff 	bl	80059a0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699a      	ldr	r2, [r3, #24]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6999      	ldr	r1, [r3, #24]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	021a      	lsls	r2, r3, #8
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	619a      	str	r2, [r3, #24]
 80051c6:	e040      	b.n	800524a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d11b      	bne.n	8005206 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6818      	ldr	r0, [r3, #0]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6819      	ldr	r1, [r3, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f000 fc1c 	bl	8005a1a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 020c 	bic.w	r2, r2, #12
 80051f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69d9      	ldr	r1, [r3, #28]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	61da      	str	r2, [r3, #28]
 8005204:	e021      	b.n	800524a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b0c      	cmp	r3, #12
 800520a:	d11c      	bne.n	8005246 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6819      	ldr	r1, [r3, #0]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f000 fc39 	bl	8005a92 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69da      	ldr	r2, [r3, #28]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800522e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69d9      	ldr	r1, [r3, #28]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	021a      	lsls	r2, r3, #8
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	61da      	str	r2, [r3, #28]
 8005244:	e001      	b.n	800524a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005252:	7dfb      	ldrb	r3, [r7, #23]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005276:	2302      	movs	r3, #2
 8005278:	e0ae      	b.n	80053d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b0c      	cmp	r3, #12
 8005286:	f200 809f 	bhi.w	80053c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800528a:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005290:	080052c5 	.word	0x080052c5
 8005294:	080053c9 	.word	0x080053c9
 8005298:	080053c9 	.word	0x080053c9
 800529c:	080053c9 	.word	0x080053c9
 80052a0:	08005305 	.word	0x08005305
 80052a4:	080053c9 	.word	0x080053c9
 80052a8:	080053c9 	.word	0x080053c9
 80052ac:	080053c9 	.word	0x080053c9
 80052b0:	08005347 	.word	0x08005347
 80052b4:	080053c9 	.word	0x080053c9
 80052b8:	080053c9 	.word	0x080053c9
 80052bc:	080053c9 	.word	0x080053c9
 80052c0:	08005387 	.word	0x08005387
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 f974 	bl	80055b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0208 	orr.w	r2, r2, #8
 80052de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0204 	bic.w	r2, r2, #4
 80052ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6999      	ldr	r1, [r3, #24]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	619a      	str	r2, [r3, #24]
      break;
 8005302:	e064      	b.n	80053ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 f9ba 	bl	8005684 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800531e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6999      	ldr	r1, [r3, #24]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	021a      	lsls	r2, r3, #8
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	619a      	str	r2, [r3, #24]
      break;
 8005344:	e043      	b.n	80053ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68b9      	ldr	r1, [r7, #8]
 800534c:	4618      	mov	r0, r3
 800534e:	f000 fa05 	bl	800575c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69da      	ldr	r2, [r3, #28]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0208 	orr.w	r2, r2, #8
 8005360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69da      	ldr	r2, [r3, #28]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0204 	bic.w	r2, r2, #4
 8005370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69d9      	ldr	r1, [r3, #28]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	61da      	str	r2, [r3, #28]
      break;
 8005384:	e023      	b.n	80053ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fa4f 	bl	8005830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69da      	ldr	r2, [r3, #28]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69da      	ldr	r2, [r3, #28]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69d9      	ldr	r1, [r3, #28]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	021a      	lsls	r2, r3, #8
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	61da      	str	r2, [r3, #28]
      break;
 80053c6:	e002      	b.n	80053ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	75fb      	strb	r3, [r7, #23]
      break;
 80053cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b0c      	cmp	r3, #12
 80053f2:	d831      	bhi.n	8005458 <HAL_TIM_ReadCapturedValue+0x78>
 80053f4:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <HAL_TIM_ReadCapturedValue+0x1c>)
 80053f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fa:	bf00      	nop
 80053fc:	08005431 	.word	0x08005431
 8005400:	08005459 	.word	0x08005459
 8005404:	08005459 	.word	0x08005459
 8005408:	08005459 	.word	0x08005459
 800540c:	0800543b 	.word	0x0800543b
 8005410:	08005459 	.word	0x08005459
 8005414:	08005459 	.word	0x08005459
 8005418:	08005459 	.word	0x08005459
 800541c:	08005445 	.word	0x08005445
 8005420:	08005459 	.word	0x08005459
 8005424:	08005459 	.word	0x08005459
 8005428:	08005459 	.word	0x08005459
 800542c:	0800544f 	.word	0x0800544f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005436:	60fb      	str	r3, [r7, #12]

      break;
 8005438:	e00f      	b.n	800545a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	60fb      	str	r3, [r7, #12]

      break;
 8005442:	e00a      	b.n	800545a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544a:	60fb      	str	r3, [r7, #12]

      break;
 800544c:	e005      	b.n	800545a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	60fb      	str	r3, [r7, #12]

      break;
 8005456:	e000      	b.n	800545a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005458:	bf00      	nop
  }

  return tmpreg;
 800545a:	68fb      	ldr	r3, [r7, #12]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a34      	ldr	r2, [pc, #208]	; (800559c <TIM_Base_SetConfig+0xe4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00f      	beq.n	80054f0 <TIM_Base_SetConfig+0x38>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d6:	d00b      	beq.n	80054f0 <TIM_Base_SetConfig+0x38>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a31      	ldr	r2, [pc, #196]	; (80055a0 <TIM_Base_SetConfig+0xe8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d007      	beq.n	80054f0 <TIM_Base_SetConfig+0x38>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a30      	ldr	r2, [pc, #192]	; (80055a4 <TIM_Base_SetConfig+0xec>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_Base_SetConfig+0x38>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a2f      	ldr	r2, [pc, #188]	; (80055a8 <TIM_Base_SetConfig+0xf0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d108      	bne.n	8005502 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a25      	ldr	r2, [pc, #148]	; (800559c <TIM_Base_SetConfig+0xe4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d01b      	beq.n	8005542 <TIM_Base_SetConfig+0x8a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005510:	d017      	beq.n	8005542 <TIM_Base_SetConfig+0x8a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a22      	ldr	r2, [pc, #136]	; (80055a0 <TIM_Base_SetConfig+0xe8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <TIM_Base_SetConfig+0x8a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a21      	ldr	r2, [pc, #132]	; (80055a4 <TIM_Base_SetConfig+0xec>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00f      	beq.n	8005542 <TIM_Base_SetConfig+0x8a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a20      	ldr	r2, [pc, #128]	; (80055a8 <TIM_Base_SetConfig+0xf0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00b      	beq.n	8005542 <TIM_Base_SetConfig+0x8a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a1f      	ldr	r2, [pc, #124]	; (80055ac <TIM_Base_SetConfig+0xf4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d007      	beq.n	8005542 <TIM_Base_SetConfig+0x8a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a1e      	ldr	r2, [pc, #120]	; (80055b0 <TIM_Base_SetConfig+0xf8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d003      	beq.n	8005542 <TIM_Base_SetConfig+0x8a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <TIM_Base_SetConfig+0xfc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d108      	bne.n	8005554 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a08      	ldr	r2, [pc, #32]	; (800559c <TIM_Base_SetConfig+0xe4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d103      	bne.n	8005588 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	615a      	str	r2, [r3, #20]
}
 800558e:	bf00      	nop
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40010000 	.word	0x40010000
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800
 80055a8:	40000c00 	.word	0x40000c00
 80055ac:	40014000 	.word	0x40014000
 80055b0:	40014400 	.word	0x40014400
 80055b4:	40014800 	.word	0x40014800

080055b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f023 0201 	bic.w	r2, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f023 0302 	bic.w	r3, r3, #2
 8005600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a1c      	ldr	r2, [pc, #112]	; (8005680 <TIM_OC1_SetConfig+0xc8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d10c      	bne.n	800562e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f023 0308 	bic.w	r3, r3, #8
 800561a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f023 0304 	bic.w	r3, r3, #4
 800562c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a13      	ldr	r2, [pc, #76]	; (8005680 <TIM_OC1_SetConfig+0xc8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d111      	bne.n	800565a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800563c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	621a      	str	r2, [r3, #32]
}
 8005674:	bf00      	nop
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	40010000 	.word	0x40010000

08005684 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f023 0210 	bic.w	r2, r3, #16
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	021b      	lsls	r3, r3, #8
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f023 0320 	bic.w	r3, r3, #32
 80056ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <TIM_OC2_SetConfig+0xd4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d10d      	bne.n	8005700 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a15      	ldr	r2, [pc, #84]	; (8005758 <TIM_OC2_SetConfig+0xd4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d113      	bne.n	8005730 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800570e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005716:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000

0800575c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0303 	bic.w	r3, r3, #3
 8005792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	021b      	lsls	r3, r3, #8
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a1d      	ldr	r2, [pc, #116]	; (800582c <TIM_OC3_SetConfig+0xd0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d10d      	bne.n	80057d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	021b      	lsls	r3, r3, #8
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a14      	ldr	r2, [pc, #80]	; (800582c <TIM_OC3_SetConfig+0xd0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d113      	bne.n	8005806 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	621a      	str	r2, [r3, #32]
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	40010000 	.word	0x40010000

08005830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800587a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	031b      	lsls	r3, r3, #12
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a10      	ldr	r2, [pc, #64]	; (80058cc <TIM_OC4_SetConfig+0x9c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d109      	bne.n	80058a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	019b      	lsls	r3, r3, #6
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40010000 	.word	0x40010000

080058d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	f023 0201 	bic.w	r2, r3, #1
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4a24      	ldr	r2, [pc, #144]	; (800598c <TIM_TI1_SetConfig+0xbc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <TIM_TI1_SetConfig+0x56>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005904:	d00f      	beq.n	8005926 <TIM_TI1_SetConfig+0x56>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4a21      	ldr	r2, [pc, #132]	; (8005990 <TIM_TI1_SetConfig+0xc0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00b      	beq.n	8005926 <TIM_TI1_SetConfig+0x56>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4a20      	ldr	r2, [pc, #128]	; (8005994 <TIM_TI1_SetConfig+0xc4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d007      	beq.n	8005926 <TIM_TI1_SetConfig+0x56>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4a1f      	ldr	r2, [pc, #124]	; (8005998 <TIM_TI1_SetConfig+0xc8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_TI1_SetConfig+0x56>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4a1e      	ldr	r2, [pc, #120]	; (800599c <TIM_TI1_SetConfig+0xcc>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d101      	bne.n	800592a <TIM_TI1_SetConfig+0x5a>
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <TIM_TI1_SetConfig+0x5c>
 800592a:	2300      	movs	r3, #0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f023 0303 	bic.w	r3, r3, #3
 8005936:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4313      	orrs	r3, r2
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	e003      	b.n	800594a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	b2db      	uxtb	r3, r3
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f023 030a 	bic.w	r3, r3, #10
 8005964:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f003 030a 	and.w	r3, r3, #10
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40010000 	.word	0x40010000
 8005990:	40000400 	.word	0x40000400
 8005994:	40000800 	.word	0x40000800
 8005998:	40000c00 	.word	0x40000c00
 800599c:	40014000 	.word	0x40014000

080059a0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f023 0210 	bic.w	r2, r3, #16
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	021b      	lsls	r3, r3, #8
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	031b      	lsls	r3, r3, #12
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b087      	sub	sp, #28
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	607a      	str	r2, [r7, #4]
 8005a26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 0303 	bic.w	r3, r3, #3
 8005a46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a56:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005a6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	621a      	str	r2, [r3, #32]
}
 8005a86:	bf00      	nop
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b087      	sub	sp, #28
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	607a      	str	r2, [r7, #4]
 8005a9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005abe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ad0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	031b      	lsls	r3, r3, #12
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005ae4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	031b      	lsls	r3, r3, #12
 8005aea:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	621a      	str	r2, [r3, #32]
}
 8005b00:	bf00      	nop
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 031f 	and.w	r3, r3, #31
 8005b1e:	2201      	movs	r2, #1
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a1a      	ldr	r2, [r3, #32]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	43db      	mvns	r3, r3
 8005b2e:	401a      	ands	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a1a      	ldr	r2, [r3, #32]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	fa01 f303 	lsl.w	r3, r1, r3
 8005b44:	431a      	orrs	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	621a      	str	r2, [r3, #32]
}
 8005b4a:	bf00      	nop
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
	...

08005b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e050      	b.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1c      	ldr	r2, [pc, #112]	; (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d018      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbc:	d013      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a18      	ldr	r2, [pc, #96]	; (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00e      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a16      	ldr	r2, [pc, #88]	; (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d009      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a15      	ldr	r2, [pc, #84]	; (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d004      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a13      	ldr	r2, [pc, #76]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d10c      	bne.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40000400 	.word	0x40000400
 8005c28:	40000800 	.word	0x40000800
 8005c2c:	40000c00 	.word	0x40000c00
 8005c30:	40014000 	.word	0x40014000

08005c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8005c60:	bf00      	nop
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af04      	add	r7, sp, #16
 8005c72:	4603      	mov	r3, r0
 8005c74:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005c76:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7a:	9302      	str	r3, [sp, #8]
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	1dfb      	adds	r3, r7, #7
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	2301      	movs	r3, #1
 8005c86:	2200      	movs	r2, #0
 8005c88:	2178      	movs	r1, #120	; 0x78
 8005c8a:	4803      	ldr	r0, [pc, #12]	; (8005c98 <ssd1306_WriteCommand+0x2c>)
 8005c8c:	f7fc fbb8 	bl	8002400 <HAL_I2C_Mem_Write>
}
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000200 	.word	0x20000200

08005c9c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af04      	add	r7, sp, #16
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f04f 32ff 	mov.w	r2, #4294967295
 8005cae:	9202      	str	r2, [sp, #8]
 8005cb0:	9301      	str	r3, [sp, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	2240      	movs	r2, #64	; 0x40
 8005cba:	2178      	movs	r1, #120	; 0x78
 8005cbc:	4803      	ldr	r0, [pc, #12]	; (8005ccc <ssd1306_WriteData+0x30>)
 8005cbe:	f7fc fb9f 	bl	8002400 <HAL_I2C_Mem_Write>
}
 8005cc2:	bf00      	nop
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000200 	.word	0x20000200

08005cd0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005cd4:	f7ff ffc2 	bl	8005c5c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005cd8:	2064      	movs	r0, #100	; 0x64
 8005cda:	f7fb ff2f 	bl	8001b3c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8005cde:	2000      	movs	r0, #0
 8005ce0:	f000 f9da 	bl	8006098 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005ce4:	2020      	movs	r0, #32
 8005ce6:	f7ff ffc1 	bl	8005c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005cea:	2000      	movs	r0, #0
 8005cec:	f7ff ffbe 	bl	8005c6c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005cf0:	20b0      	movs	r0, #176	; 0xb0
 8005cf2:	f7ff ffbb 	bl	8005c6c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005cf6:	20c8      	movs	r0, #200	; 0xc8
 8005cf8:	f7ff ffb8 	bl	8005c6c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	f7ff ffb5 	bl	8005c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8005d02:	2010      	movs	r0, #16
 8005d04:	f7ff ffb2 	bl	8005c6c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005d08:	2040      	movs	r0, #64	; 0x40
 8005d0a:	f7ff ffaf 	bl	8005c6c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8005d0e:	20ff      	movs	r0, #255	; 0xff
 8005d10:	f000 f9ae 	bl	8006070 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005d14:	20a1      	movs	r0, #161	; 0xa1
 8005d16:	f7ff ffa9 	bl	8005c6c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8005d1a:	20a6      	movs	r0, #166	; 0xa6
 8005d1c:	f7ff ffa6 	bl	8005c6c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005d20:	20a8      	movs	r0, #168	; 0xa8
 8005d22:	f7ff ffa3 	bl	8005c6c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8005d26:	203f      	movs	r0, #63	; 0x3f
 8005d28:	f7ff ffa0 	bl	8005c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005d2c:	20a4      	movs	r0, #164	; 0xa4
 8005d2e:	f7ff ff9d 	bl	8005c6c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8005d32:	20d3      	movs	r0, #211	; 0xd3
 8005d34:	f7ff ff9a 	bl	8005c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005d38:	2000      	movs	r0, #0
 8005d3a:	f7ff ff97 	bl	8005c6c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005d3e:	20d5      	movs	r0, #213	; 0xd5
 8005d40:	f7ff ff94 	bl	8005c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005d44:	20f0      	movs	r0, #240	; 0xf0
 8005d46:	f7ff ff91 	bl	8005c6c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005d4a:	20d9      	movs	r0, #217	; 0xd9
 8005d4c:	f7ff ff8e 	bl	8005c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005d50:	2022      	movs	r0, #34	; 0x22
 8005d52:	f7ff ff8b 	bl	8005c6c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005d56:	20da      	movs	r0, #218	; 0xda
 8005d58:	f7ff ff88 	bl	8005c6c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8005d5c:	2012      	movs	r0, #18
 8005d5e:	f7ff ff85 	bl	8005c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8005d62:	20db      	movs	r0, #219	; 0xdb
 8005d64:	f7ff ff82 	bl	8005c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005d68:	2020      	movs	r0, #32
 8005d6a:	f7ff ff7f 	bl	8005c6c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005d6e:	208d      	movs	r0, #141	; 0x8d
 8005d70:	f7ff ff7c 	bl	8005c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005d74:	2014      	movs	r0, #20
 8005d76:	f7ff ff79 	bl	8005c6c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	f000 f98c 	bl	8006098 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005d80:	2000      	movs	r0, #0
 8005d82:	f000 f80f 	bl	8005da4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8005d86:	f000 f831 	bl	8005dec <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005d8a:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <ssd1306_Init+0xd0>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005d90:	4b03      	ldr	r3, [pc, #12]	; (8005da0 <ssd1306_Init+0xd0>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8005d96:	4b02      	ldr	r3, [pc, #8]	; (8005da0 <ssd1306_Init+0xd0>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	711a      	strb	r2, [r3, #4]
}
 8005d9c:	bf00      	nop
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	20000884 	.word	0x20000884

08005da4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	e00d      	b.n	8005dd0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <ssd1306_Fill+0x1a>
 8005dba:	2100      	movs	r1, #0
 8005dbc:	e000      	b.n	8005dc0 <ssd1306_Fill+0x1c>
 8005dbe:	21ff      	movs	r1, #255	; 0xff
 8005dc0:	4a09      	ldr	r2, [pc, #36]	; (8005de8 <ssd1306_Fill+0x44>)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	460a      	mov	r2, r1
 8005dc8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd6:	d3ed      	bcc.n	8005db4 <ssd1306_Fill+0x10>
    }
}
 8005dd8:	bf00      	nop
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000484 	.word	0x20000484

08005dec <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005df2:	2300      	movs	r3, #0
 8005df4:	71fb      	strb	r3, [r7, #7]
 8005df6:	e016      	b.n	8005e26 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	3b50      	subs	r3, #80	; 0x50
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7ff ff34 	bl	8005c6c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8005e04:	2000      	movs	r0, #0
 8005e06:	f7ff ff31 	bl	8005c6c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005e0a:	2010      	movs	r0, #16
 8005e0c:	f7ff ff2e 	bl	8005c6c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	01db      	lsls	r3, r3, #7
 8005e14:	4a08      	ldr	r2, [pc, #32]	; (8005e38 <ssd1306_UpdateScreen+0x4c>)
 8005e16:	4413      	add	r3, r2
 8005e18:	2180      	movs	r1, #128	; 0x80
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff ff3e 	bl	8005c9c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	3301      	adds	r3, #1
 8005e24:	71fb      	strb	r3, [r7, #7]
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	2b07      	cmp	r3, #7
 8005e2a:	d9e5      	bls.n	8005df8 <ssd1306_UpdateScreen+0xc>
    }
}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000484 	.word	0x20000484

08005e3c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	71fb      	strb	r3, [r7, #7]
 8005e46:	460b      	mov	r3, r1
 8005e48:	71bb      	strb	r3, [r7, #6]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	db3d      	blt.n	8005ed2 <ssd1306_DrawPixel+0x96>
 8005e56:	79bb      	ldrb	r3, [r7, #6]
 8005e58:	2b3f      	cmp	r3, #63	; 0x3f
 8005e5a:	d83a      	bhi.n	8005ed2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005e5c:	797b      	ldrb	r3, [r7, #5]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d11a      	bne.n	8005e98 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005e62:	79fa      	ldrb	r2, [r7, #7]
 8005e64:	79bb      	ldrb	r3, [r7, #6]
 8005e66:	08db      	lsrs	r3, r3, #3
 8005e68:	b2d8      	uxtb	r0, r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	01db      	lsls	r3, r3, #7
 8005e6e:	4413      	add	r3, r2
 8005e70:	4a1b      	ldr	r2, [pc, #108]	; (8005ee0 <ssd1306_DrawPixel+0xa4>)
 8005e72:	5cd3      	ldrb	r3, [r2, r3]
 8005e74:	b25a      	sxtb	r2, r3
 8005e76:	79bb      	ldrb	r3, [r7, #6]
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e82:	b25b      	sxtb	r3, r3
 8005e84:	4313      	orrs	r3, r2
 8005e86:	b259      	sxtb	r1, r3
 8005e88:	79fa      	ldrb	r2, [r7, #7]
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	01db      	lsls	r3, r3, #7
 8005e8e:	4413      	add	r3, r2
 8005e90:	b2c9      	uxtb	r1, r1
 8005e92:	4a13      	ldr	r2, [pc, #76]	; (8005ee0 <ssd1306_DrawPixel+0xa4>)
 8005e94:	54d1      	strb	r1, [r2, r3]
 8005e96:	e01d      	b.n	8005ed4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005e98:	79fa      	ldrb	r2, [r7, #7]
 8005e9a:	79bb      	ldrb	r3, [r7, #6]
 8005e9c:	08db      	lsrs	r3, r3, #3
 8005e9e:	b2d8      	uxtb	r0, r3
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	01db      	lsls	r3, r3, #7
 8005ea4:	4413      	add	r3, r2
 8005ea6:	4a0e      	ldr	r2, [pc, #56]	; (8005ee0 <ssd1306_DrawPixel+0xa4>)
 8005ea8:	5cd3      	ldrb	r3, [r2, r3]
 8005eaa:	b25a      	sxtb	r2, r3
 8005eac:	79bb      	ldrb	r3, [r7, #6]
 8005eae:	f003 0307 	and.w	r3, r3, #7
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	43db      	mvns	r3, r3
 8005ebc:	b25b      	sxtb	r3, r3
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	b259      	sxtb	r1, r3
 8005ec2:	79fa      	ldrb	r2, [r7, #7]
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	01db      	lsls	r3, r3, #7
 8005ec8:	4413      	add	r3, r2
 8005eca:	b2c9      	uxtb	r1, r1
 8005ecc:	4a04      	ldr	r2, [pc, #16]	; (8005ee0 <ssd1306_DrawPixel+0xa4>)
 8005ece:	54d1      	strb	r1, [r2, r3]
 8005ed0:	e000      	b.n	8005ed4 <ssd1306_DrawPixel+0x98>
        return;
 8005ed2:	bf00      	nop
    }
}
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	20000484 	.word	0x20000484

08005ee4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005ee4:	b590      	push	{r4, r7, lr}
 8005ee6:	b089      	sub	sp, #36	; 0x24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4604      	mov	r4, r0
 8005eec:	1d38      	adds	r0, r7, #4
 8005eee:	e880 0006 	stmia.w	r0, {r1, r2}
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	4623      	mov	r3, r4
 8005ef6:	73fb      	strb	r3, [r7, #15]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	2b1f      	cmp	r3, #31
 8005f00:	d902      	bls.n	8005f08 <ssd1306_WriteChar+0x24>
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b7e      	cmp	r3, #126	; 0x7e
 8005f06:	d901      	bls.n	8005f0c <ssd1306_WriteChar+0x28>
        return 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e06d      	b.n	8005fe8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005f0c:	4b38      	ldr	r3, [pc, #224]	; (8005ff0 <ssd1306_WriteChar+0x10c>)
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	461a      	mov	r2, r3
 8005f12:	793b      	ldrb	r3, [r7, #4]
 8005f14:	4413      	add	r3, r2
 8005f16:	2b80      	cmp	r3, #128	; 0x80
 8005f18:	dc06      	bgt.n	8005f28 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8005f1a:	4b35      	ldr	r3, [pc, #212]	; (8005ff0 <ssd1306_WriteChar+0x10c>)
 8005f1c:	885b      	ldrh	r3, [r3, #2]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	797b      	ldrb	r3, [r7, #5]
 8005f22:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	dd01      	ble.n	8005f2c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e05d      	b.n	8005fe8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	e04c      	b.n	8005fcc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	3b20      	subs	r3, #32
 8005f38:	7979      	ldrb	r1, [r7, #5]
 8005f3a:	fb01 f303 	mul.w	r3, r1, r3
 8005f3e:	4619      	mov	r1, r3
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	440b      	add	r3, r1
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	4413      	add	r3, r2
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61bb      	str	r3, [r7, #24]
 8005f50:	e034      	b.n	8005fbc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d012      	beq.n	8005f88 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005f62:	4b23      	ldr	r3, [pc, #140]	; (8005ff0 <ssd1306_WriteChar+0x10c>)
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	b2d8      	uxtb	r0, r3
 8005f70:	4b1f      	ldr	r3, [pc, #124]	; (8005ff0 <ssd1306_WriteChar+0x10c>)
 8005f72:	885b      	ldrh	r3, [r3, #2]
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	7bba      	ldrb	r2, [r7, #14]
 8005f80:	4619      	mov	r1, r3
 8005f82:	f7ff ff5b 	bl	8005e3c <ssd1306_DrawPixel>
 8005f86:	e016      	b.n	8005fb6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005f88:	4b19      	ldr	r3, [pc, #100]	; (8005ff0 <ssd1306_WriteChar+0x10c>)
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	4413      	add	r3, r2
 8005f94:	b2d8      	uxtb	r0, r3
 8005f96:	4b16      	ldr	r3, [pc, #88]	; (8005ff0 <ssd1306_WriteChar+0x10c>)
 8005f98:	885b      	ldrh	r3, [r3, #2]
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	b2d9      	uxtb	r1, r3
 8005fa4:	7bbb      	ldrb	r3, [r7, #14]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	bf0c      	ite	eq
 8005faa:	2301      	moveq	r3, #1
 8005fac:	2300      	movne	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	f7ff ff43 	bl	8005e3c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	61bb      	str	r3, [r7, #24]
 8005fbc:	793b      	ldrb	r3, [r7, #4]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d3c5      	bcc.n	8005f52 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	797b      	ldrb	r3, [r7, #5]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d3ad      	bcc.n	8005f32 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <ssd1306_WriteChar+0x10c>)
 8005fd8:	881a      	ldrh	r2, [r3, #0]
 8005fda:	793b      	ldrb	r3, [r7, #4]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	4413      	add	r3, r2
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <ssd1306_WriteChar+0x10c>)
 8005fe4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3724      	adds	r7, #36	; 0x24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd90      	pop	{r4, r7, pc}
 8005ff0:	20000884 	.word	0x20000884

08005ff4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	1d38      	adds	r0, r7, #4
 8005ffe:	e880 0006 	stmia.w	r0, {r1, r2}
 8006002:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8006004:	e012      	b.n	800602c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	7818      	ldrb	r0, [r3, #0]
 800600a:	78fb      	ldrb	r3, [r7, #3]
 800600c:	1d3a      	adds	r2, r7, #4
 800600e:	ca06      	ldmia	r2, {r1, r2}
 8006010:	f7ff ff68 	bl	8005ee4 <ssd1306_WriteChar>
 8006014:	4603      	mov	r3, r0
 8006016:	461a      	mov	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d002      	beq.n	8006026 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	e008      	b.n	8006038 <ssd1306_WriteString+0x44>
        }
        str++;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3301      	adds	r3, #1
 800602a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e8      	bne.n	8006006 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	781b      	ldrb	r3, [r3, #0]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	460a      	mov	r2, r1
 800604a:	71fb      	strb	r3, [r7, #7]
 800604c:	4613      	mov	r3, r2
 800604e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	b29a      	uxth	r2, r3
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <ssd1306_SetCursor+0x2c>)
 8006056:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8006058:	79bb      	ldrb	r3, [r7, #6]
 800605a:	b29a      	uxth	r2, r3
 800605c:	4b03      	ldr	r3, [pc, #12]	; (800606c <ssd1306_SetCursor+0x2c>)
 800605e:	805a      	strh	r2, [r3, #2]
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	20000884 	.word	0x20000884

08006070 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800607a:	2381      	movs	r3, #129	; 0x81
 800607c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff fdf3 	bl	8005c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff fdef 	bl	8005c6c <ssd1306_WriteCommand>
}
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80060a8:	23af      	movs	r3, #175	; 0xaf
 80060aa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80060ac:	4b08      	ldr	r3, [pc, #32]	; (80060d0 <ssd1306_SetDisplayOn+0x38>)
 80060ae:	2201      	movs	r2, #1
 80060b0:	715a      	strb	r2, [r3, #5]
 80060b2:	e004      	b.n	80060be <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80060b4:	23ae      	movs	r3, #174	; 0xae
 80060b6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80060b8:	4b05      	ldr	r3, [pc, #20]	; (80060d0 <ssd1306_SetDisplayOn+0x38>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff fdd3 	bl	8005c6c <ssd1306_WriteCommand>
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000884 	.word	0x20000884

080060d4 <__errno>:
 80060d4:	4b01      	ldr	r3, [pc, #4]	; (80060dc <__errno+0x8>)
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000014 	.word	0x20000014

080060e0 <__libc_init_array>:
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	4d0d      	ldr	r5, [pc, #52]	; (8006118 <__libc_init_array+0x38>)
 80060e4:	4c0d      	ldr	r4, [pc, #52]	; (800611c <__libc_init_array+0x3c>)
 80060e6:	1b64      	subs	r4, r4, r5
 80060e8:	10a4      	asrs	r4, r4, #2
 80060ea:	2600      	movs	r6, #0
 80060ec:	42a6      	cmp	r6, r4
 80060ee:	d109      	bne.n	8006104 <__libc_init_array+0x24>
 80060f0:	4d0b      	ldr	r5, [pc, #44]	; (8006120 <__libc_init_array+0x40>)
 80060f2:	4c0c      	ldr	r4, [pc, #48]	; (8006124 <__libc_init_array+0x44>)
 80060f4:	f002 ff18 	bl	8008f28 <_init>
 80060f8:	1b64      	subs	r4, r4, r5
 80060fa:	10a4      	asrs	r4, r4, #2
 80060fc:	2600      	movs	r6, #0
 80060fe:	42a6      	cmp	r6, r4
 8006100:	d105      	bne.n	800610e <__libc_init_array+0x2e>
 8006102:	bd70      	pop	{r4, r5, r6, pc}
 8006104:	f855 3b04 	ldr.w	r3, [r5], #4
 8006108:	4798      	blx	r3
 800610a:	3601      	adds	r6, #1
 800610c:	e7ee      	b.n	80060ec <__libc_init_array+0xc>
 800610e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006112:	4798      	blx	r3
 8006114:	3601      	adds	r6, #1
 8006116:	e7f2      	b.n	80060fe <__libc_init_array+0x1e>
 8006118:	08009af4 	.word	0x08009af4
 800611c:	08009af4 	.word	0x08009af4
 8006120:	08009af4 	.word	0x08009af4
 8006124:	08009af8 	.word	0x08009af8

08006128 <memcpy>:
 8006128:	440a      	add	r2, r1
 800612a:	4291      	cmp	r1, r2
 800612c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006130:	d100      	bne.n	8006134 <memcpy+0xc>
 8006132:	4770      	bx	lr
 8006134:	b510      	push	{r4, lr}
 8006136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800613a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800613e:	4291      	cmp	r1, r2
 8006140:	d1f9      	bne.n	8006136 <memcpy+0xe>
 8006142:	bd10      	pop	{r4, pc}

08006144 <memmove>:
 8006144:	4288      	cmp	r0, r1
 8006146:	b510      	push	{r4, lr}
 8006148:	eb01 0402 	add.w	r4, r1, r2
 800614c:	d902      	bls.n	8006154 <memmove+0x10>
 800614e:	4284      	cmp	r4, r0
 8006150:	4623      	mov	r3, r4
 8006152:	d807      	bhi.n	8006164 <memmove+0x20>
 8006154:	1e43      	subs	r3, r0, #1
 8006156:	42a1      	cmp	r1, r4
 8006158:	d008      	beq.n	800616c <memmove+0x28>
 800615a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800615e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006162:	e7f8      	b.n	8006156 <memmove+0x12>
 8006164:	4402      	add	r2, r0
 8006166:	4601      	mov	r1, r0
 8006168:	428a      	cmp	r2, r1
 800616a:	d100      	bne.n	800616e <memmove+0x2a>
 800616c:	bd10      	pop	{r4, pc}
 800616e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006176:	e7f7      	b.n	8006168 <memmove+0x24>

08006178 <memset>:
 8006178:	4402      	add	r2, r0
 800617a:	4603      	mov	r3, r0
 800617c:	4293      	cmp	r3, r2
 800617e:	d100      	bne.n	8006182 <memset+0xa>
 8006180:	4770      	bx	lr
 8006182:	f803 1b01 	strb.w	r1, [r3], #1
 8006186:	e7f9      	b.n	800617c <memset+0x4>

08006188 <__cvt>:
 8006188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	ec55 4b10 	vmov	r4, r5, d0
 8006190:	2d00      	cmp	r5, #0
 8006192:	460e      	mov	r6, r1
 8006194:	4619      	mov	r1, r3
 8006196:	462b      	mov	r3, r5
 8006198:	bfbb      	ittet	lt
 800619a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800619e:	461d      	movlt	r5, r3
 80061a0:	2300      	movge	r3, #0
 80061a2:	232d      	movlt	r3, #45	; 0x2d
 80061a4:	700b      	strb	r3, [r1, #0]
 80061a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061ac:	4691      	mov	r9, r2
 80061ae:	f023 0820 	bic.w	r8, r3, #32
 80061b2:	bfbc      	itt	lt
 80061b4:	4622      	movlt	r2, r4
 80061b6:	4614      	movlt	r4, r2
 80061b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061bc:	d005      	beq.n	80061ca <__cvt+0x42>
 80061be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061c2:	d100      	bne.n	80061c6 <__cvt+0x3e>
 80061c4:	3601      	adds	r6, #1
 80061c6:	2102      	movs	r1, #2
 80061c8:	e000      	b.n	80061cc <__cvt+0x44>
 80061ca:	2103      	movs	r1, #3
 80061cc:	ab03      	add	r3, sp, #12
 80061ce:	9301      	str	r3, [sp, #4]
 80061d0:	ab02      	add	r3, sp, #8
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	ec45 4b10 	vmov	d0, r4, r5
 80061d8:	4653      	mov	r3, sl
 80061da:	4632      	mov	r2, r6
 80061dc:	f000 fd00 	bl	8006be0 <_dtoa_r>
 80061e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061e4:	4607      	mov	r7, r0
 80061e6:	d102      	bne.n	80061ee <__cvt+0x66>
 80061e8:	f019 0f01 	tst.w	r9, #1
 80061ec:	d022      	beq.n	8006234 <__cvt+0xac>
 80061ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061f2:	eb07 0906 	add.w	r9, r7, r6
 80061f6:	d110      	bne.n	800621a <__cvt+0x92>
 80061f8:	783b      	ldrb	r3, [r7, #0]
 80061fa:	2b30      	cmp	r3, #48	; 0x30
 80061fc:	d10a      	bne.n	8006214 <__cvt+0x8c>
 80061fe:	2200      	movs	r2, #0
 8006200:	2300      	movs	r3, #0
 8006202:	4620      	mov	r0, r4
 8006204:	4629      	mov	r1, r5
 8006206:	f7fa fc67 	bl	8000ad8 <__aeabi_dcmpeq>
 800620a:	b918      	cbnz	r0, 8006214 <__cvt+0x8c>
 800620c:	f1c6 0601 	rsb	r6, r6, #1
 8006210:	f8ca 6000 	str.w	r6, [sl]
 8006214:	f8da 3000 	ldr.w	r3, [sl]
 8006218:	4499      	add	r9, r3
 800621a:	2200      	movs	r2, #0
 800621c:	2300      	movs	r3, #0
 800621e:	4620      	mov	r0, r4
 8006220:	4629      	mov	r1, r5
 8006222:	f7fa fc59 	bl	8000ad8 <__aeabi_dcmpeq>
 8006226:	b108      	cbz	r0, 800622c <__cvt+0xa4>
 8006228:	f8cd 900c 	str.w	r9, [sp, #12]
 800622c:	2230      	movs	r2, #48	; 0x30
 800622e:	9b03      	ldr	r3, [sp, #12]
 8006230:	454b      	cmp	r3, r9
 8006232:	d307      	bcc.n	8006244 <__cvt+0xbc>
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006238:	1bdb      	subs	r3, r3, r7
 800623a:	4638      	mov	r0, r7
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	b004      	add	sp, #16
 8006240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006244:	1c59      	adds	r1, r3, #1
 8006246:	9103      	str	r1, [sp, #12]
 8006248:	701a      	strb	r2, [r3, #0]
 800624a:	e7f0      	b.n	800622e <__cvt+0xa6>

0800624c <__exponent>:
 800624c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800624e:	4603      	mov	r3, r0
 8006250:	2900      	cmp	r1, #0
 8006252:	bfb8      	it	lt
 8006254:	4249      	neglt	r1, r1
 8006256:	f803 2b02 	strb.w	r2, [r3], #2
 800625a:	bfb4      	ite	lt
 800625c:	222d      	movlt	r2, #45	; 0x2d
 800625e:	222b      	movge	r2, #43	; 0x2b
 8006260:	2909      	cmp	r1, #9
 8006262:	7042      	strb	r2, [r0, #1]
 8006264:	dd2a      	ble.n	80062bc <__exponent+0x70>
 8006266:	f10d 0407 	add.w	r4, sp, #7
 800626a:	46a4      	mov	ip, r4
 800626c:	270a      	movs	r7, #10
 800626e:	46a6      	mov	lr, r4
 8006270:	460a      	mov	r2, r1
 8006272:	fb91 f6f7 	sdiv	r6, r1, r7
 8006276:	fb07 1516 	mls	r5, r7, r6, r1
 800627a:	3530      	adds	r5, #48	; 0x30
 800627c:	2a63      	cmp	r2, #99	; 0x63
 800627e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006282:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006286:	4631      	mov	r1, r6
 8006288:	dcf1      	bgt.n	800626e <__exponent+0x22>
 800628a:	3130      	adds	r1, #48	; 0x30
 800628c:	f1ae 0502 	sub.w	r5, lr, #2
 8006290:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006294:	1c44      	adds	r4, r0, #1
 8006296:	4629      	mov	r1, r5
 8006298:	4561      	cmp	r1, ip
 800629a:	d30a      	bcc.n	80062b2 <__exponent+0x66>
 800629c:	f10d 0209 	add.w	r2, sp, #9
 80062a0:	eba2 020e 	sub.w	r2, r2, lr
 80062a4:	4565      	cmp	r5, ip
 80062a6:	bf88      	it	hi
 80062a8:	2200      	movhi	r2, #0
 80062aa:	4413      	add	r3, r2
 80062ac:	1a18      	subs	r0, r3, r0
 80062ae:	b003      	add	sp, #12
 80062b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062ba:	e7ed      	b.n	8006298 <__exponent+0x4c>
 80062bc:	2330      	movs	r3, #48	; 0x30
 80062be:	3130      	adds	r1, #48	; 0x30
 80062c0:	7083      	strb	r3, [r0, #2]
 80062c2:	70c1      	strb	r1, [r0, #3]
 80062c4:	1d03      	adds	r3, r0, #4
 80062c6:	e7f1      	b.n	80062ac <__exponent+0x60>

080062c8 <_printf_float>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	ed2d 8b02 	vpush	{d8}
 80062d0:	b08d      	sub	sp, #52	; 0x34
 80062d2:	460c      	mov	r4, r1
 80062d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062d8:	4616      	mov	r6, r2
 80062da:	461f      	mov	r7, r3
 80062dc:	4605      	mov	r5, r0
 80062de:	f001 fa6d 	bl	80077bc <_localeconv_r>
 80062e2:	f8d0 a000 	ldr.w	sl, [r0]
 80062e6:	4650      	mov	r0, sl
 80062e8:	f7f9 ff7a 	bl	80001e0 <strlen>
 80062ec:	2300      	movs	r3, #0
 80062ee:	930a      	str	r3, [sp, #40]	; 0x28
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	9305      	str	r3, [sp, #20]
 80062f4:	f8d8 3000 	ldr.w	r3, [r8]
 80062f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80062fc:	3307      	adds	r3, #7
 80062fe:	f023 0307 	bic.w	r3, r3, #7
 8006302:	f103 0208 	add.w	r2, r3, #8
 8006306:	f8c8 2000 	str.w	r2, [r8]
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006312:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006316:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800631a:	9307      	str	r3, [sp, #28]
 800631c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006320:	ee08 0a10 	vmov	s16, r0
 8006324:	4b9f      	ldr	r3, [pc, #636]	; (80065a4 <_printf_float+0x2dc>)
 8006326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800632a:	f04f 32ff 	mov.w	r2, #4294967295
 800632e:	f7fa fc05 	bl	8000b3c <__aeabi_dcmpun>
 8006332:	bb88      	cbnz	r0, 8006398 <_printf_float+0xd0>
 8006334:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006338:	4b9a      	ldr	r3, [pc, #616]	; (80065a4 <_printf_float+0x2dc>)
 800633a:	f04f 32ff 	mov.w	r2, #4294967295
 800633e:	f7fa fbdf 	bl	8000b00 <__aeabi_dcmple>
 8006342:	bb48      	cbnz	r0, 8006398 <_printf_float+0xd0>
 8006344:	2200      	movs	r2, #0
 8006346:	2300      	movs	r3, #0
 8006348:	4640      	mov	r0, r8
 800634a:	4649      	mov	r1, r9
 800634c:	f7fa fbce 	bl	8000aec <__aeabi_dcmplt>
 8006350:	b110      	cbz	r0, 8006358 <_printf_float+0x90>
 8006352:	232d      	movs	r3, #45	; 0x2d
 8006354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006358:	4b93      	ldr	r3, [pc, #588]	; (80065a8 <_printf_float+0x2e0>)
 800635a:	4894      	ldr	r0, [pc, #592]	; (80065ac <_printf_float+0x2e4>)
 800635c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006360:	bf94      	ite	ls
 8006362:	4698      	movls	r8, r3
 8006364:	4680      	movhi	r8, r0
 8006366:	2303      	movs	r3, #3
 8006368:	6123      	str	r3, [r4, #16]
 800636a:	9b05      	ldr	r3, [sp, #20]
 800636c:	f023 0204 	bic.w	r2, r3, #4
 8006370:	6022      	str	r2, [r4, #0]
 8006372:	f04f 0900 	mov.w	r9, #0
 8006376:	9700      	str	r7, [sp, #0]
 8006378:	4633      	mov	r3, r6
 800637a:	aa0b      	add	r2, sp, #44	; 0x2c
 800637c:	4621      	mov	r1, r4
 800637e:	4628      	mov	r0, r5
 8006380:	f000 f9d8 	bl	8006734 <_printf_common>
 8006384:	3001      	adds	r0, #1
 8006386:	f040 8090 	bne.w	80064aa <_printf_float+0x1e2>
 800638a:	f04f 30ff 	mov.w	r0, #4294967295
 800638e:	b00d      	add	sp, #52	; 0x34
 8006390:	ecbd 8b02 	vpop	{d8}
 8006394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006398:	4642      	mov	r2, r8
 800639a:	464b      	mov	r3, r9
 800639c:	4640      	mov	r0, r8
 800639e:	4649      	mov	r1, r9
 80063a0:	f7fa fbcc 	bl	8000b3c <__aeabi_dcmpun>
 80063a4:	b140      	cbz	r0, 80063b8 <_printf_float+0xf0>
 80063a6:	464b      	mov	r3, r9
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	bfbc      	itt	lt
 80063ac:	232d      	movlt	r3, #45	; 0x2d
 80063ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063b2:	487f      	ldr	r0, [pc, #508]	; (80065b0 <_printf_float+0x2e8>)
 80063b4:	4b7f      	ldr	r3, [pc, #508]	; (80065b4 <_printf_float+0x2ec>)
 80063b6:	e7d1      	b.n	800635c <_printf_float+0x94>
 80063b8:	6863      	ldr	r3, [r4, #4]
 80063ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063be:	9206      	str	r2, [sp, #24]
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	d13f      	bne.n	8006444 <_printf_float+0x17c>
 80063c4:	2306      	movs	r3, #6
 80063c6:	6063      	str	r3, [r4, #4]
 80063c8:	9b05      	ldr	r3, [sp, #20]
 80063ca:	6861      	ldr	r1, [r4, #4]
 80063cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063d0:	2300      	movs	r3, #0
 80063d2:	9303      	str	r3, [sp, #12]
 80063d4:	ab0a      	add	r3, sp, #40	; 0x28
 80063d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063da:	ab09      	add	r3, sp, #36	; 0x24
 80063dc:	ec49 8b10 	vmov	d0, r8, r9
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	6022      	str	r2, [r4, #0]
 80063e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063e8:	4628      	mov	r0, r5
 80063ea:	f7ff fecd 	bl	8006188 <__cvt>
 80063ee:	9b06      	ldr	r3, [sp, #24]
 80063f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063f2:	2b47      	cmp	r3, #71	; 0x47
 80063f4:	4680      	mov	r8, r0
 80063f6:	d108      	bne.n	800640a <_printf_float+0x142>
 80063f8:	1cc8      	adds	r0, r1, #3
 80063fa:	db02      	blt.n	8006402 <_printf_float+0x13a>
 80063fc:	6863      	ldr	r3, [r4, #4]
 80063fe:	4299      	cmp	r1, r3
 8006400:	dd41      	ble.n	8006486 <_printf_float+0x1be>
 8006402:	f1ab 0b02 	sub.w	fp, fp, #2
 8006406:	fa5f fb8b 	uxtb.w	fp, fp
 800640a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800640e:	d820      	bhi.n	8006452 <_printf_float+0x18a>
 8006410:	3901      	subs	r1, #1
 8006412:	465a      	mov	r2, fp
 8006414:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006418:	9109      	str	r1, [sp, #36]	; 0x24
 800641a:	f7ff ff17 	bl	800624c <__exponent>
 800641e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006420:	1813      	adds	r3, r2, r0
 8006422:	2a01      	cmp	r2, #1
 8006424:	4681      	mov	r9, r0
 8006426:	6123      	str	r3, [r4, #16]
 8006428:	dc02      	bgt.n	8006430 <_printf_float+0x168>
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	07d2      	lsls	r2, r2, #31
 800642e:	d501      	bpl.n	8006434 <_printf_float+0x16c>
 8006430:	3301      	adds	r3, #1
 8006432:	6123      	str	r3, [r4, #16]
 8006434:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006438:	2b00      	cmp	r3, #0
 800643a:	d09c      	beq.n	8006376 <_printf_float+0xae>
 800643c:	232d      	movs	r3, #45	; 0x2d
 800643e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006442:	e798      	b.n	8006376 <_printf_float+0xae>
 8006444:	9a06      	ldr	r2, [sp, #24]
 8006446:	2a47      	cmp	r2, #71	; 0x47
 8006448:	d1be      	bne.n	80063c8 <_printf_float+0x100>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1bc      	bne.n	80063c8 <_printf_float+0x100>
 800644e:	2301      	movs	r3, #1
 8006450:	e7b9      	b.n	80063c6 <_printf_float+0xfe>
 8006452:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006456:	d118      	bne.n	800648a <_printf_float+0x1c2>
 8006458:	2900      	cmp	r1, #0
 800645a:	6863      	ldr	r3, [r4, #4]
 800645c:	dd0b      	ble.n	8006476 <_printf_float+0x1ae>
 800645e:	6121      	str	r1, [r4, #16]
 8006460:	b913      	cbnz	r3, 8006468 <_printf_float+0x1a0>
 8006462:	6822      	ldr	r2, [r4, #0]
 8006464:	07d0      	lsls	r0, r2, #31
 8006466:	d502      	bpl.n	800646e <_printf_float+0x1a6>
 8006468:	3301      	adds	r3, #1
 800646a:	440b      	add	r3, r1
 800646c:	6123      	str	r3, [r4, #16]
 800646e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006470:	f04f 0900 	mov.w	r9, #0
 8006474:	e7de      	b.n	8006434 <_printf_float+0x16c>
 8006476:	b913      	cbnz	r3, 800647e <_printf_float+0x1b6>
 8006478:	6822      	ldr	r2, [r4, #0]
 800647a:	07d2      	lsls	r2, r2, #31
 800647c:	d501      	bpl.n	8006482 <_printf_float+0x1ba>
 800647e:	3302      	adds	r3, #2
 8006480:	e7f4      	b.n	800646c <_printf_float+0x1a4>
 8006482:	2301      	movs	r3, #1
 8006484:	e7f2      	b.n	800646c <_printf_float+0x1a4>
 8006486:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800648a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800648c:	4299      	cmp	r1, r3
 800648e:	db05      	blt.n	800649c <_printf_float+0x1d4>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	6121      	str	r1, [r4, #16]
 8006494:	07d8      	lsls	r0, r3, #31
 8006496:	d5ea      	bpl.n	800646e <_printf_float+0x1a6>
 8006498:	1c4b      	adds	r3, r1, #1
 800649a:	e7e7      	b.n	800646c <_printf_float+0x1a4>
 800649c:	2900      	cmp	r1, #0
 800649e:	bfd4      	ite	le
 80064a0:	f1c1 0202 	rsble	r2, r1, #2
 80064a4:	2201      	movgt	r2, #1
 80064a6:	4413      	add	r3, r2
 80064a8:	e7e0      	b.n	800646c <_printf_float+0x1a4>
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	055a      	lsls	r2, r3, #21
 80064ae:	d407      	bmi.n	80064c0 <_printf_float+0x1f8>
 80064b0:	6923      	ldr	r3, [r4, #16]
 80064b2:	4642      	mov	r2, r8
 80064b4:	4631      	mov	r1, r6
 80064b6:	4628      	mov	r0, r5
 80064b8:	47b8      	blx	r7
 80064ba:	3001      	adds	r0, #1
 80064bc:	d12c      	bne.n	8006518 <_printf_float+0x250>
 80064be:	e764      	b.n	800638a <_printf_float+0xc2>
 80064c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064c4:	f240 80e0 	bls.w	8006688 <_printf_float+0x3c0>
 80064c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064cc:	2200      	movs	r2, #0
 80064ce:	2300      	movs	r3, #0
 80064d0:	f7fa fb02 	bl	8000ad8 <__aeabi_dcmpeq>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d034      	beq.n	8006542 <_printf_float+0x27a>
 80064d8:	4a37      	ldr	r2, [pc, #220]	; (80065b8 <_printf_float+0x2f0>)
 80064da:	2301      	movs	r3, #1
 80064dc:	4631      	mov	r1, r6
 80064de:	4628      	mov	r0, r5
 80064e0:	47b8      	blx	r7
 80064e2:	3001      	adds	r0, #1
 80064e4:	f43f af51 	beq.w	800638a <_printf_float+0xc2>
 80064e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064ec:	429a      	cmp	r2, r3
 80064ee:	db02      	blt.n	80064f6 <_printf_float+0x22e>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	07d8      	lsls	r0, r3, #31
 80064f4:	d510      	bpl.n	8006518 <_printf_float+0x250>
 80064f6:	ee18 3a10 	vmov	r3, s16
 80064fa:	4652      	mov	r2, sl
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	47b8      	blx	r7
 8006502:	3001      	adds	r0, #1
 8006504:	f43f af41 	beq.w	800638a <_printf_float+0xc2>
 8006508:	f04f 0800 	mov.w	r8, #0
 800650c:	f104 091a 	add.w	r9, r4, #26
 8006510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006512:	3b01      	subs	r3, #1
 8006514:	4543      	cmp	r3, r8
 8006516:	dc09      	bgt.n	800652c <_printf_float+0x264>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	079b      	lsls	r3, r3, #30
 800651c:	f100 8105 	bmi.w	800672a <_printf_float+0x462>
 8006520:	68e0      	ldr	r0, [r4, #12]
 8006522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006524:	4298      	cmp	r0, r3
 8006526:	bfb8      	it	lt
 8006528:	4618      	movlt	r0, r3
 800652a:	e730      	b.n	800638e <_printf_float+0xc6>
 800652c:	2301      	movs	r3, #1
 800652e:	464a      	mov	r2, r9
 8006530:	4631      	mov	r1, r6
 8006532:	4628      	mov	r0, r5
 8006534:	47b8      	blx	r7
 8006536:	3001      	adds	r0, #1
 8006538:	f43f af27 	beq.w	800638a <_printf_float+0xc2>
 800653c:	f108 0801 	add.w	r8, r8, #1
 8006540:	e7e6      	b.n	8006510 <_printf_float+0x248>
 8006542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	dc39      	bgt.n	80065bc <_printf_float+0x2f4>
 8006548:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <_printf_float+0x2f0>)
 800654a:	2301      	movs	r3, #1
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f af19 	beq.w	800638a <_printf_float+0xc2>
 8006558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800655c:	4313      	orrs	r3, r2
 800655e:	d102      	bne.n	8006566 <_printf_float+0x29e>
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	07d9      	lsls	r1, r3, #31
 8006564:	d5d8      	bpl.n	8006518 <_printf_float+0x250>
 8006566:	ee18 3a10 	vmov	r3, s16
 800656a:	4652      	mov	r2, sl
 800656c:	4631      	mov	r1, r6
 800656e:	4628      	mov	r0, r5
 8006570:	47b8      	blx	r7
 8006572:	3001      	adds	r0, #1
 8006574:	f43f af09 	beq.w	800638a <_printf_float+0xc2>
 8006578:	f04f 0900 	mov.w	r9, #0
 800657c:	f104 0a1a 	add.w	sl, r4, #26
 8006580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006582:	425b      	negs	r3, r3
 8006584:	454b      	cmp	r3, r9
 8006586:	dc01      	bgt.n	800658c <_printf_float+0x2c4>
 8006588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800658a:	e792      	b.n	80064b2 <_printf_float+0x1ea>
 800658c:	2301      	movs	r3, #1
 800658e:	4652      	mov	r2, sl
 8006590:	4631      	mov	r1, r6
 8006592:	4628      	mov	r0, r5
 8006594:	47b8      	blx	r7
 8006596:	3001      	adds	r0, #1
 8006598:	f43f aef7 	beq.w	800638a <_printf_float+0xc2>
 800659c:	f109 0901 	add.w	r9, r9, #1
 80065a0:	e7ee      	b.n	8006580 <_printf_float+0x2b8>
 80065a2:	bf00      	nop
 80065a4:	7fefffff 	.word	0x7fefffff
 80065a8:	08009714 	.word	0x08009714
 80065ac:	08009718 	.word	0x08009718
 80065b0:	08009720 	.word	0x08009720
 80065b4:	0800971c 	.word	0x0800971c
 80065b8:	08009724 	.word	0x08009724
 80065bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065c0:	429a      	cmp	r2, r3
 80065c2:	bfa8      	it	ge
 80065c4:	461a      	movge	r2, r3
 80065c6:	2a00      	cmp	r2, #0
 80065c8:	4691      	mov	r9, r2
 80065ca:	dc37      	bgt.n	800663c <_printf_float+0x374>
 80065cc:	f04f 0b00 	mov.w	fp, #0
 80065d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065d4:	f104 021a 	add.w	r2, r4, #26
 80065d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065da:	9305      	str	r3, [sp, #20]
 80065dc:	eba3 0309 	sub.w	r3, r3, r9
 80065e0:	455b      	cmp	r3, fp
 80065e2:	dc33      	bgt.n	800664c <_printf_float+0x384>
 80065e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065e8:	429a      	cmp	r2, r3
 80065ea:	db3b      	blt.n	8006664 <_printf_float+0x39c>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	07da      	lsls	r2, r3, #31
 80065f0:	d438      	bmi.n	8006664 <_printf_float+0x39c>
 80065f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f4:	9a05      	ldr	r2, [sp, #20]
 80065f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065f8:	1a9a      	subs	r2, r3, r2
 80065fa:	eba3 0901 	sub.w	r9, r3, r1
 80065fe:	4591      	cmp	r9, r2
 8006600:	bfa8      	it	ge
 8006602:	4691      	movge	r9, r2
 8006604:	f1b9 0f00 	cmp.w	r9, #0
 8006608:	dc35      	bgt.n	8006676 <_printf_float+0x3ae>
 800660a:	f04f 0800 	mov.w	r8, #0
 800660e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006612:	f104 0a1a 	add.w	sl, r4, #26
 8006616:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800661a:	1a9b      	subs	r3, r3, r2
 800661c:	eba3 0309 	sub.w	r3, r3, r9
 8006620:	4543      	cmp	r3, r8
 8006622:	f77f af79 	ble.w	8006518 <_printf_float+0x250>
 8006626:	2301      	movs	r3, #1
 8006628:	4652      	mov	r2, sl
 800662a:	4631      	mov	r1, r6
 800662c:	4628      	mov	r0, r5
 800662e:	47b8      	blx	r7
 8006630:	3001      	adds	r0, #1
 8006632:	f43f aeaa 	beq.w	800638a <_printf_float+0xc2>
 8006636:	f108 0801 	add.w	r8, r8, #1
 800663a:	e7ec      	b.n	8006616 <_printf_float+0x34e>
 800663c:	4613      	mov	r3, r2
 800663e:	4631      	mov	r1, r6
 8006640:	4642      	mov	r2, r8
 8006642:	4628      	mov	r0, r5
 8006644:	47b8      	blx	r7
 8006646:	3001      	adds	r0, #1
 8006648:	d1c0      	bne.n	80065cc <_printf_float+0x304>
 800664a:	e69e      	b.n	800638a <_printf_float+0xc2>
 800664c:	2301      	movs	r3, #1
 800664e:	4631      	mov	r1, r6
 8006650:	4628      	mov	r0, r5
 8006652:	9205      	str	r2, [sp, #20]
 8006654:	47b8      	blx	r7
 8006656:	3001      	adds	r0, #1
 8006658:	f43f ae97 	beq.w	800638a <_printf_float+0xc2>
 800665c:	9a05      	ldr	r2, [sp, #20]
 800665e:	f10b 0b01 	add.w	fp, fp, #1
 8006662:	e7b9      	b.n	80065d8 <_printf_float+0x310>
 8006664:	ee18 3a10 	vmov	r3, s16
 8006668:	4652      	mov	r2, sl
 800666a:	4631      	mov	r1, r6
 800666c:	4628      	mov	r0, r5
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	d1be      	bne.n	80065f2 <_printf_float+0x32a>
 8006674:	e689      	b.n	800638a <_printf_float+0xc2>
 8006676:	9a05      	ldr	r2, [sp, #20]
 8006678:	464b      	mov	r3, r9
 800667a:	4442      	add	r2, r8
 800667c:	4631      	mov	r1, r6
 800667e:	4628      	mov	r0, r5
 8006680:	47b8      	blx	r7
 8006682:	3001      	adds	r0, #1
 8006684:	d1c1      	bne.n	800660a <_printf_float+0x342>
 8006686:	e680      	b.n	800638a <_printf_float+0xc2>
 8006688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800668a:	2a01      	cmp	r2, #1
 800668c:	dc01      	bgt.n	8006692 <_printf_float+0x3ca>
 800668e:	07db      	lsls	r3, r3, #31
 8006690:	d538      	bpl.n	8006704 <_printf_float+0x43c>
 8006692:	2301      	movs	r3, #1
 8006694:	4642      	mov	r2, r8
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	f43f ae74 	beq.w	800638a <_printf_float+0xc2>
 80066a2:	ee18 3a10 	vmov	r3, s16
 80066a6:	4652      	mov	r2, sl
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b8      	blx	r7
 80066ae:	3001      	adds	r0, #1
 80066b0:	f43f ae6b 	beq.w	800638a <_printf_float+0xc2>
 80066b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066b8:	2200      	movs	r2, #0
 80066ba:	2300      	movs	r3, #0
 80066bc:	f7fa fa0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80066c0:	b9d8      	cbnz	r0, 80066fa <_printf_float+0x432>
 80066c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c4:	f108 0201 	add.w	r2, r8, #1
 80066c8:	3b01      	subs	r3, #1
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b8      	blx	r7
 80066d0:	3001      	adds	r0, #1
 80066d2:	d10e      	bne.n	80066f2 <_printf_float+0x42a>
 80066d4:	e659      	b.n	800638a <_printf_float+0xc2>
 80066d6:	2301      	movs	r3, #1
 80066d8:	4652      	mov	r2, sl
 80066da:	4631      	mov	r1, r6
 80066dc:	4628      	mov	r0, r5
 80066de:	47b8      	blx	r7
 80066e0:	3001      	adds	r0, #1
 80066e2:	f43f ae52 	beq.w	800638a <_printf_float+0xc2>
 80066e6:	f108 0801 	add.w	r8, r8, #1
 80066ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ec:	3b01      	subs	r3, #1
 80066ee:	4543      	cmp	r3, r8
 80066f0:	dcf1      	bgt.n	80066d6 <_printf_float+0x40e>
 80066f2:	464b      	mov	r3, r9
 80066f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066f8:	e6dc      	b.n	80064b4 <_printf_float+0x1ec>
 80066fa:	f04f 0800 	mov.w	r8, #0
 80066fe:	f104 0a1a 	add.w	sl, r4, #26
 8006702:	e7f2      	b.n	80066ea <_printf_float+0x422>
 8006704:	2301      	movs	r3, #1
 8006706:	4642      	mov	r2, r8
 8006708:	e7df      	b.n	80066ca <_printf_float+0x402>
 800670a:	2301      	movs	r3, #1
 800670c:	464a      	mov	r2, r9
 800670e:	4631      	mov	r1, r6
 8006710:	4628      	mov	r0, r5
 8006712:	47b8      	blx	r7
 8006714:	3001      	adds	r0, #1
 8006716:	f43f ae38 	beq.w	800638a <_printf_float+0xc2>
 800671a:	f108 0801 	add.w	r8, r8, #1
 800671e:	68e3      	ldr	r3, [r4, #12]
 8006720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006722:	1a5b      	subs	r3, r3, r1
 8006724:	4543      	cmp	r3, r8
 8006726:	dcf0      	bgt.n	800670a <_printf_float+0x442>
 8006728:	e6fa      	b.n	8006520 <_printf_float+0x258>
 800672a:	f04f 0800 	mov.w	r8, #0
 800672e:	f104 0919 	add.w	r9, r4, #25
 8006732:	e7f4      	b.n	800671e <_printf_float+0x456>

08006734 <_printf_common>:
 8006734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006738:	4616      	mov	r6, r2
 800673a:	4699      	mov	r9, r3
 800673c:	688a      	ldr	r2, [r1, #8]
 800673e:	690b      	ldr	r3, [r1, #16]
 8006740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006744:	4293      	cmp	r3, r2
 8006746:	bfb8      	it	lt
 8006748:	4613      	movlt	r3, r2
 800674a:	6033      	str	r3, [r6, #0]
 800674c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006750:	4607      	mov	r7, r0
 8006752:	460c      	mov	r4, r1
 8006754:	b10a      	cbz	r2, 800675a <_printf_common+0x26>
 8006756:	3301      	adds	r3, #1
 8006758:	6033      	str	r3, [r6, #0]
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	0699      	lsls	r1, r3, #26
 800675e:	bf42      	ittt	mi
 8006760:	6833      	ldrmi	r3, [r6, #0]
 8006762:	3302      	addmi	r3, #2
 8006764:	6033      	strmi	r3, [r6, #0]
 8006766:	6825      	ldr	r5, [r4, #0]
 8006768:	f015 0506 	ands.w	r5, r5, #6
 800676c:	d106      	bne.n	800677c <_printf_common+0x48>
 800676e:	f104 0a19 	add.w	sl, r4, #25
 8006772:	68e3      	ldr	r3, [r4, #12]
 8006774:	6832      	ldr	r2, [r6, #0]
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	42ab      	cmp	r3, r5
 800677a:	dc26      	bgt.n	80067ca <_printf_common+0x96>
 800677c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006780:	1e13      	subs	r3, r2, #0
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	bf18      	it	ne
 8006786:	2301      	movne	r3, #1
 8006788:	0692      	lsls	r2, r2, #26
 800678a:	d42b      	bmi.n	80067e4 <_printf_common+0xb0>
 800678c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006790:	4649      	mov	r1, r9
 8006792:	4638      	mov	r0, r7
 8006794:	47c0      	blx	r8
 8006796:	3001      	adds	r0, #1
 8006798:	d01e      	beq.n	80067d8 <_printf_common+0xa4>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	68e5      	ldr	r5, [r4, #12]
 800679e:	6832      	ldr	r2, [r6, #0]
 80067a0:	f003 0306 	and.w	r3, r3, #6
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	bf08      	it	eq
 80067a8:	1aad      	subeq	r5, r5, r2
 80067aa:	68a3      	ldr	r3, [r4, #8]
 80067ac:	6922      	ldr	r2, [r4, #16]
 80067ae:	bf0c      	ite	eq
 80067b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067b4:	2500      	movne	r5, #0
 80067b6:	4293      	cmp	r3, r2
 80067b8:	bfc4      	itt	gt
 80067ba:	1a9b      	subgt	r3, r3, r2
 80067bc:	18ed      	addgt	r5, r5, r3
 80067be:	2600      	movs	r6, #0
 80067c0:	341a      	adds	r4, #26
 80067c2:	42b5      	cmp	r5, r6
 80067c4:	d11a      	bne.n	80067fc <_printf_common+0xc8>
 80067c6:	2000      	movs	r0, #0
 80067c8:	e008      	b.n	80067dc <_printf_common+0xa8>
 80067ca:	2301      	movs	r3, #1
 80067cc:	4652      	mov	r2, sl
 80067ce:	4649      	mov	r1, r9
 80067d0:	4638      	mov	r0, r7
 80067d2:	47c0      	blx	r8
 80067d4:	3001      	adds	r0, #1
 80067d6:	d103      	bne.n	80067e0 <_printf_common+0xac>
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e0:	3501      	adds	r5, #1
 80067e2:	e7c6      	b.n	8006772 <_printf_common+0x3e>
 80067e4:	18e1      	adds	r1, r4, r3
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	2030      	movs	r0, #48	; 0x30
 80067ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067ee:	4422      	add	r2, r4
 80067f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067f8:	3302      	adds	r3, #2
 80067fa:	e7c7      	b.n	800678c <_printf_common+0x58>
 80067fc:	2301      	movs	r3, #1
 80067fe:	4622      	mov	r2, r4
 8006800:	4649      	mov	r1, r9
 8006802:	4638      	mov	r0, r7
 8006804:	47c0      	blx	r8
 8006806:	3001      	adds	r0, #1
 8006808:	d0e6      	beq.n	80067d8 <_printf_common+0xa4>
 800680a:	3601      	adds	r6, #1
 800680c:	e7d9      	b.n	80067c2 <_printf_common+0x8e>
	...

08006810 <_printf_i>:
 8006810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006814:	7e0f      	ldrb	r7, [r1, #24]
 8006816:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006818:	2f78      	cmp	r7, #120	; 0x78
 800681a:	4691      	mov	r9, r2
 800681c:	4680      	mov	r8, r0
 800681e:	460c      	mov	r4, r1
 8006820:	469a      	mov	sl, r3
 8006822:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006826:	d807      	bhi.n	8006838 <_printf_i+0x28>
 8006828:	2f62      	cmp	r7, #98	; 0x62
 800682a:	d80a      	bhi.n	8006842 <_printf_i+0x32>
 800682c:	2f00      	cmp	r7, #0
 800682e:	f000 80d8 	beq.w	80069e2 <_printf_i+0x1d2>
 8006832:	2f58      	cmp	r7, #88	; 0x58
 8006834:	f000 80a3 	beq.w	800697e <_printf_i+0x16e>
 8006838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800683c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006840:	e03a      	b.n	80068b8 <_printf_i+0xa8>
 8006842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006846:	2b15      	cmp	r3, #21
 8006848:	d8f6      	bhi.n	8006838 <_printf_i+0x28>
 800684a:	a101      	add	r1, pc, #4	; (adr r1, 8006850 <_printf_i+0x40>)
 800684c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006850:	080068a9 	.word	0x080068a9
 8006854:	080068bd 	.word	0x080068bd
 8006858:	08006839 	.word	0x08006839
 800685c:	08006839 	.word	0x08006839
 8006860:	08006839 	.word	0x08006839
 8006864:	08006839 	.word	0x08006839
 8006868:	080068bd 	.word	0x080068bd
 800686c:	08006839 	.word	0x08006839
 8006870:	08006839 	.word	0x08006839
 8006874:	08006839 	.word	0x08006839
 8006878:	08006839 	.word	0x08006839
 800687c:	080069c9 	.word	0x080069c9
 8006880:	080068ed 	.word	0x080068ed
 8006884:	080069ab 	.word	0x080069ab
 8006888:	08006839 	.word	0x08006839
 800688c:	08006839 	.word	0x08006839
 8006890:	080069eb 	.word	0x080069eb
 8006894:	08006839 	.word	0x08006839
 8006898:	080068ed 	.word	0x080068ed
 800689c:	08006839 	.word	0x08006839
 80068a0:	08006839 	.word	0x08006839
 80068a4:	080069b3 	.word	0x080069b3
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	1d1a      	adds	r2, r3, #4
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	602a      	str	r2, [r5, #0]
 80068b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0a3      	b.n	8006a04 <_printf_i+0x1f4>
 80068bc:	6820      	ldr	r0, [r4, #0]
 80068be:	6829      	ldr	r1, [r5, #0]
 80068c0:	0606      	lsls	r6, r0, #24
 80068c2:	f101 0304 	add.w	r3, r1, #4
 80068c6:	d50a      	bpl.n	80068de <_printf_i+0xce>
 80068c8:	680e      	ldr	r6, [r1, #0]
 80068ca:	602b      	str	r3, [r5, #0]
 80068cc:	2e00      	cmp	r6, #0
 80068ce:	da03      	bge.n	80068d8 <_printf_i+0xc8>
 80068d0:	232d      	movs	r3, #45	; 0x2d
 80068d2:	4276      	negs	r6, r6
 80068d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068d8:	485e      	ldr	r0, [pc, #376]	; (8006a54 <_printf_i+0x244>)
 80068da:	230a      	movs	r3, #10
 80068dc:	e019      	b.n	8006912 <_printf_i+0x102>
 80068de:	680e      	ldr	r6, [r1, #0]
 80068e0:	602b      	str	r3, [r5, #0]
 80068e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068e6:	bf18      	it	ne
 80068e8:	b236      	sxthne	r6, r6
 80068ea:	e7ef      	b.n	80068cc <_printf_i+0xbc>
 80068ec:	682b      	ldr	r3, [r5, #0]
 80068ee:	6820      	ldr	r0, [r4, #0]
 80068f0:	1d19      	adds	r1, r3, #4
 80068f2:	6029      	str	r1, [r5, #0]
 80068f4:	0601      	lsls	r1, r0, #24
 80068f6:	d501      	bpl.n	80068fc <_printf_i+0xec>
 80068f8:	681e      	ldr	r6, [r3, #0]
 80068fa:	e002      	b.n	8006902 <_printf_i+0xf2>
 80068fc:	0646      	lsls	r6, r0, #25
 80068fe:	d5fb      	bpl.n	80068f8 <_printf_i+0xe8>
 8006900:	881e      	ldrh	r6, [r3, #0]
 8006902:	4854      	ldr	r0, [pc, #336]	; (8006a54 <_printf_i+0x244>)
 8006904:	2f6f      	cmp	r7, #111	; 0x6f
 8006906:	bf0c      	ite	eq
 8006908:	2308      	moveq	r3, #8
 800690a:	230a      	movne	r3, #10
 800690c:	2100      	movs	r1, #0
 800690e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006912:	6865      	ldr	r5, [r4, #4]
 8006914:	60a5      	str	r5, [r4, #8]
 8006916:	2d00      	cmp	r5, #0
 8006918:	bfa2      	ittt	ge
 800691a:	6821      	ldrge	r1, [r4, #0]
 800691c:	f021 0104 	bicge.w	r1, r1, #4
 8006920:	6021      	strge	r1, [r4, #0]
 8006922:	b90e      	cbnz	r6, 8006928 <_printf_i+0x118>
 8006924:	2d00      	cmp	r5, #0
 8006926:	d04d      	beq.n	80069c4 <_printf_i+0x1b4>
 8006928:	4615      	mov	r5, r2
 800692a:	fbb6 f1f3 	udiv	r1, r6, r3
 800692e:	fb03 6711 	mls	r7, r3, r1, r6
 8006932:	5dc7      	ldrb	r7, [r0, r7]
 8006934:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006938:	4637      	mov	r7, r6
 800693a:	42bb      	cmp	r3, r7
 800693c:	460e      	mov	r6, r1
 800693e:	d9f4      	bls.n	800692a <_printf_i+0x11a>
 8006940:	2b08      	cmp	r3, #8
 8006942:	d10b      	bne.n	800695c <_printf_i+0x14c>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	07de      	lsls	r6, r3, #31
 8006948:	d508      	bpl.n	800695c <_printf_i+0x14c>
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	6861      	ldr	r1, [r4, #4]
 800694e:	4299      	cmp	r1, r3
 8006950:	bfde      	ittt	le
 8006952:	2330      	movle	r3, #48	; 0x30
 8006954:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006958:	f105 35ff 	addle.w	r5, r5, #4294967295
 800695c:	1b52      	subs	r2, r2, r5
 800695e:	6122      	str	r2, [r4, #16]
 8006960:	f8cd a000 	str.w	sl, [sp]
 8006964:	464b      	mov	r3, r9
 8006966:	aa03      	add	r2, sp, #12
 8006968:	4621      	mov	r1, r4
 800696a:	4640      	mov	r0, r8
 800696c:	f7ff fee2 	bl	8006734 <_printf_common>
 8006970:	3001      	adds	r0, #1
 8006972:	d14c      	bne.n	8006a0e <_printf_i+0x1fe>
 8006974:	f04f 30ff 	mov.w	r0, #4294967295
 8006978:	b004      	add	sp, #16
 800697a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697e:	4835      	ldr	r0, [pc, #212]	; (8006a54 <_printf_i+0x244>)
 8006980:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006984:	6829      	ldr	r1, [r5, #0]
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	f851 6b04 	ldr.w	r6, [r1], #4
 800698c:	6029      	str	r1, [r5, #0]
 800698e:	061d      	lsls	r5, r3, #24
 8006990:	d514      	bpl.n	80069bc <_printf_i+0x1ac>
 8006992:	07df      	lsls	r7, r3, #31
 8006994:	bf44      	itt	mi
 8006996:	f043 0320 	orrmi.w	r3, r3, #32
 800699a:	6023      	strmi	r3, [r4, #0]
 800699c:	b91e      	cbnz	r6, 80069a6 <_printf_i+0x196>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	f023 0320 	bic.w	r3, r3, #32
 80069a4:	6023      	str	r3, [r4, #0]
 80069a6:	2310      	movs	r3, #16
 80069a8:	e7b0      	b.n	800690c <_printf_i+0xfc>
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	f043 0320 	orr.w	r3, r3, #32
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	2378      	movs	r3, #120	; 0x78
 80069b4:	4828      	ldr	r0, [pc, #160]	; (8006a58 <_printf_i+0x248>)
 80069b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069ba:	e7e3      	b.n	8006984 <_printf_i+0x174>
 80069bc:	0659      	lsls	r1, r3, #25
 80069be:	bf48      	it	mi
 80069c0:	b2b6      	uxthmi	r6, r6
 80069c2:	e7e6      	b.n	8006992 <_printf_i+0x182>
 80069c4:	4615      	mov	r5, r2
 80069c6:	e7bb      	b.n	8006940 <_printf_i+0x130>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	6826      	ldr	r6, [r4, #0]
 80069cc:	6961      	ldr	r1, [r4, #20]
 80069ce:	1d18      	adds	r0, r3, #4
 80069d0:	6028      	str	r0, [r5, #0]
 80069d2:	0635      	lsls	r5, r6, #24
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	d501      	bpl.n	80069dc <_printf_i+0x1cc>
 80069d8:	6019      	str	r1, [r3, #0]
 80069da:	e002      	b.n	80069e2 <_printf_i+0x1d2>
 80069dc:	0670      	lsls	r0, r6, #25
 80069de:	d5fb      	bpl.n	80069d8 <_printf_i+0x1c8>
 80069e0:	8019      	strh	r1, [r3, #0]
 80069e2:	2300      	movs	r3, #0
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	4615      	mov	r5, r2
 80069e8:	e7ba      	b.n	8006960 <_printf_i+0x150>
 80069ea:	682b      	ldr	r3, [r5, #0]
 80069ec:	1d1a      	adds	r2, r3, #4
 80069ee:	602a      	str	r2, [r5, #0]
 80069f0:	681d      	ldr	r5, [r3, #0]
 80069f2:	6862      	ldr	r2, [r4, #4]
 80069f4:	2100      	movs	r1, #0
 80069f6:	4628      	mov	r0, r5
 80069f8:	f7f9 fbfa 	bl	80001f0 <memchr>
 80069fc:	b108      	cbz	r0, 8006a02 <_printf_i+0x1f2>
 80069fe:	1b40      	subs	r0, r0, r5
 8006a00:	6060      	str	r0, [r4, #4]
 8006a02:	6863      	ldr	r3, [r4, #4]
 8006a04:	6123      	str	r3, [r4, #16]
 8006a06:	2300      	movs	r3, #0
 8006a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a0c:	e7a8      	b.n	8006960 <_printf_i+0x150>
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	462a      	mov	r2, r5
 8006a12:	4649      	mov	r1, r9
 8006a14:	4640      	mov	r0, r8
 8006a16:	47d0      	blx	sl
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d0ab      	beq.n	8006974 <_printf_i+0x164>
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	079b      	lsls	r3, r3, #30
 8006a20:	d413      	bmi.n	8006a4a <_printf_i+0x23a>
 8006a22:	68e0      	ldr	r0, [r4, #12]
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	4298      	cmp	r0, r3
 8006a28:	bfb8      	it	lt
 8006a2a:	4618      	movlt	r0, r3
 8006a2c:	e7a4      	b.n	8006978 <_printf_i+0x168>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4632      	mov	r2, r6
 8006a32:	4649      	mov	r1, r9
 8006a34:	4640      	mov	r0, r8
 8006a36:	47d0      	blx	sl
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d09b      	beq.n	8006974 <_printf_i+0x164>
 8006a3c:	3501      	adds	r5, #1
 8006a3e:	68e3      	ldr	r3, [r4, #12]
 8006a40:	9903      	ldr	r1, [sp, #12]
 8006a42:	1a5b      	subs	r3, r3, r1
 8006a44:	42ab      	cmp	r3, r5
 8006a46:	dcf2      	bgt.n	8006a2e <_printf_i+0x21e>
 8006a48:	e7eb      	b.n	8006a22 <_printf_i+0x212>
 8006a4a:	2500      	movs	r5, #0
 8006a4c:	f104 0619 	add.w	r6, r4, #25
 8006a50:	e7f5      	b.n	8006a3e <_printf_i+0x22e>
 8006a52:	bf00      	nop
 8006a54:	08009726 	.word	0x08009726
 8006a58:	08009737 	.word	0x08009737

08006a5c <sniprintf>:
 8006a5c:	b40c      	push	{r2, r3}
 8006a5e:	b530      	push	{r4, r5, lr}
 8006a60:	4b17      	ldr	r3, [pc, #92]	; (8006ac0 <sniprintf+0x64>)
 8006a62:	1e0c      	subs	r4, r1, #0
 8006a64:	681d      	ldr	r5, [r3, #0]
 8006a66:	b09d      	sub	sp, #116	; 0x74
 8006a68:	da08      	bge.n	8006a7c <sniprintf+0x20>
 8006a6a:	238b      	movs	r3, #139	; 0x8b
 8006a6c:	602b      	str	r3, [r5, #0]
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a72:	b01d      	add	sp, #116	; 0x74
 8006a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a78:	b002      	add	sp, #8
 8006a7a:	4770      	bx	lr
 8006a7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006a80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006a84:	bf14      	ite	ne
 8006a86:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006a8a:	4623      	moveq	r3, r4
 8006a8c:	9304      	str	r3, [sp, #16]
 8006a8e:	9307      	str	r3, [sp, #28]
 8006a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a94:	9002      	str	r0, [sp, #8]
 8006a96:	9006      	str	r0, [sp, #24]
 8006a98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a9e:	ab21      	add	r3, sp, #132	; 0x84
 8006aa0:	a902      	add	r1, sp, #8
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	f001 fb6b 	bl	8008180 <_svfiprintf_r>
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	bfbc      	itt	lt
 8006aae:	238b      	movlt	r3, #139	; 0x8b
 8006ab0:	602b      	strlt	r3, [r5, #0]
 8006ab2:	2c00      	cmp	r4, #0
 8006ab4:	d0dd      	beq.n	8006a72 <sniprintf+0x16>
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	e7d9      	b.n	8006a72 <sniprintf+0x16>
 8006abe:	bf00      	nop
 8006ac0:	20000014 	.word	0x20000014

08006ac4 <quorem>:
 8006ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac8:	6903      	ldr	r3, [r0, #16]
 8006aca:	690c      	ldr	r4, [r1, #16]
 8006acc:	42a3      	cmp	r3, r4
 8006ace:	4607      	mov	r7, r0
 8006ad0:	f2c0 8081 	blt.w	8006bd6 <quorem+0x112>
 8006ad4:	3c01      	subs	r4, #1
 8006ad6:	f101 0814 	add.w	r8, r1, #20
 8006ada:	f100 0514 	add.w	r5, r0, #20
 8006ade:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ae2:	9301      	str	r3, [sp, #4]
 8006ae4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ae8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006aec:	3301      	adds	r3, #1
 8006aee:	429a      	cmp	r2, r3
 8006af0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006af4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006af8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006afc:	d331      	bcc.n	8006b62 <quorem+0x9e>
 8006afe:	f04f 0e00 	mov.w	lr, #0
 8006b02:	4640      	mov	r0, r8
 8006b04:	46ac      	mov	ip, r5
 8006b06:	46f2      	mov	sl, lr
 8006b08:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b0c:	b293      	uxth	r3, r2
 8006b0e:	fb06 e303 	mla	r3, r6, r3, lr
 8006b12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	ebaa 0303 	sub.w	r3, sl, r3
 8006b1c:	f8dc a000 	ldr.w	sl, [ip]
 8006b20:	0c12      	lsrs	r2, r2, #16
 8006b22:	fa13 f38a 	uxtah	r3, r3, sl
 8006b26:	fb06 e202 	mla	r2, r6, r2, lr
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	9b00      	ldr	r3, [sp, #0]
 8006b2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b32:	b292      	uxth	r2, r2
 8006b34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006b40:	4581      	cmp	r9, r0
 8006b42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b46:	f84c 3b04 	str.w	r3, [ip], #4
 8006b4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b4e:	d2db      	bcs.n	8006b08 <quorem+0x44>
 8006b50:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b54:	b92b      	cbnz	r3, 8006b62 <quorem+0x9e>
 8006b56:	9b01      	ldr	r3, [sp, #4]
 8006b58:	3b04      	subs	r3, #4
 8006b5a:	429d      	cmp	r5, r3
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	d32e      	bcc.n	8006bbe <quorem+0xfa>
 8006b60:	613c      	str	r4, [r7, #16]
 8006b62:	4638      	mov	r0, r7
 8006b64:	f001 f8b8 	bl	8007cd8 <__mcmp>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	db24      	blt.n	8006bb6 <quorem+0xf2>
 8006b6c:	3601      	adds	r6, #1
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f04f 0c00 	mov.w	ip, #0
 8006b74:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b78:	f8d0 e000 	ldr.w	lr, [r0]
 8006b7c:	b293      	uxth	r3, r2
 8006b7e:	ebac 0303 	sub.w	r3, ip, r3
 8006b82:	0c12      	lsrs	r2, r2, #16
 8006b84:	fa13 f38e 	uxtah	r3, r3, lr
 8006b88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b96:	45c1      	cmp	r9, r8
 8006b98:	f840 3b04 	str.w	r3, [r0], #4
 8006b9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ba0:	d2e8      	bcs.n	8006b74 <quorem+0xb0>
 8006ba2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ba6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006baa:	b922      	cbnz	r2, 8006bb6 <quorem+0xf2>
 8006bac:	3b04      	subs	r3, #4
 8006bae:	429d      	cmp	r5, r3
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	d30a      	bcc.n	8006bca <quorem+0x106>
 8006bb4:	613c      	str	r4, [r7, #16]
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	b003      	add	sp, #12
 8006bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bbe:	6812      	ldr	r2, [r2, #0]
 8006bc0:	3b04      	subs	r3, #4
 8006bc2:	2a00      	cmp	r2, #0
 8006bc4:	d1cc      	bne.n	8006b60 <quorem+0x9c>
 8006bc6:	3c01      	subs	r4, #1
 8006bc8:	e7c7      	b.n	8006b5a <quorem+0x96>
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	3b04      	subs	r3, #4
 8006bce:	2a00      	cmp	r2, #0
 8006bd0:	d1f0      	bne.n	8006bb4 <quorem+0xf0>
 8006bd2:	3c01      	subs	r4, #1
 8006bd4:	e7eb      	b.n	8006bae <quorem+0xea>
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	e7ee      	b.n	8006bb8 <quorem+0xf4>
 8006bda:	0000      	movs	r0, r0
 8006bdc:	0000      	movs	r0, r0
	...

08006be0 <_dtoa_r>:
 8006be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be4:	ed2d 8b04 	vpush	{d8-d9}
 8006be8:	ec57 6b10 	vmov	r6, r7, d0
 8006bec:	b093      	sub	sp, #76	; 0x4c
 8006bee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006bf0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006bf4:	9106      	str	r1, [sp, #24]
 8006bf6:	ee10 aa10 	vmov	sl, s0
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8006bfe:	930c      	str	r3, [sp, #48]	; 0x30
 8006c00:	46bb      	mov	fp, r7
 8006c02:	b975      	cbnz	r5, 8006c22 <_dtoa_r+0x42>
 8006c04:	2010      	movs	r0, #16
 8006c06:	f000 fddd 	bl	80077c4 <malloc>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	6260      	str	r0, [r4, #36]	; 0x24
 8006c0e:	b920      	cbnz	r0, 8006c1a <_dtoa_r+0x3a>
 8006c10:	4ba7      	ldr	r3, [pc, #668]	; (8006eb0 <_dtoa_r+0x2d0>)
 8006c12:	21ea      	movs	r1, #234	; 0xea
 8006c14:	48a7      	ldr	r0, [pc, #668]	; (8006eb4 <_dtoa_r+0x2d4>)
 8006c16:	f001 fbc3 	bl	80083a0 <__assert_func>
 8006c1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c1e:	6005      	str	r5, [r0, #0]
 8006c20:	60c5      	str	r5, [r0, #12]
 8006c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c24:	6819      	ldr	r1, [r3, #0]
 8006c26:	b151      	cbz	r1, 8006c3e <_dtoa_r+0x5e>
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	604a      	str	r2, [r1, #4]
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	4093      	lsls	r3, r2
 8006c30:	608b      	str	r3, [r1, #8]
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 fe0e 	bl	8007854 <_Bfree>
 8006c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	1e3b      	subs	r3, r7, #0
 8006c40:	bfaa      	itet	ge
 8006c42:	2300      	movge	r3, #0
 8006c44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006c48:	f8c8 3000 	strge.w	r3, [r8]
 8006c4c:	4b9a      	ldr	r3, [pc, #616]	; (8006eb8 <_dtoa_r+0x2d8>)
 8006c4e:	bfbc      	itt	lt
 8006c50:	2201      	movlt	r2, #1
 8006c52:	f8c8 2000 	strlt.w	r2, [r8]
 8006c56:	ea33 030b 	bics.w	r3, r3, fp
 8006c5a:	d11b      	bne.n	8006c94 <_dtoa_r+0xb4>
 8006c5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c62:	6013      	str	r3, [r2, #0]
 8006c64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c68:	4333      	orrs	r3, r6
 8006c6a:	f000 8592 	beq.w	8007792 <_dtoa_r+0xbb2>
 8006c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c70:	b963      	cbnz	r3, 8006c8c <_dtoa_r+0xac>
 8006c72:	4b92      	ldr	r3, [pc, #584]	; (8006ebc <_dtoa_r+0x2dc>)
 8006c74:	e022      	b.n	8006cbc <_dtoa_r+0xdc>
 8006c76:	4b92      	ldr	r3, [pc, #584]	; (8006ec0 <_dtoa_r+0x2e0>)
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	9801      	ldr	r0, [sp, #4]
 8006c82:	b013      	add	sp, #76	; 0x4c
 8006c84:	ecbd 8b04 	vpop	{d8-d9}
 8006c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8c:	4b8b      	ldr	r3, [pc, #556]	; (8006ebc <_dtoa_r+0x2dc>)
 8006c8e:	9301      	str	r3, [sp, #4]
 8006c90:	3303      	adds	r3, #3
 8006c92:	e7f3      	b.n	8006c7c <_dtoa_r+0x9c>
 8006c94:	2200      	movs	r2, #0
 8006c96:	2300      	movs	r3, #0
 8006c98:	4650      	mov	r0, sl
 8006c9a:	4659      	mov	r1, fp
 8006c9c:	f7f9 ff1c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ca0:	ec4b ab19 	vmov	d9, sl, fp
 8006ca4:	4680      	mov	r8, r0
 8006ca6:	b158      	cbz	r0, 8006cc0 <_dtoa_r+0xe0>
 8006ca8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006caa:	2301      	movs	r3, #1
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 856b 	beq.w	800778c <_dtoa_r+0xbac>
 8006cb6:	4883      	ldr	r0, [pc, #524]	; (8006ec4 <_dtoa_r+0x2e4>)
 8006cb8:	6018      	str	r0, [r3, #0]
 8006cba:	1e43      	subs	r3, r0, #1
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	e7df      	b.n	8006c80 <_dtoa_r+0xa0>
 8006cc0:	ec4b ab10 	vmov	d0, sl, fp
 8006cc4:	aa10      	add	r2, sp, #64	; 0x40
 8006cc6:	a911      	add	r1, sp, #68	; 0x44
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f001 f8ab 	bl	8007e24 <__d2b>
 8006cce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006cd2:	ee08 0a10 	vmov	s16, r0
 8006cd6:	2d00      	cmp	r5, #0
 8006cd8:	f000 8084 	beq.w	8006de4 <_dtoa_r+0x204>
 8006cdc:	ee19 3a90 	vmov	r3, s19
 8006ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ce4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006ce8:	4656      	mov	r6, sl
 8006cea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006cee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006cf2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006cf6:	4b74      	ldr	r3, [pc, #464]	; (8006ec8 <_dtoa_r+0x2e8>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	f7f9 facb 	bl	8000298 <__aeabi_dsub>
 8006d02:	a365      	add	r3, pc, #404	; (adr r3, 8006e98 <_dtoa_r+0x2b8>)
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	f7f9 fc7e 	bl	8000608 <__aeabi_dmul>
 8006d0c:	a364      	add	r3, pc, #400	; (adr r3, 8006ea0 <_dtoa_r+0x2c0>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f7f9 fac3 	bl	800029c <__adddf3>
 8006d16:	4606      	mov	r6, r0
 8006d18:	4628      	mov	r0, r5
 8006d1a:	460f      	mov	r7, r1
 8006d1c:	f7f9 fc0a 	bl	8000534 <__aeabi_i2d>
 8006d20:	a361      	add	r3, pc, #388	; (adr r3, 8006ea8 <_dtoa_r+0x2c8>)
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	f7f9 fc6f 	bl	8000608 <__aeabi_dmul>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4630      	mov	r0, r6
 8006d30:	4639      	mov	r1, r7
 8006d32:	f7f9 fab3 	bl	800029c <__adddf3>
 8006d36:	4606      	mov	r6, r0
 8006d38:	460f      	mov	r7, r1
 8006d3a:	f7f9 ff15 	bl	8000b68 <__aeabi_d2iz>
 8006d3e:	2200      	movs	r2, #0
 8006d40:	9000      	str	r0, [sp, #0]
 8006d42:	2300      	movs	r3, #0
 8006d44:	4630      	mov	r0, r6
 8006d46:	4639      	mov	r1, r7
 8006d48:	f7f9 fed0 	bl	8000aec <__aeabi_dcmplt>
 8006d4c:	b150      	cbz	r0, 8006d64 <_dtoa_r+0x184>
 8006d4e:	9800      	ldr	r0, [sp, #0]
 8006d50:	f7f9 fbf0 	bl	8000534 <__aeabi_i2d>
 8006d54:	4632      	mov	r2, r6
 8006d56:	463b      	mov	r3, r7
 8006d58:	f7f9 febe 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d5c:	b910      	cbnz	r0, 8006d64 <_dtoa_r+0x184>
 8006d5e:	9b00      	ldr	r3, [sp, #0]
 8006d60:	3b01      	subs	r3, #1
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	9b00      	ldr	r3, [sp, #0]
 8006d66:	2b16      	cmp	r3, #22
 8006d68:	d85a      	bhi.n	8006e20 <_dtoa_r+0x240>
 8006d6a:	9a00      	ldr	r2, [sp, #0]
 8006d6c:	4b57      	ldr	r3, [pc, #348]	; (8006ecc <_dtoa_r+0x2ec>)
 8006d6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	ec51 0b19 	vmov	r0, r1, d9
 8006d7a:	f7f9 feb7 	bl	8000aec <__aeabi_dcmplt>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	d050      	beq.n	8006e24 <_dtoa_r+0x244>
 8006d82:	9b00      	ldr	r3, [sp, #0]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d8e:	1b5d      	subs	r5, r3, r5
 8006d90:	1e6b      	subs	r3, r5, #1
 8006d92:	9305      	str	r3, [sp, #20]
 8006d94:	bf45      	ittet	mi
 8006d96:	f1c5 0301 	rsbmi	r3, r5, #1
 8006d9a:	9304      	strmi	r3, [sp, #16]
 8006d9c:	2300      	movpl	r3, #0
 8006d9e:	2300      	movmi	r3, #0
 8006da0:	bf4c      	ite	mi
 8006da2:	9305      	strmi	r3, [sp, #20]
 8006da4:	9304      	strpl	r3, [sp, #16]
 8006da6:	9b00      	ldr	r3, [sp, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	db3d      	blt.n	8006e28 <_dtoa_r+0x248>
 8006dac:	9b05      	ldr	r3, [sp, #20]
 8006dae:	9a00      	ldr	r2, [sp, #0]
 8006db0:	920a      	str	r2, [sp, #40]	; 0x28
 8006db2:	4413      	add	r3, r2
 8006db4:	9305      	str	r3, [sp, #20]
 8006db6:	2300      	movs	r3, #0
 8006db8:	9307      	str	r3, [sp, #28]
 8006dba:	9b06      	ldr	r3, [sp, #24]
 8006dbc:	2b09      	cmp	r3, #9
 8006dbe:	f200 8089 	bhi.w	8006ed4 <_dtoa_r+0x2f4>
 8006dc2:	2b05      	cmp	r3, #5
 8006dc4:	bfc4      	itt	gt
 8006dc6:	3b04      	subgt	r3, #4
 8006dc8:	9306      	strgt	r3, [sp, #24]
 8006dca:	9b06      	ldr	r3, [sp, #24]
 8006dcc:	f1a3 0302 	sub.w	r3, r3, #2
 8006dd0:	bfcc      	ite	gt
 8006dd2:	2500      	movgt	r5, #0
 8006dd4:	2501      	movle	r5, #1
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	f200 8087 	bhi.w	8006eea <_dtoa_r+0x30a>
 8006ddc:	e8df f003 	tbb	[pc, r3]
 8006de0:	59383a2d 	.word	0x59383a2d
 8006de4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006de8:	441d      	add	r5, r3
 8006dea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	bfc1      	itttt	gt
 8006df2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006df6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006dfa:	fa0b f303 	lslgt.w	r3, fp, r3
 8006dfe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006e02:	bfda      	itte	le
 8006e04:	f1c3 0320 	rsble	r3, r3, #32
 8006e08:	fa06 f003 	lslle.w	r0, r6, r3
 8006e0c:	4318      	orrgt	r0, r3
 8006e0e:	f7f9 fb81 	bl	8000514 <__aeabi_ui2d>
 8006e12:	2301      	movs	r3, #1
 8006e14:	4606      	mov	r6, r0
 8006e16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006e1a:	3d01      	subs	r5, #1
 8006e1c:	930e      	str	r3, [sp, #56]	; 0x38
 8006e1e:	e76a      	b.n	8006cf6 <_dtoa_r+0x116>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e7b2      	b.n	8006d8a <_dtoa_r+0x1aa>
 8006e24:	900b      	str	r0, [sp, #44]	; 0x2c
 8006e26:	e7b1      	b.n	8006d8c <_dtoa_r+0x1ac>
 8006e28:	9b04      	ldr	r3, [sp, #16]
 8006e2a:	9a00      	ldr	r2, [sp, #0]
 8006e2c:	1a9b      	subs	r3, r3, r2
 8006e2e:	9304      	str	r3, [sp, #16]
 8006e30:	4253      	negs	r3, r2
 8006e32:	9307      	str	r3, [sp, #28]
 8006e34:	2300      	movs	r3, #0
 8006e36:	930a      	str	r3, [sp, #40]	; 0x28
 8006e38:	e7bf      	b.n	8006dba <_dtoa_r+0x1da>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	9308      	str	r3, [sp, #32]
 8006e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	dc55      	bgt.n	8006ef0 <_dtoa_r+0x310>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e4e:	e00c      	b.n	8006e6a <_dtoa_r+0x28a>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e7f3      	b.n	8006e3c <_dtoa_r+0x25c>
 8006e54:	2300      	movs	r3, #0
 8006e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e58:	9308      	str	r3, [sp, #32]
 8006e5a:	9b00      	ldr	r3, [sp, #0]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	9302      	str	r3, [sp, #8]
 8006e60:	3301      	adds	r3, #1
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	9303      	str	r3, [sp, #12]
 8006e66:	bfb8      	it	lt
 8006e68:	2301      	movlt	r3, #1
 8006e6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	6042      	str	r2, [r0, #4]
 8006e70:	2204      	movs	r2, #4
 8006e72:	f102 0614 	add.w	r6, r2, #20
 8006e76:	429e      	cmp	r6, r3
 8006e78:	6841      	ldr	r1, [r0, #4]
 8006e7a:	d93d      	bls.n	8006ef8 <_dtoa_r+0x318>
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f000 fca9 	bl	80077d4 <_Balloc>
 8006e82:	9001      	str	r0, [sp, #4]
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d13b      	bne.n	8006f00 <_dtoa_r+0x320>
 8006e88:	4b11      	ldr	r3, [pc, #68]	; (8006ed0 <_dtoa_r+0x2f0>)
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e90:	e6c0      	b.n	8006c14 <_dtoa_r+0x34>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e7df      	b.n	8006e56 <_dtoa_r+0x276>
 8006e96:	bf00      	nop
 8006e98:	636f4361 	.word	0x636f4361
 8006e9c:	3fd287a7 	.word	0x3fd287a7
 8006ea0:	8b60c8b3 	.word	0x8b60c8b3
 8006ea4:	3fc68a28 	.word	0x3fc68a28
 8006ea8:	509f79fb 	.word	0x509f79fb
 8006eac:	3fd34413 	.word	0x3fd34413
 8006eb0:	08009755 	.word	0x08009755
 8006eb4:	0800976c 	.word	0x0800976c
 8006eb8:	7ff00000 	.word	0x7ff00000
 8006ebc:	08009751 	.word	0x08009751
 8006ec0:	08009748 	.word	0x08009748
 8006ec4:	08009725 	.word	0x08009725
 8006ec8:	3ff80000 	.word	0x3ff80000
 8006ecc:	08009860 	.word	0x08009860
 8006ed0:	080097c7 	.word	0x080097c7
 8006ed4:	2501      	movs	r5, #1
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9306      	str	r3, [sp, #24]
 8006eda:	9508      	str	r5, [sp, #32]
 8006edc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2312      	movs	r3, #18
 8006ee8:	e7b0      	b.n	8006e4c <_dtoa_r+0x26c>
 8006eea:	2301      	movs	r3, #1
 8006eec:	9308      	str	r3, [sp, #32]
 8006eee:	e7f5      	b.n	8006edc <_dtoa_r+0x2fc>
 8006ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006ef6:	e7b8      	b.n	8006e6a <_dtoa_r+0x28a>
 8006ef8:	3101      	adds	r1, #1
 8006efa:	6041      	str	r1, [r0, #4]
 8006efc:	0052      	lsls	r2, r2, #1
 8006efe:	e7b8      	b.n	8006e72 <_dtoa_r+0x292>
 8006f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f02:	9a01      	ldr	r2, [sp, #4]
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	9b03      	ldr	r3, [sp, #12]
 8006f08:	2b0e      	cmp	r3, #14
 8006f0a:	f200 809d 	bhi.w	8007048 <_dtoa_r+0x468>
 8006f0e:	2d00      	cmp	r5, #0
 8006f10:	f000 809a 	beq.w	8007048 <_dtoa_r+0x468>
 8006f14:	9b00      	ldr	r3, [sp, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	dd32      	ble.n	8006f80 <_dtoa_r+0x3a0>
 8006f1a:	4ab7      	ldr	r2, [pc, #732]	; (80071f8 <_dtoa_r+0x618>)
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f28:	9b00      	ldr	r3, [sp, #0]
 8006f2a:	05d8      	lsls	r0, r3, #23
 8006f2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006f30:	d516      	bpl.n	8006f60 <_dtoa_r+0x380>
 8006f32:	4bb2      	ldr	r3, [pc, #712]	; (80071fc <_dtoa_r+0x61c>)
 8006f34:	ec51 0b19 	vmov	r0, r1, d9
 8006f38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f3c:	f7f9 fc8e 	bl	800085c <__aeabi_ddiv>
 8006f40:	f007 070f 	and.w	r7, r7, #15
 8006f44:	4682      	mov	sl, r0
 8006f46:	468b      	mov	fp, r1
 8006f48:	2503      	movs	r5, #3
 8006f4a:	4eac      	ldr	r6, [pc, #688]	; (80071fc <_dtoa_r+0x61c>)
 8006f4c:	b957      	cbnz	r7, 8006f64 <_dtoa_r+0x384>
 8006f4e:	4642      	mov	r2, r8
 8006f50:	464b      	mov	r3, r9
 8006f52:	4650      	mov	r0, sl
 8006f54:	4659      	mov	r1, fp
 8006f56:	f7f9 fc81 	bl	800085c <__aeabi_ddiv>
 8006f5a:	4682      	mov	sl, r0
 8006f5c:	468b      	mov	fp, r1
 8006f5e:	e028      	b.n	8006fb2 <_dtoa_r+0x3d2>
 8006f60:	2502      	movs	r5, #2
 8006f62:	e7f2      	b.n	8006f4a <_dtoa_r+0x36a>
 8006f64:	07f9      	lsls	r1, r7, #31
 8006f66:	d508      	bpl.n	8006f7a <_dtoa_r+0x39a>
 8006f68:	4640      	mov	r0, r8
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f70:	f7f9 fb4a 	bl	8000608 <__aeabi_dmul>
 8006f74:	3501      	adds	r5, #1
 8006f76:	4680      	mov	r8, r0
 8006f78:	4689      	mov	r9, r1
 8006f7a:	107f      	asrs	r7, r7, #1
 8006f7c:	3608      	adds	r6, #8
 8006f7e:	e7e5      	b.n	8006f4c <_dtoa_r+0x36c>
 8006f80:	f000 809b 	beq.w	80070ba <_dtoa_r+0x4da>
 8006f84:	9b00      	ldr	r3, [sp, #0]
 8006f86:	4f9d      	ldr	r7, [pc, #628]	; (80071fc <_dtoa_r+0x61c>)
 8006f88:	425e      	negs	r6, r3
 8006f8a:	4b9b      	ldr	r3, [pc, #620]	; (80071f8 <_dtoa_r+0x618>)
 8006f8c:	f006 020f 	and.w	r2, r6, #15
 8006f90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	ec51 0b19 	vmov	r0, r1, d9
 8006f9c:	f7f9 fb34 	bl	8000608 <__aeabi_dmul>
 8006fa0:	1136      	asrs	r6, r6, #4
 8006fa2:	4682      	mov	sl, r0
 8006fa4:	468b      	mov	fp, r1
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2502      	movs	r5, #2
 8006faa:	2e00      	cmp	r6, #0
 8006fac:	d17a      	bne.n	80070a4 <_dtoa_r+0x4c4>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1d3      	bne.n	8006f5a <_dtoa_r+0x37a>
 8006fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 8082 	beq.w	80070be <_dtoa_r+0x4de>
 8006fba:	4b91      	ldr	r3, [pc, #580]	; (8007200 <_dtoa_r+0x620>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4650      	mov	r0, sl
 8006fc0:	4659      	mov	r1, fp
 8006fc2:	f7f9 fd93 	bl	8000aec <__aeabi_dcmplt>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d079      	beq.n	80070be <_dtoa_r+0x4de>
 8006fca:	9b03      	ldr	r3, [sp, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d076      	beq.n	80070be <_dtoa_r+0x4de>
 8006fd0:	9b02      	ldr	r3, [sp, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	dd36      	ble.n	8007044 <_dtoa_r+0x464>
 8006fd6:	9b00      	ldr	r3, [sp, #0]
 8006fd8:	4650      	mov	r0, sl
 8006fda:	4659      	mov	r1, fp
 8006fdc:	1e5f      	subs	r7, r3, #1
 8006fde:	2200      	movs	r2, #0
 8006fe0:	4b88      	ldr	r3, [pc, #544]	; (8007204 <_dtoa_r+0x624>)
 8006fe2:	f7f9 fb11 	bl	8000608 <__aeabi_dmul>
 8006fe6:	9e02      	ldr	r6, [sp, #8]
 8006fe8:	4682      	mov	sl, r0
 8006fea:	468b      	mov	fp, r1
 8006fec:	3501      	adds	r5, #1
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f7f9 faa0 	bl	8000534 <__aeabi_i2d>
 8006ff4:	4652      	mov	r2, sl
 8006ff6:	465b      	mov	r3, fp
 8006ff8:	f7f9 fb06 	bl	8000608 <__aeabi_dmul>
 8006ffc:	4b82      	ldr	r3, [pc, #520]	; (8007208 <_dtoa_r+0x628>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	f7f9 f94c 	bl	800029c <__adddf3>
 8007004:	46d0      	mov	r8, sl
 8007006:	46d9      	mov	r9, fp
 8007008:	4682      	mov	sl, r0
 800700a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800700e:	2e00      	cmp	r6, #0
 8007010:	d158      	bne.n	80070c4 <_dtoa_r+0x4e4>
 8007012:	4b7e      	ldr	r3, [pc, #504]	; (800720c <_dtoa_r+0x62c>)
 8007014:	2200      	movs	r2, #0
 8007016:	4640      	mov	r0, r8
 8007018:	4649      	mov	r1, r9
 800701a:	f7f9 f93d 	bl	8000298 <__aeabi_dsub>
 800701e:	4652      	mov	r2, sl
 8007020:	465b      	mov	r3, fp
 8007022:	4680      	mov	r8, r0
 8007024:	4689      	mov	r9, r1
 8007026:	f7f9 fd7f 	bl	8000b28 <__aeabi_dcmpgt>
 800702a:	2800      	cmp	r0, #0
 800702c:	f040 8295 	bne.w	800755a <_dtoa_r+0x97a>
 8007030:	4652      	mov	r2, sl
 8007032:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007036:	4640      	mov	r0, r8
 8007038:	4649      	mov	r1, r9
 800703a:	f7f9 fd57 	bl	8000aec <__aeabi_dcmplt>
 800703e:	2800      	cmp	r0, #0
 8007040:	f040 8289 	bne.w	8007556 <_dtoa_r+0x976>
 8007044:	ec5b ab19 	vmov	sl, fp, d9
 8007048:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800704a:	2b00      	cmp	r3, #0
 800704c:	f2c0 8148 	blt.w	80072e0 <_dtoa_r+0x700>
 8007050:	9a00      	ldr	r2, [sp, #0]
 8007052:	2a0e      	cmp	r2, #14
 8007054:	f300 8144 	bgt.w	80072e0 <_dtoa_r+0x700>
 8007058:	4b67      	ldr	r3, [pc, #412]	; (80071f8 <_dtoa_r+0x618>)
 800705a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800705e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007064:	2b00      	cmp	r3, #0
 8007066:	f280 80d5 	bge.w	8007214 <_dtoa_r+0x634>
 800706a:	9b03      	ldr	r3, [sp, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	f300 80d1 	bgt.w	8007214 <_dtoa_r+0x634>
 8007072:	f040 826f 	bne.w	8007554 <_dtoa_r+0x974>
 8007076:	4b65      	ldr	r3, [pc, #404]	; (800720c <_dtoa_r+0x62c>)
 8007078:	2200      	movs	r2, #0
 800707a:	4640      	mov	r0, r8
 800707c:	4649      	mov	r1, r9
 800707e:	f7f9 fac3 	bl	8000608 <__aeabi_dmul>
 8007082:	4652      	mov	r2, sl
 8007084:	465b      	mov	r3, fp
 8007086:	f7f9 fd45 	bl	8000b14 <__aeabi_dcmpge>
 800708a:	9e03      	ldr	r6, [sp, #12]
 800708c:	4637      	mov	r7, r6
 800708e:	2800      	cmp	r0, #0
 8007090:	f040 8245 	bne.w	800751e <_dtoa_r+0x93e>
 8007094:	9d01      	ldr	r5, [sp, #4]
 8007096:	2331      	movs	r3, #49	; 0x31
 8007098:	f805 3b01 	strb.w	r3, [r5], #1
 800709c:	9b00      	ldr	r3, [sp, #0]
 800709e:	3301      	adds	r3, #1
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	e240      	b.n	8007526 <_dtoa_r+0x946>
 80070a4:	07f2      	lsls	r2, r6, #31
 80070a6:	d505      	bpl.n	80070b4 <_dtoa_r+0x4d4>
 80070a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ac:	f7f9 faac 	bl	8000608 <__aeabi_dmul>
 80070b0:	3501      	adds	r5, #1
 80070b2:	2301      	movs	r3, #1
 80070b4:	1076      	asrs	r6, r6, #1
 80070b6:	3708      	adds	r7, #8
 80070b8:	e777      	b.n	8006faa <_dtoa_r+0x3ca>
 80070ba:	2502      	movs	r5, #2
 80070bc:	e779      	b.n	8006fb2 <_dtoa_r+0x3d2>
 80070be:	9f00      	ldr	r7, [sp, #0]
 80070c0:	9e03      	ldr	r6, [sp, #12]
 80070c2:	e794      	b.n	8006fee <_dtoa_r+0x40e>
 80070c4:	9901      	ldr	r1, [sp, #4]
 80070c6:	4b4c      	ldr	r3, [pc, #304]	; (80071f8 <_dtoa_r+0x618>)
 80070c8:	4431      	add	r1, r6
 80070ca:	910d      	str	r1, [sp, #52]	; 0x34
 80070cc:	9908      	ldr	r1, [sp, #32]
 80070ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80070d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070d6:	2900      	cmp	r1, #0
 80070d8:	d043      	beq.n	8007162 <_dtoa_r+0x582>
 80070da:	494d      	ldr	r1, [pc, #308]	; (8007210 <_dtoa_r+0x630>)
 80070dc:	2000      	movs	r0, #0
 80070de:	f7f9 fbbd 	bl	800085c <__aeabi_ddiv>
 80070e2:	4652      	mov	r2, sl
 80070e4:	465b      	mov	r3, fp
 80070e6:	f7f9 f8d7 	bl	8000298 <__aeabi_dsub>
 80070ea:	9d01      	ldr	r5, [sp, #4]
 80070ec:	4682      	mov	sl, r0
 80070ee:	468b      	mov	fp, r1
 80070f0:	4649      	mov	r1, r9
 80070f2:	4640      	mov	r0, r8
 80070f4:	f7f9 fd38 	bl	8000b68 <__aeabi_d2iz>
 80070f8:	4606      	mov	r6, r0
 80070fa:	f7f9 fa1b 	bl	8000534 <__aeabi_i2d>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4640      	mov	r0, r8
 8007104:	4649      	mov	r1, r9
 8007106:	f7f9 f8c7 	bl	8000298 <__aeabi_dsub>
 800710a:	3630      	adds	r6, #48	; 0x30
 800710c:	f805 6b01 	strb.w	r6, [r5], #1
 8007110:	4652      	mov	r2, sl
 8007112:	465b      	mov	r3, fp
 8007114:	4680      	mov	r8, r0
 8007116:	4689      	mov	r9, r1
 8007118:	f7f9 fce8 	bl	8000aec <__aeabi_dcmplt>
 800711c:	2800      	cmp	r0, #0
 800711e:	d163      	bne.n	80071e8 <_dtoa_r+0x608>
 8007120:	4642      	mov	r2, r8
 8007122:	464b      	mov	r3, r9
 8007124:	4936      	ldr	r1, [pc, #216]	; (8007200 <_dtoa_r+0x620>)
 8007126:	2000      	movs	r0, #0
 8007128:	f7f9 f8b6 	bl	8000298 <__aeabi_dsub>
 800712c:	4652      	mov	r2, sl
 800712e:	465b      	mov	r3, fp
 8007130:	f7f9 fcdc 	bl	8000aec <__aeabi_dcmplt>
 8007134:	2800      	cmp	r0, #0
 8007136:	f040 80b5 	bne.w	80072a4 <_dtoa_r+0x6c4>
 800713a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800713c:	429d      	cmp	r5, r3
 800713e:	d081      	beq.n	8007044 <_dtoa_r+0x464>
 8007140:	4b30      	ldr	r3, [pc, #192]	; (8007204 <_dtoa_r+0x624>)
 8007142:	2200      	movs	r2, #0
 8007144:	4650      	mov	r0, sl
 8007146:	4659      	mov	r1, fp
 8007148:	f7f9 fa5e 	bl	8000608 <__aeabi_dmul>
 800714c:	4b2d      	ldr	r3, [pc, #180]	; (8007204 <_dtoa_r+0x624>)
 800714e:	4682      	mov	sl, r0
 8007150:	468b      	mov	fp, r1
 8007152:	4640      	mov	r0, r8
 8007154:	4649      	mov	r1, r9
 8007156:	2200      	movs	r2, #0
 8007158:	f7f9 fa56 	bl	8000608 <__aeabi_dmul>
 800715c:	4680      	mov	r8, r0
 800715e:	4689      	mov	r9, r1
 8007160:	e7c6      	b.n	80070f0 <_dtoa_r+0x510>
 8007162:	4650      	mov	r0, sl
 8007164:	4659      	mov	r1, fp
 8007166:	f7f9 fa4f 	bl	8000608 <__aeabi_dmul>
 800716a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800716c:	9d01      	ldr	r5, [sp, #4]
 800716e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007170:	4682      	mov	sl, r0
 8007172:	468b      	mov	fp, r1
 8007174:	4649      	mov	r1, r9
 8007176:	4640      	mov	r0, r8
 8007178:	f7f9 fcf6 	bl	8000b68 <__aeabi_d2iz>
 800717c:	4606      	mov	r6, r0
 800717e:	f7f9 f9d9 	bl	8000534 <__aeabi_i2d>
 8007182:	3630      	adds	r6, #48	; 0x30
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4640      	mov	r0, r8
 800718a:	4649      	mov	r1, r9
 800718c:	f7f9 f884 	bl	8000298 <__aeabi_dsub>
 8007190:	f805 6b01 	strb.w	r6, [r5], #1
 8007194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007196:	429d      	cmp	r5, r3
 8007198:	4680      	mov	r8, r0
 800719a:	4689      	mov	r9, r1
 800719c:	f04f 0200 	mov.w	r2, #0
 80071a0:	d124      	bne.n	80071ec <_dtoa_r+0x60c>
 80071a2:	4b1b      	ldr	r3, [pc, #108]	; (8007210 <_dtoa_r+0x630>)
 80071a4:	4650      	mov	r0, sl
 80071a6:	4659      	mov	r1, fp
 80071a8:	f7f9 f878 	bl	800029c <__adddf3>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4640      	mov	r0, r8
 80071b2:	4649      	mov	r1, r9
 80071b4:	f7f9 fcb8 	bl	8000b28 <__aeabi_dcmpgt>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d173      	bne.n	80072a4 <_dtoa_r+0x6c4>
 80071bc:	4652      	mov	r2, sl
 80071be:	465b      	mov	r3, fp
 80071c0:	4913      	ldr	r1, [pc, #76]	; (8007210 <_dtoa_r+0x630>)
 80071c2:	2000      	movs	r0, #0
 80071c4:	f7f9 f868 	bl	8000298 <__aeabi_dsub>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4640      	mov	r0, r8
 80071ce:	4649      	mov	r1, r9
 80071d0:	f7f9 fc8c 	bl	8000aec <__aeabi_dcmplt>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	f43f af35 	beq.w	8007044 <_dtoa_r+0x464>
 80071da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80071dc:	1e6b      	subs	r3, r5, #1
 80071de:	930f      	str	r3, [sp, #60]	; 0x3c
 80071e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071e4:	2b30      	cmp	r3, #48	; 0x30
 80071e6:	d0f8      	beq.n	80071da <_dtoa_r+0x5fa>
 80071e8:	9700      	str	r7, [sp, #0]
 80071ea:	e049      	b.n	8007280 <_dtoa_r+0x6a0>
 80071ec:	4b05      	ldr	r3, [pc, #20]	; (8007204 <_dtoa_r+0x624>)
 80071ee:	f7f9 fa0b 	bl	8000608 <__aeabi_dmul>
 80071f2:	4680      	mov	r8, r0
 80071f4:	4689      	mov	r9, r1
 80071f6:	e7bd      	b.n	8007174 <_dtoa_r+0x594>
 80071f8:	08009860 	.word	0x08009860
 80071fc:	08009838 	.word	0x08009838
 8007200:	3ff00000 	.word	0x3ff00000
 8007204:	40240000 	.word	0x40240000
 8007208:	401c0000 	.word	0x401c0000
 800720c:	40140000 	.word	0x40140000
 8007210:	3fe00000 	.word	0x3fe00000
 8007214:	9d01      	ldr	r5, [sp, #4]
 8007216:	4656      	mov	r6, sl
 8007218:	465f      	mov	r7, fp
 800721a:	4642      	mov	r2, r8
 800721c:	464b      	mov	r3, r9
 800721e:	4630      	mov	r0, r6
 8007220:	4639      	mov	r1, r7
 8007222:	f7f9 fb1b 	bl	800085c <__aeabi_ddiv>
 8007226:	f7f9 fc9f 	bl	8000b68 <__aeabi_d2iz>
 800722a:	4682      	mov	sl, r0
 800722c:	f7f9 f982 	bl	8000534 <__aeabi_i2d>
 8007230:	4642      	mov	r2, r8
 8007232:	464b      	mov	r3, r9
 8007234:	f7f9 f9e8 	bl	8000608 <__aeabi_dmul>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4630      	mov	r0, r6
 800723e:	4639      	mov	r1, r7
 8007240:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007244:	f7f9 f828 	bl	8000298 <__aeabi_dsub>
 8007248:	f805 6b01 	strb.w	r6, [r5], #1
 800724c:	9e01      	ldr	r6, [sp, #4]
 800724e:	9f03      	ldr	r7, [sp, #12]
 8007250:	1bae      	subs	r6, r5, r6
 8007252:	42b7      	cmp	r7, r6
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	d135      	bne.n	80072c6 <_dtoa_r+0x6e6>
 800725a:	f7f9 f81f 	bl	800029c <__adddf3>
 800725e:	4642      	mov	r2, r8
 8007260:	464b      	mov	r3, r9
 8007262:	4606      	mov	r6, r0
 8007264:	460f      	mov	r7, r1
 8007266:	f7f9 fc5f 	bl	8000b28 <__aeabi_dcmpgt>
 800726a:	b9d0      	cbnz	r0, 80072a2 <_dtoa_r+0x6c2>
 800726c:	4642      	mov	r2, r8
 800726e:	464b      	mov	r3, r9
 8007270:	4630      	mov	r0, r6
 8007272:	4639      	mov	r1, r7
 8007274:	f7f9 fc30 	bl	8000ad8 <__aeabi_dcmpeq>
 8007278:	b110      	cbz	r0, 8007280 <_dtoa_r+0x6a0>
 800727a:	f01a 0f01 	tst.w	sl, #1
 800727e:	d110      	bne.n	80072a2 <_dtoa_r+0x6c2>
 8007280:	4620      	mov	r0, r4
 8007282:	ee18 1a10 	vmov	r1, s16
 8007286:	f000 fae5 	bl	8007854 <_Bfree>
 800728a:	2300      	movs	r3, #0
 800728c:	9800      	ldr	r0, [sp, #0]
 800728e:	702b      	strb	r3, [r5, #0]
 8007290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007292:	3001      	adds	r0, #1
 8007294:	6018      	str	r0, [r3, #0]
 8007296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007298:	2b00      	cmp	r3, #0
 800729a:	f43f acf1 	beq.w	8006c80 <_dtoa_r+0xa0>
 800729e:	601d      	str	r5, [r3, #0]
 80072a0:	e4ee      	b.n	8006c80 <_dtoa_r+0xa0>
 80072a2:	9f00      	ldr	r7, [sp, #0]
 80072a4:	462b      	mov	r3, r5
 80072a6:	461d      	mov	r5, r3
 80072a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072ac:	2a39      	cmp	r2, #57	; 0x39
 80072ae:	d106      	bne.n	80072be <_dtoa_r+0x6de>
 80072b0:	9a01      	ldr	r2, [sp, #4]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d1f7      	bne.n	80072a6 <_dtoa_r+0x6c6>
 80072b6:	9901      	ldr	r1, [sp, #4]
 80072b8:	2230      	movs	r2, #48	; 0x30
 80072ba:	3701      	adds	r7, #1
 80072bc:	700a      	strb	r2, [r1, #0]
 80072be:	781a      	ldrb	r2, [r3, #0]
 80072c0:	3201      	adds	r2, #1
 80072c2:	701a      	strb	r2, [r3, #0]
 80072c4:	e790      	b.n	80071e8 <_dtoa_r+0x608>
 80072c6:	4ba6      	ldr	r3, [pc, #664]	; (8007560 <_dtoa_r+0x980>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	f7f9 f99d 	bl	8000608 <__aeabi_dmul>
 80072ce:	2200      	movs	r2, #0
 80072d0:	2300      	movs	r3, #0
 80072d2:	4606      	mov	r6, r0
 80072d4:	460f      	mov	r7, r1
 80072d6:	f7f9 fbff 	bl	8000ad8 <__aeabi_dcmpeq>
 80072da:	2800      	cmp	r0, #0
 80072dc:	d09d      	beq.n	800721a <_dtoa_r+0x63a>
 80072de:	e7cf      	b.n	8007280 <_dtoa_r+0x6a0>
 80072e0:	9a08      	ldr	r2, [sp, #32]
 80072e2:	2a00      	cmp	r2, #0
 80072e4:	f000 80d7 	beq.w	8007496 <_dtoa_r+0x8b6>
 80072e8:	9a06      	ldr	r2, [sp, #24]
 80072ea:	2a01      	cmp	r2, #1
 80072ec:	f300 80ba 	bgt.w	8007464 <_dtoa_r+0x884>
 80072f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072f2:	2a00      	cmp	r2, #0
 80072f4:	f000 80b2 	beq.w	800745c <_dtoa_r+0x87c>
 80072f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072fc:	9e07      	ldr	r6, [sp, #28]
 80072fe:	9d04      	ldr	r5, [sp, #16]
 8007300:	9a04      	ldr	r2, [sp, #16]
 8007302:	441a      	add	r2, r3
 8007304:	9204      	str	r2, [sp, #16]
 8007306:	9a05      	ldr	r2, [sp, #20]
 8007308:	2101      	movs	r1, #1
 800730a:	441a      	add	r2, r3
 800730c:	4620      	mov	r0, r4
 800730e:	9205      	str	r2, [sp, #20]
 8007310:	f000 fb58 	bl	80079c4 <__i2b>
 8007314:	4607      	mov	r7, r0
 8007316:	2d00      	cmp	r5, #0
 8007318:	dd0c      	ble.n	8007334 <_dtoa_r+0x754>
 800731a:	9b05      	ldr	r3, [sp, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	dd09      	ble.n	8007334 <_dtoa_r+0x754>
 8007320:	42ab      	cmp	r3, r5
 8007322:	9a04      	ldr	r2, [sp, #16]
 8007324:	bfa8      	it	ge
 8007326:	462b      	movge	r3, r5
 8007328:	1ad2      	subs	r2, r2, r3
 800732a:	9204      	str	r2, [sp, #16]
 800732c:	9a05      	ldr	r2, [sp, #20]
 800732e:	1aed      	subs	r5, r5, r3
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	9305      	str	r3, [sp, #20]
 8007334:	9b07      	ldr	r3, [sp, #28]
 8007336:	b31b      	cbz	r3, 8007380 <_dtoa_r+0x7a0>
 8007338:	9b08      	ldr	r3, [sp, #32]
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 80af 	beq.w	800749e <_dtoa_r+0x8be>
 8007340:	2e00      	cmp	r6, #0
 8007342:	dd13      	ble.n	800736c <_dtoa_r+0x78c>
 8007344:	4639      	mov	r1, r7
 8007346:	4632      	mov	r2, r6
 8007348:	4620      	mov	r0, r4
 800734a:	f000 fbfb 	bl	8007b44 <__pow5mult>
 800734e:	ee18 2a10 	vmov	r2, s16
 8007352:	4601      	mov	r1, r0
 8007354:	4607      	mov	r7, r0
 8007356:	4620      	mov	r0, r4
 8007358:	f000 fb4a 	bl	80079f0 <__multiply>
 800735c:	ee18 1a10 	vmov	r1, s16
 8007360:	4680      	mov	r8, r0
 8007362:	4620      	mov	r0, r4
 8007364:	f000 fa76 	bl	8007854 <_Bfree>
 8007368:	ee08 8a10 	vmov	s16, r8
 800736c:	9b07      	ldr	r3, [sp, #28]
 800736e:	1b9a      	subs	r2, r3, r6
 8007370:	d006      	beq.n	8007380 <_dtoa_r+0x7a0>
 8007372:	ee18 1a10 	vmov	r1, s16
 8007376:	4620      	mov	r0, r4
 8007378:	f000 fbe4 	bl	8007b44 <__pow5mult>
 800737c:	ee08 0a10 	vmov	s16, r0
 8007380:	2101      	movs	r1, #1
 8007382:	4620      	mov	r0, r4
 8007384:	f000 fb1e 	bl	80079c4 <__i2b>
 8007388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738a:	2b00      	cmp	r3, #0
 800738c:	4606      	mov	r6, r0
 800738e:	f340 8088 	ble.w	80074a2 <_dtoa_r+0x8c2>
 8007392:	461a      	mov	r2, r3
 8007394:	4601      	mov	r1, r0
 8007396:	4620      	mov	r0, r4
 8007398:	f000 fbd4 	bl	8007b44 <__pow5mult>
 800739c:	9b06      	ldr	r3, [sp, #24]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	4606      	mov	r6, r0
 80073a2:	f340 8081 	ble.w	80074a8 <_dtoa_r+0x8c8>
 80073a6:	f04f 0800 	mov.w	r8, #0
 80073aa:	6933      	ldr	r3, [r6, #16]
 80073ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80073b0:	6918      	ldr	r0, [r3, #16]
 80073b2:	f000 fab7 	bl	8007924 <__hi0bits>
 80073b6:	f1c0 0020 	rsb	r0, r0, #32
 80073ba:	9b05      	ldr	r3, [sp, #20]
 80073bc:	4418      	add	r0, r3
 80073be:	f010 001f 	ands.w	r0, r0, #31
 80073c2:	f000 8092 	beq.w	80074ea <_dtoa_r+0x90a>
 80073c6:	f1c0 0320 	rsb	r3, r0, #32
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	f340 808a 	ble.w	80074e4 <_dtoa_r+0x904>
 80073d0:	f1c0 001c 	rsb	r0, r0, #28
 80073d4:	9b04      	ldr	r3, [sp, #16]
 80073d6:	4403      	add	r3, r0
 80073d8:	9304      	str	r3, [sp, #16]
 80073da:	9b05      	ldr	r3, [sp, #20]
 80073dc:	4403      	add	r3, r0
 80073de:	4405      	add	r5, r0
 80073e0:	9305      	str	r3, [sp, #20]
 80073e2:	9b04      	ldr	r3, [sp, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dd07      	ble.n	80073f8 <_dtoa_r+0x818>
 80073e8:	ee18 1a10 	vmov	r1, s16
 80073ec:	461a      	mov	r2, r3
 80073ee:	4620      	mov	r0, r4
 80073f0:	f000 fc02 	bl	8007bf8 <__lshift>
 80073f4:	ee08 0a10 	vmov	s16, r0
 80073f8:	9b05      	ldr	r3, [sp, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	dd05      	ble.n	800740a <_dtoa_r+0x82a>
 80073fe:	4631      	mov	r1, r6
 8007400:	461a      	mov	r2, r3
 8007402:	4620      	mov	r0, r4
 8007404:	f000 fbf8 	bl	8007bf8 <__lshift>
 8007408:	4606      	mov	r6, r0
 800740a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800740c:	2b00      	cmp	r3, #0
 800740e:	d06e      	beq.n	80074ee <_dtoa_r+0x90e>
 8007410:	ee18 0a10 	vmov	r0, s16
 8007414:	4631      	mov	r1, r6
 8007416:	f000 fc5f 	bl	8007cd8 <__mcmp>
 800741a:	2800      	cmp	r0, #0
 800741c:	da67      	bge.n	80074ee <_dtoa_r+0x90e>
 800741e:	9b00      	ldr	r3, [sp, #0]
 8007420:	3b01      	subs	r3, #1
 8007422:	ee18 1a10 	vmov	r1, s16
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	220a      	movs	r2, #10
 800742a:	2300      	movs	r3, #0
 800742c:	4620      	mov	r0, r4
 800742e:	f000 fa33 	bl	8007898 <__multadd>
 8007432:	9b08      	ldr	r3, [sp, #32]
 8007434:	ee08 0a10 	vmov	s16, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 81b1 	beq.w	80077a0 <_dtoa_r+0xbc0>
 800743e:	2300      	movs	r3, #0
 8007440:	4639      	mov	r1, r7
 8007442:	220a      	movs	r2, #10
 8007444:	4620      	mov	r0, r4
 8007446:	f000 fa27 	bl	8007898 <__multadd>
 800744a:	9b02      	ldr	r3, [sp, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	4607      	mov	r7, r0
 8007450:	f300 808e 	bgt.w	8007570 <_dtoa_r+0x990>
 8007454:	9b06      	ldr	r3, [sp, #24]
 8007456:	2b02      	cmp	r3, #2
 8007458:	dc51      	bgt.n	80074fe <_dtoa_r+0x91e>
 800745a:	e089      	b.n	8007570 <_dtoa_r+0x990>
 800745c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800745e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007462:	e74b      	b.n	80072fc <_dtoa_r+0x71c>
 8007464:	9b03      	ldr	r3, [sp, #12]
 8007466:	1e5e      	subs	r6, r3, #1
 8007468:	9b07      	ldr	r3, [sp, #28]
 800746a:	42b3      	cmp	r3, r6
 800746c:	bfbf      	itttt	lt
 800746e:	9b07      	ldrlt	r3, [sp, #28]
 8007470:	9607      	strlt	r6, [sp, #28]
 8007472:	1af2      	sublt	r2, r6, r3
 8007474:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007476:	bfb6      	itet	lt
 8007478:	189b      	addlt	r3, r3, r2
 800747a:	1b9e      	subge	r6, r3, r6
 800747c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	bfb8      	it	lt
 8007482:	2600      	movlt	r6, #0
 8007484:	2b00      	cmp	r3, #0
 8007486:	bfb7      	itett	lt
 8007488:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800748c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007490:	1a9d      	sublt	r5, r3, r2
 8007492:	2300      	movlt	r3, #0
 8007494:	e734      	b.n	8007300 <_dtoa_r+0x720>
 8007496:	9e07      	ldr	r6, [sp, #28]
 8007498:	9d04      	ldr	r5, [sp, #16]
 800749a:	9f08      	ldr	r7, [sp, #32]
 800749c:	e73b      	b.n	8007316 <_dtoa_r+0x736>
 800749e:	9a07      	ldr	r2, [sp, #28]
 80074a0:	e767      	b.n	8007372 <_dtoa_r+0x792>
 80074a2:	9b06      	ldr	r3, [sp, #24]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	dc18      	bgt.n	80074da <_dtoa_r+0x8fa>
 80074a8:	f1ba 0f00 	cmp.w	sl, #0
 80074ac:	d115      	bne.n	80074da <_dtoa_r+0x8fa>
 80074ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074b2:	b993      	cbnz	r3, 80074da <_dtoa_r+0x8fa>
 80074b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074b8:	0d1b      	lsrs	r3, r3, #20
 80074ba:	051b      	lsls	r3, r3, #20
 80074bc:	b183      	cbz	r3, 80074e0 <_dtoa_r+0x900>
 80074be:	9b04      	ldr	r3, [sp, #16]
 80074c0:	3301      	adds	r3, #1
 80074c2:	9304      	str	r3, [sp, #16]
 80074c4:	9b05      	ldr	r3, [sp, #20]
 80074c6:	3301      	adds	r3, #1
 80074c8:	9305      	str	r3, [sp, #20]
 80074ca:	f04f 0801 	mov.w	r8, #1
 80074ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f47f af6a 	bne.w	80073aa <_dtoa_r+0x7ca>
 80074d6:	2001      	movs	r0, #1
 80074d8:	e76f      	b.n	80073ba <_dtoa_r+0x7da>
 80074da:	f04f 0800 	mov.w	r8, #0
 80074de:	e7f6      	b.n	80074ce <_dtoa_r+0x8ee>
 80074e0:	4698      	mov	r8, r3
 80074e2:	e7f4      	b.n	80074ce <_dtoa_r+0x8ee>
 80074e4:	f43f af7d 	beq.w	80073e2 <_dtoa_r+0x802>
 80074e8:	4618      	mov	r0, r3
 80074ea:	301c      	adds	r0, #28
 80074ec:	e772      	b.n	80073d4 <_dtoa_r+0x7f4>
 80074ee:	9b03      	ldr	r3, [sp, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	dc37      	bgt.n	8007564 <_dtoa_r+0x984>
 80074f4:	9b06      	ldr	r3, [sp, #24]
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	dd34      	ble.n	8007564 <_dtoa_r+0x984>
 80074fa:	9b03      	ldr	r3, [sp, #12]
 80074fc:	9302      	str	r3, [sp, #8]
 80074fe:	9b02      	ldr	r3, [sp, #8]
 8007500:	b96b      	cbnz	r3, 800751e <_dtoa_r+0x93e>
 8007502:	4631      	mov	r1, r6
 8007504:	2205      	movs	r2, #5
 8007506:	4620      	mov	r0, r4
 8007508:	f000 f9c6 	bl	8007898 <__multadd>
 800750c:	4601      	mov	r1, r0
 800750e:	4606      	mov	r6, r0
 8007510:	ee18 0a10 	vmov	r0, s16
 8007514:	f000 fbe0 	bl	8007cd8 <__mcmp>
 8007518:	2800      	cmp	r0, #0
 800751a:	f73f adbb 	bgt.w	8007094 <_dtoa_r+0x4b4>
 800751e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007520:	9d01      	ldr	r5, [sp, #4]
 8007522:	43db      	mvns	r3, r3
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	f04f 0800 	mov.w	r8, #0
 800752a:	4631      	mov	r1, r6
 800752c:	4620      	mov	r0, r4
 800752e:	f000 f991 	bl	8007854 <_Bfree>
 8007532:	2f00      	cmp	r7, #0
 8007534:	f43f aea4 	beq.w	8007280 <_dtoa_r+0x6a0>
 8007538:	f1b8 0f00 	cmp.w	r8, #0
 800753c:	d005      	beq.n	800754a <_dtoa_r+0x96a>
 800753e:	45b8      	cmp	r8, r7
 8007540:	d003      	beq.n	800754a <_dtoa_r+0x96a>
 8007542:	4641      	mov	r1, r8
 8007544:	4620      	mov	r0, r4
 8007546:	f000 f985 	bl	8007854 <_Bfree>
 800754a:	4639      	mov	r1, r7
 800754c:	4620      	mov	r0, r4
 800754e:	f000 f981 	bl	8007854 <_Bfree>
 8007552:	e695      	b.n	8007280 <_dtoa_r+0x6a0>
 8007554:	2600      	movs	r6, #0
 8007556:	4637      	mov	r7, r6
 8007558:	e7e1      	b.n	800751e <_dtoa_r+0x93e>
 800755a:	9700      	str	r7, [sp, #0]
 800755c:	4637      	mov	r7, r6
 800755e:	e599      	b.n	8007094 <_dtoa_r+0x4b4>
 8007560:	40240000 	.word	0x40240000
 8007564:	9b08      	ldr	r3, [sp, #32]
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 80ca 	beq.w	8007700 <_dtoa_r+0xb20>
 800756c:	9b03      	ldr	r3, [sp, #12]
 800756e:	9302      	str	r3, [sp, #8]
 8007570:	2d00      	cmp	r5, #0
 8007572:	dd05      	ble.n	8007580 <_dtoa_r+0x9a0>
 8007574:	4639      	mov	r1, r7
 8007576:	462a      	mov	r2, r5
 8007578:	4620      	mov	r0, r4
 800757a:	f000 fb3d 	bl	8007bf8 <__lshift>
 800757e:	4607      	mov	r7, r0
 8007580:	f1b8 0f00 	cmp.w	r8, #0
 8007584:	d05b      	beq.n	800763e <_dtoa_r+0xa5e>
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	4620      	mov	r0, r4
 800758a:	f000 f923 	bl	80077d4 <_Balloc>
 800758e:	4605      	mov	r5, r0
 8007590:	b928      	cbnz	r0, 800759e <_dtoa_r+0x9be>
 8007592:	4b87      	ldr	r3, [pc, #540]	; (80077b0 <_dtoa_r+0xbd0>)
 8007594:	4602      	mov	r2, r0
 8007596:	f240 21ea 	movw	r1, #746	; 0x2ea
 800759a:	f7ff bb3b 	b.w	8006c14 <_dtoa_r+0x34>
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	3202      	adds	r2, #2
 80075a2:	0092      	lsls	r2, r2, #2
 80075a4:	f107 010c 	add.w	r1, r7, #12
 80075a8:	300c      	adds	r0, #12
 80075aa:	f7fe fdbd 	bl	8006128 <memcpy>
 80075ae:	2201      	movs	r2, #1
 80075b0:	4629      	mov	r1, r5
 80075b2:	4620      	mov	r0, r4
 80075b4:	f000 fb20 	bl	8007bf8 <__lshift>
 80075b8:	9b01      	ldr	r3, [sp, #4]
 80075ba:	f103 0901 	add.w	r9, r3, #1
 80075be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80075c2:	4413      	add	r3, r2
 80075c4:	9305      	str	r3, [sp, #20]
 80075c6:	f00a 0301 	and.w	r3, sl, #1
 80075ca:	46b8      	mov	r8, r7
 80075cc:	9304      	str	r3, [sp, #16]
 80075ce:	4607      	mov	r7, r0
 80075d0:	4631      	mov	r1, r6
 80075d2:	ee18 0a10 	vmov	r0, s16
 80075d6:	f7ff fa75 	bl	8006ac4 <quorem>
 80075da:	4641      	mov	r1, r8
 80075dc:	9002      	str	r0, [sp, #8]
 80075de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80075e2:	ee18 0a10 	vmov	r0, s16
 80075e6:	f000 fb77 	bl	8007cd8 <__mcmp>
 80075ea:	463a      	mov	r2, r7
 80075ec:	9003      	str	r0, [sp, #12]
 80075ee:	4631      	mov	r1, r6
 80075f0:	4620      	mov	r0, r4
 80075f2:	f000 fb8d 	bl	8007d10 <__mdiff>
 80075f6:	68c2      	ldr	r2, [r0, #12]
 80075f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80075fc:	4605      	mov	r5, r0
 80075fe:	bb02      	cbnz	r2, 8007642 <_dtoa_r+0xa62>
 8007600:	4601      	mov	r1, r0
 8007602:	ee18 0a10 	vmov	r0, s16
 8007606:	f000 fb67 	bl	8007cd8 <__mcmp>
 800760a:	4602      	mov	r2, r0
 800760c:	4629      	mov	r1, r5
 800760e:	4620      	mov	r0, r4
 8007610:	9207      	str	r2, [sp, #28]
 8007612:	f000 f91f 	bl	8007854 <_Bfree>
 8007616:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800761a:	ea43 0102 	orr.w	r1, r3, r2
 800761e:	9b04      	ldr	r3, [sp, #16]
 8007620:	430b      	orrs	r3, r1
 8007622:	464d      	mov	r5, r9
 8007624:	d10f      	bne.n	8007646 <_dtoa_r+0xa66>
 8007626:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800762a:	d02a      	beq.n	8007682 <_dtoa_r+0xaa2>
 800762c:	9b03      	ldr	r3, [sp, #12]
 800762e:	2b00      	cmp	r3, #0
 8007630:	dd02      	ble.n	8007638 <_dtoa_r+0xa58>
 8007632:	9b02      	ldr	r3, [sp, #8]
 8007634:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007638:	f88b a000 	strb.w	sl, [fp]
 800763c:	e775      	b.n	800752a <_dtoa_r+0x94a>
 800763e:	4638      	mov	r0, r7
 8007640:	e7ba      	b.n	80075b8 <_dtoa_r+0x9d8>
 8007642:	2201      	movs	r2, #1
 8007644:	e7e2      	b.n	800760c <_dtoa_r+0xa2c>
 8007646:	9b03      	ldr	r3, [sp, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	db04      	blt.n	8007656 <_dtoa_r+0xa76>
 800764c:	9906      	ldr	r1, [sp, #24]
 800764e:	430b      	orrs	r3, r1
 8007650:	9904      	ldr	r1, [sp, #16]
 8007652:	430b      	orrs	r3, r1
 8007654:	d122      	bne.n	800769c <_dtoa_r+0xabc>
 8007656:	2a00      	cmp	r2, #0
 8007658:	ddee      	ble.n	8007638 <_dtoa_r+0xa58>
 800765a:	ee18 1a10 	vmov	r1, s16
 800765e:	2201      	movs	r2, #1
 8007660:	4620      	mov	r0, r4
 8007662:	f000 fac9 	bl	8007bf8 <__lshift>
 8007666:	4631      	mov	r1, r6
 8007668:	ee08 0a10 	vmov	s16, r0
 800766c:	f000 fb34 	bl	8007cd8 <__mcmp>
 8007670:	2800      	cmp	r0, #0
 8007672:	dc03      	bgt.n	800767c <_dtoa_r+0xa9c>
 8007674:	d1e0      	bne.n	8007638 <_dtoa_r+0xa58>
 8007676:	f01a 0f01 	tst.w	sl, #1
 800767a:	d0dd      	beq.n	8007638 <_dtoa_r+0xa58>
 800767c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007680:	d1d7      	bne.n	8007632 <_dtoa_r+0xa52>
 8007682:	2339      	movs	r3, #57	; 0x39
 8007684:	f88b 3000 	strb.w	r3, [fp]
 8007688:	462b      	mov	r3, r5
 800768a:	461d      	mov	r5, r3
 800768c:	3b01      	subs	r3, #1
 800768e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007692:	2a39      	cmp	r2, #57	; 0x39
 8007694:	d071      	beq.n	800777a <_dtoa_r+0xb9a>
 8007696:	3201      	adds	r2, #1
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	e746      	b.n	800752a <_dtoa_r+0x94a>
 800769c:	2a00      	cmp	r2, #0
 800769e:	dd07      	ble.n	80076b0 <_dtoa_r+0xad0>
 80076a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80076a4:	d0ed      	beq.n	8007682 <_dtoa_r+0xaa2>
 80076a6:	f10a 0301 	add.w	r3, sl, #1
 80076aa:	f88b 3000 	strb.w	r3, [fp]
 80076ae:	e73c      	b.n	800752a <_dtoa_r+0x94a>
 80076b0:	9b05      	ldr	r3, [sp, #20]
 80076b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80076b6:	4599      	cmp	r9, r3
 80076b8:	d047      	beq.n	800774a <_dtoa_r+0xb6a>
 80076ba:	ee18 1a10 	vmov	r1, s16
 80076be:	2300      	movs	r3, #0
 80076c0:	220a      	movs	r2, #10
 80076c2:	4620      	mov	r0, r4
 80076c4:	f000 f8e8 	bl	8007898 <__multadd>
 80076c8:	45b8      	cmp	r8, r7
 80076ca:	ee08 0a10 	vmov	s16, r0
 80076ce:	f04f 0300 	mov.w	r3, #0
 80076d2:	f04f 020a 	mov.w	r2, #10
 80076d6:	4641      	mov	r1, r8
 80076d8:	4620      	mov	r0, r4
 80076da:	d106      	bne.n	80076ea <_dtoa_r+0xb0a>
 80076dc:	f000 f8dc 	bl	8007898 <__multadd>
 80076e0:	4680      	mov	r8, r0
 80076e2:	4607      	mov	r7, r0
 80076e4:	f109 0901 	add.w	r9, r9, #1
 80076e8:	e772      	b.n	80075d0 <_dtoa_r+0x9f0>
 80076ea:	f000 f8d5 	bl	8007898 <__multadd>
 80076ee:	4639      	mov	r1, r7
 80076f0:	4680      	mov	r8, r0
 80076f2:	2300      	movs	r3, #0
 80076f4:	220a      	movs	r2, #10
 80076f6:	4620      	mov	r0, r4
 80076f8:	f000 f8ce 	bl	8007898 <__multadd>
 80076fc:	4607      	mov	r7, r0
 80076fe:	e7f1      	b.n	80076e4 <_dtoa_r+0xb04>
 8007700:	9b03      	ldr	r3, [sp, #12]
 8007702:	9302      	str	r3, [sp, #8]
 8007704:	9d01      	ldr	r5, [sp, #4]
 8007706:	ee18 0a10 	vmov	r0, s16
 800770a:	4631      	mov	r1, r6
 800770c:	f7ff f9da 	bl	8006ac4 <quorem>
 8007710:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	f805 ab01 	strb.w	sl, [r5], #1
 800771a:	1aea      	subs	r2, r5, r3
 800771c:	9b02      	ldr	r3, [sp, #8]
 800771e:	4293      	cmp	r3, r2
 8007720:	dd09      	ble.n	8007736 <_dtoa_r+0xb56>
 8007722:	ee18 1a10 	vmov	r1, s16
 8007726:	2300      	movs	r3, #0
 8007728:	220a      	movs	r2, #10
 800772a:	4620      	mov	r0, r4
 800772c:	f000 f8b4 	bl	8007898 <__multadd>
 8007730:	ee08 0a10 	vmov	s16, r0
 8007734:	e7e7      	b.n	8007706 <_dtoa_r+0xb26>
 8007736:	9b02      	ldr	r3, [sp, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	bfc8      	it	gt
 800773c:	461d      	movgt	r5, r3
 800773e:	9b01      	ldr	r3, [sp, #4]
 8007740:	bfd8      	it	le
 8007742:	2501      	movle	r5, #1
 8007744:	441d      	add	r5, r3
 8007746:	f04f 0800 	mov.w	r8, #0
 800774a:	ee18 1a10 	vmov	r1, s16
 800774e:	2201      	movs	r2, #1
 8007750:	4620      	mov	r0, r4
 8007752:	f000 fa51 	bl	8007bf8 <__lshift>
 8007756:	4631      	mov	r1, r6
 8007758:	ee08 0a10 	vmov	s16, r0
 800775c:	f000 fabc 	bl	8007cd8 <__mcmp>
 8007760:	2800      	cmp	r0, #0
 8007762:	dc91      	bgt.n	8007688 <_dtoa_r+0xaa8>
 8007764:	d102      	bne.n	800776c <_dtoa_r+0xb8c>
 8007766:	f01a 0f01 	tst.w	sl, #1
 800776a:	d18d      	bne.n	8007688 <_dtoa_r+0xaa8>
 800776c:	462b      	mov	r3, r5
 800776e:	461d      	mov	r5, r3
 8007770:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007774:	2a30      	cmp	r2, #48	; 0x30
 8007776:	d0fa      	beq.n	800776e <_dtoa_r+0xb8e>
 8007778:	e6d7      	b.n	800752a <_dtoa_r+0x94a>
 800777a:	9a01      	ldr	r2, [sp, #4]
 800777c:	429a      	cmp	r2, r3
 800777e:	d184      	bne.n	800768a <_dtoa_r+0xaaa>
 8007780:	9b00      	ldr	r3, [sp, #0]
 8007782:	3301      	adds	r3, #1
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	2331      	movs	r3, #49	; 0x31
 8007788:	7013      	strb	r3, [r2, #0]
 800778a:	e6ce      	b.n	800752a <_dtoa_r+0x94a>
 800778c:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <_dtoa_r+0xbd4>)
 800778e:	f7ff ba95 	b.w	8006cbc <_dtoa_r+0xdc>
 8007792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007794:	2b00      	cmp	r3, #0
 8007796:	f47f aa6e 	bne.w	8006c76 <_dtoa_r+0x96>
 800779a:	4b07      	ldr	r3, [pc, #28]	; (80077b8 <_dtoa_r+0xbd8>)
 800779c:	f7ff ba8e 	b.w	8006cbc <_dtoa_r+0xdc>
 80077a0:	9b02      	ldr	r3, [sp, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	dcae      	bgt.n	8007704 <_dtoa_r+0xb24>
 80077a6:	9b06      	ldr	r3, [sp, #24]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	f73f aea8 	bgt.w	80074fe <_dtoa_r+0x91e>
 80077ae:	e7a9      	b.n	8007704 <_dtoa_r+0xb24>
 80077b0:	080097c7 	.word	0x080097c7
 80077b4:	08009724 	.word	0x08009724
 80077b8:	08009748 	.word	0x08009748

080077bc <_localeconv_r>:
 80077bc:	4800      	ldr	r0, [pc, #0]	; (80077c0 <_localeconv_r+0x4>)
 80077be:	4770      	bx	lr
 80077c0:	20000168 	.word	0x20000168

080077c4 <malloc>:
 80077c4:	4b02      	ldr	r3, [pc, #8]	; (80077d0 <malloc+0xc>)
 80077c6:	4601      	mov	r1, r0
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	f000 bc09 	b.w	8007fe0 <_malloc_r>
 80077ce:	bf00      	nop
 80077d0:	20000014 	.word	0x20000014

080077d4 <_Balloc>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077d8:	4604      	mov	r4, r0
 80077da:	460d      	mov	r5, r1
 80077dc:	b976      	cbnz	r6, 80077fc <_Balloc+0x28>
 80077de:	2010      	movs	r0, #16
 80077e0:	f7ff fff0 	bl	80077c4 <malloc>
 80077e4:	4602      	mov	r2, r0
 80077e6:	6260      	str	r0, [r4, #36]	; 0x24
 80077e8:	b920      	cbnz	r0, 80077f4 <_Balloc+0x20>
 80077ea:	4b18      	ldr	r3, [pc, #96]	; (800784c <_Balloc+0x78>)
 80077ec:	4818      	ldr	r0, [pc, #96]	; (8007850 <_Balloc+0x7c>)
 80077ee:	2166      	movs	r1, #102	; 0x66
 80077f0:	f000 fdd6 	bl	80083a0 <__assert_func>
 80077f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077f8:	6006      	str	r6, [r0, #0]
 80077fa:	60c6      	str	r6, [r0, #12]
 80077fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077fe:	68f3      	ldr	r3, [r6, #12]
 8007800:	b183      	cbz	r3, 8007824 <_Balloc+0x50>
 8007802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800780a:	b9b8      	cbnz	r0, 800783c <_Balloc+0x68>
 800780c:	2101      	movs	r1, #1
 800780e:	fa01 f605 	lsl.w	r6, r1, r5
 8007812:	1d72      	adds	r2, r6, #5
 8007814:	0092      	lsls	r2, r2, #2
 8007816:	4620      	mov	r0, r4
 8007818:	f000 fb60 	bl	8007edc <_calloc_r>
 800781c:	b160      	cbz	r0, 8007838 <_Balloc+0x64>
 800781e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007822:	e00e      	b.n	8007842 <_Balloc+0x6e>
 8007824:	2221      	movs	r2, #33	; 0x21
 8007826:	2104      	movs	r1, #4
 8007828:	4620      	mov	r0, r4
 800782a:	f000 fb57 	bl	8007edc <_calloc_r>
 800782e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007830:	60f0      	str	r0, [r6, #12]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e4      	bne.n	8007802 <_Balloc+0x2e>
 8007838:	2000      	movs	r0, #0
 800783a:	bd70      	pop	{r4, r5, r6, pc}
 800783c:	6802      	ldr	r2, [r0, #0]
 800783e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007842:	2300      	movs	r3, #0
 8007844:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007848:	e7f7      	b.n	800783a <_Balloc+0x66>
 800784a:	bf00      	nop
 800784c:	08009755 	.word	0x08009755
 8007850:	080097d8 	.word	0x080097d8

08007854 <_Bfree>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007858:	4605      	mov	r5, r0
 800785a:	460c      	mov	r4, r1
 800785c:	b976      	cbnz	r6, 800787c <_Bfree+0x28>
 800785e:	2010      	movs	r0, #16
 8007860:	f7ff ffb0 	bl	80077c4 <malloc>
 8007864:	4602      	mov	r2, r0
 8007866:	6268      	str	r0, [r5, #36]	; 0x24
 8007868:	b920      	cbnz	r0, 8007874 <_Bfree+0x20>
 800786a:	4b09      	ldr	r3, [pc, #36]	; (8007890 <_Bfree+0x3c>)
 800786c:	4809      	ldr	r0, [pc, #36]	; (8007894 <_Bfree+0x40>)
 800786e:	218a      	movs	r1, #138	; 0x8a
 8007870:	f000 fd96 	bl	80083a0 <__assert_func>
 8007874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007878:	6006      	str	r6, [r0, #0]
 800787a:	60c6      	str	r6, [r0, #12]
 800787c:	b13c      	cbz	r4, 800788e <_Bfree+0x3a>
 800787e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007880:	6862      	ldr	r2, [r4, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007888:	6021      	str	r1, [r4, #0]
 800788a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800788e:	bd70      	pop	{r4, r5, r6, pc}
 8007890:	08009755 	.word	0x08009755
 8007894:	080097d8 	.word	0x080097d8

08007898 <__multadd>:
 8007898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800789c:	690d      	ldr	r5, [r1, #16]
 800789e:	4607      	mov	r7, r0
 80078a0:	460c      	mov	r4, r1
 80078a2:	461e      	mov	r6, r3
 80078a4:	f101 0c14 	add.w	ip, r1, #20
 80078a8:	2000      	movs	r0, #0
 80078aa:	f8dc 3000 	ldr.w	r3, [ip]
 80078ae:	b299      	uxth	r1, r3
 80078b0:	fb02 6101 	mla	r1, r2, r1, r6
 80078b4:	0c1e      	lsrs	r6, r3, #16
 80078b6:	0c0b      	lsrs	r3, r1, #16
 80078b8:	fb02 3306 	mla	r3, r2, r6, r3
 80078bc:	b289      	uxth	r1, r1
 80078be:	3001      	adds	r0, #1
 80078c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078c4:	4285      	cmp	r5, r0
 80078c6:	f84c 1b04 	str.w	r1, [ip], #4
 80078ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078ce:	dcec      	bgt.n	80078aa <__multadd+0x12>
 80078d0:	b30e      	cbz	r6, 8007916 <__multadd+0x7e>
 80078d2:	68a3      	ldr	r3, [r4, #8]
 80078d4:	42ab      	cmp	r3, r5
 80078d6:	dc19      	bgt.n	800790c <__multadd+0x74>
 80078d8:	6861      	ldr	r1, [r4, #4]
 80078da:	4638      	mov	r0, r7
 80078dc:	3101      	adds	r1, #1
 80078de:	f7ff ff79 	bl	80077d4 <_Balloc>
 80078e2:	4680      	mov	r8, r0
 80078e4:	b928      	cbnz	r0, 80078f2 <__multadd+0x5a>
 80078e6:	4602      	mov	r2, r0
 80078e8:	4b0c      	ldr	r3, [pc, #48]	; (800791c <__multadd+0x84>)
 80078ea:	480d      	ldr	r0, [pc, #52]	; (8007920 <__multadd+0x88>)
 80078ec:	21b5      	movs	r1, #181	; 0xb5
 80078ee:	f000 fd57 	bl	80083a0 <__assert_func>
 80078f2:	6922      	ldr	r2, [r4, #16]
 80078f4:	3202      	adds	r2, #2
 80078f6:	f104 010c 	add.w	r1, r4, #12
 80078fa:	0092      	lsls	r2, r2, #2
 80078fc:	300c      	adds	r0, #12
 80078fe:	f7fe fc13 	bl	8006128 <memcpy>
 8007902:	4621      	mov	r1, r4
 8007904:	4638      	mov	r0, r7
 8007906:	f7ff ffa5 	bl	8007854 <_Bfree>
 800790a:	4644      	mov	r4, r8
 800790c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007910:	3501      	adds	r5, #1
 8007912:	615e      	str	r6, [r3, #20]
 8007914:	6125      	str	r5, [r4, #16]
 8007916:	4620      	mov	r0, r4
 8007918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800791c:	080097c7 	.word	0x080097c7
 8007920:	080097d8 	.word	0x080097d8

08007924 <__hi0bits>:
 8007924:	0c03      	lsrs	r3, r0, #16
 8007926:	041b      	lsls	r3, r3, #16
 8007928:	b9d3      	cbnz	r3, 8007960 <__hi0bits+0x3c>
 800792a:	0400      	lsls	r0, r0, #16
 800792c:	2310      	movs	r3, #16
 800792e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007932:	bf04      	itt	eq
 8007934:	0200      	lsleq	r0, r0, #8
 8007936:	3308      	addeq	r3, #8
 8007938:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800793c:	bf04      	itt	eq
 800793e:	0100      	lsleq	r0, r0, #4
 8007940:	3304      	addeq	r3, #4
 8007942:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007946:	bf04      	itt	eq
 8007948:	0080      	lsleq	r0, r0, #2
 800794a:	3302      	addeq	r3, #2
 800794c:	2800      	cmp	r0, #0
 800794e:	db05      	blt.n	800795c <__hi0bits+0x38>
 8007950:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007954:	f103 0301 	add.w	r3, r3, #1
 8007958:	bf08      	it	eq
 800795a:	2320      	moveq	r3, #32
 800795c:	4618      	mov	r0, r3
 800795e:	4770      	bx	lr
 8007960:	2300      	movs	r3, #0
 8007962:	e7e4      	b.n	800792e <__hi0bits+0xa>

08007964 <__lo0bits>:
 8007964:	6803      	ldr	r3, [r0, #0]
 8007966:	f013 0207 	ands.w	r2, r3, #7
 800796a:	4601      	mov	r1, r0
 800796c:	d00b      	beq.n	8007986 <__lo0bits+0x22>
 800796e:	07da      	lsls	r2, r3, #31
 8007970:	d423      	bmi.n	80079ba <__lo0bits+0x56>
 8007972:	0798      	lsls	r0, r3, #30
 8007974:	bf49      	itett	mi
 8007976:	085b      	lsrmi	r3, r3, #1
 8007978:	089b      	lsrpl	r3, r3, #2
 800797a:	2001      	movmi	r0, #1
 800797c:	600b      	strmi	r3, [r1, #0]
 800797e:	bf5c      	itt	pl
 8007980:	600b      	strpl	r3, [r1, #0]
 8007982:	2002      	movpl	r0, #2
 8007984:	4770      	bx	lr
 8007986:	b298      	uxth	r0, r3
 8007988:	b9a8      	cbnz	r0, 80079b6 <__lo0bits+0x52>
 800798a:	0c1b      	lsrs	r3, r3, #16
 800798c:	2010      	movs	r0, #16
 800798e:	b2da      	uxtb	r2, r3
 8007990:	b90a      	cbnz	r2, 8007996 <__lo0bits+0x32>
 8007992:	3008      	adds	r0, #8
 8007994:	0a1b      	lsrs	r3, r3, #8
 8007996:	071a      	lsls	r2, r3, #28
 8007998:	bf04      	itt	eq
 800799a:	091b      	lsreq	r3, r3, #4
 800799c:	3004      	addeq	r0, #4
 800799e:	079a      	lsls	r2, r3, #30
 80079a0:	bf04      	itt	eq
 80079a2:	089b      	lsreq	r3, r3, #2
 80079a4:	3002      	addeq	r0, #2
 80079a6:	07da      	lsls	r2, r3, #31
 80079a8:	d403      	bmi.n	80079b2 <__lo0bits+0x4e>
 80079aa:	085b      	lsrs	r3, r3, #1
 80079ac:	f100 0001 	add.w	r0, r0, #1
 80079b0:	d005      	beq.n	80079be <__lo0bits+0x5a>
 80079b2:	600b      	str	r3, [r1, #0]
 80079b4:	4770      	bx	lr
 80079b6:	4610      	mov	r0, r2
 80079b8:	e7e9      	b.n	800798e <__lo0bits+0x2a>
 80079ba:	2000      	movs	r0, #0
 80079bc:	4770      	bx	lr
 80079be:	2020      	movs	r0, #32
 80079c0:	4770      	bx	lr
	...

080079c4 <__i2b>:
 80079c4:	b510      	push	{r4, lr}
 80079c6:	460c      	mov	r4, r1
 80079c8:	2101      	movs	r1, #1
 80079ca:	f7ff ff03 	bl	80077d4 <_Balloc>
 80079ce:	4602      	mov	r2, r0
 80079d0:	b928      	cbnz	r0, 80079de <__i2b+0x1a>
 80079d2:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <__i2b+0x24>)
 80079d4:	4805      	ldr	r0, [pc, #20]	; (80079ec <__i2b+0x28>)
 80079d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80079da:	f000 fce1 	bl	80083a0 <__assert_func>
 80079de:	2301      	movs	r3, #1
 80079e0:	6144      	str	r4, [r0, #20]
 80079e2:	6103      	str	r3, [r0, #16]
 80079e4:	bd10      	pop	{r4, pc}
 80079e6:	bf00      	nop
 80079e8:	080097c7 	.word	0x080097c7
 80079ec:	080097d8 	.word	0x080097d8

080079f0 <__multiply>:
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	4691      	mov	r9, r2
 80079f6:	690a      	ldr	r2, [r1, #16]
 80079f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	bfb8      	it	lt
 8007a00:	460b      	movlt	r3, r1
 8007a02:	460c      	mov	r4, r1
 8007a04:	bfbc      	itt	lt
 8007a06:	464c      	movlt	r4, r9
 8007a08:	4699      	movlt	r9, r3
 8007a0a:	6927      	ldr	r7, [r4, #16]
 8007a0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a10:	68a3      	ldr	r3, [r4, #8]
 8007a12:	6861      	ldr	r1, [r4, #4]
 8007a14:	eb07 060a 	add.w	r6, r7, sl
 8007a18:	42b3      	cmp	r3, r6
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	bfb8      	it	lt
 8007a1e:	3101      	addlt	r1, #1
 8007a20:	f7ff fed8 	bl	80077d4 <_Balloc>
 8007a24:	b930      	cbnz	r0, 8007a34 <__multiply+0x44>
 8007a26:	4602      	mov	r2, r0
 8007a28:	4b44      	ldr	r3, [pc, #272]	; (8007b3c <__multiply+0x14c>)
 8007a2a:	4845      	ldr	r0, [pc, #276]	; (8007b40 <__multiply+0x150>)
 8007a2c:	f240 115d 	movw	r1, #349	; 0x15d
 8007a30:	f000 fcb6 	bl	80083a0 <__assert_func>
 8007a34:	f100 0514 	add.w	r5, r0, #20
 8007a38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a3c:	462b      	mov	r3, r5
 8007a3e:	2200      	movs	r2, #0
 8007a40:	4543      	cmp	r3, r8
 8007a42:	d321      	bcc.n	8007a88 <__multiply+0x98>
 8007a44:	f104 0314 	add.w	r3, r4, #20
 8007a48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a4c:	f109 0314 	add.w	r3, r9, #20
 8007a50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a54:	9202      	str	r2, [sp, #8]
 8007a56:	1b3a      	subs	r2, r7, r4
 8007a58:	3a15      	subs	r2, #21
 8007a5a:	f022 0203 	bic.w	r2, r2, #3
 8007a5e:	3204      	adds	r2, #4
 8007a60:	f104 0115 	add.w	r1, r4, #21
 8007a64:	428f      	cmp	r7, r1
 8007a66:	bf38      	it	cc
 8007a68:	2204      	movcc	r2, #4
 8007a6a:	9201      	str	r2, [sp, #4]
 8007a6c:	9a02      	ldr	r2, [sp, #8]
 8007a6e:	9303      	str	r3, [sp, #12]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d80c      	bhi.n	8007a8e <__multiply+0x9e>
 8007a74:	2e00      	cmp	r6, #0
 8007a76:	dd03      	ble.n	8007a80 <__multiply+0x90>
 8007a78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d05a      	beq.n	8007b36 <__multiply+0x146>
 8007a80:	6106      	str	r6, [r0, #16]
 8007a82:	b005      	add	sp, #20
 8007a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a88:	f843 2b04 	str.w	r2, [r3], #4
 8007a8c:	e7d8      	b.n	8007a40 <__multiply+0x50>
 8007a8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a92:	f1ba 0f00 	cmp.w	sl, #0
 8007a96:	d024      	beq.n	8007ae2 <__multiply+0xf2>
 8007a98:	f104 0e14 	add.w	lr, r4, #20
 8007a9c:	46a9      	mov	r9, r5
 8007a9e:	f04f 0c00 	mov.w	ip, #0
 8007aa2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007aa6:	f8d9 1000 	ldr.w	r1, [r9]
 8007aaa:	fa1f fb82 	uxth.w	fp, r2
 8007aae:	b289      	uxth	r1, r1
 8007ab0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ab4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007ab8:	f8d9 2000 	ldr.w	r2, [r9]
 8007abc:	4461      	add	r1, ip
 8007abe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007ac2:	fb0a c20b 	mla	r2, sl, fp, ip
 8007ac6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007aca:	b289      	uxth	r1, r1
 8007acc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ad0:	4577      	cmp	r7, lr
 8007ad2:	f849 1b04 	str.w	r1, [r9], #4
 8007ad6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007ada:	d8e2      	bhi.n	8007aa2 <__multiply+0xb2>
 8007adc:	9a01      	ldr	r2, [sp, #4]
 8007ade:	f845 c002 	str.w	ip, [r5, r2]
 8007ae2:	9a03      	ldr	r2, [sp, #12]
 8007ae4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	f1b9 0f00 	cmp.w	r9, #0
 8007aee:	d020      	beq.n	8007b32 <__multiply+0x142>
 8007af0:	6829      	ldr	r1, [r5, #0]
 8007af2:	f104 0c14 	add.w	ip, r4, #20
 8007af6:	46ae      	mov	lr, r5
 8007af8:	f04f 0a00 	mov.w	sl, #0
 8007afc:	f8bc b000 	ldrh.w	fp, [ip]
 8007b00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b04:	fb09 220b 	mla	r2, r9, fp, r2
 8007b08:	4492      	add	sl, r2
 8007b0a:	b289      	uxth	r1, r1
 8007b0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007b10:	f84e 1b04 	str.w	r1, [lr], #4
 8007b14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b18:	f8be 1000 	ldrh.w	r1, [lr]
 8007b1c:	0c12      	lsrs	r2, r2, #16
 8007b1e:	fb09 1102 	mla	r1, r9, r2, r1
 8007b22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007b26:	4567      	cmp	r7, ip
 8007b28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b2c:	d8e6      	bhi.n	8007afc <__multiply+0x10c>
 8007b2e:	9a01      	ldr	r2, [sp, #4]
 8007b30:	50a9      	str	r1, [r5, r2]
 8007b32:	3504      	adds	r5, #4
 8007b34:	e79a      	b.n	8007a6c <__multiply+0x7c>
 8007b36:	3e01      	subs	r6, #1
 8007b38:	e79c      	b.n	8007a74 <__multiply+0x84>
 8007b3a:	bf00      	nop
 8007b3c:	080097c7 	.word	0x080097c7
 8007b40:	080097d8 	.word	0x080097d8

08007b44 <__pow5mult>:
 8007b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b48:	4615      	mov	r5, r2
 8007b4a:	f012 0203 	ands.w	r2, r2, #3
 8007b4e:	4606      	mov	r6, r0
 8007b50:	460f      	mov	r7, r1
 8007b52:	d007      	beq.n	8007b64 <__pow5mult+0x20>
 8007b54:	4c25      	ldr	r4, [pc, #148]	; (8007bec <__pow5mult+0xa8>)
 8007b56:	3a01      	subs	r2, #1
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b5e:	f7ff fe9b 	bl	8007898 <__multadd>
 8007b62:	4607      	mov	r7, r0
 8007b64:	10ad      	asrs	r5, r5, #2
 8007b66:	d03d      	beq.n	8007be4 <__pow5mult+0xa0>
 8007b68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b6a:	b97c      	cbnz	r4, 8007b8c <__pow5mult+0x48>
 8007b6c:	2010      	movs	r0, #16
 8007b6e:	f7ff fe29 	bl	80077c4 <malloc>
 8007b72:	4602      	mov	r2, r0
 8007b74:	6270      	str	r0, [r6, #36]	; 0x24
 8007b76:	b928      	cbnz	r0, 8007b84 <__pow5mult+0x40>
 8007b78:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <__pow5mult+0xac>)
 8007b7a:	481e      	ldr	r0, [pc, #120]	; (8007bf4 <__pow5mult+0xb0>)
 8007b7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b80:	f000 fc0e 	bl	80083a0 <__assert_func>
 8007b84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b88:	6004      	str	r4, [r0, #0]
 8007b8a:	60c4      	str	r4, [r0, #12]
 8007b8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b94:	b94c      	cbnz	r4, 8007baa <__pow5mult+0x66>
 8007b96:	f240 2171 	movw	r1, #625	; 0x271
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f7ff ff12 	bl	80079c4 <__i2b>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	6003      	str	r3, [r0, #0]
 8007baa:	f04f 0900 	mov.w	r9, #0
 8007bae:	07eb      	lsls	r3, r5, #31
 8007bb0:	d50a      	bpl.n	8007bc8 <__pow5mult+0x84>
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	4622      	mov	r2, r4
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f7ff ff1a 	bl	80079f0 <__multiply>
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	4680      	mov	r8, r0
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f7ff fe47 	bl	8007854 <_Bfree>
 8007bc6:	4647      	mov	r7, r8
 8007bc8:	106d      	asrs	r5, r5, #1
 8007bca:	d00b      	beq.n	8007be4 <__pow5mult+0xa0>
 8007bcc:	6820      	ldr	r0, [r4, #0]
 8007bce:	b938      	cbnz	r0, 8007be0 <__pow5mult+0x9c>
 8007bd0:	4622      	mov	r2, r4
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f7ff ff0b 	bl	80079f0 <__multiply>
 8007bda:	6020      	str	r0, [r4, #0]
 8007bdc:	f8c0 9000 	str.w	r9, [r0]
 8007be0:	4604      	mov	r4, r0
 8007be2:	e7e4      	b.n	8007bae <__pow5mult+0x6a>
 8007be4:	4638      	mov	r0, r7
 8007be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bea:	bf00      	nop
 8007bec:	08009928 	.word	0x08009928
 8007bf0:	08009755 	.word	0x08009755
 8007bf4:	080097d8 	.word	0x080097d8

08007bf8 <__lshift>:
 8007bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	6849      	ldr	r1, [r1, #4]
 8007c00:	6923      	ldr	r3, [r4, #16]
 8007c02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c06:	68a3      	ldr	r3, [r4, #8]
 8007c08:	4607      	mov	r7, r0
 8007c0a:	4691      	mov	r9, r2
 8007c0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c10:	f108 0601 	add.w	r6, r8, #1
 8007c14:	42b3      	cmp	r3, r6
 8007c16:	db0b      	blt.n	8007c30 <__lshift+0x38>
 8007c18:	4638      	mov	r0, r7
 8007c1a:	f7ff fddb 	bl	80077d4 <_Balloc>
 8007c1e:	4605      	mov	r5, r0
 8007c20:	b948      	cbnz	r0, 8007c36 <__lshift+0x3e>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4b2a      	ldr	r3, [pc, #168]	; (8007cd0 <__lshift+0xd8>)
 8007c26:	482b      	ldr	r0, [pc, #172]	; (8007cd4 <__lshift+0xdc>)
 8007c28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007c2c:	f000 fbb8 	bl	80083a0 <__assert_func>
 8007c30:	3101      	adds	r1, #1
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	e7ee      	b.n	8007c14 <__lshift+0x1c>
 8007c36:	2300      	movs	r3, #0
 8007c38:	f100 0114 	add.w	r1, r0, #20
 8007c3c:	f100 0210 	add.w	r2, r0, #16
 8007c40:	4618      	mov	r0, r3
 8007c42:	4553      	cmp	r3, sl
 8007c44:	db37      	blt.n	8007cb6 <__lshift+0xbe>
 8007c46:	6920      	ldr	r0, [r4, #16]
 8007c48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c4c:	f104 0314 	add.w	r3, r4, #20
 8007c50:	f019 091f 	ands.w	r9, r9, #31
 8007c54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007c5c:	d02f      	beq.n	8007cbe <__lshift+0xc6>
 8007c5e:	f1c9 0e20 	rsb	lr, r9, #32
 8007c62:	468a      	mov	sl, r1
 8007c64:	f04f 0c00 	mov.w	ip, #0
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	fa02 f209 	lsl.w	r2, r2, r9
 8007c6e:	ea42 020c 	orr.w	r2, r2, ip
 8007c72:	f84a 2b04 	str.w	r2, [sl], #4
 8007c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c7a:	4298      	cmp	r0, r3
 8007c7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c80:	d8f2      	bhi.n	8007c68 <__lshift+0x70>
 8007c82:	1b03      	subs	r3, r0, r4
 8007c84:	3b15      	subs	r3, #21
 8007c86:	f023 0303 	bic.w	r3, r3, #3
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	f104 0215 	add.w	r2, r4, #21
 8007c90:	4290      	cmp	r0, r2
 8007c92:	bf38      	it	cc
 8007c94:	2304      	movcc	r3, #4
 8007c96:	f841 c003 	str.w	ip, [r1, r3]
 8007c9a:	f1bc 0f00 	cmp.w	ip, #0
 8007c9e:	d001      	beq.n	8007ca4 <__lshift+0xac>
 8007ca0:	f108 0602 	add.w	r6, r8, #2
 8007ca4:	3e01      	subs	r6, #1
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	612e      	str	r6, [r5, #16]
 8007caa:	4621      	mov	r1, r4
 8007cac:	f7ff fdd2 	bl	8007854 <_Bfree>
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cba:	3301      	adds	r3, #1
 8007cbc:	e7c1      	b.n	8007c42 <__lshift+0x4a>
 8007cbe:	3904      	subs	r1, #4
 8007cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cc8:	4298      	cmp	r0, r3
 8007cca:	d8f9      	bhi.n	8007cc0 <__lshift+0xc8>
 8007ccc:	e7ea      	b.n	8007ca4 <__lshift+0xac>
 8007cce:	bf00      	nop
 8007cd0:	080097c7 	.word	0x080097c7
 8007cd4:	080097d8 	.word	0x080097d8

08007cd8 <__mcmp>:
 8007cd8:	b530      	push	{r4, r5, lr}
 8007cda:	6902      	ldr	r2, [r0, #16]
 8007cdc:	690c      	ldr	r4, [r1, #16]
 8007cde:	1b12      	subs	r2, r2, r4
 8007ce0:	d10e      	bne.n	8007d00 <__mcmp+0x28>
 8007ce2:	f100 0314 	add.w	r3, r0, #20
 8007ce6:	3114      	adds	r1, #20
 8007ce8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007cec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007cf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007cf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007cf8:	42a5      	cmp	r5, r4
 8007cfa:	d003      	beq.n	8007d04 <__mcmp+0x2c>
 8007cfc:	d305      	bcc.n	8007d0a <__mcmp+0x32>
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4610      	mov	r0, r2
 8007d02:	bd30      	pop	{r4, r5, pc}
 8007d04:	4283      	cmp	r3, r0
 8007d06:	d3f3      	bcc.n	8007cf0 <__mcmp+0x18>
 8007d08:	e7fa      	b.n	8007d00 <__mcmp+0x28>
 8007d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0e:	e7f7      	b.n	8007d00 <__mcmp+0x28>

08007d10 <__mdiff>:
 8007d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	460c      	mov	r4, r1
 8007d16:	4606      	mov	r6, r0
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	4690      	mov	r8, r2
 8007d1e:	f7ff ffdb 	bl	8007cd8 <__mcmp>
 8007d22:	1e05      	subs	r5, r0, #0
 8007d24:	d110      	bne.n	8007d48 <__mdiff+0x38>
 8007d26:	4629      	mov	r1, r5
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f7ff fd53 	bl	80077d4 <_Balloc>
 8007d2e:	b930      	cbnz	r0, 8007d3e <__mdiff+0x2e>
 8007d30:	4b3a      	ldr	r3, [pc, #232]	; (8007e1c <__mdiff+0x10c>)
 8007d32:	4602      	mov	r2, r0
 8007d34:	f240 2132 	movw	r1, #562	; 0x232
 8007d38:	4839      	ldr	r0, [pc, #228]	; (8007e20 <__mdiff+0x110>)
 8007d3a:	f000 fb31 	bl	80083a0 <__assert_func>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d48:	bfa4      	itt	ge
 8007d4a:	4643      	movge	r3, r8
 8007d4c:	46a0      	movge	r8, r4
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d54:	bfa6      	itte	ge
 8007d56:	461c      	movge	r4, r3
 8007d58:	2500      	movge	r5, #0
 8007d5a:	2501      	movlt	r5, #1
 8007d5c:	f7ff fd3a 	bl	80077d4 <_Balloc>
 8007d60:	b920      	cbnz	r0, 8007d6c <__mdiff+0x5c>
 8007d62:	4b2e      	ldr	r3, [pc, #184]	; (8007e1c <__mdiff+0x10c>)
 8007d64:	4602      	mov	r2, r0
 8007d66:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d6a:	e7e5      	b.n	8007d38 <__mdiff+0x28>
 8007d6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d70:	6926      	ldr	r6, [r4, #16]
 8007d72:	60c5      	str	r5, [r0, #12]
 8007d74:	f104 0914 	add.w	r9, r4, #20
 8007d78:	f108 0514 	add.w	r5, r8, #20
 8007d7c:	f100 0e14 	add.w	lr, r0, #20
 8007d80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d88:	f108 0210 	add.w	r2, r8, #16
 8007d8c:	46f2      	mov	sl, lr
 8007d8e:	2100      	movs	r1, #0
 8007d90:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d98:	fa1f f883 	uxth.w	r8, r3
 8007d9c:	fa11 f18b 	uxtah	r1, r1, fp
 8007da0:	0c1b      	lsrs	r3, r3, #16
 8007da2:	eba1 0808 	sub.w	r8, r1, r8
 8007da6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007daa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007dae:	fa1f f888 	uxth.w	r8, r8
 8007db2:	1419      	asrs	r1, r3, #16
 8007db4:	454e      	cmp	r6, r9
 8007db6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007dba:	f84a 3b04 	str.w	r3, [sl], #4
 8007dbe:	d8e7      	bhi.n	8007d90 <__mdiff+0x80>
 8007dc0:	1b33      	subs	r3, r6, r4
 8007dc2:	3b15      	subs	r3, #21
 8007dc4:	f023 0303 	bic.w	r3, r3, #3
 8007dc8:	3304      	adds	r3, #4
 8007dca:	3415      	adds	r4, #21
 8007dcc:	42a6      	cmp	r6, r4
 8007dce:	bf38      	it	cc
 8007dd0:	2304      	movcc	r3, #4
 8007dd2:	441d      	add	r5, r3
 8007dd4:	4473      	add	r3, lr
 8007dd6:	469e      	mov	lr, r3
 8007dd8:	462e      	mov	r6, r5
 8007dda:	4566      	cmp	r6, ip
 8007ddc:	d30e      	bcc.n	8007dfc <__mdiff+0xec>
 8007dde:	f10c 0203 	add.w	r2, ip, #3
 8007de2:	1b52      	subs	r2, r2, r5
 8007de4:	f022 0203 	bic.w	r2, r2, #3
 8007de8:	3d03      	subs	r5, #3
 8007dea:	45ac      	cmp	ip, r5
 8007dec:	bf38      	it	cc
 8007dee:	2200      	movcc	r2, #0
 8007df0:	441a      	add	r2, r3
 8007df2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007df6:	b17b      	cbz	r3, 8007e18 <__mdiff+0x108>
 8007df8:	6107      	str	r7, [r0, #16]
 8007dfa:	e7a3      	b.n	8007d44 <__mdiff+0x34>
 8007dfc:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e00:	fa11 f288 	uxtah	r2, r1, r8
 8007e04:	1414      	asrs	r4, r2, #16
 8007e06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e0a:	b292      	uxth	r2, r2
 8007e0c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007e10:	f84e 2b04 	str.w	r2, [lr], #4
 8007e14:	1421      	asrs	r1, r4, #16
 8007e16:	e7e0      	b.n	8007dda <__mdiff+0xca>
 8007e18:	3f01      	subs	r7, #1
 8007e1a:	e7ea      	b.n	8007df2 <__mdiff+0xe2>
 8007e1c:	080097c7 	.word	0x080097c7
 8007e20:	080097d8 	.word	0x080097d8

08007e24 <__d2b>:
 8007e24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e28:	4689      	mov	r9, r1
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	ec57 6b10 	vmov	r6, r7, d0
 8007e30:	4690      	mov	r8, r2
 8007e32:	f7ff fccf 	bl	80077d4 <_Balloc>
 8007e36:	4604      	mov	r4, r0
 8007e38:	b930      	cbnz	r0, 8007e48 <__d2b+0x24>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	4b25      	ldr	r3, [pc, #148]	; (8007ed4 <__d2b+0xb0>)
 8007e3e:	4826      	ldr	r0, [pc, #152]	; (8007ed8 <__d2b+0xb4>)
 8007e40:	f240 310a 	movw	r1, #778	; 0x30a
 8007e44:	f000 faac 	bl	80083a0 <__assert_func>
 8007e48:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007e4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e50:	bb35      	cbnz	r5, 8007ea0 <__d2b+0x7c>
 8007e52:	2e00      	cmp	r6, #0
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	d028      	beq.n	8007eaa <__d2b+0x86>
 8007e58:	4668      	mov	r0, sp
 8007e5a:	9600      	str	r6, [sp, #0]
 8007e5c:	f7ff fd82 	bl	8007964 <__lo0bits>
 8007e60:	9900      	ldr	r1, [sp, #0]
 8007e62:	b300      	cbz	r0, 8007ea6 <__d2b+0x82>
 8007e64:	9a01      	ldr	r2, [sp, #4]
 8007e66:	f1c0 0320 	rsb	r3, r0, #32
 8007e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	40c2      	lsrs	r2, r0
 8007e72:	6163      	str	r3, [r4, #20]
 8007e74:	9201      	str	r2, [sp, #4]
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	61a3      	str	r3, [r4, #24]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	bf14      	ite	ne
 8007e7e:	2202      	movne	r2, #2
 8007e80:	2201      	moveq	r2, #1
 8007e82:	6122      	str	r2, [r4, #16]
 8007e84:	b1d5      	cbz	r5, 8007ebc <__d2b+0x98>
 8007e86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e8a:	4405      	add	r5, r0
 8007e8c:	f8c9 5000 	str.w	r5, [r9]
 8007e90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e94:	f8c8 0000 	str.w	r0, [r8]
 8007e98:	4620      	mov	r0, r4
 8007e9a:	b003      	add	sp, #12
 8007e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ea0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ea4:	e7d5      	b.n	8007e52 <__d2b+0x2e>
 8007ea6:	6161      	str	r1, [r4, #20]
 8007ea8:	e7e5      	b.n	8007e76 <__d2b+0x52>
 8007eaa:	a801      	add	r0, sp, #4
 8007eac:	f7ff fd5a 	bl	8007964 <__lo0bits>
 8007eb0:	9b01      	ldr	r3, [sp, #4]
 8007eb2:	6163      	str	r3, [r4, #20]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	6122      	str	r2, [r4, #16]
 8007eb8:	3020      	adds	r0, #32
 8007eba:	e7e3      	b.n	8007e84 <__d2b+0x60>
 8007ebc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ec0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ec4:	f8c9 0000 	str.w	r0, [r9]
 8007ec8:	6918      	ldr	r0, [r3, #16]
 8007eca:	f7ff fd2b 	bl	8007924 <__hi0bits>
 8007ece:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ed2:	e7df      	b.n	8007e94 <__d2b+0x70>
 8007ed4:	080097c7 	.word	0x080097c7
 8007ed8:	080097d8 	.word	0x080097d8

08007edc <_calloc_r>:
 8007edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ede:	fba1 2402 	umull	r2, r4, r1, r2
 8007ee2:	b94c      	cbnz	r4, 8007ef8 <_calloc_r+0x1c>
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	9201      	str	r2, [sp, #4]
 8007ee8:	f000 f87a 	bl	8007fe0 <_malloc_r>
 8007eec:	9a01      	ldr	r2, [sp, #4]
 8007eee:	4605      	mov	r5, r0
 8007ef0:	b930      	cbnz	r0, 8007f00 <_calloc_r+0x24>
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	b003      	add	sp, #12
 8007ef6:	bd30      	pop	{r4, r5, pc}
 8007ef8:	220c      	movs	r2, #12
 8007efa:	6002      	str	r2, [r0, #0]
 8007efc:	2500      	movs	r5, #0
 8007efe:	e7f8      	b.n	8007ef2 <_calloc_r+0x16>
 8007f00:	4621      	mov	r1, r4
 8007f02:	f7fe f939 	bl	8006178 <memset>
 8007f06:	e7f4      	b.n	8007ef2 <_calloc_r+0x16>

08007f08 <_free_r>:
 8007f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f0a:	2900      	cmp	r1, #0
 8007f0c:	d044      	beq.n	8007f98 <_free_r+0x90>
 8007f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f12:	9001      	str	r0, [sp, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f1a1 0404 	sub.w	r4, r1, #4
 8007f1a:	bfb8      	it	lt
 8007f1c:	18e4      	addlt	r4, r4, r3
 8007f1e:	f000 fa81 	bl	8008424 <__malloc_lock>
 8007f22:	4a1e      	ldr	r2, [pc, #120]	; (8007f9c <_free_r+0x94>)
 8007f24:	9801      	ldr	r0, [sp, #4]
 8007f26:	6813      	ldr	r3, [r2, #0]
 8007f28:	b933      	cbnz	r3, 8007f38 <_free_r+0x30>
 8007f2a:	6063      	str	r3, [r4, #4]
 8007f2c:	6014      	str	r4, [r2, #0]
 8007f2e:	b003      	add	sp, #12
 8007f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f34:	f000 ba7c 	b.w	8008430 <__malloc_unlock>
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	d908      	bls.n	8007f4e <_free_r+0x46>
 8007f3c:	6825      	ldr	r5, [r4, #0]
 8007f3e:	1961      	adds	r1, r4, r5
 8007f40:	428b      	cmp	r3, r1
 8007f42:	bf01      	itttt	eq
 8007f44:	6819      	ldreq	r1, [r3, #0]
 8007f46:	685b      	ldreq	r3, [r3, #4]
 8007f48:	1949      	addeq	r1, r1, r5
 8007f4a:	6021      	streq	r1, [r4, #0]
 8007f4c:	e7ed      	b.n	8007f2a <_free_r+0x22>
 8007f4e:	461a      	mov	r2, r3
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	b10b      	cbz	r3, 8007f58 <_free_r+0x50>
 8007f54:	42a3      	cmp	r3, r4
 8007f56:	d9fa      	bls.n	8007f4e <_free_r+0x46>
 8007f58:	6811      	ldr	r1, [r2, #0]
 8007f5a:	1855      	adds	r5, r2, r1
 8007f5c:	42a5      	cmp	r5, r4
 8007f5e:	d10b      	bne.n	8007f78 <_free_r+0x70>
 8007f60:	6824      	ldr	r4, [r4, #0]
 8007f62:	4421      	add	r1, r4
 8007f64:	1854      	adds	r4, r2, r1
 8007f66:	42a3      	cmp	r3, r4
 8007f68:	6011      	str	r1, [r2, #0]
 8007f6a:	d1e0      	bne.n	8007f2e <_free_r+0x26>
 8007f6c:	681c      	ldr	r4, [r3, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	6053      	str	r3, [r2, #4]
 8007f72:	4421      	add	r1, r4
 8007f74:	6011      	str	r1, [r2, #0]
 8007f76:	e7da      	b.n	8007f2e <_free_r+0x26>
 8007f78:	d902      	bls.n	8007f80 <_free_r+0x78>
 8007f7a:	230c      	movs	r3, #12
 8007f7c:	6003      	str	r3, [r0, #0]
 8007f7e:	e7d6      	b.n	8007f2e <_free_r+0x26>
 8007f80:	6825      	ldr	r5, [r4, #0]
 8007f82:	1961      	adds	r1, r4, r5
 8007f84:	428b      	cmp	r3, r1
 8007f86:	bf04      	itt	eq
 8007f88:	6819      	ldreq	r1, [r3, #0]
 8007f8a:	685b      	ldreq	r3, [r3, #4]
 8007f8c:	6063      	str	r3, [r4, #4]
 8007f8e:	bf04      	itt	eq
 8007f90:	1949      	addeq	r1, r1, r5
 8007f92:	6021      	streq	r1, [r4, #0]
 8007f94:	6054      	str	r4, [r2, #4]
 8007f96:	e7ca      	b.n	8007f2e <_free_r+0x26>
 8007f98:	b003      	add	sp, #12
 8007f9a:	bd30      	pop	{r4, r5, pc}
 8007f9c:	2000088c 	.word	0x2000088c

08007fa0 <sbrk_aligned>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	4e0e      	ldr	r6, [pc, #56]	; (8007fdc <sbrk_aligned+0x3c>)
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	6831      	ldr	r1, [r6, #0]
 8007fa8:	4605      	mov	r5, r0
 8007faa:	b911      	cbnz	r1, 8007fb2 <sbrk_aligned+0x12>
 8007fac:	f000 f9e8 	bl	8008380 <_sbrk_r>
 8007fb0:	6030      	str	r0, [r6, #0]
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	f000 f9e3 	bl	8008380 <_sbrk_r>
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	d00a      	beq.n	8007fd4 <sbrk_aligned+0x34>
 8007fbe:	1cc4      	adds	r4, r0, #3
 8007fc0:	f024 0403 	bic.w	r4, r4, #3
 8007fc4:	42a0      	cmp	r0, r4
 8007fc6:	d007      	beq.n	8007fd8 <sbrk_aligned+0x38>
 8007fc8:	1a21      	subs	r1, r4, r0
 8007fca:	4628      	mov	r0, r5
 8007fcc:	f000 f9d8 	bl	8008380 <_sbrk_r>
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d101      	bne.n	8007fd8 <sbrk_aligned+0x38>
 8007fd4:	f04f 34ff 	mov.w	r4, #4294967295
 8007fd8:	4620      	mov	r0, r4
 8007fda:	bd70      	pop	{r4, r5, r6, pc}
 8007fdc:	20000890 	.word	0x20000890

08007fe0 <_malloc_r>:
 8007fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe4:	1ccd      	adds	r5, r1, #3
 8007fe6:	f025 0503 	bic.w	r5, r5, #3
 8007fea:	3508      	adds	r5, #8
 8007fec:	2d0c      	cmp	r5, #12
 8007fee:	bf38      	it	cc
 8007ff0:	250c      	movcc	r5, #12
 8007ff2:	2d00      	cmp	r5, #0
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	db01      	blt.n	8007ffc <_malloc_r+0x1c>
 8007ff8:	42a9      	cmp	r1, r5
 8007ffa:	d905      	bls.n	8008008 <_malloc_r+0x28>
 8007ffc:	230c      	movs	r3, #12
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	2600      	movs	r6, #0
 8008002:	4630      	mov	r0, r6
 8008004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008008:	4e2e      	ldr	r6, [pc, #184]	; (80080c4 <_malloc_r+0xe4>)
 800800a:	f000 fa0b 	bl	8008424 <__malloc_lock>
 800800e:	6833      	ldr	r3, [r6, #0]
 8008010:	461c      	mov	r4, r3
 8008012:	bb34      	cbnz	r4, 8008062 <_malloc_r+0x82>
 8008014:	4629      	mov	r1, r5
 8008016:	4638      	mov	r0, r7
 8008018:	f7ff ffc2 	bl	8007fa0 <sbrk_aligned>
 800801c:	1c43      	adds	r3, r0, #1
 800801e:	4604      	mov	r4, r0
 8008020:	d14d      	bne.n	80080be <_malloc_r+0xde>
 8008022:	6834      	ldr	r4, [r6, #0]
 8008024:	4626      	mov	r6, r4
 8008026:	2e00      	cmp	r6, #0
 8008028:	d140      	bne.n	80080ac <_malloc_r+0xcc>
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	4631      	mov	r1, r6
 800802e:	4638      	mov	r0, r7
 8008030:	eb04 0803 	add.w	r8, r4, r3
 8008034:	f000 f9a4 	bl	8008380 <_sbrk_r>
 8008038:	4580      	cmp	r8, r0
 800803a:	d13a      	bne.n	80080b2 <_malloc_r+0xd2>
 800803c:	6821      	ldr	r1, [r4, #0]
 800803e:	3503      	adds	r5, #3
 8008040:	1a6d      	subs	r5, r5, r1
 8008042:	f025 0503 	bic.w	r5, r5, #3
 8008046:	3508      	adds	r5, #8
 8008048:	2d0c      	cmp	r5, #12
 800804a:	bf38      	it	cc
 800804c:	250c      	movcc	r5, #12
 800804e:	4629      	mov	r1, r5
 8008050:	4638      	mov	r0, r7
 8008052:	f7ff ffa5 	bl	8007fa0 <sbrk_aligned>
 8008056:	3001      	adds	r0, #1
 8008058:	d02b      	beq.n	80080b2 <_malloc_r+0xd2>
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	442b      	add	r3, r5
 800805e:	6023      	str	r3, [r4, #0]
 8008060:	e00e      	b.n	8008080 <_malloc_r+0xa0>
 8008062:	6822      	ldr	r2, [r4, #0]
 8008064:	1b52      	subs	r2, r2, r5
 8008066:	d41e      	bmi.n	80080a6 <_malloc_r+0xc6>
 8008068:	2a0b      	cmp	r2, #11
 800806a:	d916      	bls.n	800809a <_malloc_r+0xba>
 800806c:	1961      	adds	r1, r4, r5
 800806e:	42a3      	cmp	r3, r4
 8008070:	6025      	str	r5, [r4, #0]
 8008072:	bf18      	it	ne
 8008074:	6059      	strne	r1, [r3, #4]
 8008076:	6863      	ldr	r3, [r4, #4]
 8008078:	bf08      	it	eq
 800807a:	6031      	streq	r1, [r6, #0]
 800807c:	5162      	str	r2, [r4, r5]
 800807e:	604b      	str	r3, [r1, #4]
 8008080:	4638      	mov	r0, r7
 8008082:	f104 060b 	add.w	r6, r4, #11
 8008086:	f000 f9d3 	bl	8008430 <__malloc_unlock>
 800808a:	f026 0607 	bic.w	r6, r6, #7
 800808e:	1d23      	adds	r3, r4, #4
 8008090:	1af2      	subs	r2, r6, r3
 8008092:	d0b6      	beq.n	8008002 <_malloc_r+0x22>
 8008094:	1b9b      	subs	r3, r3, r6
 8008096:	50a3      	str	r3, [r4, r2]
 8008098:	e7b3      	b.n	8008002 <_malloc_r+0x22>
 800809a:	6862      	ldr	r2, [r4, #4]
 800809c:	42a3      	cmp	r3, r4
 800809e:	bf0c      	ite	eq
 80080a0:	6032      	streq	r2, [r6, #0]
 80080a2:	605a      	strne	r2, [r3, #4]
 80080a4:	e7ec      	b.n	8008080 <_malloc_r+0xa0>
 80080a6:	4623      	mov	r3, r4
 80080a8:	6864      	ldr	r4, [r4, #4]
 80080aa:	e7b2      	b.n	8008012 <_malloc_r+0x32>
 80080ac:	4634      	mov	r4, r6
 80080ae:	6876      	ldr	r6, [r6, #4]
 80080b0:	e7b9      	b.n	8008026 <_malloc_r+0x46>
 80080b2:	230c      	movs	r3, #12
 80080b4:	603b      	str	r3, [r7, #0]
 80080b6:	4638      	mov	r0, r7
 80080b8:	f000 f9ba 	bl	8008430 <__malloc_unlock>
 80080bc:	e7a1      	b.n	8008002 <_malloc_r+0x22>
 80080be:	6025      	str	r5, [r4, #0]
 80080c0:	e7de      	b.n	8008080 <_malloc_r+0xa0>
 80080c2:	bf00      	nop
 80080c4:	2000088c 	.word	0x2000088c

080080c8 <__ssputs_r>:
 80080c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080cc:	688e      	ldr	r6, [r1, #8]
 80080ce:	429e      	cmp	r6, r3
 80080d0:	4682      	mov	sl, r0
 80080d2:	460c      	mov	r4, r1
 80080d4:	4690      	mov	r8, r2
 80080d6:	461f      	mov	r7, r3
 80080d8:	d838      	bhi.n	800814c <__ssputs_r+0x84>
 80080da:	898a      	ldrh	r2, [r1, #12]
 80080dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080e0:	d032      	beq.n	8008148 <__ssputs_r+0x80>
 80080e2:	6825      	ldr	r5, [r4, #0]
 80080e4:	6909      	ldr	r1, [r1, #16]
 80080e6:	eba5 0901 	sub.w	r9, r5, r1
 80080ea:	6965      	ldr	r5, [r4, #20]
 80080ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080f4:	3301      	adds	r3, #1
 80080f6:	444b      	add	r3, r9
 80080f8:	106d      	asrs	r5, r5, #1
 80080fa:	429d      	cmp	r5, r3
 80080fc:	bf38      	it	cc
 80080fe:	461d      	movcc	r5, r3
 8008100:	0553      	lsls	r3, r2, #21
 8008102:	d531      	bpl.n	8008168 <__ssputs_r+0xa0>
 8008104:	4629      	mov	r1, r5
 8008106:	f7ff ff6b 	bl	8007fe0 <_malloc_r>
 800810a:	4606      	mov	r6, r0
 800810c:	b950      	cbnz	r0, 8008124 <__ssputs_r+0x5c>
 800810e:	230c      	movs	r3, #12
 8008110:	f8ca 3000 	str.w	r3, [sl]
 8008114:	89a3      	ldrh	r3, [r4, #12]
 8008116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800811a:	81a3      	strh	r3, [r4, #12]
 800811c:	f04f 30ff 	mov.w	r0, #4294967295
 8008120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008124:	6921      	ldr	r1, [r4, #16]
 8008126:	464a      	mov	r2, r9
 8008128:	f7fd fffe 	bl	8006128 <memcpy>
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008136:	81a3      	strh	r3, [r4, #12]
 8008138:	6126      	str	r6, [r4, #16]
 800813a:	6165      	str	r5, [r4, #20]
 800813c:	444e      	add	r6, r9
 800813e:	eba5 0509 	sub.w	r5, r5, r9
 8008142:	6026      	str	r6, [r4, #0]
 8008144:	60a5      	str	r5, [r4, #8]
 8008146:	463e      	mov	r6, r7
 8008148:	42be      	cmp	r6, r7
 800814a:	d900      	bls.n	800814e <__ssputs_r+0x86>
 800814c:	463e      	mov	r6, r7
 800814e:	6820      	ldr	r0, [r4, #0]
 8008150:	4632      	mov	r2, r6
 8008152:	4641      	mov	r1, r8
 8008154:	f7fd fff6 	bl	8006144 <memmove>
 8008158:	68a3      	ldr	r3, [r4, #8]
 800815a:	1b9b      	subs	r3, r3, r6
 800815c:	60a3      	str	r3, [r4, #8]
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	4433      	add	r3, r6
 8008162:	6023      	str	r3, [r4, #0]
 8008164:	2000      	movs	r0, #0
 8008166:	e7db      	b.n	8008120 <__ssputs_r+0x58>
 8008168:	462a      	mov	r2, r5
 800816a:	f000 f967 	bl	800843c <_realloc_r>
 800816e:	4606      	mov	r6, r0
 8008170:	2800      	cmp	r0, #0
 8008172:	d1e1      	bne.n	8008138 <__ssputs_r+0x70>
 8008174:	6921      	ldr	r1, [r4, #16]
 8008176:	4650      	mov	r0, sl
 8008178:	f7ff fec6 	bl	8007f08 <_free_r>
 800817c:	e7c7      	b.n	800810e <__ssputs_r+0x46>
	...

08008180 <_svfiprintf_r>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	4698      	mov	r8, r3
 8008186:	898b      	ldrh	r3, [r1, #12]
 8008188:	061b      	lsls	r3, r3, #24
 800818a:	b09d      	sub	sp, #116	; 0x74
 800818c:	4607      	mov	r7, r0
 800818e:	460d      	mov	r5, r1
 8008190:	4614      	mov	r4, r2
 8008192:	d50e      	bpl.n	80081b2 <_svfiprintf_r+0x32>
 8008194:	690b      	ldr	r3, [r1, #16]
 8008196:	b963      	cbnz	r3, 80081b2 <_svfiprintf_r+0x32>
 8008198:	2140      	movs	r1, #64	; 0x40
 800819a:	f7ff ff21 	bl	8007fe0 <_malloc_r>
 800819e:	6028      	str	r0, [r5, #0]
 80081a0:	6128      	str	r0, [r5, #16]
 80081a2:	b920      	cbnz	r0, 80081ae <_svfiprintf_r+0x2e>
 80081a4:	230c      	movs	r3, #12
 80081a6:	603b      	str	r3, [r7, #0]
 80081a8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ac:	e0d1      	b.n	8008352 <_svfiprintf_r+0x1d2>
 80081ae:	2340      	movs	r3, #64	; 0x40
 80081b0:	616b      	str	r3, [r5, #20]
 80081b2:	2300      	movs	r3, #0
 80081b4:	9309      	str	r3, [sp, #36]	; 0x24
 80081b6:	2320      	movs	r3, #32
 80081b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80081c0:	2330      	movs	r3, #48	; 0x30
 80081c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800836c <_svfiprintf_r+0x1ec>
 80081c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081ca:	f04f 0901 	mov.w	r9, #1
 80081ce:	4623      	mov	r3, r4
 80081d0:	469a      	mov	sl, r3
 80081d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d6:	b10a      	cbz	r2, 80081dc <_svfiprintf_r+0x5c>
 80081d8:	2a25      	cmp	r2, #37	; 0x25
 80081da:	d1f9      	bne.n	80081d0 <_svfiprintf_r+0x50>
 80081dc:	ebba 0b04 	subs.w	fp, sl, r4
 80081e0:	d00b      	beq.n	80081fa <_svfiprintf_r+0x7a>
 80081e2:	465b      	mov	r3, fp
 80081e4:	4622      	mov	r2, r4
 80081e6:	4629      	mov	r1, r5
 80081e8:	4638      	mov	r0, r7
 80081ea:	f7ff ff6d 	bl	80080c8 <__ssputs_r>
 80081ee:	3001      	adds	r0, #1
 80081f0:	f000 80aa 	beq.w	8008348 <_svfiprintf_r+0x1c8>
 80081f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081f6:	445a      	add	r2, fp
 80081f8:	9209      	str	r2, [sp, #36]	; 0x24
 80081fa:	f89a 3000 	ldrb.w	r3, [sl]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 80a2 	beq.w	8008348 <_svfiprintf_r+0x1c8>
 8008204:	2300      	movs	r3, #0
 8008206:	f04f 32ff 	mov.w	r2, #4294967295
 800820a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800820e:	f10a 0a01 	add.w	sl, sl, #1
 8008212:	9304      	str	r3, [sp, #16]
 8008214:	9307      	str	r3, [sp, #28]
 8008216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800821a:	931a      	str	r3, [sp, #104]	; 0x68
 800821c:	4654      	mov	r4, sl
 800821e:	2205      	movs	r2, #5
 8008220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008224:	4851      	ldr	r0, [pc, #324]	; (800836c <_svfiprintf_r+0x1ec>)
 8008226:	f7f7 ffe3 	bl	80001f0 <memchr>
 800822a:	9a04      	ldr	r2, [sp, #16]
 800822c:	b9d8      	cbnz	r0, 8008266 <_svfiprintf_r+0xe6>
 800822e:	06d0      	lsls	r0, r2, #27
 8008230:	bf44      	itt	mi
 8008232:	2320      	movmi	r3, #32
 8008234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008238:	0711      	lsls	r1, r2, #28
 800823a:	bf44      	itt	mi
 800823c:	232b      	movmi	r3, #43	; 0x2b
 800823e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008242:	f89a 3000 	ldrb.w	r3, [sl]
 8008246:	2b2a      	cmp	r3, #42	; 0x2a
 8008248:	d015      	beq.n	8008276 <_svfiprintf_r+0xf6>
 800824a:	9a07      	ldr	r2, [sp, #28]
 800824c:	4654      	mov	r4, sl
 800824e:	2000      	movs	r0, #0
 8008250:	f04f 0c0a 	mov.w	ip, #10
 8008254:	4621      	mov	r1, r4
 8008256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800825a:	3b30      	subs	r3, #48	; 0x30
 800825c:	2b09      	cmp	r3, #9
 800825e:	d94e      	bls.n	80082fe <_svfiprintf_r+0x17e>
 8008260:	b1b0      	cbz	r0, 8008290 <_svfiprintf_r+0x110>
 8008262:	9207      	str	r2, [sp, #28]
 8008264:	e014      	b.n	8008290 <_svfiprintf_r+0x110>
 8008266:	eba0 0308 	sub.w	r3, r0, r8
 800826a:	fa09 f303 	lsl.w	r3, r9, r3
 800826e:	4313      	orrs	r3, r2
 8008270:	9304      	str	r3, [sp, #16]
 8008272:	46a2      	mov	sl, r4
 8008274:	e7d2      	b.n	800821c <_svfiprintf_r+0x9c>
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	1d19      	adds	r1, r3, #4
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	9103      	str	r1, [sp, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	bfbb      	ittet	lt
 8008282:	425b      	neglt	r3, r3
 8008284:	f042 0202 	orrlt.w	r2, r2, #2
 8008288:	9307      	strge	r3, [sp, #28]
 800828a:	9307      	strlt	r3, [sp, #28]
 800828c:	bfb8      	it	lt
 800828e:	9204      	strlt	r2, [sp, #16]
 8008290:	7823      	ldrb	r3, [r4, #0]
 8008292:	2b2e      	cmp	r3, #46	; 0x2e
 8008294:	d10c      	bne.n	80082b0 <_svfiprintf_r+0x130>
 8008296:	7863      	ldrb	r3, [r4, #1]
 8008298:	2b2a      	cmp	r3, #42	; 0x2a
 800829a:	d135      	bne.n	8008308 <_svfiprintf_r+0x188>
 800829c:	9b03      	ldr	r3, [sp, #12]
 800829e:	1d1a      	adds	r2, r3, #4
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	9203      	str	r2, [sp, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	bfb8      	it	lt
 80082a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80082ac:	3402      	adds	r4, #2
 80082ae:	9305      	str	r3, [sp, #20]
 80082b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800837c <_svfiprintf_r+0x1fc>
 80082b4:	7821      	ldrb	r1, [r4, #0]
 80082b6:	2203      	movs	r2, #3
 80082b8:	4650      	mov	r0, sl
 80082ba:	f7f7 ff99 	bl	80001f0 <memchr>
 80082be:	b140      	cbz	r0, 80082d2 <_svfiprintf_r+0x152>
 80082c0:	2340      	movs	r3, #64	; 0x40
 80082c2:	eba0 000a 	sub.w	r0, r0, sl
 80082c6:	fa03 f000 	lsl.w	r0, r3, r0
 80082ca:	9b04      	ldr	r3, [sp, #16]
 80082cc:	4303      	orrs	r3, r0
 80082ce:	3401      	adds	r4, #1
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d6:	4826      	ldr	r0, [pc, #152]	; (8008370 <_svfiprintf_r+0x1f0>)
 80082d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082dc:	2206      	movs	r2, #6
 80082de:	f7f7 ff87 	bl	80001f0 <memchr>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d038      	beq.n	8008358 <_svfiprintf_r+0x1d8>
 80082e6:	4b23      	ldr	r3, [pc, #140]	; (8008374 <_svfiprintf_r+0x1f4>)
 80082e8:	bb1b      	cbnz	r3, 8008332 <_svfiprintf_r+0x1b2>
 80082ea:	9b03      	ldr	r3, [sp, #12]
 80082ec:	3307      	adds	r3, #7
 80082ee:	f023 0307 	bic.w	r3, r3, #7
 80082f2:	3308      	adds	r3, #8
 80082f4:	9303      	str	r3, [sp, #12]
 80082f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f8:	4433      	add	r3, r6
 80082fa:	9309      	str	r3, [sp, #36]	; 0x24
 80082fc:	e767      	b.n	80081ce <_svfiprintf_r+0x4e>
 80082fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008302:	460c      	mov	r4, r1
 8008304:	2001      	movs	r0, #1
 8008306:	e7a5      	b.n	8008254 <_svfiprintf_r+0xd4>
 8008308:	2300      	movs	r3, #0
 800830a:	3401      	adds	r4, #1
 800830c:	9305      	str	r3, [sp, #20]
 800830e:	4619      	mov	r1, r3
 8008310:	f04f 0c0a 	mov.w	ip, #10
 8008314:	4620      	mov	r0, r4
 8008316:	f810 2b01 	ldrb.w	r2, [r0], #1
 800831a:	3a30      	subs	r2, #48	; 0x30
 800831c:	2a09      	cmp	r2, #9
 800831e:	d903      	bls.n	8008328 <_svfiprintf_r+0x1a8>
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0c5      	beq.n	80082b0 <_svfiprintf_r+0x130>
 8008324:	9105      	str	r1, [sp, #20]
 8008326:	e7c3      	b.n	80082b0 <_svfiprintf_r+0x130>
 8008328:	fb0c 2101 	mla	r1, ip, r1, r2
 800832c:	4604      	mov	r4, r0
 800832e:	2301      	movs	r3, #1
 8008330:	e7f0      	b.n	8008314 <_svfiprintf_r+0x194>
 8008332:	ab03      	add	r3, sp, #12
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	462a      	mov	r2, r5
 8008338:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <_svfiprintf_r+0x1f8>)
 800833a:	a904      	add	r1, sp, #16
 800833c:	4638      	mov	r0, r7
 800833e:	f7fd ffc3 	bl	80062c8 <_printf_float>
 8008342:	1c42      	adds	r2, r0, #1
 8008344:	4606      	mov	r6, r0
 8008346:	d1d6      	bne.n	80082f6 <_svfiprintf_r+0x176>
 8008348:	89ab      	ldrh	r3, [r5, #12]
 800834a:	065b      	lsls	r3, r3, #25
 800834c:	f53f af2c 	bmi.w	80081a8 <_svfiprintf_r+0x28>
 8008350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008352:	b01d      	add	sp, #116	; 0x74
 8008354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008358:	ab03      	add	r3, sp, #12
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	462a      	mov	r2, r5
 800835e:	4b06      	ldr	r3, [pc, #24]	; (8008378 <_svfiprintf_r+0x1f8>)
 8008360:	a904      	add	r1, sp, #16
 8008362:	4638      	mov	r0, r7
 8008364:	f7fe fa54 	bl	8006810 <_printf_i>
 8008368:	e7eb      	b.n	8008342 <_svfiprintf_r+0x1c2>
 800836a:	bf00      	nop
 800836c:	08009934 	.word	0x08009934
 8008370:	0800993e 	.word	0x0800993e
 8008374:	080062c9 	.word	0x080062c9
 8008378:	080080c9 	.word	0x080080c9
 800837c:	0800993a 	.word	0x0800993a

08008380 <_sbrk_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4d06      	ldr	r5, [pc, #24]	; (800839c <_sbrk_r+0x1c>)
 8008384:	2300      	movs	r3, #0
 8008386:	4604      	mov	r4, r0
 8008388:	4608      	mov	r0, r1
 800838a:	602b      	str	r3, [r5, #0]
 800838c:	f7f9 faf2 	bl	8001974 <_sbrk>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d102      	bne.n	800839a <_sbrk_r+0x1a>
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	b103      	cbz	r3, 800839a <_sbrk_r+0x1a>
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	20000894 	.word	0x20000894

080083a0 <__assert_func>:
 80083a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083a2:	4614      	mov	r4, r2
 80083a4:	461a      	mov	r2, r3
 80083a6:	4b09      	ldr	r3, [pc, #36]	; (80083cc <__assert_func+0x2c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4605      	mov	r5, r0
 80083ac:	68d8      	ldr	r0, [r3, #12]
 80083ae:	b14c      	cbz	r4, 80083c4 <__assert_func+0x24>
 80083b0:	4b07      	ldr	r3, [pc, #28]	; (80083d0 <__assert_func+0x30>)
 80083b2:	9100      	str	r1, [sp, #0]
 80083b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083b8:	4906      	ldr	r1, [pc, #24]	; (80083d4 <__assert_func+0x34>)
 80083ba:	462b      	mov	r3, r5
 80083bc:	f000 f80e 	bl	80083dc <fiprintf>
 80083c0:	f000 fa92 	bl	80088e8 <abort>
 80083c4:	4b04      	ldr	r3, [pc, #16]	; (80083d8 <__assert_func+0x38>)
 80083c6:	461c      	mov	r4, r3
 80083c8:	e7f3      	b.n	80083b2 <__assert_func+0x12>
 80083ca:	bf00      	nop
 80083cc:	20000014 	.word	0x20000014
 80083d0:	08009945 	.word	0x08009945
 80083d4:	08009952 	.word	0x08009952
 80083d8:	08009980 	.word	0x08009980

080083dc <fiprintf>:
 80083dc:	b40e      	push	{r1, r2, r3}
 80083de:	b503      	push	{r0, r1, lr}
 80083e0:	4601      	mov	r1, r0
 80083e2:	ab03      	add	r3, sp, #12
 80083e4:	4805      	ldr	r0, [pc, #20]	; (80083fc <fiprintf+0x20>)
 80083e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ea:	6800      	ldr	r0, [r0, #0]
 80083ec:	9301      	str	r3, [sp, #4]
 80083ee:	f000 f87d 	bl	80084ec <_vfiprintf_r>
 80083f2:	b002      	add	sp, #8
 80083f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083f8:	b003      	add	sp, #12
 80083fa:	4770      	bx	lr
 80083fc:	20000014 	.word	0x20000014

08008400 <__ascii_mbtowc>:
 8008400:	b082      	sub	sp, #8
 8008402:	b901      	cbnz	r1, 8008406 <__ascii_mbtowc+0x6>
 8008404:	a901      	add	r1, sp, #4
 8008406:	b142      	cbz	r2, 800841a <__ascii_mbtowc+0x1a>
 8008408:	b14b      	cbz	r3, 800841e <__ascii_mbtowc+0x1e>
 800840a:	7813      	ldrb	r3, [r2, #0]
 800840c:	600b      	str	r3, [r1, #0]
 800840e:	7812      	ldrb	r2, [r2, #0]
 8008410:	1e10      	subs	r0, r2, #0
 8008412:	bf18      	it	ne
 8008414:	2001      	movne	r0, #1
 8008416:	b002      	add	sp, #8
 8008418:	4770      	bx	lr
 800841a:	4610      	mov	r0, r2
 800841c:	e7fb      	b.n	8008416 <__ascii_mbtowc+0x16>
 800841e:	f06f 0001 	mvn.w	r0, #1
 8008422:	e7f8      	b.n	8008416 <__ascii_mbtowc+0x16>

08008424 <__malloc_lock>:
 8008424:	4801      	ldr	r0, [pc, #4]	; (800842c <__malloc_lock+0x8>)
 8008426:	f000 bc1f 	b.w	8008c68 <__retarget_lock_acquire_recursive>
 800842a:	bf00      	nop
 800842c:	20000898 	.word	0x20000898

08008430 <__malloc_unlock>:
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <__malloc_unlock+0x8>)
 8008432:	f000 bc1a 	b.w	8008c6a <__retarget_lock_release_recursive>
 8008436:	bf00      	nop
 8008438:	20000898 	.word	0x20000898

0800843c <_realloc_r>:
 800843c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008440:	4680      	mov	r8, r0
 8008442:	4614      	mov	r4, r2
 8008444:	460e      	mov	r6, r1
 8008446:	b921      	cbnz	r1, 8008452 <_realloc_r+0x16>
 8008448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800844c:	4611      	mov	r1, r2
 800844e:	f7ff bdc7 	b.w	8007fe0 <_malloc_r>
 8008452:	b92a      	cbnz	r2, 8008460 <_realloc_r+0x24>
 8008454:	f7ff fd58 	bl	8007f08 <_free_r>
 8008458:	4625      	mov	r5, r4
 800845a:	4628      	mov	r0, r5
 800845c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008460:	f000 fc6a 	bl	8008d38 <_malloc_usable_size_r>
 8008464:	4284      	cmp	r4, r0
 8008466:	4607      	mov	r7, r0
 8008468:	d802      	bhi.n	8008470 <_realloc_r+0x34>
 800846a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800846e:	d812      	bhi.n	8008496 <_realloc_r+0x5a>
 8008470:	4621      	mov	r1, r4
 8008472:	4640      	mov	r0, r8
 8008474:	f7ff fdb4 	bl	8007fe0 <_malloc_r>
 8008478:	4605      	mov	r5, r0
 800847a:	2800      	cmp	r0, #0
 800847c:	d0ed      	beq.n	800845a <_realloc_r+0x1e>
 800847e:	42bc      	cmp	r4, r7
 8008480:	4622      	mov	r2, r4
 8008482:	4631      	mov	r1, r6
 8008484:	bf28      	it	cs
 8008486:	463a      	movcs	r2, r7
 8008488:	f7fd fe4e 	bl	8006128 <memcpy>
 800848c:	4631      	mov	r1, r6
 800848e:	4640      	mov	r0, r8
 8008490:	f7ff fd3a 	bl	8007f08 <_free_r>
 8008494:	e7e1      	b.n	800845a <_realloc_r+0x1e>
 8008496:	4635      	mov	r5, r6
 8008498:	e7df      	b.n	800845a <_realloc_r+0x1e>

0800849a <__sfputc_r>:
 800849a:	6893      	ldr	r3, [r2, #8]
 800849c:	3b01      	subs	r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	b410      	push	{r4}
 80084a2:	6093      	str	r3, [r2, #8]
 80084a4:	da08      	bge.n	80084b8 <__sfputc_r+0x1e>
 80084a6:	6994      	ldr	r4, [r2, #24]
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	db01      	blt.n	80084b0 <__sfputc_r+0x16>
 80084ac:	290a      	cmp	r1, #10
 80084ae:	d103      	bne.n	80084b8 <__sfputc_r+0x1e>
 80084b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084b4:	f000 b94a 	b.w	800874c <__swbuf_r>
 80084b8:	6813      	ldr	r3, [r2, #0]
 80084ba:	1c58      	adds	r0, r3, #1
 80084bc:	6010      	str	r0, [r2, #0]
 80084be:	7019      	strb	r1, [r3, #0]
 80084c0:	4608      	mov	r0, r1
 80084c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <__sfputs_r>:
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	4606      	mov	r6, r0
 80084cc:	460f      	mov	r7, r1
 80084ce:	4614      	mov	r4, r2
 80084d0:	18d5      	adds	r5, r2, r3
 80084d2:	42ac      	cmp	r4, r5
 80084d4:	d101      	bne.n	80084da <__sfputs_r+0x12>
 80084d6:	2000      	movs	r0, #0
 80084d8:	e007      	b.n	80084ea <__sfputs_r+0x22>
 80084da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084de:	463a      	mov	r2, r7
 80084e0:	4630      	mov	r0, r6
 80084e2:	f7ff ffda 	bl	800849a <__sfputc_r>
 80084e6:	1c43      	adds	r3, r0, #1
 80084e8:	d1f3      	bne.n	80084d2 <__sfputs_r+0xa>
 80084ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084ec <_vfiprintf_r>:
 80084ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f0:	460d      	mov	r5, r1
 80084f2:	b09d      	sub	sp, #116	; 0x74
 80084f4:	4614      	mov	r4, r2
 80084f6:	4698      	mov	r8, r3
 80084f8:	4606      	mov	r6, r0
 80084fa:	b118      	cbz	r0, 8008504 <_vfiprintf_r+0x18>
 80084fc:	6983      	ldr	r3, [r0, #24]
 80084fe:	b90b      	cbnz	r3, 8008504 <_vfiprintf_r+0x18>
 8008500:	f000 fb14 	bl	8008b2c <__sinit>
 8008504:	4b89      	ldr	r3, [pc, #548]	; (800872c <_vfiprintf_r+0x240>)
 8008506:	429d      	cmp	r5, r3
 8008508:	d11b      	bne.n	8008542 <_vfiprintf_r+0x56>
 800850a:	6875      	ldr	r5, [r6, #4]
 800850c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800850e:	07d9      	lsls	r1, r3, #31
 8008510:	d405      	bmi.n	800851e <_vfiprintf_r+0x32>
 8008512:	89ab      	ldrh	r3, [r5, #12]
 8008514:	059a      	lsls	r2, r3, #22
 8008516:	d402      	bmi.n	800851e <_vfiprintf_r+0x32>
 8008518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800851a:	f000 fba5 	bl	8008c68 <__retarget_lock_acquire_recursive>
 800851e:	89ab      	ldrh	r3, [r5, #12]
 8008520:	071b      	lsls	r3, r3, #28
 8008522:	d501      	bpl.n	8008528 <_vfiprintf_r+0x3c>
 8008524:	692b      	ldr	r3, [r5, #16]
 8008526:	b9eb      	cbnz	r3, 8008564 <_vfiprintf_r+0x78>
 8008528:	4629      	mov	r1, r5
 800852a:	4630      	mov	r0, r6
 800852c:	f000 f96e 	bl	800880c <__swsetup_r>
 8008530:	b1c0      	cbz	r0, 8008564 <_vfiprintf_r+0x78>
 8008532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008534:	07dc      	lsls	r4, r3, #31
 8008536:	d50e      	bpl.n	8008556 <_vfiprintf_r+0x6a>
 8008538:	f04f 30ff 	mov.w	r0, #4294967295
 800853c:	b01d      	add	sp, #116	; 0x74
 800853e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008542:	4b7b      	ldr	r3, [pc, #492]	; (8008730 <_vfiprintf_r+0x244>)
 8008544:	429d      	cmp	r5, r3
 8008546:	d101      	bne.n	800854c <_vfiprintf_r+0x60>
 8008548:	68b5      	ldr	r5, [r6, #8]
 800854a:	e7df      	b.n	800850c <_vfiprintf_r+0x20>
 800854c:	4b79      	ldr	r3, [pc, #484]	; (8008734 <_vfiprintf_r+0x248>)
 800854e:	429d      	cmp	r5, r3
 8008550:	bf08      	it	eq
 8008552:	68f5      	ldreq	r5, [r6, #12]
 8008554:	e7da      	b.n	800850c <_vfiprintf_r+0x20>
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	0598      	lsls	r0, r3, #22
 800855a:	d4ed      	bmi.n	8008538 <_vfiprintf_r+0x4c>
 800855c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800855e:	f000 fb84 	bl	8008c6a <__retarget_lock_release_recursive>
 8008562:	e7e9      	b.n	8008538 <_vfiprintf_r+0x4c>
 8008564:	2300      	movs	r3, #0
 8008566:	9309      	str	r3, [sp, #36]	; 0x24
 8008568:	2320      	movs	r3, #32
 800856a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800856e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008572:	2330      	movs	r3, #48	; 0x30
 8008574:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008738 <_vfiprintf_r+0x24c>
 8008578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800857c:	f04f 0901 	mov.w	r9, #1
 8008580:	4623      	mov	r3, r4
 8008582:	469a      	mov	sl, r3
 8008584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008588:	b10a      	cbz	r2, 800858e <_vfiprintf_r+0xa2>
 800858a:	2a25      	cmp	r2, #37	; 0x25
 800858c:	d1f9      	bne.n	8008582 <_vfiprintf_r+0x96>
 800858e:	ebba 0b04 	subs.w	fp, sl, r4
 8008592:	d00b      	beq.n	80085ac <_vfiprintf_r+0xc0>
 8008594:	465b      	mov	r3, fp
 8008596:	4622      	mov	r2, r4
 8008598:	4629      	mov	r1, r5
 800859a:	4630      	mov	r0, r6
 800859c:	f7ff ff94 	bl	80084c8 <__sfputs_r>
 80085a0:	3001      	adds	r0, #1
 80085a2:	f000 80aa 	beq.w	80086fa <_vfiprintf_r+0x20e>
 80085a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085a8:	445a      	add	r2, fp
 80085aa:	9209      	str	r2, [sp, #36]	; 0x24
 80085ac:	f89a 3000 	ldrb.w	r3, [sl]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 80a2 	beq.w	80086fa <_vfiprintf_r+0x20e>
 80085b6:	2300      	movs	r3, #0
 80085b8:	f04f 32ff 	mov.w	r2, #4294967295
 80085bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085c0:	f10a 0a01 	add.w	sl, sl, #1
 80085c4:	9304      	str	r3, [sp, #16]
 80085c6:	9307      	str	r3, [sp, #28]
 80085c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085cc:	931a      	str	r3, [sp, #104]	; 0x68
 80085ce:	4654      	mov	r4, sl
 80085d0:	2205      	movs	r2, #5
 80085d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d6:	4858      	ldr	r0, [pc, #352]	; (8008738 <_vfiprintf_r+0x24c>)
 80085d8:	f7f7 fe0a 	bl	80001f0 <memchr>
 80085dc:	9a04      	ldr	r2, [sp, #16]
 80085de:	b9d8      	cbnz	r0, 8008618 <_vfiprintf_r+0x12c>
 80085e0:	06d1      	lsls	r1, r2, #27
 80085e2:	bf44      	itt	mi
 80085e4:	2320      	movmi	r3, #32
 80085e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ea:	0713      	lsls	r3, r2, #28
 80085ec:	bf44      	itt	mi
 80085ee:	232b      	movmi	r3, #43	; 0x2b
 80085f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085f4:	f89a 3000 	ldrb.w	r3, [sl]
 80085f8:	2b2a      	cmp	r3, #42	; 0x2a
 80085fa:	d015      	beq.n	8008628 <_vfiprintf_r+0x13c>
 80085fc:	9a07      	ldr	r2, [sp, #28]
 80085fe:	4654      	mov	r4, sl
 8008600:	2000      	movs	r0, #0
 8008602:	f04f 0c0a 	mov.w	ip, #10
 8008606:	4621      	mov	r1, r4
 8008608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800860c:	3b30      	subs	r3, #48	; 0x30
 800860e:	2b09      	cmp	r3, #9
 8008610:	d94e      	bls.n	80086b0 <_vfiprintf_r+0x1c4>
 8008612:	b1b0      	cbz	r0, 8008642 <_vfiprintf_r+0x156>
 8008614:	9207      	str	r2, [sp, #28]
 8008616:	e014      	b.n	8008642 <_vfiprintf_r+0x156>
 8008618:	eba0 0308 	sub.w	r3, r0, r8
 800861c:	fa09 f303 	lsl.w	r3, r9, r3
 8008620:	4313      	orrs	r3, r2
 8008622:	9304      	str	r3, [sp, #16]
 8008624:	46a2      	mov	sl, r4
 8008626:	e7d2      	b.n	80085ce <_vfiprintf_r+0xe2>
 8008628:	9b03      	ldr	r3, [sp, #12]
 800862a:	1d19      	adds	r1, r3, #4
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	9103      	str	r1, [sp, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	bfbb      	ittet	lt
 8008634:	425b      	neglt	r3, r3
 8008636:	f042 0202 	orrlt.w	r2, r2, #2
 800863a:	9307      	strge	r3, [sp, #28]
 800863c:	9307      	strlt	r3, [sp, #28]
 800863e:	bfb8      	it	lt
 8008640:	9204      	strlt	r2, [sp, #16]
 8008642:	7823      	ldrb	r3, [r4, #0]
 8008644:	2b2e      	cmp	r3, #46	; 0x2e
 8008646:	d10c      	bne.n	8008662 <_vfiprintf_r+0x176>
 8008648:	7863      	ldrb	r3, [r4, #1]
 800864a:	2b2a      	cmp	r3, #42	; 0x2a
 800864c:	d135      	bne.n	80086ba <_vfiprintf_r+0x1ce>
 800864e:	9b03      	ldr	r3, [sp, #12]
 8008650:	1d1a      	adds	r2, r3, #4
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	9203      	str	r2, [sp, #12]
 8008656:	2b00      	cmp	r3, #0
 8008658:	bfb8      	it	lt
 800865a:	f04f 33ff 	movlt.w	r3, #4294967295
 800865e:	3402      	adds	r4, #2
 8008660:	9305      	str	r3, [sp, #20]
 8008662:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008748 <_vfiprintf_r+0x25c>
 8008666:	7821      	ldrb	r1, [r4, #0]
 8008668:	2203      	movs	r2, #3
 800866a:	4650      	mov	r0, sl
 800866c:	f7f7 fdc0 	bl	80001f0 <memchr>
 8008670:	b140      	cbz	r0, 8008684 <_vfiprintf_r+0x198>
 8008672:	2340      	movs	r3, #64	; 0x40
 8008674:	eba0 000a 	sub.w	r0, r0, sl
 8008678:	fa03 f000 	lsl.w	r0, r3, r0
 800867c:	9b04      	ldr	r3, [sp, #16]
 800867e:	4303      	orrs	r3, r0
 8008680:	3401      	adds	r4, #1
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008688:	482c      	ldr	r0, [pc, #176]	; (800873c <_vfiprintf_r+0x250>)
 800868a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800868e:	2206      	movs	r2, #6
 8008690:	f7f7 fdae 	bl	80001f0 <memchr>
 8008694:	2800      	cmp	r0, #0
 8008696:	d03f      	beq.n	8008718 <_vfiprintf_r+0x22c>
 8008698:	4b29      	ldr	r3, [pc, #164]	; (8008740 <_vfiprintf_r+0x254>)
 800869a:	bb1b      	cbnz	r3, 80086e4 <_vfiprintf_r+0x1f8>
 800869c:	9b03      	ldr	r3, [sp, #12]
 800869e:	3307      	adds	r3, #7
 80086a0:	f023 0307 	bic.w	r3, r3, #7
 80086a4:	3308      	adds	r3, #8
 80086a6:	9303      	str	r3, [sp, #12]
 80086a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086aa:	443b      	add	r3, r7
 80086ac:	9309      	str	r3, [sp, #36]	; 0x24
 80086ae:	e767      	b.n	8008580 <_vfiprintf_r+0x94>
 80086b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80086b4:	460c      	mov	r4, r1
 80086b6:	2001      	movs	r0, #1
 80086b8:	e7a5      	b.n	8008606 <_vfiprintf_r+0x11a>
 80086ba:	2300      	movs	r3, #0
 80086bc:	3401      	adds	r4, #1
 80086be:	9305      	str	r3, [sp, #20]
 80086c0:	4619      	mov	r1, r3
 80086c2:	f04f 0c0a 	mov.w	ip, #10
 80086c6:	4620      	mov	r0, r4
 80086c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086cc:	3a30      	subs	r2, #48	; 0x30
 80086ce:	2a09      	cmp	r2, #9
 80086d0:	d903      	bls.n	80086da <_vfiprintf_r+0x1ee>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0c5      	beq.n	8008662 <_vfiprintf_r+0x176>
 80086d6:	9105      	str	r1, [sp, #20]
 80086d8:	e7c3      	b.n	8008662 <_vfiprintf_r+0x176>
 80086da:	fb0c 2101 	mla	r1, ip, r1, r2
 80086de:	4604      	mov	r4, r0
 80086e0:	2301      	movs	r3, #1
 80086e2:	e7f0      	b.n	80086c6 <_vfiprintf_r+0x1da>
 80086e4:	ab03      	add	r3, sp, #12
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	462a      	mov	r2, r5
 80086ea:	4b16      	ldr	r3, [pc, #88]	; (8008744 <_vfiprintf_r+0x258>)
 80086ec:	a904      	add	r1, sp, #16
 80086ee:	4630      	mov	r0, r6
 80086f0:	f7fd fdea 	bl	80062c8 <_printf_float>
 80086f4:	4607      	mov	r7, r0
 80086f6:	1c78      	adds	r0, r7, #1
 80086f8:	d1d6      	bne.n	80086a8 <_vfiprintf_r+0x1bc>
 80086fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086fc:	07d9      	lsls	r1, r3, #31
 80086fe:	d405      	bmi.n	800870c <_vfiprintf_r+0x220>
 8008700:	89ab      	ldrh	r3, [r5, #12]
 8008702:	059a      	lsls	r2, r3, #22
 8008704:	d402      	bmi.n	800870c <_vfiprintf_r+0x220>
 8008706:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008708:	f000 faaf 	bl	8008c6a <__retarget_lock_release_recursive>
 800870c:	89ab      	ldrh	r3, [r5, #12]
 800870e:	065b      	lsls	r3, r3, #25
 8008710:	f53f af12 	bmi.w	8008538 <_vfiprintf_r+0x4c>
 8008714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008716:	e711      	b.n	800853c <_vfiprintf_r+0x50>
 8008718:	ab03      	add	r3, sp, #12
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	462a      	mov	r2, r5
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <_vfiprintf_r+0x258>)
 8008720:	a904      	add	r1, sp, #16
 8008722:	4630      	mov	r0, r6
 8008724:	f7fe f874 	bl	8006810 <_printf_i>
 8008728:	e7e4      	b.n	80086f4 <_vfiprintf_r+0x208>
 800872a:	bf00      	nop
 800872c:	08009aac 	.word	0x08009aac
 8008730:	08009acc 	.word	0x08009acc
 8008734:	08009a8c 	.word	0x08009a8c
 8008738:	08009934 	.word	0x08009934
 800873c:	0800993e 	.word	0x0800993e
 8008740:	080062c9 	.word	0x080062c9
 8008744:	080084c9 	.word	0x080084c9
 8008748:	0800993a 	.word	0x0800993a

0800874c <__swbuf_r>:
 800874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874e:	460e      	mov	r6, r1
 8008750:	4614      	mov	r4, r2
 8008752:	4605      	mov	r5, r0
 8008754:	b118      	cbz	r0, 800875e <__swbuf_r+0x12>
 8008756:	6983      	ldr	r3, [r0, #24]
 8008758:	b90b      	cbnz	r3, 800875e <__swbuf_r+0x12>
 800875a:	f000 f9e7 	bl	8008b2c <__sinit>
 800875e:	4b21      	ldr	r3, [pc, #132]	; (80087e4 <__swbuf_r+0x98>)
 8008760:	429c      	cmp	r4, r3
 8008762:	d12b      	bne.n	80087bc <__swbuf_r+0x70>
 8008764:	686c      	ldr	r4, [r5, #4]
 8008766:	69a3      	ldr	r3, [r4, #24]
 8008768:	60a3      	str	r3, [r4, #8]
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	071a      	lsls	r2, r3, #28
 800876e:	d52f      	bpl.n	80087d0 <__swbuf_r+0x84>
 8008770:	6923      	ldr	r3, [r4, #16]
 8008772:	b36b      	cbz	r3, 80087d0 <__swbuf_r+0x84>
 8008774:	6923      	ldr	r3, [r4, #16]
 8008776:	6820      	ldr	r0, [r4, #0]
 8008778:	1ac0      	subs	r0, r0, r3
 800877a:	6963      	ldr	r3, [r4, #20]
 800877c:	b2f6      	uxtb	r6, r6
 800877e:	4283      	cmp	r3, r0
 8008780:	4637      	mov	r7, r6
 8008782:	dc04      	bgt.n	800878e <__swbuf_r+0x42>
 8008784:	4621      	mov	r1, r4
 8008786:	4628      	mov	r0, r5
 8008788:	f000 f93c 	bl	8008a04 <_fflush_r>
 800878c:	bb30      	cbnz	r0, 80087dc <__swbuf_r+0x90>
 800878e:	68a3      	ldr	r3, [r4, #8]
 8008790:	3b01      	subs	r3, #1
 8008792:	60a3      	str	r3, [r4, #8]
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	6022      	str	r2, [r4, #0]
 800879a:	701e      	strb	r6, [r3, #0]
 800879c:	6963      	ldr	r3, [r4, #20]
 800879e:	3001      	adds	r0, #1
 80087a0:	4283      	cmp	r3, r0
 80087a2:	d004      	beq.n	80087ae <__swbuf_r+0x62>
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	07db      	lsls	r3, r3, #31
 80087a8:	d506      	bpl.n	80087b8 <__swbuf_r+0x6c>
 80087aa:	2e0a      	cmp	r6, #10
 80087ac:	d104      	bne.n	80087b8 <__swbuf_r+0x6c>
 80087ae:	4621      	mov	r1, r4
 80087b0:	4628      	mov	r0, r5
 80087b2:	f000 f927 	bl	8008a04 <_fflush_r>
 80087b6:	b988      	cbnz	r0, 80087dc <__swbuf_r+0x90>
 80087b8:	4638      	mov	r0, r7
 80087ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087bc:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <__swbuf_r+0x9c>)
 80087be:	429c      	cmp	r4, r3
 80087c0:	d101      	bne.n	80087c6 <__swbuf_r+0x7a>
 80087c2:	68ac      	ldr	r4, [r5, #8]
 80087c4:	e7cf      	b.n	8008766 <__swbuf_r+0x1a>
 80087c6:	4b09      	ldr	r3, [pc, #36]	; (80087ec <__swbuf_r+0xa0>)
 80087c8:	429c      	cmp	r4, r3
 80087ca:	bf08      	it	eq
 80087cc:	68ec      	ldreq	r4, [r5, #12]
 80087ce:	e7ca      	b.n	8008766 <__swbuf_r+0x1a>
 80087d0:	4621      	mov	r1, r4
 80087d2:	4628      	mov	r0, r5
 80087d4:	f000 f81a 	bl	800880c <__swsetup_r>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d0cb      	beq.n	8008774 <__swbuf_r+0x28>
 80087dc:	f04f 37ff 	mov.w	r7, #4294967295
 80087e0:	e7ea      	b.n	80087b8 <__swbuf_r+0x6c>
 80087e2:	bf00      	nop
 80087e4:	08009aac 	.word	0x08009aac
 80087e8:	08009acc 	.word	0x08009acc
 80087ec:	08009a8c 	.word	0x08009a8c

080087f0 <__ascii_wctomb>:
 80087f0:	b149      	cbz	r1, 8008806 <__ascii_wctomb+0x16>
 80087f2:	2aff      	cmp	r2, #255	; 0xff
 80087f4:	bf85      	ittet	hi
 80087f6:	238a      	movhi	r3, #138	; 0x8a
 80087f8:	6003      	strhi	r3, [r0, #0]
 80087fa:	700a      	strbls	r2, [r1, #0]
 80087fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008800:	bf98      	it	ls
 8008802:	2001      	movls	r0, #1
 8008804:	4770      	bx	lr
 8008806:	4608      	mov	r0, r1
 8008808:	4770      	bx	lr
	...

0800880c <__swsetup_r>:
 800880c:	4b32      	ldr	r3, [pc, #200]	; (80088d8 <__swsetup_r+0xcc>)
 800880e:	b570      	push	{r4, r5, r6, lr}
 8008810:	681d      	ldr	r5, [r3, #0]
 8008812:	4606      	mov	r6, r0
 8008814:	460c      	mov	r4, r1
 8008816:	b125      	cbz	r5, 8008822 <__swsetup_r+0x16>
 8008818:	69ab      	ldr	r3, [r5, #24]
 800881a:	b913      	cbnz	r3, 8008822 <__swsetup_r+0x16>
 800881c:	4628      	mov	r0, r5
 800881e:	f000 f985 	bl	8008b2c <__sinit>
 8008822:	4b2e      	ldr	r3, [pc, #184]	; (80088dc <__swsetup_r+0xd0>)
 8008824:	429c      	cmp	r4, r3
 8008826:	d10f      	bne.n	8008848 <__swsetup_r+0x3c>
 8008828:	686c      	ldr	r4, [r5, #4]
 800882a:	89a3      	ldrh	r3, [r4, #12]
 800882c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008830:	0719      	lsls	r1, r3, #28
 8008832:	d42c      	bmi.n	800888e <__swsetup_r+0x82>
 8008834:	06dd      	lsls	r5, r3, #27
 8008836:	d411      	bmi.n	800885c <__swsetup_r+0x50>
 8008838:	2309      	movs	r3, #9
 800883a:	6033      	str	r3, [r6, #0]
 800883c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	f04f 30ff 	mov.w	r0, #4294967295
 8008846:	e03e      	b.n	80088c6 <__swsetup_r+0xba>
 8008848:	4b25      	ldr	r3, [pc, #148]	; (80088e0 <__swsetup_r+0xd4>)
 800884a:	429c      	cmp	r4, r3
 800884c:	d101      	bne.n	8008852 <__swsetup_r+0x46>
 800884e:	68ac      	ldr	r4, [r5, #8]
 8008850:	e7eb      	b.n	800882a <__swsetup_r+0x1e>
 8008852:	4b24      	ldr	r3, [pc, #144]	; (80088e4 <__swsetup_r+0xd8>)
 8008854:	429c      	cmp	r4, r3
 8008856:	bf08      	it	eq
 8008858:	68ec      	ldreq	r4, [r5, #12]
 800885a:	e7e6      	b.n	800882a <__swsetup_r+0x1e>
 800885c:	0758      	lsls	r0, r3, #29
 800885e:	d512      	bpl.n	8008886 <__swsetup_r+0x7a>
 8008860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008862:	b141      	cbz	r1, 8008876 <__swsetup_r+0x6a>
 8008864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008868:	4299      	cmp	r1, r3
 800886a:	d002      	beq.n	8008872 <__swsetup_r+0x66>
 800886c:	4630      	mov	r0, r6
 800886e:	f7ff fb4b 	bl	8007f08 <_free_r>
 8008872:	2300      	movs	r3, #0
 8008874:	6363      	str	r3, [r4, #52]	; 0x34
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800887c:	81a3      	strh	r3, [r4, #12]
 800887e:	2300      	movs	r3, #0
 8008880:	6063      	str	r3, [r4, #4]
 8008882:	6923      	ldr	r3, [r4, #16]
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f043 0308 	orr.w	r3, r3, #8
 800888c:	81a3      	strh	r3, [r4, #12]
 800888e:	6923      	ldr	r3, [r4, #16]
 8008890:	b94b      	cbnz	r3, 80088a6 <__swsetup_r+0x9a>
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800889c:	d003      	beq.n	80088a6 <__swsetup_r+0x9a>
 800889e:	4621      	mov	r1, r4
 80088a0:	4630      	mov	r0, r6
 80088a2:	f000 fa09 	bl	8008cb8 <__smakebuf_r>
 80088a6:	89a0      	ldrh	r0, [r4, #12]
 80088a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088ac:	f010 0301 	ands.w	r3, r0, #1
 80088b0:	d00a      	beq.n	80088c8 <__swsetup_r+0xbc>
 80088b2:	2300      	movs	r3, #0
 80088b4:	60a3      	str	r3, [r4, #8]
 80088b6:	6963      	ldr	r3, [r4, #20]
 80088b8:	425b      	negs	r3, r3
 80088ba:	61a3      	str	r3, [r4, #24]
 80088bc:	6923      	ldr	r3, [r4, #16]
 80088be:	b943      	cbnz	r3, 80088d2 <__swsetup_r+0xc6>
 80088c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088c4:	d1ba      	bne.n	800883c <__swsetup_r+0x30>
 80088c6:	bd70      	pop	{r4, r5, r6, pc}
 80088c8:	0781      	lsls	r1, r0, #30
 80088ca:	bf58      	it	pl
 80088cc:	6963      	ldrpl	r3, [r4, #20]
 80088ce:	60a3      	str	r3, [r4, #8]
 80088d0:	e7f4      	b.n	80088bc <__swsetup_r+0xb0>
 80088d2:	2000      	movs	r0, #0
 80088d4:	e7f7      	b.n	80088c6 <__swsetup_r+0xba>
 80088d6:	bf00      	nop
 80088d8:	20000014 	.word	0x20000014
 80088dc:	08009aac 	.word	0x08009aac
 80088e0:	08009acc 	.word	0x08009acc
 80088e4:	08009a8c 	.word	0x08009a8c

080088e8 <abort>:
 80088e8:	b508      	push	{r3, lr}
 80088ea:	2006      	movs	r0, #6
 80088ec:	f000 fa54 	bl	8008d98 <raise>
 80088f0:	2001      	movs	r0, #1
 80088f2:	f7f8 ffc7 	bl	8001884 <_exit>
	...

080088f8 <__sflush_r>:
 80088f8:	898a      	ldrh	r2, [r1, #12]
 80088fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fe:	4605      	mov	r5, r0
 8008900:	0710      	lsls	r0, r2, #28
 8008902:	460c      	mov	r4, r1
 8008904:	d458      	bmi.n	80089b8 <__sflush_r+0xc0>
 8008906:	684b      	ldr	r3, [r1, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	dc05      	bgt.n	8008918 <__sflush_r+0x20>
 800890c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800890e:	2b00      	cmp	r3, #0
 8008910:	dc02      	bgt.n	8008918 <__sflush_r+0x20>
 8008912:	2000      	movs	r0, #0
 8008914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800891a:	2e00      	cmp	r6, #0
 800891c:	d0f9      	beq.n	8008912 <__sflush_r+0x1a>
 800891e:	2300      	movs	r3, #0
 8008920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008924:	682f      	ldr	r7, [r5, #0]
 8008926:	602b      	str	r3, [r5, #0]
 8008928:	d032      	beq.n	8008990 <__sflush_r+0x98>
 800892a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	075a      	lsls	r2, r3, #29
 8008930:	d505      	bpl.n	800893e <__sflush_r+0x46>
 8008932:	6863      	ldr	r3, [r4, #4]
 8008934:	1ac0      	subs	r0, r0, r3
 8008936:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008938:	b10b      	cbz	r3, 800893e <__sflush_r+0x46>
 800893a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800893c:	1ac0      	subs	r0, r0, r3
 800893e:	2300      	movs	r3, #0
 8008940:	4602      	mov	r2, r0
 8008942:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008944:	6a21      	ldr	r1, [r4, #32]
 8008946:	4628      	mov	r0, r5
 8008948:	47b0      	blx	r6
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	d106      	bne.n	800895e <__sflush_r+0x66>
 8008950:	6829      	ldr	r1, [r5, #0]
 8008952:	291d      	cmp	r1, #29
 8008954:	d82c      	bhi.n	80089b0 <__sflush_r+0xb8>
 8008956:	4a2a      	ldr	r2, [pc, #168]	; (8008a00 <__sflush_r+0x108>)
 8008958:	40ca      	lsrs	r2, r1
 800895a:	07d6      	lsls	r6, r2, #31
 800895c:	d528      	bpl.n	80089b0 <__sflush_r+0xb8>
 800895e:	2200      	movs	r2, #0
 8008960:	6062      	str	r2, [r4, #4]
 8008962:	04d9      	lsls	r1, r3, #19
 8008964:	6922      	ldr	r2, [r4, #16]
 8008966:	6022      	str	r2, [r4, #0]
 8008968:	d504      	bpl.n	8008974 <__sflush_r+0x7c>
 800896a:	1c42      	adds	r2, r0, #1
 800896c:	d101      	bne.n	8008972 <__sflush_r+0x7a>
 800896e:	682b      	ldr	r3, [r5, #0]
 8008970:	b903      	cbnz	r3, 8008974 <__sflush_r+0x7c>
 8008972:	6560      	str	r0, [r4, #84]	; 0x54
 8008974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008976:	602f      	str	r7, [r5, #0]
 8008978:	2900      	cmp	r1, #0
 800897a:	d0ca      	beq.n	8008912 <__sflush_r+0x1a>
 800897c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008980:	4299      	cmp	r1, r3
 8008982:	d002      	beq.n	800898a <__sflush_r+0x92>
 8008984:	4628      	mov	r0, r5
 8008986:	f7ff fabf 	bl	8007f08 <_free_r>
 800898a:	2000      	movs	r0, #0
 800898c:	6360      	str	r0, [r4, #52]	; 0x34
 800898e:	e7c1      	b.n	8008914 <__sflush_r+0x1c>
 8008990:	6a21      	ldr	r1, [r4, #32]
 8008992:	2301      	movs	r3, #1
 8008994:	4628      	mov	r0, r5
 8008996:	47b0      	blx	r6
 8008998:	1c41      	adds	r1, r0, #1
 800899a:	d1c7      	bne.n	800892c <__sflush_r+0x34>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0c4      	beq.n	800892c <__sflush_r+0x34>
 80089a2:	2b1d      	cmp	r3, #29
 80089a4:	d001      	beq.n	80089aa <__sflush_r+0xb2>
 80089a6:	2b16      	cmp	r3, #22
 80089a8:	d101      	bne.n	80089ae <__sflush_r+0xb6>
 80089aa:	602f      	str	r7, [r5, #0]
 80089ac:	e7b1      	b.n	8008912 <__sflush_r+0x1a>
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b4:	81a3      	strh	r3, [r4, #12]
 80089b6:	e7ad      	b.n	8008914 <__sflush_r+0x1c>
 80089b8:	690f      	ldr	r7, [r1, #16]
 80089ba:	2f00      	cmp	r7, #0
 80089bc:	d0a9      	beq.n	8008912 <__sflush_r+0x1a>
 80089be:	0793      	lsls	r3, r2, #30
 80089c0:	680e      	ldr	r6, [r1, #0]
 80089c2:	bf08      	it	eq
 80089c4:	694b      	ldreq	r3, [r1, #20]
 80089c6:	600f      	str	r7, [r1, #0]
 80089c8:	bf18      	it	ne
 80089ca:	2300      	movne	r3, #0
 80089cc:	eba6 0807 	sub.w	r8, r6, r7
 80089d0:	608b      	str	r3, [r1, #8]
 80089d2:	f1b8 0f00 	cmp.w	r8, #0
 80089d6:	dd9c      	ble.n	8008912 <__sflush_r+0x1a>
 80089d8:	6a21      	ldr	r1, [r4, #32]
 80089da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089dc:	4643      	mov	r3, r8
 80089de:	463a      	mov	r2, r7
 80089e0:	4628      	mov	r0, r5
 80089e2:	47b0      	blx	r6
 80089e4:	2800      	cmp	r0, #0
 80089e6:	dc06      	bgt.n	80089f6 <__sflush_r+0xfe>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ee:	81a3      	strh	r3, [r4, #12]
 80089f0:	f04f 30ff 	mov.w	r0, #4294967295
 80089f4:	e78e      	b.n	8008914 <__sflush_r+0x1c>
 80089f6:	4407      	add	r7, r0
 80089f8:	eba8 0800 	sub.w	r8, r8, r0
 80089fc:	e7e9      	b.n	80089d2 <__sflush_r+0xda>
 80089fe:	bf00      	nop
 8008a00:	20400001 	.word	0x20400001

08008a04 <_fflush_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	690b      	ldr	r3, [r1, #16]
 8008a08:	4605      	mov	r5, r0
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	b913      	cbnz	r3, 8008a14 <_fflush_r+0x10>
 8008a0e:	2500      	movs	r5, #0
 8008a10:	4628      	mov	r0, r5
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
 8008a14:	b118      	cbz	r0, 8008a1e <_fflush_r+0x1a>
 8008a16:	6983      	ldr	r3, [r0, #24]
 8008a18:	b90b      	cbnz	r3, 8008a1e <_fflush_r+0x1a>
 8008a1a:	f000 f887 	bl	8008b2c <__sinit>
 8008a1e:	4b14      	ldr	r3, [pc, #80]	; (8008a70 <_fflush_r+0x6c>)
 8008a20:	429c      	cmp	r4, r3
 8008a22:	d11b      	bne.n	8008a5c <_fflush_r+0x58>
 8008a24:	686c      	ldr	r4, [r5, #4]
 8008a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d0ef      	beq.n	8008a0e <_fflush_r+0xa>
 8008a2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a30:	07d0      	lsls	r0, r2, #31
 8008a32:	d404      	bmi.n	8008a3e <_fflush_r+0x3a>
 8008a34:	0599      	lsls	r1, r3, #22
 8008a36:	d402      	bmi.n	8008a3e <_fflush_r+0x3a>
 8008a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a3a:	f000 f915 	bl	8008c68 <__retarget_lock_acquire_recursive>
 8008a3e:	4628      	mov	r0, r5
 8008a40:	4621      	mov	r1, r4
 8008a42:	f7ff ff59 	bl	80088f8 <__sflush_r>
 8008a46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a48:	07da      	lsls	r2, r3, #31
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	d4e0      	bmi.n	8008a10 <_fflush_r+0xc>
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	059b      	lsls	r3, r3, #22
 8008a52:	d4dd      	bmi.n	8008a10 <_fflush_r+0xc>
 8008a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a56:	f000 f908 	bl	8008c6a <__retarget_lock_release_recursive>
 8008a5a:	e7d9      	b.n	8008a10 <_fflush_r+0xc>
 8008a5c:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <_fflush_r+0x70>)
 8008a5e:	429c      	cmp	r4, r3
 8008a60:	d101      	bne.n	8008a66 <_fflush_r+0x62>
 8008a62:	68ac      	ldr	r4, [r5, #8]
 8008a64:	e7df      	b.n	8008a26 <_fflush_r+0x22>
 8008a66:	4b04      	ldr	r3, [pc, #16]	; (8008a78 <_fflush_r+0x74>)
 8008a68:	429c      	cmp	r4, r3
 8008a6a:	bf08      	it	eq
 8008a6c:	68ec      	ldreq	r4, [r5, #12]
 8008a6e:	e7da      	b.n	8008a26 <_fflush_r+0x22>
 8008a70:	08009aac 	.word	0x08009aac
 8008a74:	08009acc 	.word	0x08009acc
 8008a78:	08009a8c 	.word	0x08009a8c

08008a7c <std>:
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	b510      	push	{r4, lr}
 8008a80:	4604      	mov	r4, r0
 8008a82:	e9c0 3300 	strd	r3, r3, [r0]
 8008a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a8a:	6083      	str	r3, [r0, #8]
 8008a8c:	8181      	strh	r1, [r0, #12]
 8008a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8008a90:	81c2      	strh	r2, [r0, #14]
 8008a92:	6183      	str	r3, [r0, #24]
 8008a94:	4619      	mov	r1, r3
 8008a96:	2208      	movs	r2, #8
 8008a98:	305c      	adds	r0, #92	; 0x5c
 8008a9a:	f7fd fb6d 	bl	8006178 <memset>
 8008a9e:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <std+0x38>)
 8008aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8008aa2:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <std+0x3c>)
 8008aa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <std+0x40>)
 8008aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008aaa:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <std+0x44>)
 8008aac:	6224      	str	r4, [r4, #32]
 8008aae:	6323      	str	r3, [r4, #48]	; 0x30
 8008ab0:	bd10      	pop	{r4, pc}
 8008ab2:	bf00      	nop
 8008ab4:	08008dd1 	.word	0x08008dd1
 8008ab8:	08008df3 	.word	0x08008df3
 8008abc:	08008e2b 	.word	0x08008e2b
 8008ac0:	08008e4f 	.word	0x08008e4f

08008ac4 <_cleanup_r>:
 8008ac4:	4901      	ldr	r1, [pc, #4]	; (8008acc <_cleanup_r+0x8>)
 8008ac6:	f000 b8af 	b.w	8008c28 <_fwalk_reent>
 8008aca:	bf00      	nop
 8008acc:	08008a05 	.word	0x08008a05

08008ad0 <__sfmoreglue>:
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	2268      	movs	r2, #104	; 0x68
 8008ad4:	1e4d      	subs	r5, r1, #1
 8008ad6:	4355      	muls	r5, r2
 8008ad8:	460e      	mov	r6, r1
 8008ada:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ade:	f7ff fa7f 	bl	8007fe0 <_malloc_r>
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	b140      	cbz	r0, 8008af8 <__sfmoreglue+0x28>
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	e9c0 1600 	strd	r1, r6, [r0]
 8008aec:	300c      	adds	r0, #12
 8008aee:	60a0      	str	r0, [r4, #8]
 8008af0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008af4:	f7fd fb40 	bl	8006178 <memset>
 8008af8:	4620      	mov	r0, r4
 8008afa:	bd70      	pop	{r4, r5, r6, pc}

08008afc <__sfp_lock_acquire>:
 8008afc:	4801      	ldr	r0, [pc, #4]	; (8008b04 <__sfp_lock_acquire+0x8>)
 8008afe:	f000 b8b3 	b.w	8008c68 <__retarget_lock_acquire_recursive>
 8008b02:	bf00      	nop
 8008b04:	20000899 	.word	0x20000899

08008b08 <__sfp_lock_release>:
 8008b08:	4801      	ldr	r0, [pc, #4]	; (8008b10 <__sfp_lock_release+0x8>)
 8008b0a:	f000 b8ae 	b.w	8008c6a <__retarget_lock_release_recursive>
 8008b0e:	bf00      	nop
 8008b10:	20000899 	.word	0x20000899

08008b14 <__sinit_lock_acquire>:
 8008b14:	4801      	ldr	r0, [pc, #4]	; (8008b1c <__sinit_lock_acquire+0x8>)
 8008b16:	f000 b8a7 	b.w	8008c68 <__retarget_lock_acquire_recursive>
 8008b1a:	bf00      	nop
 8008b1c:	2000089a 	.word	0x2000089a

08008b20 <__sinit_lock_release>:
 8008b20:	4801      	ldr	r0, [pc, #4]	; (8008b28 <__sinit_lock_release+0x8>)
 8008b22:	f000 b8a2 	b.w	8008c6a <__retarget_lock_release_recursive>
 8008b26:	bf00      	nop
 8008b28:	2000089a 	.word	0x2000089a

08008b2c <__sinit>:
 8008b2c:	b510      	push	{r4, lr}
 8008b2e:	4604      	mov	r4, r0
 8008b30:	f7ff fff0 	bl	8008b14 <__sinit_lock_acquire>
 8008b34:	69a3      	ldr	r3, [r4, #24]
 8008b36:	b11b      	cbz	r3, 8008b40 <__sinit+0x14>
 8008b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b3c:	f7ff bff0 	b.w	8008b20 <__sinit_lock_release>
 8008b40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b44:	6523      	str	r3, [r4, #80]	; 0x50
 8008b46:	4b13      	ldr	r3, [pc, #76]	; (8008b94 <__sinit+0x68>)
 8008b48:	4a13      	ldr	r2, [pc, #76]	; (8008b98 <__sinit+0x6c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b4e:	42a3      	cmp	r3, r4
 8008b50:	bf04      	itt	eq
 8008b52:	2301      	moveq	r3, #1
 8008b54:	61a3      	streq	r3, [r4, #24]
 8008b56:	4620      	mov	r0, r4
 8008b58:	f000 f820 	bl	8008b9c <__sfp>
 8008b5c:	6060      	str	r0, [r4, #4]
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f000 f81c 	bl	8008b9c <__sfp>
 8008b64:	60a0      	str	r0, [r4, #8]
 8008b66:	4620      	mov	r0, r4
 8008b68:	f000 f818 	bl	8008b9c <__sfp>
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	60e0      	str	r0, [r4, #12]
 8008b70:	2104      	movs	r1, #4
 8008b72:	6860      	ldr	r0, [r4, #4]
 8008b74:	f7ff ff82 	bl	8008a7c <std>
 8008b78:	68a0      	ldr	r0, [r4, #8]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	2109      	movs	r1, #9
 8008b7e:	f7ff ff7d 	bl	8008a7c <std>
 8008b82:	68e0      	ldr	r0, [r4, #12]
 8008b84:	2202      	movs	r2, #2
 8008b86:	2112      	movs	r1, #18
 8008b88:	f7ff ff78 	bl	8008a7c <std>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	61a3      	str	r3, [r4, #24]
 8008b90:	e7d2      	b.n	8008b38 <__sinit+0xc>
 8008b92:	bf00      	nop
 8008b94:	08009710 	.word	0x08009710
 8008b98:	08008ac5 	.word	0x08008ac5

08008b9c <__sfp>:
 8008b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9e:	4607      	mov	r7, r0
 8008ba0:	f7ff ffac 	bl	8008afc <__sfp_lock_acquire>
 8008ba4:	4b1e      	ldr	r3, [pc, #120]	; (8008c20 <__sfp+0x84>)
 8008ba6:	681e      	ldr	r6, [r3, #0]
 8008ba8:	69b3      	ldr	r3, [r6, #24]
 8008baa:	b913      	cbnz	r3, 8008bb2 <__sfp+0x16>
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff ffbd 	bl	8008b2c <__sinit>
 8008bb2:	3648      	adds	r6, #72	; 0x48
 8008bb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	d503      	bpl.n	8008bc4 <__sfp+0x28>
 8008bbc:	6833      	ldr	r3, [r6, #0]
 8008bbe:	b30b      	cbz	r3, 8008c04 <__sfp+0x68>
 8008bc0:	6836      	ldr	r6, [r6, #0]
 8008bc2:	e7f7      	b.n	8008bb4 <__sfp+0x18>
 8008bc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bc8:	b9d5      	cbnz	r5, 8008c00 <__sfp+0x64>
 8008bca:	4b16      	ldr	r3, [pc, #88]	; (8008c24 <__sfp+0x88>)
 8008bcc:	60e3      	str	r3, [r4, #12]
 8008bce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bd2:	6665      	str	r5, [r4, #100]	; 0x64
 8008bd4:	f000 f847 	bl	8008c66 <__retarget_lock_init_recursive>
 8008bd8:	f7ff ff96 	bl	8008b08 <__sfp_lock_release>
 8008bdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008be0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008be4:	6025      	str	r5, [r4, #0]
 8008be6:	61a5      	str	r5, [r4, #24]
 8008be8:	2208      	movs	r2, #8
 8008bea:	4629      	mov	r1, r5
 8008bec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bf0:	f7fd fac2 	bl	8006178 <memset>
 8008bf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c00:	3468      	adds	r4, #104	; 0x68
 8008c02:	e7d9      	b.n	8008bb8 <__sfp+0x1c>
 8008c04:	2104      	movs	r1, #4
 8008c06:	4638      	mov	r0, r7
 8008c08:	f7ff ff62 	bl	8008ad0 <__sfmoreglue>
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	6030      	str	r0, [r6, #0]
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d1d5      	bne.n	8008bc0 <__sfp+0x24>
 8008c14:	f7ff ff78 	bl	8008b08 <__sfp_lock_release>
 8008c18:	230c      	movs	r3, #12
 8008c1a:	603b      	str	r3, [r7, #0]
 8008c1c:	e7ee      	b.n	8008bfc <__sfp+0x60>
 8008c1e:	bf00      	nop
 8008c20:	08009710 	.word	0x08009710
 8008c24:	ffff0001 	.word	0xffff0001

08008c28 <_fwalk_reent>:
 8008c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	4688      	mov	r8, r1
 8008c30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c34:	2700      	movs	r7, #0
 8008c36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c3a:	f1b9 0901 	subs.w	r9, r9, #1
 8008c3e:	d505      	bpl.n	8008c4c <_fwalk_reent+0x24>
 8008c40:	6824      	ldr	r4, [r4, #0]
 8008c42:	2c00      	cmp	r4, #0
 8008c44:	d1f7      	bne.n	8008c36 <_fwalk_reent+0xe>
 8008c46:	4638      	mov	r0, r7
 8008c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c4c:	89ab      	ldrh	r3, [r5, #12]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d907      	bls.n	8008c62 <_fwalk_reent+0x3a>
 8008c52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c56:	3301      	adds	r3, #1
 8008c58:	d003      	beq.n	8008c62 <_fwalk_reent+0x3a>
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	47c0      	blx	r8
 8008c60:	4307      	orrs	r7, r0
 8008c62:	3568      	adds	r5, #104	; 0x68
 8008c64:	e7e9      	b.n	8008c3a <_fwalk_reent+0x12>

08008c66 <__retarget_lock_init_recursive>:
 8008c66:	4770      	bx	lr

08008c68 <__retarget_lock_acquire_recursive>:
 8008c68:	4770      	bx	lr

08008c6a <__retarget_lock_release_recursive>:
 8008c6a:	4770      	bx	lr

08008c6c <__swhatbuf_r>:
 8008c6c:	b570      	push	{r4, r5, r6, lr}
 8008c6e:	460e      	mov	r6, r1
 8008c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c74:	2900      	cmp	r1, #0
 8008c76:	b096      	sub	sp, #88	; 0x58
 8008c78:	4614      	mov	r4, r2
 8008c7a:	461d      	mov	r5, r3
 8008c7c:	da08      	bge.n	8008c90 <__swhatbuf_r+0x24>
 8008c7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	602a      	str	r2, [r5, #0]
 8008c86:	061a      	lsls	r2, r3, #24
 8008c88:	d410      	bmi.n	8008cac <__swhatbuf_r+0x40>
 8008c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c8e:	e00e      	b.n	8008cae <__swhatbuf_r+0x42>
 8008c90:	466a      	mov	r2, sp
 8008c92:	f000 f903 	bl	8008e9c <_fstat_r>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	dbf1      	blt.n	8008c7e <__swhatbuf_r+0x12>
 8008c9a:	9a01      	ldr	r2, [sp, #4]
 8008c9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ca0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ca4:	425a      	negs	r2, r3
 8008ca6:	415a      	adcs	r2, r3
 8008ca8:	602a      	str	r2, [r5, #0]
 8008caa:	e7ee      	b.n	8008c8a <__swhatbuf_r+0x1e>
 8008cac:	2340      	movs	r3, #64	; 0x40
 8008cae:	2000      	movs	r0, #0
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	b016      	add	sp, #88	; 0x58
 8008cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cb8 <__smakebuf_r>:
 8008cb8:	898b      	ldrh	r3, [r1, #12]
 8008cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cbc:	079d      	lsls	r5, r3, #30
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	460c      	mov	r4, r1
 8008cc2:	d507      	bpl.n	8008cd4 <__smakebuf_r+0x1c>
 8008cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	6123      	str	r3, [r4, #16]
 8008ccc:	2301      	movs	r3, #1
 8008cce:	6163      	str	r3, [r4, #20]
 8008cd0:	b002      	add	sp, #8
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}
 8008cd4:	ab01      	add	r3, sp, #4
 8008cd6:	466a      	mov	r2, sp
 8008cd8:	f7ff ffc8 	bl	8008c6c <__swhatbuf_r>
 8008cdc:	9900      	ldr	r1, [sp, #0]
 8008cde:	4605      	mov	r5, r0
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f7ff f97d 	bl	8007fe0 <_malloc_r>
 8008ce6:	b948      	cbnz	r0, 8008cfc <__smakebuf_r+0x44>
 8008ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cec:	059a      	lsls	r2, r3, #22
 8008cee:	d4ef      	bmi.n	8008cd0 <__smakebuf_r+0x18>
 8008cf0:	f023 0303 	bic.w	r3, r3, #3
 8008cf4:	f043 0302 	orr.w	r3, r3, #2
 8008cf8:	81a3      	strh	r3, [r4, #12]
 8008cfa:	e7e3      	b.n	8008cc4 <__smakebuf_r+0xc>
 8008cfc:	4b0d      	ldr	r3, [pc, #52]	; (8008d34 <__smakebuf_r+0x7c>)
 8008cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	6020      	str	r0, [r4, #0]
 8008d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d08:	81a3      	strh	r3, [r4, #12]
 8008d0a:	9b00      	ldr	r3, [sp, #0]
 8008d0c:	6163      	str	r3, [r4, #20]
 8008d0e:	9b01      	ldr	r3, [sp, #4]
 8008d10:	6120      	str	r0, [r4, #16]
 8008d12:	b15b      	cbz	r3, 8008d2c <__smakebuf_r+0x74>
 8008d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f000 f8d1 	bl	8008ec0 <_isatty_r>
 8008d1e:	b128      	cbz	r0, 8008d2c <__smakebuf_r+0x74>
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	f023 0303 	bic.w	r3, r3, #3
 8008d26:	f043 0301 	orr.w	r3, r3, #1
 8008d2a:	81a3      	strh	r3, [r4, #12]
 8008d2c:	89a0      	ldrh	r0, [r4, #12]
 8008d2e:	4305      	orrs	r5, r0
 8008d30:	81a5      	strh	r5, [r4, #12]
 8008d32:	e7cd      	b.n	8008cd0 <__smakebuf_r+0x18>
 8008d34:	08008ac5 	.word	0x08008ac5

08008d38 <_malloc_usable_size_r>:
 8008d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d3c:	1f18      	subs	r0, r3, #4
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	bfbc      	itt	lt
 8008d42:	580b      	ldrlt	r3, [r1, r0]
 8008d44:	18c0      	addlt	r0, r0, r3
 8008d46:	4770      	bx	lr

08008d48 <_raise_r>:
 8008d48:	291f      	cmp	r1, #31
 8008d4a:	b538      	push	{r3, r4, r5, lr}
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	460d      	mov	r5, r1
 8008d50:	d904      	bls.n	8008d5c <_raise_r+0x14>
 8008d52:	2316      	movs	r3, #22
 8008d54:	6003      	str	r3, [r0, #0]
 8008d56:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d5e:	b112      	cbz	r2, 8008d66 <_raise_r+0x1e>
 8008d60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d64:	b94b      	cbnz	r3, 8008d7a <_raise_r+0x32>
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 f830 	bl	8008dcc <_getpid_r>
 8008d6c:	462a      	mov	r2, r5
 8008d6e:	4601      	mov	r1, r0
 8008d70:	4620      	mov	r0, r4
 8008d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d76:	f000 b817 	b.w	8008da8 <_kill_r>
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d00a      	beq.n	8008d94 <_raise_r+0x4c>
 8008d7e:	1c59      	adds	r1, r3, #1
 8008d80:	d103      	bne.n	8008d8a <_raise_r+0x42>
 8008d82:	2316      	movs	r3, #22
 8008d84:	6003      	str	r3, [r0, #0]
 8008d86:	2001      	movs	r0, #1
 8008d88:	e7e7      	b.n	8008d5a <_raise_r+0x12>
 8008d8a:	2400      	movs	r4, #0
 8008d8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d90:	4628      	mov	r0, r5
 8008d92:	4798      	blx	r3
 8008d94:	2000      	movs	r0, #0
 8008d96:	e7e0      	b.n	8008d5a <_raise_r+0x12>

08008d98 <raise>:
 8008d98:	4b02      	ldr	r3, [pc, #8]	; (8008da4 <raise+0xc>)
 8008d9a:	4601      	mov	r1, r0
 8008d9c:	6818      	ldr	r0, [r3, #0]
 8008d9e:	f7ff bfd3 	b.w	8008d48 <_raise_r>
 8008da2:	bf00      	nop
 8008da4:	20000014 	.word	0x20000014

08008da8 <_kill_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4d07      	ldr	r5, [pc, #28]	; (8008dc8 <_kill_r+0x20>)
 8008dac:	2300      	movs	r3, #0
 8008dae:	4604      	mov	r4, r0
 8008db0:	4608      	mov	r0, r1
 8008db2:	4611      	mov	r1, r2
 8008db4:	602b      	str	r3, [r5, #0]
 8008db6:	f7f8 fd55 	bl	8001864 <_kill>
 8008dba:	1c43      	adds	r3, r0, #1
 8008dbc:	d102      	bne.n	8008dc4 <_kill_r+0x1c>
 8008dbe:	682b      	ldr	r3, [r5, #0]
 8008dc0:	b103      	cbz	r3, 8008dc4 <_kill_r+0x1c>
 8008dc2:	6023      	str	r3, [r4, #0]
 8008dc4:	bd38      	pop	{r3, r4, r5, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000894 	.word	0x20000894

08008dcc <_getpid_r>:
 8008dcc:	f7f8 bd42 	b.w	8001854 <_getpid>

08008dd0 <__sread>:
 8008dd0:	b510      	push	{r4, lr}
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd8:	f000 f894 	bl	8008f04 <_read_r>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	bfab      	itete	ge
 8008de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008de2:	89a3      	ldrhlt	r3, [r4, #12]
 8008de4:	181b      	addge	r3, r3, r0
 8008de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008dea:	bfac      	ite	ge
 8008dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8008dee:	81a3      	strhlt	r3, [r4, #12]
 8008df0:	bd10      	pop	{r4, pc}

08008df2 <__swrite>:
 8008df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df6:	461f      	mov	r7, r3
 8008df8:	898b      	ldrh	r3, [r1, #12]
 8008dfa:	05db      	lsls	r3, r3, #23
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	4616      	mov	r6, r2
 8008e02:	d505      	bpl.n	8008e10 <__swrite+0x1e>
 8008e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e08:	2302      	movs	r3, #2
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f000 f868 	bl	8008ee0 <_lseek_r>
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e1a:	81a3      	strh	r3, [r4, #12]
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	463b      	mov	r3, r7
 8008e20:	4628      	mov	r0, r5
 8008e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e26:	f000 b817 	b.w	8008e58 <_write_r>

08008e2a <__sseek>:
 8008e2a:	b510      	push	{r4, lr}
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e32:	f000 f855 	bl	8008ee0 <_lseek_r>
 8008e36:	1c43      	adds	r3, r0, #1
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	bf15      	itete	ne
 8008e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e46:	81a3      	strheq	r3, [r4, #12]
 8008e48:	bf18      	it	ne
 8008e4a:	81a3      	strhne	r3, [r4, #12]
 8008e4c:	bd10      	pop	{r4, pc}

08008e4e <__sclose>:
 8008e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e52:	f000 b813 	b.w	8008e7c <_close_r>
	...

08008e58 <_write_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4d07      	ldr	r5, [pc, #28]	; (8008e78 <_write_r+0x20>)
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	4608      	mov	r0, r1
 8008e60:	4611      	mov	r1, r2
 8008e62:	2200      	movs	r2, #0
 8008e64:	602a      	str	r2, [r5, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	f7f8 fd33 	bl	80018d2 <_write>
 8008e6c:	1c43      	adds	r3, r0, #1
 8008e6e:	d102      	bne.n	8008e76 <_write_r+0x1e>
 8008e70:	682b      	ldr	r3, [r5, #0]
 8008e72:	b103      	cbz	r3, 8008e76 <_write_r+0x1e>
 8008e74:	6023      	str	r3, [r4, #0]
 8008e76:	bd38      	pop	{r3, r4, r5, pc}
 8008e78:	20000894 	.word	0x20000894

08008e7c <_close_r>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	4d06      	ldr	r5, [pc, #24]	; (8008e98 <_close_r+0x1c>)
 8008e80:	2300      	movs	r3, #0
 8008e82:	4604      	mov	r4, r0
 8008e84:	4608      	mov	r0, r1
 8008e86:	602b      	str	r3, [r5, #0]
 8008e88:	f7f8 fd3f 	bl	800190a <_close>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d102      	bne.n	8008e96 <_close_r+0x1a>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	b103      	cbz	r3, 8008e96 <_close_r+0x1a>
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	20000894 	.word	0x20000894

08008e9c <_fstat_r>:
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	4d07      	ldr	r5, [pc, #28]	; (8008ebc <_fstat_r+0x20>)
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	4608      	mov	r0, r1
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	602b      	str	r3, [r5, #0]
 8008eaa:	f7f8 fd3a 	bl	8001922 <_fstat>
 8008eae:	1c43      	adds	r3, r0, #1
 8008eb0:	d102      	bne.n	8008eb8 <_fstat_r+0x1c>
 8008eb2:	682b      	ldr	r3, [r5, #0]
 8008eb4:	b103      	cbz	r3, 8008eb8 <_fstat_r+0x1c>
 8008eb6:	6023      	str	r3, [r4, #0]
 8008eb8:	bd38      	pop	{r3, r4, r5, pc}
 8008eba:	bf00      	nop
 8008ebc:	20000894 	.word	0x20000894

08008ec0 <_isatty_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d06      	ldr	r5, [pc, #24]	; (8008edc <_isatty_r+0x1c>)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	602b      	str	r3, [r5, #0]
 8008ecc:	f7f8 fd39 	bl	8001942 <_isatty>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d102      	bne.n	8008eda <_isatty_r+0x1a>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	b103      	cbz	r3, 8008eda <_isatty_r+0x1a>
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	20000894 	.word	0x20000894

08008ee0 <_lseek_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4d07      	ldr	r5, [pc, #28]	; (8008f00 <_lseek_r+0x20>)
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	4608      	mov	r0, r1
 8008ee8:	4611      	mov	r1, r2
 8008eea:	2200      	movs	r2, #0
 8008eec:	602a      	str	r2, [r5, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	f7f8 fd32 	bl	8001958 <_lseek>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	d102      	bne.n	8008efe <_lseek_r+0x1e>
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	b103      	cbz	r3, 8008efe <_lseek_r+0x1e>
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	bd38      	pop	{r3, r4, r5, pc}
 8008f00:	20000894 	.word	0x20000894

08008f04 <_read_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	4d07      	ldr	r5, [pc, #28]	; (8008f24 <_read_r+0x20>)
 8008f08:	4604      	mov	r4, r0
 8008f0a:	4608      	mov	r0, r1
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	2200      	movs	r2, #0
 8008f10:	602a      	str	r2, [r5, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	f7f8 fcc0 	bl	8001898 <_read>
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	d102      	bne.n	8008f22 <_read_r+0x1e>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	b103      	cbz	r3, 8008f22 <_read_r+0x1e>
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	20000894 	.word	0x20000894

08008f28 <_init>:
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2a:	bf00      	nop
 8008f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2e:	bc08      	pop	{r3}
 8008f30:	469e      	mov	lr, r3
 8008f32:	4770      	bx	lr

08008f34 <_fini>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	bf00      	nop
 8008f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3a:	bc08      	pop	{r3}
 8008f3c:	469e      	mov	lr, r3
 8008f3e:	4770      	bx	lr
