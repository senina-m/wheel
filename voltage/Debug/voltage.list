
voltage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a654  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c3c  0800a7f8  0800a7f8  0001a7f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b434  0800b434  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b434  0800b434  0001b434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b43c  0800b43c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b43c  0800b43c  0001b43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b440  0800b440  0001b440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  200001e8  0800b62c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  0800b62c  00020770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f96b  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c3  00000000  00000000  0002fb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00031f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00032eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bf3  00000000  00000000  00033d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011dc3  00000000  00000000  0004c913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c2b6  00000000  00000000  0005e6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa98c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005790  00000000  00000000  000fa9dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a7dc 	.word	0x0800a7dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a7dc 	.word	0x0800a7dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100e:	f000 fcbf 	bl	8001990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001012:	f000 f863 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001016:	f000 f9a5 	bl	8001364 <MX_GPIO_Init>
  MX_ADC1_Init();
 800101a:	f000 f8c9 	bl	80011b0 <MX_ADC1_Init>
  MX_I2C1_Init();
 800101e:	f000 f919 	bl	8001254 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001022:	f000 f945 	bl	80012b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001026:	f004 fd01 	bl	8005a2c <ssd1306_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800102a:	210c      	movs	r1, #12
 800102c:	4827      	ldr	r0, [pc, #156]	; (80010cc <main+0xc4>)
 800102e:	f004 f8b1 	bl	8005194 <HAL_TIM_PWM_Start>
  HAL_ADC_Init(&hadc1);
 8001032:	4827      	ldr	r0, [pc, #156]	; (80010d0 <main+0xc8>)
 8001034:	f000 fd42 	bl	8001abc <HAL_ADC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printNum(3);
 8001038:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800103c:	f000 f9f2 	bl	8001424 <printNum>
	for(int i = 0; i < 100; i++) {
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	e01b      	b.n	800107e <main+0x76>
	   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, i);
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <main+0xc4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
	   mesureV();
 800104e:	f000 fa11 	bl	8001474 <mesureV>
	   printNum(convertV(adc));
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <main+0xcc>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fa26 	bl	80014a8 <convertV>
 800105c:	eef0 7a40 	vmov.f32	s15, s0
 8001060:	eeb0 0a67 	vmov.f32	s0, s15
 8001064:	f000 f9de 	bl	8001424 <printNum>
	   HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001068:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106c:	481a      	ldr	r0, [pc, #104]	; (80010d8 <main+0xd0>)
 800106e:	f001 fbc2 	bl	80027f6 <HAL_GPIO_TogglePin>
	   HAL_Delay(100);
 8001072:	2064      	movs	r0, #100	; 0x64
 8001074:	f000 fcfe 	bl	8001a74 <HAL_Delay>
	for(int i = 0; i < 100; i++) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3301      	adds	r3, #1
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b63      	cmp	r3, #99	; 0x63
 8001082:	dde0      	ble.n	8001046 <main+0x3e>
	}
	for(int i = 100; i > 0; i--) {
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	e01b      	b.n	80010c2 <main+0xba>
	   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, i);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <main+0xc4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	641a      	str	r2, [r3, #64]	; 0x40
	   mesureV();
 8001092:	f000 f9ef 	bl	8001474 <mesureV>
	   printNum(convertV(adc));
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <main+0xcc>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fa04 	bl	80014a8 <convertV>
 80010a0:	eef0 7a40 	vmov.f32	s15, s0
 80010a4:	eeb0 0a67 	vmov.f32	s0, s15
 80010a8:	f000 f9bc 	bl	8001424 <printNum>
	   HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80010ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b0:	4809      	ldr	r0, [pc, #36]	; (80010d8 <main+0xd0>)
 80010b2:	f001 fba0 	bl	80027f6 <HAL_GPIO_TogglePin>
	   HAL_Delay(100);
 80010b6:	2064      	movs	r0, #100	; 0x64
 80010b8:	f000 fcdc 	bl	8001a74 <HAL_Delay>
	for(int i = 100; i > 0; i--) {
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	3b01      	subs	r3, #1
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dce0      	bgt.n	800108a <main+0x82>
	printNum(3);
 80010c8:	e7b6      	b.n	8001038 <main+0x30>
 80010ca:	bf00      	nop
 80010cc:	200002a0 	.word	0x200002a0
 80010d0:	20000204 	.word	0x20000204
 80010d4:	200002e8 	.word	0x200002e8
 80010d8:	40020800 	.word	0x40020800

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	; 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	2230      	movs	r2, #48	; 0x30
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 fef2 	bl	8005ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <SystemClock_Config+0xcc>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a27      	ldr	r2, [pc, #156]	; (80011a8 <SystemClock_Config+0xcc>)
 800110a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <SystemClock_Config+0xcc>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <SystemClock_Config+0xd0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <SystemClock_Config+0xd0>)
 8001126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <SystemClock_Config+0xd0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001140:	2310      	movs	r3, #16
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001144:	2302      	movs	r3, #2
 8001146:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001148:	2300      	movs	r3, #0
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800114c:	2308      	movs	r3, #8
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001150:	2348      	movs	r3, #72	; 0x48
 8001152:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001154:	2306      	movs	r3, #6
 8001156:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001158:	2304      	movs	r3, #4
 800115a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 0320 	add.w	r3, r7, #32
 8001160:	4618      	mov	r0, r3
 8001162:	f003 fb83 	bl	800486c <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800116c:	f000 f9bc 	bl	80014e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	230f      	movs	r3, #15
 8001172:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001174:	2302      	movs	r3, #2
 8001176:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001180:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001182:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001186:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fde4 	bl	8004d5c <HAL_RCC_ClockConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800119a:	f000 f9a5 	bl	80014e8 <Error_Handler>
  }
}
 800119e:	bf00      	nop
 80011a0:	3750      	adds	r7, #80	; 0x50
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <MX_ADC1_Init+0x98>)
 80011c4:	4a21      	ldr	r2, [pc, #132]	; (800124c <MX_ADC1_Init+0x9c>)
 80011c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <MX_ADC1_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <MX_ADC1_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <MX_ADC1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_ADC1_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <MX_ADC1_Init+0x98>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_ADC1_Init+0x98>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MX_ADC1_Init+0x98>)
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <MX_ADC1_Init+0xa0>)
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_ADC1_Init+0x98>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_ADC1_Init+0x98>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_ADC1_Init+0x98>)
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_ADC1_Init+0x98>)
 800120a:	2201      	movs	r2, #1
 800120c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800120e:	480e      	ldr	r0, [pc, #56]	; (8001248 <MX_ADC1_Init+0x98>)
 8001210:	f000 fc54 	bl	8001abc <HAL_ADC_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800121a:	f000 f965 	bl	80014e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001222:	2301      	movs	r3, #1
 8001224:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122a:	463b      	mov	r3, r7
 800122c:	4619      	mov	r1, r3
 800122e:	4806      	ldr	r0, [pc, #24]	; (8001248 <MX_ADC1_Init+0x98>)
 8001230:	f000 fdd4 	bl	8001ddc <HAL_ADC_ConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800123a:	f000 f955 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000204 	.word	0x20000204
 800124c:	40012000 	.word	0x40012000
 8001250:	0f000001 	.word	0x0f000001

08001254 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_I2C1_Init+0x50>)
 800125a:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <MX_I2C1_Init+0x54>)
 800125c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <MX_I2C1_Init+0x58>)
 8001262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001276:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <MX_I2C1_Init+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_I2C1_Init+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001292:	f001 facb 	bl	800282c <HAL_I2C_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800129c:	f000 f924 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000024c 	.word	0x2000024c
 80012a8:	40005400 	.word	0x40005400
 80012ac:	000186a0 	.word	0x000186a0

080012b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]
 80012ce:	615a      	str	r2, [r3, #20]
 80012d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <MX_TIM3_Init+0xac>)
 80012d4:	4a22      	ldr	r2, [pc, #136]	; (8001360 <MX_TIM3_Init+0xb0>)
 80012d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 191;
 80012d8:	4b20      	ldr	r3, [pc, #128]	; (800135c <MX_TIM3_Init+0xac>)
 80012da:	22bf      	movs	r2, #191	; 0xbf
 80012dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <MX_TIM3_Init+0xac>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_TIM3_Init+0xac>)
 80012e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_TIM3_Init+0xac>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_TIM3_Init+0xac>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012f8:	4818      	ldr	r0, [pc, #96]	; (800135c <MX_TIM3_Init+0xac>)
 80012fa:	f003 fefb 	bl	80050f4 <HAL_TIM_PWM_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001304:	f000 f8f0 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	4619      	mov	r1, r3
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <MX_TIM3_Init+0xac>)
 8001318:	f004 fae0 	bl	80058dc <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001322:	f000 f8e1 	bl	80014e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001326:	2360      	movs	r3, #96	; 0x60
 8001328:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	220c      	movs	r2, #12
 800133a:	4619      	mov	r1, r3
 800133c:	4807      	ldr	r0, [pc, #28]	; (800135c <MX_TIM3_Init+0xac>)
 800133e:	f003 ffd9 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001348:	f000 f8ce 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <MX_TIM3_Init+0xac>)
 800134e:	f000 f9af 	bl	80016b0 <HAL_TIM_MspPostInit>

}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	; 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200002a0 	.word	0x200002a0
 8001360:	40000400 	.word	0x40000400

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <MX_GPIO_Init+0xb8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a26      	ldr	r2, [pc, #152]	; (800141c <MX_GPIO_Init+0xb8>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <MX_GPIO_Init+0xb8>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <MX_GPIO_Init+0xb8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a1f      	ldr	r2, [pc, #124]	; (800141c <MX_GPIO_Init+0xb8>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_GPIO_Init+0xb8>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <MX_GPIO_Init+0xb8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a18      	ldr	r2, [pc, #96]	; (800141c <MX_GPIO_Init+0xb8>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <MX_GPIO_Init+0xb8>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_GPIO_Init+0xb8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a11      	ldr	r2, [pc, #68]	; (800141c <MX_GPIO_Init+0xb8>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_GPIO_Init+0xb8>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f0:	480b      	ldr	r0, [pc, #44]	; (8001420 <MX_GPIO_Init+0xbc>)
 80013f2:	f001 f9e7 	bl	80027c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80013f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	4804      	ldr	r0, [pc, #16]	; (8001420 <MX_GPIO_Init+0xbc>)
 8001410:	f001 f854 	bl	80024bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001414:	bf00      	nop
 8001416:	3728      	adds	r7, #40	; 0x28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	40020800 	.word	0x40020800

08001424 <printNum>:

/* USER CODE BEGIN 4 */
static void printNum(float x){
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af02      	add	r7, sp, #8
 800142a:	ed87 0a01 	vstr	s0, [r7, #4]
	snprintf(voltageBuff, sizeof(voltageBuff), "Voltage: %.6f", x);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff f892 	bl	8000558 <__aeabi_f2d>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	e9cd 2300 	strd	r2, r3, [sp]
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <printNum+0x44>)
 800143e:	2164      	movs	r1, #100	; 0x64
 8001440:	480a      	ldr	r0, [pc, #40]	; (800146c <printNum+0x48>)
 8001442:	f005 fbcf 	bl	8006be4 <sniprintf>
//	snprintf(voltageBuff, sizeof(voltageBuff), "Voltage: %i", x);
	ssd1306_SetCursor(0, 0);
 8001446:	2100      	movs	r1, #0
 8001448:	2000      	movs	r0, #0
 800144a:	f004 fca7 	bl	8005d9c <ssd1306_SetCursor>
	ssd1306_WriteString(voltageBuff, Font_7x10, White);
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <printNum+0x4c>)
 8001450:	2301      	movs	r3, #1
 8001452:	ca06      	ldmia	r2, {r1, r2}
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <printNum+0x48>)
 8001456:	f004 fc7b 	bl	8005d50 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800145a:	f004 fb75 	bl	8005b48 <ssd1306_UpdateScreen>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	0800a7f8 	.word	0x0800a7f8
 800146c:	200002ec 	.word	0x200002ec
 8001470:	2000000c 	.word	0x2000000c

08001474 <mesureV>:

static void mesureV(void){
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1); // Запуск преобразования
 8001478:	4808      	ldr	r0, [pc, #32]	; (800149c <mesureV+0x28>)
 800147a:	f000 fb63 	bl	8001b44 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Ожидаем окончания преобразования
 800147e:	f04f 31ff 	mov.w	r1, #4294967295
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <mesureV+0x28>)
 8001484:	f000 fc12 	bl	8001cac <HAL_ADC_PollForConversion>
	adc = HAL_ADC_GetValue(&hadc1); // Сохраняем значение АЦП в переменную adc
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <mesureV+0x28>)
 800148a:	f000 fc9a 	bl	8001dc2 <HAL_ADC_GetValue>
 800148e:	4603      	mov	r3, r0
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <mesureV+0x2c>)
 8001494:	801a      	strh	r2, [r3, #0]
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000204 	.word	0x20000204
 80014a0:	200002e8 	.word	0x200002e8
 80014a4:	00000000 	.word	0x00000000

080014a8 <convertV>:

static float convertV(uint16_t x){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
	return 3.3/4096*x;
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f83d 	bl	8000534 <__aeabi_i2d>
 80014ba:	a309      	add	r3, pc, #36	; (adr r3, 80014e0 <convertV+0x38>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7ff f8a2 	bl	8000608 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f7ff fb94 	bl	8000bf8 <__aeabi_d2f>
 80014d0:	4603      	mov	r3, r0
 80014d2:	ee07 3a90 	vmov	s15, r3
}
 80014d6:	eeb0 0a67 	vmov.f32	s0, s15
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	66666666 	.word	0x66666666
 80014e4:	3f4a6666 	.word	0x3f4a6666

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <Error_Handler+0x8>
	...

080014f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_MspInit+0x4c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <HAL_MspInit+0x4c>)
 8001504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_MspInit+0x4c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_MspInit+0x4c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <HAL_MspInit+0x4c>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_ADC_MspInit+0x7c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d127      	bne.n	80015b6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_ADC_MspInit+0x80>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <HAL_ADC_MspInit+0x80>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_ADC_MspInit+0x80>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <HAL_ADC_MspInit+0x80>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <HAL_ADC_MspInit+0x80>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_ADC_MspInit+0x80>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800159e:	2301      	movs	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a2:	2303      	movs	r3, #3
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <HAL_ADC_MspInit+0x84>)
 80015b2:	f000 ff83 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40012000 	.word	0x40012000
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <HAL_I2C_MspInit+0x94>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d133      	bne.n	8001656 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <HAL_I2C_MspInit+0x98>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <HAL_I2C_MspInit+0x98>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_I2C_MspInit+0x98>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800160a:	23c0      	movs	r3, #192	; 0xc0
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160e:	2312      	movs	r3, #18
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161a:	2304      	movs	r3, #4
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4810      	ldr	r0, [pc, #64]	; (8001668 <HAL_I2C_MspInit+0x9c>)
 8001626:	f000 ff49 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_I2C_MspInit+0x98>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <HAL_I2C_MspInit+0x98>)
 8001634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_I2C_MspInit+0x98>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	201f      	movs	r0, #31
 800164c:	f000 fecf 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001650:	201f      	movs	r0, #31
 8001652:	f000 fee8 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	; 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40005400 	.word	0x40005400
 8001664:	40023800 	.word	0x40023800
 8001668:	40020400 	.word	0x40020400

0800166c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10d      	bne.n	800169a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_TIM_PWM_MspInit+0x40>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_TIM_PWM_MspInit+0x40>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <HAL_TIM_PWM_MspInit+0x40>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40000400 	.word	0x40000400
 80016ac:	40023800 	.word	0x40023800

080016b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a12      	ldr	r2, [pc, #72]	; (8001718 <HAL_TIM_MspPostInit+0x68>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d11d      	bne.n	800170e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_TIM_MspPostInit+0x6c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a10      	ldr	r2, [pc, #64]	; (800171c <HAL_TIM_MspPostInit+0x6c>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_TIM_MspPostInit+0x6c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016ee:	2302      	movs	r3, #2
 80016f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016fe:	2302      	movs	r3, #2
 8001700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <HAL_TIM_MspPostInit+0x70>)
 800170a:	f000 fed7 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800170e:	bf00      	nop
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40000400 	.word	0x40000400
 800171c:	40023800 	.word	0x40023800
 8001720:	40020400 	.word	0x40020400

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001770:	f000 f960 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <I2C1_EV_IRQHandler+0x10>)
 800177e:	f001 fa93 	bl	8002ca8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000024c 	.word	0x2000024c

0800178c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return 1;
 8001790:	2301      	movs	r3, #1
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_kill>:

int _kill(int pid, int sig)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017a6:	f004 fb43 	bl	8005e30 <__errno>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2216      	movs	r2, #22
 80017ae:	601a      	str	r2, [r3, #0]
  return -1;
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_exit>:

void _exit (int status)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ffe7 	bl	800179c <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ce:	e7fe      	b.n	80017ce <_exit+0x12>

080017d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e00a      	b.n	80017f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017e2:	f3af 8000 	nop.w
 80017e6:	4601      	mov	r1, r0
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	b2ca      	uxtb	r2, r1
 80017f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf0      	blt.n	80017e2 <_read+0x12>
  }

  return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e009      	b.n	8001830 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60ba      	str	r2, [r7, #8]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	dbf1      	blt.n	800181c <_write+0x12>
  }
  return len;
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_close>:

int _close(int file)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186a:	605a      	str	r2, [r3, #4]
  return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <_isatty>:

int _isatty(int file)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f004 faa8 	bl	8005e30 <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20020000 	.word	0x20020000
 800190c:	00000400 	.word	0x00000400
 8001910:	20000350 	.word	0x20000350
 8001914:	20000770 	.word	0x20000770

08001918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <SystemInit+0x20>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <SystemInit+0x20>)
 8001924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800193c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001974 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001942:	490e      	ldr	r1, [pc, #56]	; (800197c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001944:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001958:	4c0b      	ldr	r4, [pc, #44]	; (8001988 <LoopFillZerobss+0x26>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001966:	f7ff ffd7 	bl	8001918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196a:	f004 fa67 	bl	8005e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196e:	f7ff fb4b 	bl	8001008 <main>
  bx  lr    
 8001972:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001980:	0800b444 	.word	0x0800b444
  ldr r2, =_sbss
 8001984:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001988:	20000770 	.word	0x20000770

0800198c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC_IRQHandler>
	...

08001990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0d      	ldr	r2, [pc, #52]	; (80019d0 <HAL_Init+0x40>)
 800199a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <HAL_Init+0x40>)
 80019a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_Init+0x40>)
 80019b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f000 fd0d 	bl	80023d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019be:	200f      	movs	r0, #15
 80019c0:	f000 f808 	bl	80019d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c4:	f7ff fd96 	bl	80014f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023c00 	.word	0x40023c00

080019d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x54>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_InitTick+0x58>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fd25 	bl	8002442 <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00e      	b.n	8001a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d80a      	bhi.n	8001a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f000 fced 	bl	80023ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_InitTick+0x5c>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x24>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_IncTick+0x24>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000354 	.word	0x20000354

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000354 	.word	0x20000354

08001a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff ffee 	bl	8001a5c <HAL_GetTick>
 8001a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d005      	beq.n	8001a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_Delay+0x44>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a9a:	bf00      	nop
 8001a9c:	f7ff ffde 	bl	8001a5c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d8f7      	bhi.n	8001a9c <HAL_Delay+0x28>
  {
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000008 	.word	0x20000008

08001abc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e033      	b.n	8001b3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fd32 	bl	8001544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b02:	f023 0302 	bic.w	r3, r3, #2
 8001b06:	f043 0202 	orr.w	r2, r3, #2
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fa96 	bl	8002040 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f023 0303 	bic.w	r3, r3, #3
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
 8001b2a:	e001      	b.n	8001b30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Start+0x1a>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e097      	b.n	8001c8e <HAL_ADC_Start+0x14a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d018      	beq.n	8001ba6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b84:	4b45      	ldr	r3, [pc, #276]	; (8001c9c <HAL_ADC_Start+0x158>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a45      	ldr	r2, [pc, #276]	; (8001ca0 <HAL_ADC_Start+0x15c>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0c9a      	lsrs	r2, r3, #18
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b98:	e002      	b.n	8001ba0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f9      	bne.n	8001b9a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d15f      	bne.n	8001c74 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bde:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bf2:	d106      	bne.n	8001c02 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	f023 0206 	bic.w	r2, r3, #6
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	645a      	str	r2, [r3, #68]	; 0x44
 8001c00:	e002      	b.n	8001c08 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c10:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <HAL_ADC_Start+0x160>)
 8001c12:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c1c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d129      	bne.n	8001c8c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	e020      	b.n	8001c8c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <HAL_ADC_Start+0x164>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d11b      	bne.n	8001c8c <HAL_ADC_Start+0x148>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d114      	bne.n	8001c8c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	e00b      	b.n	8001c8c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f043 0210 	orr.w	r2, r3, #16
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c84:	f043 0201 	orr.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	431bde83 	.word	0x431bde83
 8001ca4:	40012300 	.word	0x40012300
 8001ca8:	40012000 	.word	0x40012000

08001cac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc8:	d113      	bne.n	8001cf2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd8:	d10b      	bne.n	8001cf2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f043 0220 	orr.w	r2, r3, #32
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e063      	b.n	8001dba <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001cf2:	f7ff feb3 	bl	8001a5c <HAL_GetTick>
 8001cf6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cf8:	e021      	b.n	8001d3e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d01d      	beq.n	8001d3e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d007      	beq.n	8001d18 <HAL_ADC_PollForConversion+0x6c>
 8001d08:	f7ff fea8 	bl	8001a5c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d212      	bcs.n	8001d3e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d00b      	beq.n	8001d3e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f043 0204 	orr.w	r2, r3, #4
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e03d      	b.n	8001dba <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d1d6      	bne.n	8001cfa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0212 	mvn.w	r2, #18
 8001d54:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d123      	bne.n	8001db8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d11f      	bne.n	8001db8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d111      	bne.n	8001db8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d105      	bne.n	8001db8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f043 0201 	orr.w	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x1c>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e113      	b.n	8002020 <HAL_ADC_ConfigChannel+0x244>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b09      	cmp	r3, #9
 8001e06:	d925      	bls.n	8001e54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68d9      	ldr	r1, [r3, #12]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3b1e      	subs	r3, #30
 8001e1e:	2207      	movs	r2, #7
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43da      	mvns	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68d9      	ldr	r1, [r3, #12]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	4603      	mov	r3, r0
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4403      	add	r3, r0
 8001e46:	3b1e      	subs	r3, #30
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	e022      	b.n	8001e9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6919      	ldr	r1, [r3, #16]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	2207      	movs	r2, #7
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	400a      	ands	r2, r1
 8001e76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6919      	ldr	r1, [r3, #16]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4403      	add	r3, r0
 8001e90:	409a      	lsls	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d824      	bhi.n	8001eec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3b05      	subs	r3, #5
 8001eb4:	221f      	movs	r2, #31
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	3b05      	subs	r3, #5
 8001ede:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eea:	e04c      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d824      	bhi.n	8001f3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	3b23      	subs	r3, #35	; 0x23
 8001f06:	221f      	movs	r2, #31
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43da      	mvns	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	400a      	ands	r2, r1
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b23      	subs	r3, #35	; 0x23
 8001f30:	fa00 f203 	lsl.w	r2, r0, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f3c:	e023      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b41      	subs	r3, #65	; 0x41
 8001f50:	221f      	movs	r2, #31
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	3b41      	subs	r3, #65	; 0x41
 8001f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f86:	4b29      	ldr	r3, [pc, #164]	; (800202c <HAL_ADC_ConfigChannel+0x250>)
 8001f88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a28      	ldr	r2, [pc, #160]	; (8002030 <HAL_ADC_ConfigChannel+0x254>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d10f      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d8>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b12      	cmp	r3, #18
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_ADC_ConfigChannel+0x254>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d12b      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x23a>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <HAL_ADC_ConfigChannel+0x258>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x1f4>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b11      	cmp	r3, #17
 8001fce:	d122      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_ADC_ConfigChannel+0x258>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d111      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_ADC_ConfigChannel+0x25c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_ADC_ConfigChannel+0x260>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	0c9a      	lsrs	r2, r3, #18
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002008:	e002      	b.n	8002010 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	3b01      	subs	r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f9      	bne.n	800200a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	40012300 	.word	0x40012300
 8002030:	40012000 	.word	0x40012000
 8002034:	10000012 	.word	0x10000012
 8002038:	20000000 	.word	0x20000000
 800203c:	431bde83 	.word	0x431bde83

08002040 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002048:	4b79      	ldr	r3, [pc, #484]	; (8002230 <ADC_Init+0x1f0>)
 800204a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	431a      	orrs	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002074:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	021a      	lsls	r2, r3, #8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002098:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6899      	ldr	r1, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	4a58      	ldr	r2, [pc, #352]	; (8002234 <ADC_Init+0x1f4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d022      	beq.n	800211e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6899      	ldr	r1, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002108:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6899      	ldr	r1, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	e00f      	b.n	800213e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800212c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800213c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0202 	bic.w	r2, r2, #2
 800214c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6899      	ldr	r1, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7e1b      	ldrb	r3, [r3, #24]
 8002158:	005a      	lsls	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01b      	beq.n	80021a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800217a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800218a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6859      	ldr	r1, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	3b01      	subs	r3, #1
 8002198:	035a      	lsls	r2, r3, #13
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	e007      	b.n	80021b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	051a      	lsls	r2, r3, #20
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021f6:	025a      	lsls	r2, r3, #9
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800220e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6899      	ldr	r1, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	029a      	lsls	r2, r3, #10
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	609a      	str	r2, [r3, #8]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40012300 	.word	0x40012300
 8002234:	0f000001 	.word	0x0f000001

08002238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db0b      	blt.n	80022c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	f003 021f 	and.w	r2, r3, #31
 80022b4:	4907      	ldr	r1, [pc, #28]	; (80022d4 <__NVIC_EnableIRQ+0x38>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2001      	movs	r0, #1
 80022be:	fa00 f202 	lsl.w	r2, r0, r2
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000e100 	.word	0xe000e100

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db0a      	blt.n	8002302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <__NVIC_SetPriority+0x4c>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002300:	e00a      	b.n	8002318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4908      	ldr	r1, [pc, #32]	; (8002328 <__NVIC_SetPriority+0x50>)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	3b04      	subs	r3, #4
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	440b      	add	r3, r1
 8002316:	761a      	strb	r2, [r3, #24]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f1c3 0307 	rsb	r3, r3, #7
 8002346:	2b04      	cmp	r3, #4
 8002348:	bf28      	it	cs
 800234a:	2304      	movcs	r3, #4
 800234c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3304      	adds	r3, #4
 8002352:	2b06      	cmp	r3, #6
 8002354:	d902      	bls.n	800235c <NVIC_EncodePriority+0x30>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3b03      	subs	r3, #3
 800235a:	e000      	b.n	800235e <NVIC_EncodePriority+0x32>
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	f04f 32ff 	mov.w	r2, #4294967295
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	401a      	ands	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002374:	f04f 31ff 	mov.w	r1, #4294967295
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	43d9      	mvns	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	4313      	orrs	r3, r2
         );
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a4:	d301      	bcc.n	80023aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00f      	b.n	80023ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <SysTick_Config+0x40>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b2:	210f      	movs	r1, #15
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f7ff ff8e 	bl	80022d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SysTick_Config+0x40>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <SysTick_Config+0x40>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	e000e010 	.word	0xe000e010

080023d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff29 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002400:	f7ff ff3e 	bl	8002280 <__NVIC_GetPriorityGrouping>
 8002404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f7ff ff8e 	bl	800232c <NVIC_EncodePriority>
 8002410:	4602      	mov	r2, r0
 8002412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff5d 	bl	80022d8 <__NVIC_SetPriority>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff31 	bl	800229c <__NVIC_EnableIRQ>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffa2 	bl	8002394 <SysTick_Config>
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d004      	beq.n	8002478 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e00c      	b.n	8002492 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2205      	movs	r2, #5
 800247c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ac:	b2db      	uxtb	r3, r3
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	e159      	b.n	800278c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d8:	2201      	movs	r2, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	f040 8148 	bne.w	8002786 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d005      	beq.n	800250e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250a:	2b02      	cmp	r3, #2
 800250c:	d130      	bne.n	8002570 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	2203      	movs	r2, #3
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002544:	2201      	movs	r2, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 0201 	and.w	r2, r3, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b03      	cmp	r3, #3
 800257a:	d017      	beq.n	80025ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2203      	movs	r2, #3
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d123      	bne.n	8002600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	08da      	lsrs	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3208      	adds	r2, #8
 80025c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	220f      	movs	r2, #15
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	08da      	lsrs	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3208      	adds	r2, #8
 80025fa:	69b9      	ldr	r1, [r7, #24]
 80025fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0203 	and.w	r2, r3, #3
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80a2 	beq.w	8002786 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	4b57      	ldr	r3, [pc, #348]	; (80027a4 <HAL_GPIO_Init+0x2e8>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	4a56      	ldr	r2, [pc, #344]	; (80027a4 <HAL_GPIO_Init+0x2e8>)
 800264c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002650:	6453      	str	r3, [r2, #68]	; 0x44
 8002652:	4b54      	ldr	r3, [pc, #336]	; (80027a4 <HAL_GPIO_Init+0x2e8>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800265e:	4a52      	ldr	r2, [pc, #328]	; (80027a8 <HAL_GPIO_Init+0x2ec>)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	3302      	adds	r3, #2
 8002666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	220f      	movs	r2, #15
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a49      	ldr	r2, [pc, #292]	; (80027ac <HAL_GPIO_Init+0x2f0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d019      	beq.n	80026be <HAL_GPIO_Init+0x202>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a48      	ldr	r2, [pc, #288]	; (80027b0 <HAL_GPIO_Init+0x2f4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d013      	beq.n	80026ba <HAL_GPIO_Init+0x1fe>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a47      	ldr	r2, [pc, #284]	; (80027b4 <HAL_GPIO_Init+0x2f8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00d      	beq.n	80026b6 <HAL_GPIO_Init+0x1fa>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a46      	ldr	r2, [pc, #280]	; (80027b8 <HAL_GPIO_Init+0x2fc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d007      	beq.n	80026b2 <HAL_GPIO_Init+0x1f6>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a45      	ldr	r2, [pc, #276]	; (80027bc <HAL_GPIO_Init+0x300>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d101      	bne.n	80026ae <HAL_GPIO_Init+0x1f2>
 80026aa:	2304      	movs	r3, #4
 80026ac:	e008      	b.n	80026c0 <HAL_GPIO_Init+0x204>
 80026ae:	2307      	movs	r3, #7
 80026b0:	e006      	b.n	80026c0 <HAL_GPIO_Init+0x204>
 80026b2:	2303      	movs	r3, #3
 80026b4:	e004      	b.n	80026c0 <HAL_GPIO_Init+0x204>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e002      	b.n	80026c0 <HAL_GPIO_Init+0x204>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_GPIO_Init+0x204>
 80026be:	2300      	movs	r3, #0
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	f002 0203 	and.w	r2, r2, #3
 80026c6:	0092      	lsls	r2, r2, #2
 80026c8:	4093      	lsls	r3, r2
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d0:	4935      	ldr	r1, [pc, #212]	; (80027a8 <HAL_GPIO_Init+0x2ec>)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	3302      	adds	r3, #2
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026de:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <HAL_GPIO_Init+0x304>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002702:	4a2f      	ldr	r2, [pc, #188]	; (80027c0 <HAL_GPIO_Init+0x304>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002708:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <HAL_GPIO_Init+0x304>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800272c:	4a24      	ldr	r2, [pc, #144]	; (80027c0 <HAL_GPIO_Init+0x304>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_GPIO_Init+0x304>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002756:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <HAL_GPIO_Init+0x304>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800275c:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_GPIO_Init+0x304>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002780:	4a0f      	ldr	r2, [pc, #60]	; (80027c0 <HAL_GPIO_Init+0x304>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3301      	adds	r3, #1
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2b0f      	cmp	r3, #15
 8002790:	f67f aea2 	bls.w	80024d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3724      	adds	r7, #36	; 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40013800 	.word	0x40013800
 80027ac:	40020000 	.word	0x40020000
 80027b0:	40020400 	.word	0x40020400
 80027b4:	40020800 	.word	0x40020800
 80027b8:	40020c00 	.word	0x40020c00
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40013c00 	.word	0x40013c00

080027c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
 80027d0:	4613      	mov	r3, r2
 80027d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d4:	787b      	ldrb	r3, [r7, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e0:	e003      	b.n	80027ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027e2:	887b      	ldrh	r3, [r7, #2]
 80027e4:	041a      	lsls	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	619a      	str	r2, [r3, #24]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002808:	887a      	ldrh	r2, [r7, #2]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	041a      	lsls	r2, r3, #16
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	43d9      	mvns	r1, r3
 8002814:	887b      	ldrh	r3, [r7, #2]
 8002816:	400b      	ands	r3, r1
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	619a      	str	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e12b      	b.n	8002a96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe feba 	bl	80015cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2224      	movs	r2, #36	; 0x24
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800287e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800288e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002890:	f002 fc1c 	bl	80050cc <HAL_RCC_GetPCLK1Freq>
 8002894:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a81      	ldr	r2, [pc, #516]	; (8002aa0 <HAL_I2C_Init+0x274>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d807      	bhi.n	80028b0 <HAL_I2C_Init+0x84>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a80      	ldr	r2, [pc, #512]	; (8002aa4 <HAL_I2C_Init+0x278>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	bf94      	ite	ls
 80028a8:	2301      	movls	r3, #1
 80028aa:	2300      	movhi	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	e006      	b.n	80028be <HAL_I2C_Init+0x92>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a7d      	ldr	r2, [pc, #500]	; (8002aa8 <HAL_I2C_Init+0x27c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	bf94      	ite	ls
 80028b8:	2301      	movls	r3, #1
 80028ba:	2300      	movhi	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0e7      	b.n	8002a96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a78      	ldr	r2, [pc, #480]	; (8002aac <HAL_I2C_Init+0x280>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	0c9b      	lsrs	r3, r3, #18
 80028d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a6a      	ldr	r2, [pc, #424]	; (8002aa0 <HAL_I2C_Init+0x274>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d802      	bhi.n	8002900 <HAL_I2C_Init+0xd4>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	3301      	adds	r3, #1
 80028fe:	e009      	b.n	8002914 <HAL_I2C_Init+0xe8>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	4a69      	ldr	r2, [pc, #420]	; (8002ab0 <HAL_I2C_Init+0x284>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	3301      	adds	r3, #1
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	430b      	orrs	r3, r1
 800291a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002926:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	495c      	ldr	r1, [pc, #368]	; (8002aa0 <HAL_I2C_Init+0x274>)
 8002930:	428b      	cmp	r3, r1
 8002932:	d819      	bhi.n	8002968 <HAL_I2C_Init+0x13c>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1e59      	subs	r1, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002942:	1c59      	adds	r1, r3, #1
 8002944:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002948:	400b      	ands	r3, r1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_I2C_Init+0x138>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1e59      	subs	r1, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fbb1 f3f3 	udiv	r3, r1, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002962:	e051      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 8002964:	2304      	movs	r3, #4
 8002966:	e04f      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d111      	bne.n	8002994 <HAL_I2C_Init+0x168>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1e58      	subs	r0, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	440b      	add	r3, r1
 800297e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002982:	3301      	adds	r3, #1
 8002984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e012      	b.n	80029ba <HAL_I2C_Init+0x18e>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e58      	subs	r0, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	0099      	lsls	r1, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Init+0x196>
 80029be:	2301      	movs	r3, #1
 80029c0:	e022      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10e      	bne.n	80029e8 <HAL_I2C_Init+0x1bc>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1e58      	subs	r0, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	440b      	add	r3, r1
 80029d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e6:	e00f      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1e58      	subs	r0, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	0099      	lsls	r1, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fe:	3301      	adds	r3, #1
 8002a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	6809      	ldr	r1, [r1, #0]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6911      	ldr	r1, [r2, #16]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68d2      	ldr	r2, [r2, #12]
 8002a42:	4311      	orrs	r1, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	000186a0 	.word	0x000186a0
 8002aa4:	001e847f 	.word	0x001e847f
 8002aa8:	003d08ff 	.word	0x003d08ff
 8002aac:	431bde83 	.word	0x431bde83
 8002ab0:	10624dd3 	.word	0x10624dd3

08002ab4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	4608      	mov	r0, r1
 8002abe:	4611      	mov	r1, r2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	817b      	strh	r3, [r7, #10]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	813b      	strh	r3, [r7, #8]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ace:	f7fe ffc5 	bl	8001a5c <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	f040 80d9 	bne.w	8002c94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2319      	movs	r3, #25
 8002ae8:	2201      	movs	r2, #1
 8002aea:	496d      	ldr	r1, [pc, #436]	; (8002ca0 <HAL_I2C_Mem_Write+0x1ec>)
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f001 fce9 	bl	80044c4 <I2C_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002af8:	2302      	movs	r3, #2
 8002afa:	e0cc      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_I2C_Mem_Write+0x56>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e0c5      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d007      	beq.n	8002b30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2221      	movs	r2, #33	; 0x21
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2240      	movs	r2, #64	; 0x40
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a4d      	ldr	r2, [pc, #308]	; (8002ca4 <HAL_I2C_Mem_Write+0x1f0>)
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b72:	88f8      	ldrh	r0, [r7, #6]
 8002b74:	893a      	ldrh	r2, [r7, #8]
 8002b76:	8979      	ldrh	r1, [r7, #10]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	4603      	mov	r3, r0
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f001 fb60 	bl	8004248 <I2C_RequestMemoryWrite>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d052      	beq.n	8002c34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e081      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f001 fd6a 	bl	8004670 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d107      	bne.n	8002bba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06b      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	781a      	ldrb	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d11b      	bne.n	8002c34 <HAL_I2C_Mem_Write+0x180>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d017      	beq.n	8002c34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1aa      	bne.n	8002b92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f001 fd56 	bl	80046f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00d      	beq.n	8002c68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d107      	bne.n	8002c64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e016      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e000      	b.n	8002c96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
  }
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	00100002 	.word	0x00100002
 8002ca4:	ffff0000 	.word	0xffff0000

08002ca8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cc8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d003      	beq.n	8002ce0 <HAL_I2C_EV_IRQHandler+0x38>
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b40      	cmp	r3, #64	; 0x40
 8002cdc:	f040 80c1 	bne.w	8002e62 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10d      	bne.n	8002d16 <HAL_I2C_EV_IRQHandler+0x6e>
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002d00:	d003      	beq.n	8002d0a <HAL_I2C_EV_IRQHandler+0x62>
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d08:	d101      	bne.n	8002d0e <HAL_I2C_EV_IRQHandler+0x66>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_I2C_EV_IRQHandler+0x68>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f000 8132 	beq.w	8002f7a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00c      	beq.n	8002d3a <HAL_I2C_EV_IRQHandler+0x92>
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	0a5b      	lsrs	r3, r3, #9
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f001 fd82 	bl	8004836 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcdc 	bl	80036f0 <I2C_Master_SB>
 8002d38:	e092      	b.n	8002e60 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	08db      	lsrs	r3, r3, #3
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_I2C_EV_IRQHandler+0xb2>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	0a5b      	lsrs	r3, r3, #9
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fd52 	bl	80037fc <I2C_Master_ADD10>
 8002d58:	e082      	b.n	8002e60 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <HAL_I2C_EV_IRQHandler+0xd2>
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	0a5b      	lsrs	r3, r3, #9
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fd6c 	bl	8003850 <I2C_Master_ADDR>
 8002d78:	e072      	b.n	8002e60 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d03b      	beq.n	8002dfe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d94:	f000 80f3 	beq.w	8002f7e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	09db      	lsrs	r3, r3, #7
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00f      	beq.n	8002dc4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	0a9b      	lsrs	r3, r3, #10
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d009      	beq.n	8002dc4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d103      	bne.n	8002dc4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f94c 	bl	800305a <I2C_MasterTransmit_TXE>
 8002dc2:	e04d      	b.n	8002e60 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	089b      	lsrs	r3, r3, #2
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80d6 	beq.w	8002f7e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	0a5b      	lsrs	r3, r3, #9
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80cf 	beq.w	8002f7e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002de0:	7bbb      	ldrb	r3, [r7, #14]
 8002de2:	2b21      	cmp	r3, #33	; 0x21
 8002de4:	d103      	bne.n	8002dee <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f9d3 	bl	8003192 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dec:	e0c7      	b.n	8002f7e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	f040 80c4 	bne.w	8002f7e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fa41 	bl	800327e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dfc:	e0bf      	b.n	8002f7e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e0c:	f000 80b7 	beq.w	8002f7e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	099b      	lsrs	r3, r3, #6
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00f      	beq.n	8002e3c <HAL_I2C_EV_IRQHandler+0x194>
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	0a9b      	lsrs	r3, r3, #10
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d009      	beq.n	8002e3c <HAL_I2C_EV_IRQHandler+0x194>
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fab6 	bl	80033a6 <I2C_MasterReceive_RXNE>
 8002e3a:	e011      	b.n	8002e60 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 809a 	beq.w	8002f7e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	0a5b      	lsrs	r3, r3, #9
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8093 	beq.w	8002f7e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fb5f 	bl	800351c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e5e:	e08e      	b.n	8002f7e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e60:	e08d      	b.n	8002f7e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	e007      	b.n	8002e84 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d012      	beq.n	8002eb6 <HAL_I2C_EV_IRQHandler+0x20e>
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	0a5b      	lsrs	r3, r3, #9
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00c      	beq.n	8002eb6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002eac:	69b9      	ldr	r1, [r7, #24]
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 ff1d 	bl	8003cee <I2C_Slave_ADDR>
 8002eb4:	e066      	b.n	8002f84 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_I2C_EV_IRQHandler+0x22e>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	0a5b      	lsrs	r3, r3, #9
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 ff58 	bl	8003d84 <I2C_Slave_STOPF>
 8002ed4:	e056      	b.n	8002f84 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ed6:	7bbb      	ldrb	r3, [r7, #14]
 8002ed8:	2b21      	cmp	r3, #33	; 0x21
 8002eda:	d002      	beq.n	8002ee2 <HAL_I2C_EV_IRQHandler+0x23a>
 8002edc:	7bbb      	ldrb	r3, [r7, #14]
 8002ede:	2b29      	cmp	r3, #41	; 0x29
 8002ee0:	d125      	bne.n	8002f2e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	09db      	lsrs	r3, r3, #7
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00f      	beq.n	8002f0e <HAL_I2C_EV_IRQHandler+0x266>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	0a9b      	lsrs	r3, r3, #10
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_I2C_EV_IRQHandler+0x266>
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fe33 	bl	8003b72 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f0c:	e039      	b.n	8002f82 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d033      	beq.n	8002f82 <HAL_I2C_EV_IRQHandler+0x2da>
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	0a5b      	lsrs	r3, r3, #9
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d02d      	beq.n	8002f82 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fe60 	bl	8003bec <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f2c:	e029      	b.n	8002f82 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	099b      	lsrs	r3, r3, #6
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00f      	beq.n	8002f5a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	0a9b      	lsrs	r3, r3, #10
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d103      	bne.n	8002f5a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fe6b 	bl	8003c2e <I2C_SlaveReceive_RXNE>
 8002f58:	e014      	b.n	8002f84 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	089b      	lsrs	r3, r3, #2
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00e      	beq.n	8002f84 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	0a5b      	lsrs	r3, r3, #9
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fe99 	bl	8003caa <I2C_SlaveReceive_BTF>
 8002f78:	e004      	b.n	8002f84 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002f7a:	bf00      	nop
 8002f7c:	e002      	b.n	8002f84 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f7e:	bf00      	nop
 8002f80:	e000      	b.n	8002f84 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f82:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	70fb      	strb	r3, [r7, #3]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003068:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003070:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	2b00      	cmp	r3, #0
 800307e:	d150      	bne.n	8003122 <I2C_MasterTransmit_TXE+0xc8>
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	2b21      	cmp	r3, #33	; 0x21
 8003084:	d14d      	bne.n	8003122 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b08      	cmp	r3, #8
 800308a:	d01d      	beq.n	80030c8 <I2C_MasterTransmit_TXE+0x6e>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b20      	cmp	r3, #32
 8003090:	d01a      	beq.n	80030c8 <I2C_MasterTransmit_TXE+0x6e>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003098:	d016      	beq.n	80030c8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030a8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2211      	movs	r2, #17
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff62 	bl	8002f8a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030c6:	e060      	b.n	800318a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030d6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d107      	bne.n	8003112 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff ff7d 	bl	800300a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003110:	e03b      	b.n	800318a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff ff35 	bl	8002f8a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003120:	e033      	b.n	800318a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	2b21      	cmp	r3, #33	; 0x21
 8003126:	d005      	beq.n	8003134 <I2C_MasterTransmit_TXE+0xda>
 8003128:	7bbb      	ldrb	r3, [r7, #14]
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d12d      	bne.n	800318a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	2b22      	cmp	r3, #34	; 0x22
 8003132:	d12a      	bne.n	800318a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d108      	bne.n	8003150 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800314e:	e01c      	b.n	800318a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d103      	bne.n	8003164 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f88e 	bl	800327e <I2C_MemoryTransmit_TXE_BTF>
}
 8003162:	e012      	b.n	800318a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003188:	e7ff      	b.n	800318a <I2C_MasterTransmit_TXE+0x130>
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b21      	cmp	r3, #33	; 0x21
 80031aa:	d164      	bne.n	8003276 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d012      	beq.n	80031dc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80031da:	e04c      	b.n	8003276 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d01d      	beq.n	800321e <I2C_MasterTransmit_BTF+0x8c>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d01a      	beq.n	800321e <I2C_MasterTransmit_BTF+0x8c>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031ee:	d016      	beq.n	800321e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031fe:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2211      	movs	r2, #17
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff feb7 	bl	8002f8a <HAL_I2C_MasterTxCpltCallback>
}
 800321c:	e02b      	b.n	8003276 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800322c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b40      	cmp	r3, #64	; 0x40
 8003256:	d107      	bne.n	8003268 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff fed2 	bl	800300a <HAL_I2C_MemTxCpltCallback>
}
 8003266:	e006      	b.n	8003276 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff fe8a 	bl	8002f8a <HAL_I2C_MasterTxCpltCallback>
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003292:	2b00      	cmp	r3, #0
 8003294:	d11d      	bne.n	80032d2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329a:	2b01      	cmp	r3, #1
 800329c:	d10b      	bne.n	80032b6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ae:	1c9a      	adds	r2, r3, #2
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80032b4:	e073      	b.n	800339e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	121b      	asrs	r3, r3, #8
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032d0:	e065      	b.n	800339e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d10b      	bne.n	80032f2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032f0:	e055      	b.n	800339e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d151      	bne.n	800339e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2b22      	cmp	r3, #34	; 0x22
 80032fe:	d10d      	bne.n	800331c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800330e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	651a      	str	r2, [r3, #80]	; 0x50
}
 800331a:	e040      	b.n	800339e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d015      	beq.n	8003352 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b21      	cmp	r3, #33	; 0x21
 800332a:	d112      	bne.n	8003352 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003350:	e025      	b.n	800339e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d120      	bne.n	800339e <I2C_MemoryTransmit_TXE_BTF+0x120>
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b21      	cmp	r3, #33	; 0x21
 8003360:	d11d      	bne.n	800339e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003370:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003380:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff fe36 	bl	800300a <HAL_I2C_MemTxCpltCallback>
}
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b22      	cmp	r3, #34	; 0x22
 80033b8:	f040 80ac 	bne.w	8003514 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d921      	bls.n	800340e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	f040 808c 	bne.w	8003514 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800340c:	e082      	b.n	8003514 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	2b02      	cmp	r3, #2
 8003414:	d075      	beq.n	8003502 <I2C_MasterReceive_RXNE+0x15c>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d002      	beq.n	8003422 <I2C_MasterReceive_RXNE+0x7c>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d16f      	bne.n	8003502 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f001 f9a6 	bl	8004774 <I2C_WaitOnSTOPRequestThroughIT>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d142      	bne.n	80034b4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800344c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	d10a      	bne.n	800349e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff fdc1 	bl	800301e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800349c:	e03a      	b.n	8003514 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2212      	movs	r2, #18
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff fd76 	bl	8002f9e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034b2:	e02f      	b.n	8003514 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034c2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff fd99 	bl	8003032 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003500:	e008      	b.n	8003514 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003510:	605a      	str	r2, [r3, #4]
}
 8003512:	e7ff      	b.n	8003514 <I2C_MasterReceive_RXNE+0x16e>
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b04      	cmp	r3, #4
 8003532:	d11b      	bne.n	800356c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003542:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800356a:	e0bd      	b.n	80036e8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b03      	cmp	r3, #3
 8003574:	d129      	bne.n	80035ca <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003584:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b04      	cmp	r3, #4
 800358a:	d00a      	beq.n	80035a2 <I2C_MasterReceive_BTF+0x86>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d007      	beq.n	80035a2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035c8:	e08e      	b.n	80036e8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d176      	bne.n	80036c2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d002      	beq.n	80035e0 <I2C_MasterReceive_BTF+0xc4>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d108      	bne.n	80035f2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	e019      	b.n	8003626 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d002      	beq.n	80035fe <I2C_MasterReceive_BTF+0xe2>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d108      	bne.n	8003610 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e00a      	b.n	8003626 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b10      	cmp	r3, #16
 8003614:	d007      	beq.n	8003626 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003624:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003680:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d10a      	bne.n	80036ac <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fcba 	bl	800301e <HAL_I2C_MemRxCpltCallback>
}
 80036aa:	e01d      	b.n	80036e8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2212      	movs	r2, #18
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff fc6f 	bl	8002f9e <HAL_I2C_MasterRxCpltCallback>
}
 80036c0:	e012      	b.n	80036e8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b40      	cmp	r3, #64	; 0x40
 8003702:	d117      	bne.n	8003734 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800371c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800371e:	e067      	b.n	80037f0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	b2da      	uxtb	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	611a      	str	r2, [r3, #16]
}
 8003732:	e05d      	b.n	80037f0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800373c:	d133      	bne.n	80037a6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b21      	cmp	r3, #33	; 0x21
 8003748:	d109      	bne.n	800375e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	b2db      	uxtb	r3, r3
 8003750:	461a      	mov	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800375a:	611a      	str	r2, [r3, #16]
 800375c:	e008      	b.n	8003770 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	b2da      	uxtb	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003774:	2b00      	cmp	r3, #0
 8003776:	d004      	beq.n	8003782 <I2C_Master_SB+0x92>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d108      	bne.n	8003794 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	2b00      	cmp	r3, #0
 8003788:	d032      	beq.n	80037f0 <I2C_Master_SB+0x100>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d02d      	beq.n	80037f0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037a2:	605a      	str	r2, [r3, #4]
}
 80037a4:	e024      	b.n	80037f0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10e      	bne.n	80037cc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	11db      	asrs	r3, r3, #7
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f003 0306 	and.w	r3, r3, #6
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f063 030f 	orn	r3, r3, #15
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	611a      	str	r2, [r3, #16]
}
 80037ca:	e011      	b.n	80037f0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d10d      	bne.n	80037f0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	b29b      	uxth	r3, r3
 80037da:	11db      	asrs	r3, r3, #7
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f003 0306 	and.w	r3, r3, #6
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f063 030e 	orn	r3, r3, #14
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	611a      	str	r2, [r3, #16]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	b2da      	uxtb	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003814:	2b00      	cmp	r3, #0
 8003816:	d004      	beq.n	8003822 <I2C_Master_ADD10+0x26>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <I2C_Master_ADD10+0x48>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003842:	605a      	str	r2, [r3, #4]
  }
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003850:	b480      	push	{r7}
 8003852:	b091      	sub	sp, #68	; 0x44
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800385e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b22      	cmp	r3, #34	; 0x22
 8003878:	f040 8169 	bne.w	8003b4e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10f      	bne.n	80038a4 <I2C_Master_ADDR+0x54>
 8003884:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d10b      	bne.n	80038a4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388c:	2300      	movs	r3, #0
 800388e:	633b      	str	r3, [r7, #48]	; 0x30
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	633b      	str	r3, [r7, #48]	; 0x30
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	633b      	str	r3, [r7, #48]	; 0x30
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	e160      	b.n	8003b66 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d11d      	bne.n	80038e8 <I2C_Master_ADDR+0x98>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038b4:	d118      	bne.n	80038e8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038da:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	651a      	str	r2, [r3, #80]	; 0x50
 80038e6:	e13e      	b.n	8003b66 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d113      	bne.n	800391a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f2:	2300      	movs	r3, #0
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	e115      	b.n	8003b46 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	f040 808a 	bne.w	8003a3a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800392c:	d137      	bne.n	800399e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394c:	d113      	bne.n	8003976 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800395c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800395e:	2300      	movs	r3, #0
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	e0e7      	b.n	8003b46 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003976:	2300      	movs	r3, #0
 8003978:	623b      	str	r3, [r7, #32]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	623b      	str	r3, [r7, #32]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	623b      	str	r3, [r7, #32]
 800398a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e0d3      	b.n	8003b46 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d02e      	beq.n	8003a02 <I2C_Master_ADDR+0x1b2>
 80039a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d02b      	beq.n	8003a02 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ac:	2b12      	cmp	r3, #18
 80039ae:	d102      	bne.n	80039b6 <I2C_Master_ADDR+0x166>
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d125      	bne.n	8003a02 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d00e      	beq.n	80039da <I2C_Master_ADDR+0x18a>
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d00b      	beq.n	80039da <I2C_Master_ADDR+0x18a>
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d008      	beq.n	80039da <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e007      	b.n	80039ea <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	e0a1      	b.n	8003b46 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a10:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	e085      	b.n	8003b46 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d14d      	bne.n	8003ae0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d016      	beq.n	8003a78 <I2C_Master_ADDR+0x228>
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d013      	beq.n	8003a78 <I2C_Master_ADDR+0x228>
 8003a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d010      	beq.n	8003a78 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a64:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e007      	b.n	8003a88 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a86:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a96:	d117      	bne.n	8003ac8 <I2C_Master_ADDR+0x278>
 8003a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a9e:	d00b      	beq.n	8003ab8 <I2C_Master_ADDR+0x268>
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d008      	beq.n	8003ab8 <I2C_Master_ADDR+0x268>
 8003aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d005      	beq.n	8003ab8 <I2C_Master_ADDR+0x268>
 8003aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d002      	beq.n	8003ab8 <I2C_Master_ADDR+0x268>
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d107      	bne.n	8003ac8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ac6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	e032      	b.n	8003b46 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aee:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003afe:	d117      	bne.n	8003b30 <I2C_Master_ADDR+0x2e0>
 8003b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b06:	d00b      	beq.n	8003b20 <I2C_Master_ADDR+0x2d0>
 8003b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d008      	beq.n	8003b20 <I2C_Master_ADDR+0x2d0>
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d005      	beq.n	8003b20 <I2C_Master_ADDR+0x2d0>
 8003b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d002      	beq.n	8003b20 <I2C_Master_ADDR+0x2d0>
 8003b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d107      	bne.n	8003b30 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b2e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003b4c:	e00b      	b.n	8003b66 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
}
 8003b64:	e7ff      	b.n	8003b66 <I2C_Master_ADDR+0x316>
 8003b66:	bf00      	nop
 8003b68:	3744      	adds	r7, #68	; 0x44
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b80:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d02b      	beq.n	8003be4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	781a      	ldrb	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d114      	bne.n	8003be4 <I2C_SlaveTransmit_TXE+0x72>
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	2b29      	cmp	r3, #41	; 0x29
 8003bbe:	d111      	bne.n	8003be4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2221      	movs	r2, #33	; 0x21
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2228      	movs	r2, #40	; 0x28
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff f9e7 	bl	8002fb2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d011      	beq.n	8003c22 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	781a      	ldrb	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d02c      	beq.n	8003ca2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d114      	bne.n	8003ca2 <I2C_SlaveReceive_RXNE+0x74>
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c7c:	d111      	bne.n	8003ca2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2222      	movs	r2, #34	; 0x22
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2228      	movs	r2, #40	; 0x28
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff f992 	bl	8002fc6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d012      	beq.n	8003ce2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d08:	2b28      	cmp	r3, #40	; 0x28
 8003d0a:	d127      	bne.n	8003d5c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	089b      	lsrs	r3, r3, #2
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	09db      	lsrs	r3, r3, #7
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d103      	bne.n	8003d40 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	81bb      	strh	r3, [r7, #12]
 8003d3e:	e002      	b.n	8003d46 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d4e:	89ba      	ldrh	r2, [r7, #12]
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	4619      	mov	r1, r3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff f940 	bl	8002fda <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d5a:	e00e      	b.n	8003d7a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003da2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003da4:	2300      	movs	r3, #0
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de0:	d172      	bne.n	8003ec8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	2b22      	cmp	r3, #34	; 0x22
 8003de6:	d002      	beq.n	8003dee <I2C_Slave_STOPF+0x6a>
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	2b2a      	cmp	r3, #42	; 0x2a
 8003dec:	d135      	bne.n	8003e5a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f043 0204 	orr.w	r2, r3, #4
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fb39 	bl	800249e <HAL_DMA_GetState>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d049      	beq.n	8003ec6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	4a69      	ldr	r2, [pc, #420]	; (8003fdc <I2C_Slave_STOPF+0x258>)
 8003e38:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fb0b 	bl	800245a <HAL_DMA_Abort_IT>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d03d      	beq.n	8003ec6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e54:	4610      	mov	r0, r2
 8003e56:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e58:	e035      	b.n	8003ec6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f043 0204 	orr.w	r2, r3, #4
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fe fb03 	bl	800249e <HAL_DMA_GetState>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d014      	beq.n	8003ec8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea2:	4a4e      	ldr	r2, [pc, #312]	; (8003fdc <I2C_Slave_STOPF+0x258>)
 8003ea4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fe fad5 	bl	800245a <HAL_DMA_Abort_IT>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4798      	blx	r3
 8003ec4:	e000      	b.n	8003ec8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ec6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d03e      	beq.n	8003f50 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d112      	bne.n	8003f06 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d112      	bne.n	8003f3a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	f043 0204 	orr.w	r2, r3, #4
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f843 	bl	8003fe4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f5e:	e039      	b.n	8003fd4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b2a      	cmp	r3, #42	; 0x2a
 8003f64:	d109      	bne.n	8003f7a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2228      	movs	r2, #40	; 0x28
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff f826 	bl	8002fc6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b28      	cmp	r3, #40	; 0x28
 8003f84:	d111      	bne.n	8003faa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a15      	ldr	r2, [pc, #84]	; (8003fe0 <I2C_Slave_STOPF+0x25c>)
 8003f8a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff f827 	bl	8002ff6 <HAL_I2C_ListenCpltCallback>
}
 8003fa8:	e014      	b.n	8003fd4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	2b22      	cmp	r3, #34	; 0x22
 8003fb0:	d002      	beq.n	8003fb8 <I2C_Slave_STOPF+0x234>
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	2b22      	cmp	r3, #34	; 0x22
 8003fb6:	d10d      	bne.n	8003fd4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fe fff9 	bl	8002fc6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	08004375 	.word	0x08004375
 8003fe0:	ffff0000 	.word	0xffff0000

08003fe4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ffa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ffc:	7bbb      	ldrb	r3, [r7, #14]
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d002      	beq.n	8004008 <I2C_ITError+0x24>
 8004002:	7bbb      	ldrb	r3, [r7, #14]
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	d10a      	bne.n	800401e <I2C_ITError+0x3a>
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	2b22      	cmp	r3, #34	; 0x22
 800400c:	d107      	bne.n	800401e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800401c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004024:	2b28      	cmp	r3, #40	; 0x28
 8004026:	d107      	bne.n	8004038 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2228      	movs	r2, #40	; 0x28
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004036:	e015      	b.n	8004064 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004046:	d00a      	beq.n	800405e <I2C_ITError+0x7a>
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b60      	cmp	r3, #96	; 0x60
 800404c:	d007      	beq.n	800405e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800406e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004072:	d162      	bne.n	800413a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004082:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d020      	beq.n	80040d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004096:	4a6a      	ldr	r2, [pc, #424]	; (8004240 <I2C_ITError+0x25c>)
 8004098:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe f9db 	bl	800245a <HAL_DMA_Abort_IT>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8089 	beq.w	80041be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040ce:	4610      	mov	r0, r2
 80040d0:	4798      	blx	r3
 80040d2:	e074      	b.n	80041be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	4a59      	ldr	r2, [pc, #356]	; (8004240 <I2C_ITError+0x25c>)
 80040da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fe f9ba 	bl	800245a <HAL_DMA_Abort_IT>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d068      	beq.n	80041be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b40      	cmp	r3, #64	; 0x40
 80040f8:	d10b      	bne.n	8004112 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004134:	4610      	mov	r0, r2
 8004136:	4798      	blx	r3
 8004138:	e041      	b.n	80041be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b60      	cmp	r3, #96	; 0x60
 8004144:	d125      	bne.n	8004192 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415e:	2b40      	cmp	r3, #64	; 0x40
 8004160:	d10b      	bne.n	800417a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fe ff5b 	bl	8003046 <HAL_I2C_AbortCpltCallback>
 8004190:	e015      	b.n	80041be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d10b      	bne.n	80041b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7fe ff3a 	bl	8003032 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10e      	bne.n	80041ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d007      	beq.n	80041fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004202:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b04      	cmp	r3, #4
 800420e:	d113      	bne.n	8004238 <I2C_ITError+0x254>
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b28      	cmp	r3, #40	; 0x28
 8004214:	d110      	bne.n	8004238 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <I2C_ITError+0x260>)
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fe fedf 	bl	8002ff6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	08004375 	.word	0x08004375
 8004244:	ffff0000 	.word	0xffff0000

08004248 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	4608      	mov	r0, r1
 8004252:	4611      	mov	r1, r2
 8004254:	461a      	mov	r2, r3
 8004256:	4603      	mov	r3, r0
 8004258:	817b      	strh	r3, [r7, #10]
 800425a:	460b      	mov	r3, r1
 800425c:	813b      	strh	r3, [r7, #8]
 800425e:	4613      	mov	r3, r2
 8004260:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004270:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	2200      	movs	r2, #0
 800427a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f920 	bl	80044c4 <I2C_WaitOnFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00d      	beq.n	80042a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004298:	d103      	bne.n	80042a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e05f      	b.n	8004366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042a6:	897b      	ldrh	r3, [r7, #10]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	6a3a      	ldr	r2, [r7, #32]
 80042ba:	492d      	ldr	r1, [pc, #180]	; (8004370 <I2C_RequestMemoryWrite+0x128>)
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f958 	bl	8004572 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e04c      	b.n	8004366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e4:	6a39      	ldr	r1, [r7, #32]
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f9c2 	bl	8004670 <I2C_WaitOnTXEFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00d      	beq.n	800430e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d107      	bne.n	800430a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004308:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e02b      	b.n	8004366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d105      	bne.n	8004320 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004314:	893b      	ldrh	r3, [r7, #8]
 8004316:	b2da      	uxtb	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	611a      	str	r2, [r3, #16]
 800431e:	e021      	b.n	8004364 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004320:	893b      	ldrh	r3, [r7, #8]
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	b29b      	uxth	r3, r3
 8004326:	b2da      	uxtb	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800432e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004330:	6a39      	ldr	r1, [r7, #32]
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f99c 	bl	8004670 <I2C_WaitOnTXEFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00d      	beq.n	800435a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	2b04      	cmp	r3, #4
 8004344:	d107      	bne.n	8004356 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004354:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e005      	b.n	8004366 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800435a:	893b      	ldrh	r3, [r7, #8]
 800435c:	b2da      	uxtb	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	00010002 	.word	0x00010002

08004374 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800438e:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <I2C_DMAAbort+0x148>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	08db      	lsrs	r3, r3, #3
 8004394:	4a4a      	ldr	r2, [pc, #296]	; (80044c0 <I2C_DMAAbort+0x14c>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	0a1a      	lsrs	r2, r3, #8
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	00da      	lsls	r2, r3, #3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80043ba:	e00a      	b.n	80043d2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3b01      	subs	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d0:	d0ea      	beq.n	80043a8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043de:	2200      	movs	r2, #0
 80043e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	2200      	movs	r2, #0
 80043f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004400:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2200      	movs	r2, #0
 8004406:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004414:	2200      	movs	r2, #0
 8004416:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	2200      	movs	r2, #0
 8004426:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b60      	cmp	r3, #96	; 0x60
 8004442:	d10e      	bne.n	8004462 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2200      	movs	r2, #0
 8004458:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800445a:	6978      	ldr	r0, [r7, #20]
 800445c:	f7fe fdf3 	bl	8003046 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004460:	e027      	b.n	80044b2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004462:	7cfb      	ldrb	r3, [r7, #19]
 8004464:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004468:	2b28      	cmp	r3, #40	; 0x28
 800446a:	d117      	bne.n	800449c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800448a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2200      	movs	r2, #0
 8004490:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2228      	movs	r2, #40	; 0x28
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800449a:	e007      	b.n	80044ac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80044ac:	6978      	ldr	r0, [r7, #20]
 80044ae:	f7fe fdc0 	bl	8003032 <HAL_I2C_ErrorCallback>
}
 80044b2:	bf00      	nop
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000000 	.word	0x20000000
 80044c0:	14f8b589 	.word	0x14f8b589

080044c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d4:	e025      	b.n	8004522 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d021      	beq.n	8004522 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044de:	f7fd fabd 	bl	8001a5c <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d302      	bcc.n	80044f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d116      	bne.n	8004522 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f043 0220 	orr.w	r2, r3, #32
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e023      	b.n	800456a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	0c1b      	lsrs	r3, r3, #16
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	d10d      	bne.n	8004548 <I2C_WaitOnFlagUntilTimeout+0x84>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	43da      	mvns	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4013      	ands	r3, r2
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	bf0c      	ite	eq
 800453e:	2301      	moveq	r3, #1
 8004540:	2300      	movne	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	e00c      	b.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	43da      	mvns	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	bf0c      	ite	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	2300      	movne	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	429a      	cmp	r2, r3
 8004566:	d0b6      	beq.n	80044d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004580:	e051      	b.n	8004626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004590:	d123      	bne.n	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f043 0204 	orr.w	r2, r3, #4
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e046      	b.n	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e0:	d021      	beq.n	8004626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e2:	f7fd fa3b 	bl	8001a5c <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d302      	bcc.n	80045f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d116      	bne.n	8004626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f043 0220 	orr.w	r2, r3, #32
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e020      	b.n	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	0c1b      	lsrs	r3, r3, #16
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d10c      	bne.n	800464a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	43da      	mvns	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4013      	ands	r3, r2
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	bf14      	ite	ne
 8004642:	2301      	movne	r3, #1
 8004644:	2300      	moveq	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	e00b      	b.n	8004662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	43da      	mvns	r2, r3
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4013      	ands	r3, r2
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	bf14      	ite	ne
 800465c:	2301      	movne	r3, #1
 800465e:	2300      	moveq	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d18d      	bne.n	8004582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800467c:	e02d      	b.n	80046da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f8aa 	bl	80047d8 <I2C_IsAcknowledgeFailed>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e02d      	b.n	80046ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d021      	beq.n	80046da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004696:	f7fd f9e1 	bl	8001a5c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d302      	bcc.n	80046ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d116      	bne.n	80046da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f043 0220 	orr.w	r2, r3, #32
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e007      	b.n	80046ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	2b80      	cmp	r3, #128	; 0x80
 80046e6:	d1ca      	bne.n	800467e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046fe:	e02d      	b.n	800475c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f869 	bl	80047d8 <I2C_IsAcknowledgeFailed>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e02d      	b.n	800476c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d021      	beq.n	800475c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004718:	f7fd f9a0 	bl	8001a5c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	429a      	cmp	r2, r3
 8004726:	d302      	bcc.n	800472e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d116      	bne.n	800475c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	f043 0220 	orr.w	r2, r3, #32
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e007      	b.n	800476c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b04      	cmp	r3, #4
 8004768:	d1ca      	bne.n	8004700 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004780:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	08db      	lsrs	r3, r3, #3
 8004786:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	0a1a      	lsrs	r2, r3, #8
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3b01      	subs	r3, #1
 800479a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d107      	bne.n	80047b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e008      	b.n	80047c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c0:	d0e9      	beq.n	8004796 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	20000000 	.word	0x20000000
 80047d4:	14f8b589 	.word	0x14f8b589

080047d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ee:	d11b      	bne.n	8004828 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	f043 0204 	orr.w	r2, r3, #4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004846:	d103      	bne.n	8004850 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800484e:	e007      	b.n	8004860 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004858:	d102      	bne.n	8004860 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2208      	movs	r2, #8
 800485e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e267      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d075      	beq.n	8004976 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800488a:	4b88      	ldr	r3, [pc, #544]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
 8004892:	2b04      	cmp	r3, #4
 8004894:	d00c      	beq.n	80048b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004896:	4b85      	ldr	r3, [pc, #532]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d112      	bne.n	80048c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048a2:	4b82      	ldr	r3, [pc, #520]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ae:	d10b      	bne.n	80048c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b0:	4b7e      	ldr	r3, [pc, #504]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d05b      	beq.n	8004974 <HAL_RCC_OscConfig+0x108>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d157      	bne.n	8004974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e242      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d0:	d106      	bne.n	80048e0 <HAL_RCC_OscConfig+0x74>
 80048d2:	4b76      	ldr	r3, [pc, #472]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a75      	ldr	r2, [pc, #468]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 80048d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e01d      	b.n	800491c <HAL_RCC_OscConfig+0xb0>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048e8:	d10c      	bne.n	8004904 <HAL_RCC_OscConfig+0x98>
 80048ea:	4b70      	ldr	r3, [pc, #448]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a6f      	ldr	r2, [pc, #444]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 80048f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	4b6d      	ldr	r3, [pc, #436]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a6c      	ldr	r2, [pc, #432]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 80048fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	e00b      	b.n	800491c <HAL_RCC_OscConfig+0xb0>
 8004904:	4b69      	ldr	r3, [pc, #420]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a68      	ldr	r2, [pc, #416]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 800490a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	4b66      	ldr	r3, [pc, #408]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a65      	ldr	r2, [pc, #404]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 8004916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800491a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d013      	beq.n	800494c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004924:	f7fd f89a 	bl	8001a5c <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800492c:	f7fd f896 	bl	8001a5c <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b64      	cmp	r3, #100	; 0x64
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e207      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	4b5b      	ldr	r3, [pc, #364]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0xc0>
 800494a:	e014      	b.n	8004976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494c:	f7fd f886 	bl	8001a5c <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004954:	f7fd f882 	bl	8001a5c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	; 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e1f3      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004966:	4b51      	ldr	r3, [pc, #324]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0xe8>
 8004972:	e000      	b.n	8004976 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d063      	beq.n	8004a4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004982:	4b4a      	ldr	r3, [pc, #296]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00b      	beq.n	80049a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800498e:	4b47      	ldr	r3, [pc, #284]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004996:	2b08      	cmp	r3, #8
 8004998:	d11c      	bne.n	80049d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800499a:	4b44      	ldr	r3, [pc, #272]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d116      	bne.n	80049d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a6:	4b41      	ldr	r3, [pc, #260]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_RCC_OscConfig+0x152>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d001      	beq.n	80049be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e1c7      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049be:	4b3b      	ldr	r3, [pc, #236]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4937      	ldr	r1, [pc, #220]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d2:	e03a      	b.n	8004a4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d020      	beq.n	8004a1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049dc:	4b34      	ldr	r3, [pc, #208]	; (8004ab0 <HAL_RCC_OscConfig+0x244>)
 80049de:	2201      	movs	r2, #1
 80049e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e2:	f7fd f83b 	bl	8001a5c <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ea:	f7fd f837 	bl	8001a5c <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e1a8      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fc:	4b2b      	ldr	r3, [pc, #172]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f0      	beq.n	80049ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a08:	4b28      	ldr	r3, [pc, #160]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4925      	ldr	r1, [pc, #148]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	600b      	str	r3, [r1, #0]
 8004a1c:	e015      	b.n	8004a4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a1e:	4b24      	ldr	r3, [pc, #144]	; (8004ab0 <HAL_RCC_OscConfig+0x244>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fd f81a 	bl	8001a5c <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a2c:	f7fd f816 	bl	8001a5c <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e187      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3e:	4b1b      	ldr	r3, [pc, #108]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d036      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d016      	beq.n	8004a8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a5e:	4b15      	ldr	r3, [pc, #84]	; (8004ab4 <HAL_RCC_OscConfig+0x248>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a64:	f7fc fffa 	bl	8001a5c <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a6c:	f7fc fff6 	bl	8001a5c <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e167      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCC_OscConfig+0x240>)
 8004a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0x200>
 8004a8a:	e01b      	b.n	8004ac4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a8c:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <HAL_RCC_OscConfig+0x248>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a92:	f7fc ffe3 	bl	8001a5c <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a98:	e00e      	b.n	8004ab8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a9a:	f7fc ffdf 	bl	8001a5c <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d907      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e150      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	42470000 	.word	0x42470000
 8004ab4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab8:	4b88      	ldr	r3, [pc, #544]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1ea      	bne.n	8004a9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8097 	beq.w	8004c00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ad6:	4b81      	ldr	r3, [pc, #516]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10f      	bne.n	8004b02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	4b7d      	ldr	r3, [pc, #500]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	4a7c      	ldr	r2, [pc, #496]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af0:	6413      	str	r3, [r2, #64]	; 0x40
 8004af2:	4b7a      	ldr	r3, [pc, #488]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afa:	60bb      	str	r3, [r7, #8]
 8004afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004afe:	2301      	movs	r3, #1
 8004b00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b02:	4b77      	ldr	r3, [pc, #476]	; (8004ce0 <HAL_RCC_OscConfig+0x474>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d118      	bne.n	8004b40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b0e:	4b74      	ldr	r3, [pc, #464]	; (8004ce0 <HAL_RCC_OscConfig+0x474>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a73      	ldr	r2, [pc, #460]	; (8004ce0 <HAL_RCC_OscConfig+0x474>)
 8004b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b1a:	f7fc ff9f 	bl	8001a5c <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b22:	f7fc ff9b 	bl	8001a5c <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e10c      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b34:	4b6a      	ldr	r3, [pc, #424]	; (8004ce0 <HAL_RCC_OscConfig+0x474>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0f0      	beq.n	8004b22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d106      	bne.n	8004b56 <HAL_RCC_OscConfig+0x2ea>
 8004b48:	4b64      	ldr	r3, [pc, #400]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4c:	4a63      	ldr	r2, [pc, #396]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	6713      	str	r3, [r2, #112]	; 0x70
 8004b54:	e01c      	b.n	8004b90 <HAL_RCC_OscConfig+0x324>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b05      	cmp	r3, #5
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x30c>
 8004b5e:	4b5f      	ldr	r3, [pc, #380]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b62:	4a5e      	ldr	r2, [pc, #376]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004b64:	f043 0304 	orr.w	r3, r3, #4
 8004b68:	6713      	str	r3, [r2, #112]	; 0x70
 8004b6a:	4b5c      	ldr	r3, [pc, #368]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	4a5b      	ldr	r2, [pc, #364]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	6713      	str	r3, [r2, #112]	; 0x70
 8004b76:	e00b      	b.n	8004b90 <HAL_RCC_OscConfig+0x324>
 8004b78:	4b58      	ldr	r3, [pc, #352]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7c:	4a57      	ldr	r2, [pc, #348]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004b7e:	f023 0301 	bic.w	r3, r3, #1
 8004b82:	6713      	str	r3, [r2, #112]	; 0x70
 8004b84:	4b55      	ldr	r3, [pc, #340]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b88:	4a54      	ldr	r2, [pc, #336]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004b8a:	f023 0304 	bic.w	r3, r3, #4
 8004b8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d015      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b98:	f7fc ff60 	bl	8001a5c <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9e:	e00a      	b.n	8004bb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba0:	f7fc ff5c 	bl	8001a5c <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e0cb      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb6:	4b49      	ldr	r3, [pc, #292]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0ee      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x334>
 8004bc2:	e014      	b.n	8004bee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc4:	f7fc ff4a 	bl	8001a5c <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bca:	e00a      	b.n	8004be2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bcc:	f7fc ff46 	bl	8001a5c <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e0b5      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be2:	4b3e      	ldr	r3, [pc, #248]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1ee      	bne.n	8004bcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d105      	bne.n	8004c00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf4:	4b39      	ldr	r3, [pc, #228]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	4a38      	ldr	r2, [pc, #224]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80a1 	beq.w	8004d4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c0a:	4b34      	ldr	r3, [pc, #208]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d05c      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d141      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1e:	4b31      	ldr	r3, [pc, #196]	; (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c24:	f7fc ff1a 	bl	8001a5c <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c2c:	f7fc ff16 	bl	8001a5c <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e087      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3e:	4b27      	ldr	r3, [pc, #156]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f0      	bne.n	8004c2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69da      	ldr	r2, [r3, #28]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c60:	085b      	lsrs	r3, r3, #1
 8004c62:	3b01      	subs	r3, #1
 8004c64:	041b      	lsls	r3, r3, #16
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	061b      	lsls	r3, r3, #24
 8004c6e:	491b      	ldr	r1, [pc, #108]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c74:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7a:	f7fc feef 	bl	8001a5c <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c82:	f7fc feeb 	bl	8001a5c <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e05c      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c94:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0f0      	beq.n	8004c82 <HAL_RCC_OscConfig+0x416>
 8004ca0:	e054      	b.n	8004d4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca2:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <HAL_RCC_OscConfig+0x478>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca8:	f7fc fed8 	bl	8001a5c <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb0:	f7fc fed4 	bl	8001a5c <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e045      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc2:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_RCC_OscConfig+0x470>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x444>
 8004cce:	e03d      	b.n	8004d4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e038      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	40007000 	.word	0x40007000
 8004ce4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ce8:	4b1b      	ldr	r3, [pc, #108]	; (8004d58 <HAL_RCC_OscConfig+0x4ec>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d028      	beq.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d121      	bne.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d11a      	bne.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d18:	4013      	ands	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d111      	bne.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	085b      	lsrs	r3, r3, #1
 8004d30:	3b01      	subs	r3, #1
 8004d32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d107      	bne.n	8004d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d001      	beq.n	8004d4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800

08004d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0cc      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d70:	4b68      	ldr	r3, [pc, #416]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d90c      	bls.n	8004d98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7e:	4b65      	ldr	r3, [pc, #404]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d86:	4b63      	ldr	r3, [pc, #396]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d001      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0b8      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d020      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004db0:	4b59      	ldr	r3, [pc, #356]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	4a58      	ldr	r2, [pc, #352]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc8:	4b53      	ldr	r3, [pc, #332]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4a52      	ldr	r2, [pc, #328]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd4:	4b50      	ldr	r3, [pc, #320]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	494d      	ldr	r1, [pc, #308]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d044      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d107      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfa:	4b47      	ldr	r3, [pc, #284]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d119      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e07f      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d003      	beq.n	8004e1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d107      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e1a:	4b3f      	ldr	r3, [pc, #252]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e06f      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e2a:	4b3b      	ldr	r3, [pc, #236]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e067      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e3a:	4b37      	ldr	r3, [pc, #220]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f023 0203 	bic.w	r2, r3, #3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	4934      	ldr	r1, [pc, #208]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e4c:	f7fc fe06 	bl	8001a5c <HAL_GetTick>
 8004e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e52:	e00a      	b.n	8004e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e54:	f7fc fe02 	bl	8001a5c <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e04f      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6a:	4b2b      	ldr	r3, [pc, #172]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 020c 	and.w	r2, r3, #12
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d1eb      	bne.n	8004e54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e7c:	4b25      	ldr	r3, [pc, #148]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d20c      	bcs.n	8004ea4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8a:	4b22      	ldr	r3, [pc, #136]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e92:	4b20      	ldr	r3, [pc, #128]	; (8004f14 <HAL_RCC_ClockConfig+0x1b8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e032      	b.n	8004f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb0:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4916      	ldr	r1, [pc, #88]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ece:	4b12      	ldr	r3, [pc, #72]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	490e      	ldr	r1, [pc, #56]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ee2:	f000 f821 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	490a      	ldr	r1, [pc, #40]	; (8004f1c <HAL_RCC_ClockConfig+0x1c0>)
 8004ef4:	5ccb      	ldrb	r3, [r1, r3]
 8004ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8004efa:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <HAL_RCC_ClockConfig+0x1c4>)
 8004efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <HAL_RCC_ClockConfig+0x1c8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fc fd66 	bl	80019d4 <HAL_InitTick>

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40023c00 	.word	0x40023c00
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	0800a808 	.word	0x0800a808
 8004f20:	20000000 	.word	0x20000000
 8004f24:	20000004 	.word	0x20000004

08004f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f2c:	b090      	sub	sp, #64	; 0x40
 8004f2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34
 8004f34:	2300      	movs	r3, #0
 8004f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f38:	2300      	movs	r3, #0
 8004f3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f40:	4b59      	ldr	r3, [pc, #356]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 030c 	and.w	r3, r3, #12
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d00d      	beq.n	8004f68 <HAL_RCC_GetSysClockFreq+0x40>
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	f200 80a1 	bhi.w	8005094 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0x34>
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d003      	beq.n	8004f62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f5a:	e09b      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f5c:	4b53      	ldr	r3, [pc, #332]	; (80050ac <HAL_RCC_GetSysClockFreq+0x184>)
 8004f5e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f60:	e09b      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f62:	4b53      	ldr	r3, [pc, #332]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f66:	e098      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f68:	4b4f      	ldr	r3, [pc, #316]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f70:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f72:	4b4d      	ldr	r3, [pc, #308]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d028      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f7e:	4b4a      	ldr	r3, [pc, #296]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	099b      	lsrs	r3, r3, #6
 8004f84:	2200      	movs	r2, #0
 8004f86:	623b      	str	r3, [r7, #32]
 8004f88:	627a      	str	r2, [r7, #36]	; 0x24
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f90:	2100      	movs	r1, #0
 8004f92:	4b47      	ldr	r3, [pc, #284]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f94:	fb03 f201 	mul.w	r2, r3, r1
 8004f98:	2300      	movs	r3, #0
 8004f9a:	fb00 f303 	mul.w	r3, r0, r3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	4a43      	ldr	r2, [pc, #268]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fa2:	fba0 1202 	umull	r1, r2, r0, r2
 8004fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fa8:	460a      	mov	r2, r1
 8004faa:	62ba      	str	r2, [r7, #40]	; 0x28
 8004fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fae:	4413      	add	r3, r2
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
 8004fb8:	61fa      	str	r2, [r7, #28]
 8004fba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fc2:	f7fb fe69 	bl	8000c98 <__aeabi_uldivmod>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4613      	mov	r3, r2
 8004fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fce:	e053      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fd0:	4b35      	ldr	r3, [pc, #212]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	099b      	lsrs	r3, r3, #6
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	617a      	str	r2, [r7, #20]
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fe2:	f04f 0b00 	mov.w	fp, #0
 8004fe6:	4652      	mov	r2, sl
 8004fe8:	465b      	mov	r3, fp
 8004fea:	f04f 0000 	mov.w	r0, #0
 8004fee:	f04f 0100 	mov.w	r1, #0
 8004ff2:	0159      	lsls	r1, r3, #5
 8004ff4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ff8:	0150      	lsls	r0, r2, #5
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	ebb2 080a 	subs.w	r8, r2, sl
 8005002:	eb63 090b 	sbc.w	r9, r3, fp
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005012:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005016:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800501a:	ebb2 0408 	subs.w	r4, r2, r8
 800501e:	eb63 0509 	sbc.w	r5, r3, r9
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	00eb      	lsls	r3, r5, #3
 800502c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005030:	00e2      	lsls	r2, r4, #3
 8005032:	4614      	mov	r4, r2
 8005034:	461d      	mov	r5, r3
 8005036:	eb14 030a 	adds.w	r3, r4, sl
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	eb45 030b 	adc.w	r3, r5, fp
 8005040:	607b      	str	r3, [r7, #4]
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800504e:	4629      	mov	r1, r5
 8005050:	028b      	lsls	r3, r1, #10
 8005052:	4621      	mov	r1, r4
 8005054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005058:	4621      	mov	r1, r4
 800505a:	028a      	lsls	r2, r1, #10
 800505c:	4610      	mov	r0, r2
 800505e:	4619      	mov	r1, r3
 8005060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005062:	2200      	movs	r2, #0
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	60fa      	str	r2, [r7, #12]
 8005068:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800506c:	f7fb fe14 	bl	8000c98 <__aeabi_uldivmod>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4613      	mov	r3, r2
 8005076:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005078:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	0c1b      	lsrs	r3, r3, #16
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	3301      	adds	r3, #1
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005088:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005092:	e002      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005094:	4b05      	ldr	r3, [pc, #20]	; (80050ac <HAL_RCC_GetSysClockFreq+0x184>)
 8005096:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800509a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800509c:	4618      	mov	r0, r3
 800509e:	3740      	adds	r7, #64	; 0x40
 80050a0:	46bd      	mov	sp, r7
 80050a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a6:	bf00      	nop
 80050a8:	40023800 	.word	0x40023800
 80050ac:	00f42400 	.word	0x00f42400
 80050b0:	017d7840 	.word	0x017d7840

080050b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b8:	4b03      	ldr	r3, [pc, #12]	; (80050c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050ba:	681b      	ldr	r3, [r3, #0]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	20000000 	.word	0x20000000

080050cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050d0:	f7ff fff0 	bl	80050b4 <HAL_RCC_GetHCLKFreq>
 80050d4:	4602      	mov	r2, r0
 80050d6:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	0a9b      	lsrs	r3, r3, #10
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	4903      	ldr	r1, [pc, #12]	; (80050f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050e2:	5ccb      	ldrb	r3, [r1, r3]
 80050e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40023800 	.word	0x40023800
 80050f0:	0800a818 	.word	0x0800a818

080050f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e041      	b.n	800518a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d106      	bne.n	8005120 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fc faa6 	bl	800166c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f000 f9a0 	bl	8005478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d109      	bne.n	80051b8 <HAL_TIM_PWM_Start+0x24>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	bf14      	ite	ne
 80051b0:	2301      	movne	r3, #1
 80051b2:	2300      	moveq	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	e022      	b.n	80051fe <HAL_TIM_PWM_Start+0x6a>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d109      	bne.n	80051d2 <HAL_TIM_PWM_Start+0x3e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	bf14      	ite	ne
 80051ca:	2301      	movne	r3, #1
 80051cc:	2300      	moveq	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	e015      	b.n	80051fe <HAL_TIM_PWM_Start+0x6a>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d109      	bne.n	80051ec <HAL_TIM_PWM_Start+0x58>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e008      	b.n	80051fe <HAL_TIM_PWM_Start+0x6a>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	bf14      	ite	ne
 80051f8:	2301      	movne	r3, #1
 80051fa:	2300      	moveq	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e068      	b.n	80052d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d104      	bne.n	8005216 <HAL_TIM_PWM_Start+0x82>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005214:	e013      	b.n	800523e <HAL_TIM_PWM_Start+0xaa>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b04      	cmp	r3, #4
 800521a:	d104      	bne.n	8005226 <HAL_TIM_PWM_Start+0x92>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005224:	e00b      	b.n	800523e <HAL_TIM_PWM_Start+0xaa>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b08      	cmp	r3, #8
 800522a:	d104      	bne.n	8005236 <HAL_TIM_PWM_Start+0xa2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005234:	e003      	b.n	800523e <HAL_TIM_PWM_Start+0xaa>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2202      	movs	r2, #2
 800523a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2201      	movs	r2, #1
 8005244:	6839      	ldr	r1, [r7, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fb22 	bl	8005890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a23      	ldr	r2, [pc, #140]	; (80052e0 <HAL_TIM_PWM_Start+0x14c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d107      	bne.n	8005266 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005264:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1d      	ldr	r2, [pc, #116]	; (80052e0 <HAL_TIM_PWM_Start+0x14c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d018      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x10e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005278:	d013      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x10e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <HAL_TIM_PWM_Start+0x150>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00e      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x10e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <HAL_TIM_PWM_Start+0x154>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d009      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x10e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a16      	ldr	r2, [pc, #88]	; (80052ec <HAL_TIM_PWM_Start+0x158>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_TIM_PWM_Start+0x10e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a14      	ldr	r2, [pc, #80]	; (80052f0 <HAL_TIM_PWM_Start+0x15c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d111      	bne.n	80052c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b06      	cmp	r3, #6
 80052b2:	d010      	beq.n	80052d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c4:	e007      	b.n	80052d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40014000 	.word	0x40014000

080052f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800530e:	2302      	movs	r3, #2
 8005310:	e0ae      	b.n	8005470 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b0c      	cmp	r3, #12
 800531e:	f200 809f 	bhi.w	8005460 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005322:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005328:	0800535d 	.word	0x0800535d
 800532c:	08005461 	.word	0x08005461
 8005330:	08005461 	.word	0x08005461
 8005334:	08005461 	.word	0x08005461
 8005338:	0800539d 	.word	0x0800539d
 800533c:	08005461 	.word	0x08005461
 8005340:	08005461 	.word	0x08005461
 8005344:	08005461 	.word	0x08005461
 8005348:	080053df 	.word	0x080053df
 800534c:	08005461 	.word	0x08005461
 8005350:	08005461 	.word	0x08005461
 8005354:	08005461 	.word	0x08005461
 8005358:	0800541f 	.word	0x0800541f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 f908 	bl	8005578 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0208 	orr.w	r2, r2, #8
 8005376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699a      	ldr	r2, [r3, #24]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0204 	bic.w	r2, r2, #4
 8005386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6999      	ldr	r1, [r3, #24]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691a      	ldr	r2, [r3, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	619a      	str	r2, [r3, #24]
      break;
 800539a:	e064      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f94e 	bl	8005644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6999      	ldr	r1, [r3, #24]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	021a      	lsls	r2, r3, #8
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	619a      	str	r2, [r3, #24]
      break;
 80053dc:	e043      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 f999 	bl	800571c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0208 	orr.w	r2, r2, #8
 80053f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0204 	bic.w	r2, r2, #4
 8005408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69d9      	ldr	r1, [r3, #28]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	61da      	str	r2, [r3, #28]
      break;
 800541c:	e023      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 f9e3 	bl	80057f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69d9      	ldr	r1, [r3, #28]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	021a      	lsls	r2, r3, #8
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	61da      	str	r2, [r3, #28]
      break;
 800545e:	e002      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
      break;
 8005464:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800546e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a34      	ldr	r2, [pc, #208]	; (800555c <TIM_Base_SetConfig+0xe4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00f      	beq.n	80054b0 <TIM_Base_SetConfig+0x38>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005496:	d00b      	beq.n	80054b0 <TIM_Base_SetConfig+0x38>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a31      	ldr	r2, [pc, #196]	; (8005560 <TIM_Base_SetConfig+0xe8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d007      	beq.n	80054b0 <TIM_Base_SetConfig+0x38>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a30      	ldr	r2, [pc, #192]	; (8005564 <TIM_Base_SetConfig+0xec>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_Base_SetConfig+0x38>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a2f      	ldr	r2, [pc, #188]	; (8005568 <TIM_Base_SetConfig+0xf0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d108      	bne.n	80054c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a25      	ldr	r2, [pc, #148]	; (800555c <TIM_Base_SetConfig+0xe4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d01b      	beq.n	8005502 <TIM_Base_SetConfig+0x8a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d0:	d017      	beq.n	8005502 <TIM_Base_SetConfig+0x8a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a22      	ldr	r2, [pc, #136]	; (8005560 <TIM_Base_SetConfig+0xe8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d013      	beq.n	8005502 <TIM_Base_SetConfig+0x8a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a21      	ldr	r2, [pc, #132]	; (8005564 <TIM_Base_SetConfig+0xec>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00f      	beq.n	8005502 <TIM_Base_SetConfig+0x8a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a20      	ldr	r2, [pc, #128]	; (8005568 <TIM_Base_SetConfig+0xf0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00b      	beq.n	8005502 <TIM_Base_SetConfig+0x8a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a1f      	ldr	r2, [pc, #124]	; (800556c <TIM_Base_SetConfig+0xf4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d007      	beq.n	8005502 <TIM_Base_SetConfig+0x8a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1e      	ldr	r2, [pc, #120]	; (8005570 <TIM_Base_SetConfig+0xf8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d003      	beq.n	8005502 <TIM_Base_SetConfig+0x8a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <TIM_Base_SetConfig+0xfc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d108      	bne.n	8005514 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a08      	ldr	r2, [pc, #32]	; (800555c <TIM_Base_SetConfig+0xe4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d103      	bne.n	8005548 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	615a      	str	r2, [r3, #20]
}
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40010000 	.word	0x40010000
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800

08005578 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f023 0201 	bic.w	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 0302 	bic.w	r3, r3, #2
 80055c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a1c      	ldr	r2, [pc, #112]	; (8005640 <TIM_OC1_SetConfig+0xc8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d10c      	bne.n	80055ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f023 0308 	bic.w	r3, r3, #8
 80055da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f023 0304 	bic.w	r3, r3, #4
 80055ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a13      	ldr	r2, [pc, #76]	; (8005640 <TIM_OC1_SetConfig+0xc8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d111      	bne.n	800561a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	621a      	str	r2, [r3, #32]
}
 8005634:	bf00      	nop
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	40010000 	.word	0x40010000

08005644 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f023 0210 	bic.w	r2, r3, #16
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f023 0320 	bic.w	r3, r3, #32
 800568e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <TIM_OC2_SetConfig+0xd4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d10d      	bne.n	80056c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a15      	ldr	r2, [pc, #84]	; (8005718 <TIM_OC2_SetConfig+0xd4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d113      	bne.n	80056f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40010000 	.word	0x40010000

0800571c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	021b      	lsls	r3, r3, #8
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1d      	ldr	r2, [pc, #116]	; (80057ec <TIM_OC3_SetConfig+0xd0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d10d      	bne.n	8005796 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a14      	ldr	r2, [pc, #80]	; (80057ec <TIM_OC3_SetConfig+0xd0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d113      	bne.n	80057c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	621a      	str	r2, [r3, #32]
}
 80057e0:	bf00      	nop
 80057e2:	371c      	adds	r7, #28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	40010000 	.word	0x40010000

080057f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800583a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	031b      	lsls	r3, r3, #12
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a10      	ldr	r2, [pc, #64]	; (800588c <TIM_OC4_SetConfig+0x9c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d109      	bne.n	8005864 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	019b      	lsls	r3, r3, #6
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4313      	orrs	r3, r2
 8005862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40010000 	.word	0x40010000

08005890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f003 031f 	and.w	r3, r3, #31
 80058a2:	2201      	movs	r2, #1
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a1a      	ldr	r2, [r3, #32]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	43db      	mvns	r3, r3
 80058b2:	401a      	ands	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a1a      	ldr	r2, [r3, #32]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	fa01 f303 	lsl.w	r3, r1, r3
 80058c8:	431a      	orrs	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
	...

080058dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e050      	b.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1c      	ldr	r2, [pc, #112]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d018      	beq.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005940:	d013      	beq.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a18      	ldr	r2, [pc, #96]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00e      	beq.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a16      	ldr	r2, [pc, #88]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d009      	beq.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d004      	beq.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a13      	ldr	r2, [pc, #76]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d10c      	bne.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	4313      	orrs	r3, r2
 800597a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00
 80059b4:	40014000 	.word	0x40014000

080059b8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80059bc:	bf00      	nop
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af04      	add	r7, sp, #16
 80059ce:	4603      	mov	r3, r0
 80059d0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80059d2:	f04f 33ff 	mov.w	r3, #4294967295
 80059d6:	9302      	str	r3, [sp, #8]
 80059d8:	2301      	movs	r3, #1
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	1dfb      	adds	r3, r7, #7
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	2301      	movs	r3, #1
 80059e2:	2200      	movs	r2, #0
 80059e4:	2178      	movs	r1, #120	; 0x78
 80059e6:	4803      	ldr	r0, [pc, #12]	; (80059f4 <ssd1306_WriteCommand+0x2c>)
 80059e8:	f7fd f864 	bl	8002ab4 <HAL_I2C_Mem_Write>
}
 80059ec:	bf00      	nop
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	2000024c 	.word	0x2000024c

080059f8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af04      	add	r7, sp, #16
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0a:	9202      	str	r2, [sp, #8]
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	2301      	movs	r3, #1
 8005a14:	2240      	movs	r2, #64	; 0x40
 8005a16:	2178      	movs	r1, #120	; 0x78
 8005a18:	4803      	ldr	r0, [pc, #12]	; (8005a28 <ssd1306_WriteData+0x30>)
 8005a1a:	f7fd f84b 	bl	8002ab4 <HAL_I2C_Mem_Write>
}
 8005a1e:	bf00      	nop
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	2000024c 	.word	0x2000024c

08005a2c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005a30:	f7ff ffc2 	bl	80059b8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005a34:	2064      	movs	r0, #100	; 0x64
 8005a36:	f7fc f81d 	bl	8001a74 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	f000 f9da 	bl	8005df4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005a40:	2020      	movs	r0, #32
 8005a42:	f7ff ffc1 	bl	80059c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005a46:	2000      	movs	r0, #0
 8005a48:	f7ff ffbe 	bl	80059c8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005a4c:	20b0      	movs	r0, #176	; 0xb0
 8005a4e:	f7ff ffbb 	bl	80059c8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005a52:	20c8      	movs	r0, #200	; 0xc8
 8005a54:	f7ff ffb8 	bl	80059c8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8005a58:	2000      	movs	r0, #0
 8005a5a:	f7ff ffb5 	bl	80059c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8005a5e:	2010      	movs	r0, #16
 8005a60:	f7ff ffb2 	bl	80059c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005a64:	2040      	movs	r0, #64	; 0x40
 8005a66:	f7ff ffaf 	bl	80059c8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8005a6a:	20ff      	movs	r0, #255	; 0xff
 8005a6c:	f000 f9ae 	bl	8005dcc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005a70:	20a1      	movs	r0, #161	; 0xa1
 8005a72:	f7ff ffa9 	bl	80059c8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8005a76:	20a6      	movs	r0, #166	; 0xa6
 8005a78:	f7ff ffa6 	bl	80059c8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005a7c:	20a8      	movs	r0, #168	; 0xa8
 8005a7e:	f7ff ffa3 	bl	80059c8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8005a82:	203f      	movs	r0, #63	; 0x3f
 8005a84:	f7ff ffa0 	bl	80059c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005a88:	20a4      	movs	r0, #164	; 0xa4
 8005a8a:	f7ff ff9d 	bl	80059c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8005a8e:	20d3      	movs	r0, #211	; 0xd3
 8005a90:	f7ff ff9a 	bl	80059c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005a94:	2000      	movs	r0, #0
 8005a96:	f7ff ff97 	bl	80059c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005a9a:	20d5      	movs	r0, #213	; 0xd5
 8005a9c:	f7ff ff94 	bl	80059c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005aa0:	20f0      	movs	r0, #240	; 0xf0
 8005aa2:	f7ff ff91 	bl	80059c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005aa6:	20d9      	movs	r0, #217	; 0xd9
 8005aa8:	f7ff ff8e 	bl	80059c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005aac:	2022      	movs	r0, #34	; 0x22
 8005aae:	f7ff ff8b 	bl	80059c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005ab2:	20da      	movs	r0, #218	; 0xda
 8005ab4:	f7ff ff88 	bl	80059c8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8005ab8:	2012      	movs	r0, #18
 8005aba:	f7ff ff85 	bl	80059c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8005abe:	20db      	movs	r0, #219	; 0xdb
 8005ac0:	f7ff ff82 	bl	80059c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005ac4:	2020      	movs	r0, #32
 8005ac6:	f7ff ff7f 	bl	80059c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005aca:	208d      	movs	r0, #141	; 0x8d
 8005acc:	f7ff ff7c 	bl	80059c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005ad0:	2014      	movs	r0, #20
 8005ad2:	f7ff ff79 	bl	80059c8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	f000 f98c 	bl	8005df4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005adc:	2000      	movs	r0, #0
 8005ade:	f000 f80f 	bl	8005b00 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8005ae2:	f000 f831 	bl	8005b48 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005ae6:	4b05      	ldr	r3, [pc, #20]	; (8005afc <ssd1306_Init+0xd0>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005aec:	4b03      	ldr	r3, [pc, #12]	; (8005afc <ssd1306_Init+0xd0>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8005af2:	4b02      	ldr	r3, [pc, #8]	; (8005afc <ssd1306_Init+0xd0>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	711a      	strb	r2, [r3, #4]
}
 8005af8:	bf00      	nop
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20000758 	.word	0x20000758

08005b00 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e00d      	b.n	8005b2c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <ssd1306_Fill+0x1a>
 8005b16:	2100      	movs	r1, #0
 8005b18:	e000      	b.n	8005b1c <ssd1306_Fill+0x1c>
 8005b1a:	21ff      	movs	r1, #255	; 0xff
 8005b1c:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <ssd1306_Fill+0x44>)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	460a      	mov	r2, r1
 8005b24:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b32:	d3ed      	bcc.n	8005b10 <ssd1306_Fill+0x10>
    }
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000358 	.word	0x20000358

08005b48 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005b4e:	2300      	movs	r3, #0
 8005b50:	71fb      	strb	r3, [r7, #7]
 8005b52:	e016      	b.n	8005b82 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	3b50      	subs	r3, #80	; 0x50
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff ff34 	bl	80059c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8005b60:	2000      	movs	r0, #0
 8005b62:	f7ff ff31 	bl	80059c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005b66:	2010      	movs	r0, #16
 8005b68:	f7ff ff2e 	bl	80059c8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	01db      	lsls	r3, r3, #7
 8005b70:	4a08      	ldr	r2, [pc, #32]	; (8005b94 <ssd1306_UpdateScreen+0x4c>)
 8005b72:	4413      	add	r3, r2
 8005b74:	2180      	movs	r1, #128	; 0x80
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff ff3e 	bl	80059f8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	71fb      	strb	r3, [r7, #7]
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	2b07      	cmp	r3, #7
 8005b86:	d9e5      	bls.n	8005b54 <ssd1306_UpdateScreen+0xc>
    }
}
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20000358 	.word	0x20000358

08005b98 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	71fb      	strb	r3, [r7, #7]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	71bb      	strb	r3, [r7, #6]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	db3d      	blt.n	8005c2e <ssd1306_DrawPixel+0x96>
 8005bb2:	79bb      	ldrb	r3, [r7, #6]
 8005bb4:	2b3f      	cmp	r3, #63	; 0x3f
 8005bb6:	d83a      	bhi.n	8005c2e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005bb8:	797b      	ldrb	r3, [r7, #5]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d11a      	bne.n	8005bf4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005bbe:	79fa      	ldrb	r2, [r7, #7]
 8005bc0:	79bb      	ldrb	r3, [r7, #6]
 8005bc2:	08db      	lsrs	r3, r3, #3
 8005bc4:	b2d8      	uxtb	r0, r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	01db      	lsls	r3, r3, #7
 8005bca:	4413      	add	r3, r2
 8005bcc:	4a1b      	ldr	r2, [pc, #108]	; (8005c3c <ssd1306_DrawPixel+0xa4>)
 8005bce:	5cd3      	ldrb	r3, [r2, r3]
 8005bd0:	b25a      	sxtb	r2, r3
 8005bd2:	79bb      	ldrb	r3, [r7, #6]
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	2101      	movs	r1, #1
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	b25b      	sxtb	r3, r3
 8005be0:	4313      	orrs	r3, r2
 8005be2:	b259      	sxtb	r1, r3
 8005be4:	79fa      	ldrb	r2, [r7, #7]
 8005be6:	4603      	mov	r3, r0
 8005be8:	01db      	lsls	r3, r3, #7
 8005bea:	4413      	add	r3, r2
 8005bec:	b2c9      	uxtb	r1, r1
 8005bee:	4a13      	ldr	r2, [pc, #76]	; (8005c3c <ssd1306_DrawPixel+0xa4>)
 8005bf0:	54d1      	strb	r1, [r2, r3]
 8005bf2:	e01d      	b.n	8005c30 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005bf4:	79fa      	ldrb	r2, [r7, #7]
 8005bf6:	79bb      	ldrb	r3, [r7, #6]
 8005bf8:	08db      	lsrs	r3, r3, #3
 8005bfa:	b2d8      	uxtb	r0, r3
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	01db      	lsls	r3, r3, #7
 8005c00:	4413      	add	r3, r2
 8005c02:	4a0e      	ldr	r2, [pc, #56]	; (8005c3c <ssd1306_DrawPixel+0xa4>)
 8005c04:	5cd3      	ldrb	r3, [r2, r3]
 8005c06:	b25a      	sxtb	r2, r3
 8005c08:	79bb      	ldrb	r3, [r7, #6]
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	2101      	movs	r1, #1
 8005c10:	fa01 f303 	lsl.w	r3, r1, r3
 8005c14:	b25b      	sxtb	r3, r3
 8005c16:	43db      	mvns	r3, r3
 8005c18:	b25b      	sxtb	r3, r3
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	b259      	sxtb	r1, r3
 8005c1e:	79fa      	ldrb	r2, [r7, #7]
 8005c20:	4603      	mov	r3, r0
 8005c22:	01db      	lsls	r3, r3, #7
 8005c24:	4413      	add	r3, r2
 8005c26:	b2c9      	uxtb	r1, r1
 8005c28:	4a04      	ldr	r2, [pc, #16]	; (8005c3c <ssd1306_DrawPixel+0xa4>)
 8005c2a:	54d1      	strb	r1, [r2, r3]
 8005c2c:	e000      	b.n	8005c30 <ssd1306_DrawPixel+0x98>
        return;
 8005c2e:	bf00      	nop
    }
}
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	20000358 	.word	0x20000358

08005c40 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005c40:	b590      	push	{r4, r7, lr}
 8005c42:	b089      	sub	sp, #36	; 0x24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	1d38      	adds	r0, r7, #4
 8005c4a:	e880 0006 	stmia.w	r0, {r1, r2}
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4623      	mov	r3, r4
 8005c52:	73fb      	strb	r3, [r7, #15]
 8005c54:	4613      	mov	r3, r2
 8005c56:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
 8005c5a:	2b1f      	cmp	r3, #31
 8005c5c:	d902      	bls.n	8005c64 <ssd1306_WriteChar+0x24>
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	2b7e      	cmp	r3, #126	; 0x7e
 8005c62:	d901      	bls.n	8005c68 <ssd1306_WriteChar+0x28>
        return 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	e06d      	b.n	8005d44 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005c68:	4b38      	ldr	r3, [pc, #224]	; (8005d4c <ssd1306_WriteChar+0x10c>)
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	793b      	ldrb	r3, [r7, #4]
 8005c70:	4413      	add	r3, r2
 8005c72:	2b80      	cmp	r3, #128	; 0x80
 8005c74:	dc06      	bgt.n	8005c84 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8005c76:	4b35      	ldr	r3, [pc, #212]	; (8005d4c <ssd1306_WriteChar+0x10c>)
 8005c78:	885b      	ldrh	r3, [r3, #2]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	797b      	ldrb	r3, [r7, #5]
 8005c7e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	dd01      	ble.n	8005c88 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e05d      	b.n	8005d44 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	e04c      	b.n	8005d28 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	3b20      	subs	r3, #32
 8005c94:	7979      	ldrb	r1, [r7, #5]
 8005c96:	fb01 f303 	mul.w	r3, r1, r3
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	440b      	add	r3, r1
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	4413      	add	r3, r2
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61bb      	str	r3, [r7, #24]
 8005cac:	e034      	b.n	8005d18 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d012      	beq.n	8005ce4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005cbe:	4b23      	ldr	r3, [pc, #140]	; (8005d4c <ssd1306_WriteChar+0x10c>)
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	4413      	add	r3, r2
 8005cca:	b2d8      	uxtb	r0, r3
 8005ccc:	4b1f      	ldr	r3, [pc, #124]	; (8005d4c <ssd1306_WriteChar+0x10c>)
 8005cce:	885b      	ldrh	r3, [r3, #2]
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	7bba      	ldrb	r2, [r7, #14]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	f7ff ff5b 	bl	8005b98 <ssd1306_DrawPixel>
 8005ce2:	e016      	b.n	8005d12 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005ce4:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <ssd1306_WriteChar+0x10c>)
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	4413      	add	r3, r2
 8005cf0:	b2d8      	uxtb	r0, r3
 8005cf2:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <ssd1306_WriteChar+0x10c>)
 8005cf4:	885b      	ldrh	r3, [r3, #2]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	b2d9      	uxtb	r1, r3
 8005d00:	7bbb      	ldrb	r3, [r7, #14]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bf0c      	ite	eq
 8005d06:	2301      	moveq	r3, #1
 8005d08:	2300      	movne	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f7ff ff43 	bl	8005b98 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	3301      	adds	r3, #1
 8005d16:	61bb      	str	r3, [r7, #24]
 8005d18:	793b      	ldrb	r3, [r7, #4]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d3c5      	bcc.n	8005cae <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	3301      	adds	r3, #1
 8005d26:	61fb      	str	r3, [r7, #28]
 8005d28:	797b      	ldrb	r3, [r7, #5]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d3ad      	bcc.n	8005c8e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <ssd1306_WriteChar+0x10c>)
 8005d34:	881a      	ldrh	r2, [r3, #0]
 8005d36:	793b      	ldrb	r3, [r7, #4]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	4413      	add	r3, r2
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	4b03      	ldr	r3, [pc, #12]	; (8005d4c <ssd1306_WriteChar+0x10c>)
 8005d40:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3724      	adds	r7, #36	; 0x24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd90      	pop	{r4, r7, pc}
 8005d4c:	20000758 	.word	0x20000758

08005d50 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	1d38      	adds	r0, r7, #4
 8005d5a:	e880 0006 	stmia.w	r0, {r1, r2}
 8005d5e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8005d60:	e012      	b.n	8005d88 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	7818      	ldrb	r0, [r3, #0]
 8005d66:	78fb      	ldrb	r3, [r7, #3]
 8005d68:	1d3a      	adds	r2, r7, #4
 8005d6a:	ca06      	ldmia	r2, {r1, r2}
 8005d6c:	f7ff ff68 	bl	8005c40 <ssd1306_WriteChar>
 8005d70:	4603      	mov	r3, r0
 8005d72:	461a      	mov	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d002      	beq.n	8005d82 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	e008      	b.n	8005d94 <ssd1306_WriteString+0x44>
        }
        str++;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3301      	adds	r3, #1
 8005d86:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e8      	bne.n	8005d62 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	781b      	ldrb	r3, [r3, #0]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	460a      	mov	r2, r1
 8005da6:	71fb      	strb	r3, [r7, #7]
 8005da8:	4613      	mov	r3, r2
 8005daa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <ssd1306_SetCursor+0x2c>)
 8005db2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005db4:	79bb      	ldrb	r3, [r7, #6]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	4b03      	ldr	r3, [pc, #12]	; (8005dc8 <ssd1306_SetCursor+0x2c>)
 8005dba:	805a      	strh	r2, [r3, #2]
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	20000758 	.word	0x20000758

08005dcc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005dd6:	2381      	movs	r3, #129	; 0x81
 8005dd8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff fdf3 	bl	80059c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff fdef 	bl	80059c8 <ssd1306_WriteCommand>
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005e04:	23af      	movs	r3, #175	; 0xaf
 8005e06:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005e08:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <ssd1306_SetDisplayOn+0x38>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	715a      	strb	r2, [r3, #5]
 8005e0e:	e004      	b.n	8005e1a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005e10:	23ae      	movs	r3, #174	; 0xae
 8005e12:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <ssd1306_SetDisplayOn+0x38>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fdd3 	bl	80059c8 <ssd1306_WriteCommand>
}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000758 	.word	0x20000758

08005e30 <__errno>:
 8005e30:	4b01      	ldr	r3, [pc, #4]	; (8005e38 <__errno+0x8>)
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20000014 	.word	0x20000014

08005e3c <__libc_init_array>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	4d0d      	ldr	r5, [pc, #52]	; (8005e74 <__libc_init_array+0x38>)
 8005e40:	4c0d      	ldr	r4, [pc, #52]	; (8005e78 <__libc_init_array+0x3c>)
 8005e42:	1b64      	subs	r4, r4, r5
 8005e44:	10a4      	asrs	r4, r4, #2
 8005e46:	2600      	movs	r6, #0
 8005e48:	42a6      	cmp	r6, r4
 8005e4a:	d109      	bne.n	8005e60 <__libc_init_array+0x24>
 8005e4c:	4d0b      	ldr	r5, [pc, #44]	; (8005e7c <__libc_init_array+0x40>)
 8005e4e:	4c0c      	ldr	r4, [pc, #48]	; (8005e80 <__libc_init_array+0x44>)
 8005e50:	f004 fcc4 	bl	800a7dc <_init>
 8005e54:	1b64      	subs	r4, r4, r5
 8005e56:	10a4      	asrs	r4, r4, #2
 8005e58:	2600      	movs	r6, #0
 8005e5a:	42a6      	cmp	r6, r4
 8005e5c:	d105      	bne.n	8005e6a <__libc_init_array+0x2e>
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e64:	4798      	blx	r3
 8005e66:	3601      	adds	r6, #1
 8005e68:	e7ee      	b.n	8005e48 <__libc_init_array+0xc>
 8005e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6e:	4798      	blx	r3
 8005e70:	3601      	adds	r6, #1
 8005e72:	e7f2      	b.n	8005e5a <__libc_init_array+0x1e>
 8005e74:	0800b43c 	.word	0x0800b43c
 8005e78:	0800b43c 	.word	0x0800b43c
 8005e7c:	0800b43c 	.word	0x0800b43c
 8005e80:	0800b440 	.word	0x0800b440

08005e84 <memcpy>:
 8005e84:	440a      	add	r2, r1
 8005e86:	4291      	cmp	r1, r2
 8005e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e8c:	d100      	bne.n	8005e90 <memcpy+0xc>
 8005e8e:	4770      	bx	lr
 8005e90:	b510      	push	{r4, lr}
 8005e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e9a:	4291      	cmp	r1, r2
 8005e9c:	d1f9      	bne.n	8005e92 <memcpy+0xe>
 8005e9e:	bd10      	pop	{r4, pc}

08005ea0 <memmove>:
 8005ea0:	4288      	cmp	r0, r1
 8005ea2:	b510      	push	{r4, lr}
 8005ea4:	eb01 0402 	add.w	r4, r1, r2
 8005ea8:	d902      	bls.n	8005eb0 <memmove+0x10>
 8005eaa:	4284      	cmp	r4, r0
 8005eac:	4623      	mov	r3, r4
 8005eae:	d807      	bhi.n	8005ec0 <memmove+0x20>
 8005eb0:	1e43      	subs	r3, r0, #1
 8005eb2:	42a1      	cmp	r1, r4
 8005eb4:	d008      	beq.n	8005ec8 <memmove+0x28>
 8005eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005eba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ebe:	e7f8      	b.n	8005eb2 <memmove+0x12>
 8005ec0:	4402      	add	r2, r0
 8005ec2:	4601      	mov	r1, r0
 8005ec4:	428a      	cmp	r2, r1
 8005ec6:	d100      	bne.n	8005eca <memmove+0x2a>
 8005ec8:	bd10      	pop	{r4, pc}
 8005eca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ece:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ed2:	e7f7      	b.n	8005ec4 <memmove+0x24>

08005ed4 <memset>:
 8005ed4:	4402      	add	r2, r0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d100      	bne.n	8005ede <memset+0xa>
 8005edc:	4770      	bx	lr
 8005ede:	f803 1b01 	strb.w	r1, [r3], #1
 8005ee2:	e7f9      	b.n	8005ed8 <memset+0x4>

08005ee4 <__cvt>:
 8005ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee8:	ec55 4b10 	vmov	r4, r5, d0
 8005eec:	2d00      	cmp	r5, #0
 8005eee:	460e      	mov	r6, r1
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	462b      	mov	r3, r5
 8005ef4:	bfbb      	ittet	lt
 8005ef6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005efa:	461d      	movlt	r5, r3
 8005efc:	2300      	movge	r3, #0
 8005efe:	232d      	movlt	r3, #45	; 0x2d
 8005f00:	700b      	strb	r3, [r1, #0]
 8005f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f08:	4691      	mov	r9, r2
 8005f0a:	f023 0820 	bic.w	r8, r3, #32
 8005f0e:	bfbc      	itt	lt
 8005f10:	4622      	movlt	r2, r4
 8005f12:	4614      	movlt	r4, r2
 8005f14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f18:	d005      	beq.n	8005f26 <__cvt+0x42>
 8005f1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f1e:	d100      	bne.n	8005f22 <__cvt+0x3e>
 8005f20:	3601      	adds	r6, #1
 8005f22:	2102      	movs	r1, #2
 8005f24:	e000      	b.n	8005f28 <__cvt+0x44>
 8005f26:	2103      	movs	r1, #3
 8005f28:	ab03      	add	r3, sp, #12
 8005f2a:	9301      	str	r3, [sp, #4]
 8005f2c:	ab02      	add	r3, sp, #8
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	ec45 4b10 	vmov	d0, r4, r5
 8005f34:	4653      	mov	r3, sl
 8005f36:	4632      	mov	r2, r6
 8005f38:	f001 fde2 	bl	8007b00 <_dtoa_r>
 8005f3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f40:	4607      	mov	r7, r0
 8005f42:	d102      	bne.n	8005f4a <__cvt+0x66>
 8005f44:	f019 0f01 	tst.w	r9, #1
 8005f48:	d022      	beq.n	8005f90 <__cvt+0xac>
 8005f4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f4e:	eb07 0906 	add.w	r9, r7, r6
 8005f52:	d110      	bne.n	8005f76 <__cvt+0x92>
 8005f54:	783b      	ldrb	r3, [r7, #0]
 8005f56:	2b30      	cmp	r3, #48	; 0x30
 8005f58:	d10a      	bne.n	8005f70 <__cvt+0x8c>
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	4620      	mov	r0, r4
 8005f60:	4629      	mov	r1, r5
 8005f62:	f7fa fdb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f66:	b918      	cbnz	r0, 8005f70 <__cvt+0x8c>
 8005f68:	f1c6 0601 	rsb	r6, r6, #1
 8005f6c:	f8ca 6000 	str.w	r6, [sl]
 8005f70:	f8da 3000 	ldr.w	r3, [sl]
 8005f74:	4499      	add	r9, r3
 8005f76:	2200      	movs	r2, #0
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	f7fa fdab 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f82:	b108      	cbz	r0, 8005f88 <__cvt+0xa4>
 8005f84:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f88:	2230      	movs	r2, #48	; 0x30
 8005f8a:	9b03      	ldr	r3, [sp, #12]
 8005f8c:	454b      	cmp	r3, r9
 8005f8e:	d307      	bcc.n	8005fa0 <__cvt+0xbc>
 8005f90:	9b03      	ldr	r3, [sp, #12]
 8005f92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f94:	1bdb      	subs	r3, r3, r7
 8005f96:	4638      	mov	r0, r7
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	b004      	add	sp, #16
 8005f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa0:	1c59      	adds	r1, r3, #1
 8005fa2:	9103      	str	r1, [sp, #12]
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	e7f0      	b.n	8005f8a <__cvt+0xa6>

08005fa8 <__exponent>:
 8005fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005faa:	4603      	mov	r3, r0
 8005fac:	2900      	cmp	r1, #0
 8005fae:	bfb8      	it	lt
 8005fb0:	4249      	neglt	r1, r1
 8005fb2:	f803 2b02 	strb.w	r2, [r3], #2
 8005fb6:	bfb4      	ite	lt
 8005fb8:	222d      	movlt	r2, #45	; 0x2d
 8005fba:	222b      	movge	r2, #43	; 0x2b
 8005fbc:	2909      	cmp	r1, #9
 8005fbe:	7042      	strb	r2, [r0, #1]
 8005fc0:	dd2a      	ble.n	8006018 <__exponent+0x70>
 8005fc2:	f10d 0407 	add.w	r4, sp, #7
 8005fc6:	46a4      	mov	ip, r4
 8005fc8:	270a      	movs	r7, #10
 8005fca:	46a6      	mov	lr, r4
 8005fcc:	460a      	mov	r2, r1
 8005fce:	fb91 f6f7 	sdiv	r6, r1, r7
 8005fd2:	fb07 1516 	mls	r5, r7, r6, r1
 8005fd6:	3530      	adds	r5, #48	; 0x30
 8005fd8:	2a63      	cmp	r2, #99	; 0x63
 8005fda:	f104 34ff 	add.w	r4, r4, #4294967295
 8005fde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	dcf1      	bgt.n	8005fca <__exponent+0x22>
 8005fe6:	3130      	adds	r1, #48	; 0x30
 8005fe8:	f1ae 0502 	sub.w	r5, lr, #2
 8005fec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ff0:	1c44      	adds	r4, r0, #1
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	4561      	cmp	r1, ip
 8005ff6:	d30a      	bcc.n	800600e <__exponent+0x66>
 8005ff8:	f10d 0209 	add.w	r2, sp, #9
 8005ffc:	eba2 020e 	sub.w	r2, r2, lr
 8006000:	4565      	cmp	r5, ip
 8006002:	bf88      	it	hi
 8006004:	2200      	movhi	r2, #0
 8006006:	4413      	add	r3, r2
 8006008:	1a18      	subs	r0, r3, r0
 800600a:	b003      	add	sp, #12
 800600c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800600e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006012:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006016:	e7ed      	b.n	8005ff4 <__exponent+0x4c>
 8006018:	2330      	movs	r3, #48	; 0x30
 800601a:	3130      	adds	r1, #48	; 0x30
 800601c:	7083      	strb	r3, [r0, #2]
 800601e:	70c1      	strb	r1, [r0, #3]
 8006020:	1d03      	adds	r3, r0, #4
 8006022:	e7f1      	b.n	8006008 <__exponent+0x60>

08006024 <_printf_float>:
 8006024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006028:	ed2d 8b02 	vpush	{d8}
 800602c:	b08d      	sub	sp, #52	; 0x34
 800602e:	460c      	mov	r4, r1
 8006030:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006034:	4616      	mov	r6, r2
 8006036:	461f      	mov	r7, r3
 8006038:	4605      	mov	r5, r0
 800603a:	f002 febf 	bl	8008dbc <_localeconv_r>
 800603e:	f8d0 a000 	ldr.w	sl, [r0]
 8006042:	4650      	mov	r0, sl
 8006044:	f7fa f8cc 	bl	80001e0 <strlen>
 8006048:	2300      	movs	r3, #0
 800604a:	930a      	str	r3, [sp, #40]	; 0x28
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	9305      	str	r3, [sp, #20]
 8006050:	f8d8 3000 	ldr.w	r3, [r8]
 8006054:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006058:	3307      	adds	r3, #7
 800605a:	f023 0307 	bic.w	r3, r3, #7
 800605e:	f103 0208 	add.w	r2, r3, #8
 8006062:	f8c8 2000 	str.w	r2, [r8]
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800606e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006072:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006076:	9307      	str	r3, [sp, #28]
 8006078:	f8cd 8018 	str.w	r8, [sp, #24]
 800607c:	ee08 0a10 	vmov	s16, r0
 8006080:	4b9f      	ldr	r3, [pc, #636]	; (8006300 <_printf_float+0x2dc>)
 8006082:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006086:	f04f 32ff 	mov.w	r2, #4294967295
 800608a:	f7fa fd57 	bl	8000b3c <__aeabi_dcmpun>
 800608e:	bb88      	cbnz	r0, 80060f4 <_printf_float+0xd0>
 8006090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006094:	4b9a      	ldr	r3, [pc, #616]	; (8006300 <_printf_float+0x2dc>)
 8006096:	f04f 32ff 	mov.w	r2, #4294967295
 800609a:	f7fa fd31 	bl	8000b00 <__aeabi_dcmple>
 800609e:	bb48      	cbnz	r0, 80060f4 <_printf_float+0xd0>
 80060a0:	2200      	movs	r2, #0
 80060a2:	2300      	movs	r3, #0
 80060a4:	4640      	mov	r0, r8
 80060a6:	4649      	mov	r1, r9
 80060a8:	f7fa fd20 	bl	8000aec <__aeabi_dcmplt>
 80060ac:	b110      	cbz	r0, 80060b4 <_printf_float+0x90>
 80060ae:	232d      	movs	r3, #45	; 0x2d
 80060b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b4:	4b93      	ldr	r3, [pc, #588]	; (8006304 <_printf_float+0x2e0>)
 80060b6:	4894      	ldr	r0, [pc, #592]	; (8006308 <_printf_float+0x2e4>)
 80060b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80060bc:	bf94      	ite	ls
 80060be:	4698      	movls	r8, r3
 80060c0:	4680      	movhi	r8, r0
 80060c2:	2303      	movs	r3, #3
 80060c4:	6123      	str	r3, [r4, #16]
 80060c6:	9b05      	ldr	r3, [sp, #20]
 80060c8:	f023 0204 	bic.w	r2, r3, #4
 80060cc:	6022      	str	r2, [r4, #0]
 80060ce:	f04f 0900 	mov.w	r9, #0
 80060d2:	9700      	str	r7, [sp, #0]
 80060d4:	4633      	mov	r3, r6
 80060d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80060d8:	4621      	mov	r1, r4
 80060da:	4628      	mov	r0, r5
 80060dc:	f000 f9d8 	bl	8006490 <_printf_common>
 80060e0:	3001      	adds	r0, #1
 80060e2:	f040 8090 	bne.w	8006206 <_printf_float+0x1e2>
 80060e6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ea:	b00d      	add	sp, #52	; 0x34
 80060ec:	ecbd 8b02 	vpop	{d8}
 80060f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f4:	4642      	mov	r2, r8
 80060f6:	464b      	mov	r3, r9
 80060f8:	4640      	mov	r0, r8
 80060fa:	4649      	mov	r1, r9
 80060fc:	f7fa fd1e 	bl	8000b3c <__aeabi_dcmpun>
 8006100:	b140      	cbz	r0, 8006114 <_printf_float+0xf0>
 8006102:	464b      	mov	r3, r9
 8006104:	2b00      	cmp	r3, #0
 8006106:	bfbc      	itt	lt
 8006108:	232d      	movlt	r3, #45	; 0x2d
 800610a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800610e:	487f      	ldr	r0, [pc, #508]	; (800630c <_printf_float+0x2e8>)
 8006110:	4b7f      	ldr	r3, [pc, #508]	; (8006310 <_printf_float+0x2ec>)
 8006112:	e7d1      	b.n	80060b8 <_printf_float+0x94>
 8006114:	6863      	ldr	r3, [r4, #4]
 8006116:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800611a:	9206      	str	r2, [sp, #24]
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	d13f      	bne.n	80061a0 <_printf_float+0x17c>
 8006120:	2306      	movs	r3, #6
 8006122:	6063      	str	r3, [r4, #4]
 8006124:	9b05      	ldr	r3, [sp, #20]
 8006126:	6861      	ldr	r1, [r4, #4]
 8006128:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800612c:	2300      	movs	r3, #0
 800612e:	9303      	str	r3, [sp, #12]
 8006130:	ab0a      	add	r3, sp, #40	; 0x28
 8006132:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006136:	ab09      	add	r3, sp, #36	; 0x24
 8006138:	ec49 8b10 	vmov	d0, r8, r9
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	6022      	str	r2, [r4, #0]
 8006140:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006144:	4628      	mov	r0, r5
 8006146:	f7ff fecd 	bl	8005ee4 <__cvt>
 800614a:	9b06      	ldr	r3, [sp, #24]
 800614c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800614e:	2b47      	cmp	r3, #71	; 0x47
 8006150:	4680      	mov	r8, r0
 8006152:	d108      	bne.n	8006166 <_printf_float+0x142>
 8006154:	1cc8      	adds	r0, r1, #3
 8006156:	db02      	blt.n	800615e <_printf_float+0x13a>
 8006158:	6863      	ldr	r3, [r4, #4]
 800615a:	4299      	cmp	r1, r3
 800615c:	dd41      	ble.n	80061e2 <_printf_float+0x1be>
 800615e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006162:	fa5f fb8b 	uxtb.w	fp, fp
 8006166:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800616a:	d820      	bhi.n	80061ae <_printf_float+0x18a>
 800616c:	3901      	subs	r1, #1
 800616e:	465a      	mov	r2, fp
 8006170:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006174:	9109      	str	r1, [sp, #36]	; 0x24
 8006176:	f7ff ff17 	bl	8005fa8 <__exponent>
 800617a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800617c:	1813      	adds	r3, r2, r0
 800617e:	2a01      	cmp	r2, #1
 8006180:	4681      	mov	r9, r0
 8006182:	6123      	str	r3, [r4, #16]
 8006184:	dc02      	bgt.n	800618c <_printf_float+0x168>
 8006186:	6822      	ldr	r2, [r4, #0]
 8006188:	07d2      	lsls	r2, r2, #31
 800618a:	d501      	bpl.n	8006190 <_printf_float+0x16c>
 800618c:	3301      	adds	r3, #1
 800618e:	6123      	str	r3, [r4, #16]
 8006190:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006194:	2b00      	cmp	r3, #0
 8006196:	d09c      	beq.n	80060d2 <_printf_float+0xae>
 8006198:	232d      	movs	r3, #45	; 0x2d
 800619a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800619e:	e798      	b.n	80060d2 <_printf_float+0xae>
 80061a0:	9a06      	ldr	r2, [sp, #24]
 80061a2:	2a47      	cmp	r2, #71	; 0x47
 80061a4:	d1be      	bne.n	8006124 <_printf_float+0x100>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1bc      	bne.n	8006124 <_printf_float+0x100>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e7b9      	b.n	8006122 <_printf_float+0xfe>
 80061ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80061b2:	d118      	bne.n	80061e6 <_printf_float+0x1c2>
 80061b4:	2900      	cmp	r1, #0
 80061b6:	6863      	ldr	r3, [r4, #4]
 80061b8:	dd0b      	ble.n	80061d2 <_printf_float+0x1ae>
 80061ba:	6121      	str	r1, [r4, #16]
 80061bc:	b913      	cbnz	r3, 80061c4 <_printf_float+0x1a0>
 80061be:	6822      	ldr	r2, [r4, #0]
 80061c0:	07d0      	lsls	r0, r2, #31
 80061c2:	d502      	bpl.n	80061ca <_printf_float+0x1a6>
 80061c4:	3301      	adds	r3, #1
 80061c6:	440b      	add	r3, r1
 80061c8:	6123      	str	r3, [r4, #16]
 80061ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80061cc:	f04f 0900 	mov.w	r9, #0
 80061d0:	e7de      	b.n	8006190 <_printf_float+0x16c>
 80061d2:	b913      	cbnz	r3, 80061da <_printf_float+0x1b6>
 80061d4:	6822      	ldr	r2, [r4, #0]
 80061d6:	07d2      	lsls	r2, r2, #31
 80061d8:	d501      	bpl.n	80061de <_printf_float+0x1ba>
 80061da:	3302      	adds	r3, #2
 80061dc:	e7f4      	b.n	80061c8 <_printf_float+0x1a4>
 80061de:	2301      	movs	r3, #1
 80061e0:	e7f2      	b.n	80061c8 <_printf_float+0x1a4>
 80061e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80061e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e8:	4299      	cmp	r1, r3
 80061ea:	db05      	blt.n	80061f8 <_printf_float+0x1d4>
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	6121      	str	r1, [r4, #16]
 80061f0:	07d8      	lsls	r0, r3, #31
 80061f2:	d5ea      	bpl.n	80061ca <_printf_float+0x1a6>
 80061f4:	1c4b      	adds	r3, r1, #1
 80061f6:	e7e7      	b.n	80061c8 <_printf_float+0x1a4>
 80061f8:	2900      	cmp	r1, #0
 80061fa:	bfd4      	ite	le
 80061fc:	f1c1 0202 	rsble	r2, r1, #2
 8006200:	2201      	movgt	r2, #1
 8006202:	4413      	add	r3, r2
 8006204:	e7e0      	b.n	80061c8 <_printf_float+0x1a4>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	055a      	lsls	r2, r3, #21
 800620a:	d407      	bmi.n	800621c <_printf_float+0x1f8>
 800620c:	6923      	ldr	r3, [r4, #16]
 800620e:	4642      	mov	r2, r8
 8006210:	4631      	mov	r1, r6
 8006212:	4628      	mov	r0, r5
 8006214:	47b8      	blx	r7
 8006216:	3001      	adds	r0, #1
 8006218:	d12c      	bne.n	8006274 <_printf_float+0x250>
 800621a:	e764      	b.n	80060e6 <_printf_float+0xc2>
 800621c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006220:	f240 80e0 	bls.w	80063e4 <_printf_float+0x3c0>
 8006224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006228:	2200      	movs	r2, #0
 800622a:	2300      	movs	r3, #0
 800622c:	f7fa fc54 	bl	8000ad8 <__aeabi_dcmpeq>
 8006230:	2800      	cmp	r0, #0
 8006232:	d034      	beq.n	800629e <_printf_float+0x27a>
 8006234:	4a37      	ldr	r2, [pc, #220]	; (8006314 <_printf_float+0x2f0>)
 8006236:	2301      	movs	r3, #1
 8006238:	4631      	mov	r1, r6
 800623a:	4628      	mov	r0, r5
 800623c:	47b8      	blx	r7
 800623e:	3001      	adds	r0, #1
 8006240:	f43f af51 	beq.w	80060e6 <_printf_float+0xc2>
 8006244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006248:	429a      	cmp	r2, r3
 800624a:	db02      	blt.n	8006252 <_printf_float+0x22e>
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	07d8      	lsls	r0, r3, #31
 8006250:	d510      	bpl.n	8006274 <_printf_float+0x250>
 8006252:	ee18 3a10 	vmov	r3, s16
 8006256:	4652      	mov	r2, sl
 8006258:	4631      	mov	r1, r6
 800625a:	4628      	mov	r0, r5
 800625c:	47b8      	blx	r7
 800625e:	3001      	adds	r0, #1
 8006260:	f43f af41 	beq.w	80060e6 <_printf_float+0xc2>
 8006264:	f04f 0800 	mov.w	r8, #0
 8006268:	f104 091a 	add.w	r9, r4, #26
 800626c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800626e:	3b01      	subs	r3, #1
 8006270:	4543      	cmp	r3, r8
 8006272:	dc09      	bgt.n	8006288 <_printf_float+0x264>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	079b      	lsls	r3, r3, #30
 8006278:	f100 8105 	bmi.w	8006486 <_printf_float+0x462>
 800627c:	68e0      	ldr	r0, [r4, #12]
 800627e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006280:	4298      	cmp	r0, r3
 8006282:	bfb8      	it	lt
 8006284:	4618      	movlt	r0, r3
 8006286:	e730      	b.n	80060ea <_printf_float+0xc6>
 8006288:	2301      	movs	r3, #1
 800628a:	464a      	mov	r2, r9
 800628c:	4631      	mov	r1, r6
 800628e:	4628      	mov	r0, r5
 8006290:	47b8      	blx	r7
 8006292:	3001      	adds	r0, #1
 8006294:	f43f af27 	beq.w	80060e6 <_printf_float+0xc2>
 8006298:	f108 0801 	add.w	r8, r8, #1
 800629c:	e7e6      	b.n	800626c <_printf_float+0x248>
 800629e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	dc39      	bgt.n	8006318 <_printf_float+0x2f4>
 80062a4:	4a1b      	ldr	r2, [pc, #108]	; (8006314 <_printf_float+0x2f0>)
 80062a6:	2301      	movs	r3, #1
 80062a8:	4631      	mov	r1, r6
 80062aa:	4628      	mov	r0, r5
 80062ac:	47b8      	blx	r7
 80062ae:	3001      	adds	r0, #1
 80062b0:	f43f af19 	beq.w	80060e6 <_printf_float+0xc2>
 80062b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062b8:	4313      	orrs	r3, r2
 80062ba:	d102      	bne.n	80062c2 <_printf_float+0x29e>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	07d9      	lsls	r1, r3, #31
 80062c0:	d5d8      	bpl.n	8006274 <_printf_float+0x250>
 80062c2:	ee18 3a10 	vmov	r3, s16
 80062c6:	4652      	mov	r2, sl
 80062c8:	4631      	mov	r1, r6
 80062ca:	4628      	mov	r0, r5
 80062cc:	47b8      	blx	r7
 80062ce:	3001      	adds	r0, #1
 80062d0:	f43f af09 	beq.w	80060e6 <_printf_float+0xc2>
 80062d4:	f04f 0900 	mov.w	r9, #0
 80062d8:	f104 0a1a 	add.w	sl, r4, #26
 80062dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062de:	425b      	negs	r3, r3
 80062e0:	454b      	cmp	r3, r9
 80062e2:	dc01      	bgt.n	80062e8 <_printf_float+0x2c4>
 80062e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e6:	e792      	b.n	800620e <_printf_float+0x1ea>
 80062e8:	2301      	movs	r3, #1
 80062ea:	4652      	mov	r2, sl
 80062ec:	4631      	mov	r1, r6
 80062ee:	4628      	mov	r0, r5
 80062f0:	47b8      	blx	r7
 80062f2:	3001      	adds	r0, #1
 80062f4:	f43f aef7 	beq.w	80060e6 <_printf_float+0xc2>
 80062f8:	f109 0901 	add.w	r9, r9, #1
 80062fc:	e7ee      	b.n	80062dc <_printf_float+0x2b8>
 80062fe:	bf00      	nop
 8006300:	7fefffff 	.word	0x7fefffff
 8006304:	0800af90 	.word	0x0800af90
 8006308:	0800af94 	.word	0x0800af94
 800630c:	0800af9c 	.word	0x0800af9c
 8006310:	0800af98 	.word	0x0800af98
 8006314:	0800afa0 	.word	0x0800afa0
 8006318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800631a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800631c:	429a      	cmp	r2, r3
 800631e:	bfa8      	it	ge
 8006320:	461a      	movge	r2, r3
 8006322:	2a00      	cmp	r2, #0
 8006324:	4691      	mov	r9, r2
 8006326:	dc37      	bgt.n	8006398 <_printf_float+0x374>
 8006328:	f04f 0b00 	mov.w	fp, #0
 800632c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006330:	f104 021a 	add.w	r2, r4, #26
 8006334:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006336:	9305      	str	r3, [sp, #20]
 8006338:	eba3 0309 	sub.w	r3, r3, r9
 800633c:	455b      	cmp	r3, fp
 800633e:	dc33      	bgt.n	80063a8 <_printf_float+0x384>
 8006340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006344:	429a      	cmp	r2, r3
 8006346:	db3b      	blt.n	80063c0 <_printf_float+0x39c>
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	07da      	lsls	r2, r3, #31
 800634c:	d438      	bmi.n	80063c0 <_printf_float+0x39c>
 800634e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006350:	9a05      	ldr	r2, [sp, #20]
 8006352:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006354:	1a9a      	subs	r2, r3, r2
 8006356:	eba3 0901 	sub.w	r9, r3, r1
 800635a:	4591      	cmp	r9, r2
 800635c:	bfa8      	it	ge
 800635e:	4691      	movge	r9, r2
 8006360:	f1b9 0f00 	cmp.w	r9, #0
 8006364:	dc35      	bgt.n	80063d2 <_printf_float+0x3ae>
 8006366:	f04f 0800 	mov.w	r8, #0
 800636a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800636e:	f104 0a1a 	add.w	sl, r4, #26
 8006372:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006376:	1a9b      	subs	r3, r3, r2
 8006378:	eba3 0309 	sub.w	r3, r3, r9
 800637c:	4543      	cmp	r3, r8
 800637e:	f77f af79 	ble.w	8006274 <_printf_float+0x250>
 8006382:	2301      	movs	r3, #1
 8006384:	4652      	mov	r2, sl
 8006386:	4631      	mov	r1, r6
 8006388:	4628      	mov	r0, r5
 800638a:	47b8      	blx	r7
 800638c:	3001      	adds	r0, #1
 800638e:	f43f aeaa 	beq.w	80060e6 <_printf_float+0xc2>
 8006392:	f108 0801 	add.w	r8, r8, #1
 8006396:	e7ec      	b.n	8006372 <_printf_float+0x34e>
 8006398:	4613      	mov	r3, r2
 800639a:	4631      	mov	r1, r6
 800639c:	4642      	mov	r2, r8
 800639e:	4628      	mov	r0, r5
 80063a0:	47b8      	blx	r7
 80063a2:	3001      	adds	r0, #1
 80063a4:	d1c0      	bne.n	8006328 <_printf_float+0x304>
 80063a6:	e69e      	b.n	80060e6 <_printf_float+0xc2>
 80063a8:	2301      	movs	r3, #1
 80063aa:	4631      	mov	r1, r6
 80063ac:	4628      	mov	r0, r5
 80063ae:	9205      	str	r2, [sp, #20]
 80063b0:	47b8      	blx	r7
 80063b2:	3001      	adds	r0, #1
 80063b4:	f43f ae97 	beq.w	80060e6 <_printf_float+0xc2>
 80063b8:	9a05      	ldr	r2, [sp, #20]
 80063ba:	f10b 0b01 	add.w	fp, fp, #1
 80063be:	e7b9      	b.n	8006334 <_printf_float+0x310>
 80063c0:	ee18 3a10 	vmov	r3, s16
 80063c4:	4652      	mov	r2, sl
 80063c6:	4631      	mov	r1, r6
 80063c8:	4628      	mov	r0, r5
 80063ca:	47b8      	blx	r7
 80063cc:	3001      	adds	r0, #1
 80063ce:	d1be      	bne.n	800634e <_printf_float+0x32a>
 80063d0:	e689      	b.n	80060e6 <_printf_float+0xc2>
 80063d2:	9a05      	ldr	r2, [sp, #20]
 80063d4:	464b      	mov	r3, r9
 80063d6:	4442      	add	r2, r8
 80063d8:	4631      	mov	r1, r6
 80063da:	4628      	mov	r0, r5
 80063dc:	47b8      	blx	r7
 80063de:	3001      	adds	r0, #1
 80063e0:	d1c1      	bne.n	8006366 <_printf_float+0x342>
 80063e2:	e680      	b.n	80060e6 <_printf_float+0xc2>
 80063e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063e6:	2a01      	cmp	r2, #1
 80063e8:	dc01      	bgt.n	80063ee <_printf_float+0x3ca>
 80063ea:	07db      	lsls	r3, r3, #31
 80063ec:	d538      	bpl.n	8006460 <_printf_float+0x43c>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4642      	mov	r2, r8
 80063f2:	4631      	mov	r1, r6
 80063f4:	4628      	mov	r0, r5
 80063f6:	47b8      	blx	r7
 80063f8:	3001      	adds	r0, #1
 80063fa:	f43f ae74 	beq.w	80060e6 <_printf_float+0xc2>
 80063fe:	ee18 3a10 	vmov	r3, s16
 8006402:	4652      	mov	r2, sl
 8006404:	4631      	mov	r1, r6
 8006406:	4628      	mov	r0, r5
 8006408:	47b8      	blx	r7
 800640a:	3001      	adds	r0, #1
 800640c:	f43f ae6b 	beq.w	80060e6 <_printf_float+0xc2>
 8006410:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006414:	2200      	movs	r2, #0
 8006416:	2300      	movs	r3, #0
 8006418:	f7fa fb5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800641c:	b9d8      	cbnz	r0, 8006456 <_printf_float+0x432>
 800641e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006420:	f108 0201 	add.w	r2, r8, #1
 8006424:	3b01      	subs	r3, #1
 8006426:	4631      	mov	r1, r6
 8006428:	4628      	mov	r0, r5
 800642a:	47b8      	blx	r7
 800642c:	3001      	adds	r0, #1
 800642e:	d10e      	bne.n	800644e <_printf_float+0x42a>
 8006430:	e659      	b.n	80060e6 <_printf_float+0xc2>
 8006432:	2301      	movs	r3, #1
 8006434:	4652      	mov	r2, sl
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	f43f ae52 	beq.w	80060e6 <_printf_float+0xc2>
 8006442:	f108 0801 	add.w	r8, r8, #1
 8006446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006448:	3b01      	subs	r3, #1
 800644a:	4543      	cmp	r3, r8
 800644c:	dcf1      	bgt.n	8006432 <_printf_float+0x40e>
 800644e:	464b      	mov	r3, r9
 8006450:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006454:	e6dc      	b.n	8006210 <_printf_float+0x1ec>
 8006456:	f04f 0800 	mov.w	r8, #0
 800645a:	f104 0a1a 	add.w	sl, r4, #26
 800645e:	e7f2      	b.n	8006446 <_printf_float+0x422>
 8006460:	2301      	movs	r3, #1
 8006462:	4642      	mov	r2, r8
 8006464:	e7df      	b.n	8006426 <_printf_float+0x402>
 8006466:	2301      	movs	r3, #1
 8006468:	464a      	mov	r2, r9
 800646a:	4631      	mov	r1, r6
 800646c:	4628      	mov	r0, r5
 800646e:	47b8      	blx	r7
 8006470:	3001      	adds	r0, #1
 8006472:	f43f ae38 	beq.w	80060e6 <_printf_float+0xc2>
 8006476:	f108 0801 	add.w	r8, r8, #1
 800647a:	68e3      	ldr	r3, [r4, #12]
 800647c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800647e:	1a5b      	subs	r3, r3, r1
 8006480:	4543      	cmp	r3, r8
 8006482:	dcf0      	bgt.n	8006466 <_printf_float+0x442>
 8006484:	e6fa      	b.n	800627c <_printf_float+0x258>
 8006486:	f04f 0800 	mov.w	r8, #0
 800648a:	f104 0919 	add.w	r9, r4, #25
 800648e:	e7f4      	b.n	800647a <_printf_float+0x456>

08006490 <_printf_common>:
 8006490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	4616      	mov	r6, r2
 8006496:	4699      	mov	r9, r3
 8006498:	688a      	ldr	r2, [r1, #8]
 800649a:	690b      	ldr	r3, [r1, #16]
 800649c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064a0:	4293      	cmp	r3, r2
 80064a2:	bfb8      	it	lt
 80064a4:	4613      	movlt	r3, r2
 80064a6:	6033      	str	r3, [r6, #0]
 80064a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064ac:	4607      	mov	r7, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	b10a      	cbz	r2, 80064b6 <_printf_common+0x26>
 80064b2:	3301      	adds	r3, #1
 80064b4:	6033      	str	r3, [r6, #0]
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	0699      	lsls	r1, r3, #26
 80064ba:	bf42      	ittt	mi
 80064bc:	6833      	ldrmi	r3, [r6, #0]
 80064be:	3302      	addmi	r3, #2
 80064c0:	6033      	strmi	r3, [r6, #0]
 80064c2:	6825      	ldr	r5, [r4, #0]
 80064c4:	f015 0506 	ands.w	r5, r5, #6
 80064c8:	d106      	bne.n	80064d8 <_printf_common+0x48>
 80064ca:	f104 0a19 	add.w	sl, r4, #25
 80064ce:	68e3      	ldr	r3, [r4, #12]
 80064d0:	6832      	ldr	r2, [r6, #0]
 80064d2:	1a9b      	subs	r3, r3, r2
 80064d4:	42ab      	cmp	r3, r5
 80064d6:	dc26      	bgt.n	8006526 <_printf_common+0x96>
 80064d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064dc:	1e13      	subs	r3, r2, #0
 80064de:	6822      	ldr	r2, [r4, #0]
 80064e0:	bf18      	it	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	0692      	lsls	r2, r2, #26
 80064e6:	d42b      	bmi.n	8006540 <_printf_common+0xb0>
 80064e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064ec:	4649      	mov	r1, r9
 80064ee:	4638      	mov	r0, r7
 80064f0:	47c0      	blx	r8
 80064f2:	3001      	adds	r0, #1
 80064f4:	d01e      	beq.n	8006534 <_printf_common+0xa4>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	68e5      	ldr	r5, [r4, #12]
 80064fa:	6832      	ldr	r2, [r6, #0]
 80064fc:	f003 0306 	and.w	r3, r3, #6
 8006500:	2b04      	cmp	r3, #4
 8006502:	bf08      	it	eq
 8006504:	1aad      	subeq	r5, r5, r2
 8006506:	68a3      	ldr	r3, [r4, #8]
 8006508:	6922      	ldr	r2, [r4, #16]
 800650a:	bf0c      	ite	eq
 800650c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006510:	2500      	movne	r5, #0
 8006512:	4293      	cmp	r3, r2
 8006514:	bfc4      	itt	gt
 8006516:	1a9b      	subgt	r3, r3, r2
 8006518:	18ed      	addgt	r5, r5, r3
 800651a:	2600      	movs	r6, #0
 800651c:	341a      	adds	r4, #26
 800651e:	42b5      	cmp	r5, r6
 8006520:	d11a      	bne.n	8006558 <_printf_common+0xc8>
 8006522:	2000      	movs	r0, #0
 8006524:	e008      	b.n	8006538 <_printf_common+0xa8>
 8006526:	2301      	movs	r3, #1
 8006528:	4652      	mov	r2, sl
 800652a:	4649      	mov	r1, r9
 800652c:	4638      	mov	r0, r7
 800652e:	47c0      	blx	r8
 8006530:	3001      	adds	r0, #1
 8006532:	d103      	bne.n	800653c <_printf_common+0xac>
 8006534:	f04f 30ff 	mov.w	r0, #4294967295
 8006538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653c:	3501      	adds	r5, #1
 800653e:	e7c6      	b.n	80064ce <_printf_common+0x3e>
 8006540:	18e1      	adds	r1, r4, r3
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	2030      	movs	r0, #48	; 0x30
 8006546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800654a:	4422      	add	r2, r4
 800654c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006554:	3302      	adds	r3, #2
 8006556:	e7c7      	b.n	80064e8 <_printf_common+0x58>
 8006558:	2301      	movs	r3, #1
 800655a:	4622      	mov	r2, r4
 800655c:	4649      	mov	r1, r9
 800655e:	4638      	mov	r0, r7
 8006560:	47c0      	blx	r8
 8006562:	3001      	adds	r0, #1
 8006564:	d0e6      	beq.n	8006534 <_printf_common+0xa4>
 8006566:	3601      	adds	r6, #1
 8006568:	e7d9      	b.n	800651e <_printf_common+0x8e>
	...

0800656c <_printf_i>:
 800656c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006570:	7e0f      	ldrb	r7, [r1, #24]
 8006572:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006574:	2f78      	cmp	r7, #120	; 0x78
 8006576:	4691      	mov	r9, r2
 8006578:	4680      	mov	r8, r0
 800657a:	460c      	mov	r4, r1
 800657c:	469a      	mov	sl, r3
 800657e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006582:	d807      	bhi.n	8006594 <_printf_i+0x28>
 8006584:	2f62      	cmp	r7, #98	; 0x62
 8006586:	d80a      	bhi.n	800659e <_printf_i+0x32>
 8006588:	2f00      	cmp	r7, #0
 800658a:	f000 80d8 	beq.w	800673e <_printf_i+0x1d2>
 800658e:	2f58      	cmp	r7, #88	; 0x58
 8006590:	f000 80a3 	beq.w	80066da <_printf_i+0x16e>
 8006594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800659c:	e03a      	b.n	8006614 <_printf_i+0xa8>
 800659e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065a2:	2b15      	cmp	r3, #21
 80065a4:	d8f6      	bhi.n	8006594 <_printf_i+0x28>
 80065a6:	a101      	add	r1, pc, #4	; (adr r1, 80065ac <_printf_i+0x40>)
 80065a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065ac:	08006605 	.word	0x08006605
 80065b0:	08006619 	.word	0x08006619
 80065b4:	08006595 	.word	0x08006595
 80065b8:	08006595 	.word	0x08006595
 80065bc:	08006595 	.word	0x08006595
 80065c0:	08006595 	.word	0x08006595
 80065c4:	08006619 	.word	0x08006619
 80065c8:	08006595 	.word	0x08006595
 80065cc:	08006595 	.word	0x08006595
 80065d0:	08006595 	.word	0x08006595
 80065d4:	08006595 	.word	0x08006595
 80065d8:	08006725 	.word	0x08006725
 80065dc:	08006649 	.word	0x08006649
 80065e0:	08006707 	.word	0x08006707
 80065e4:	08006595 	.word	0x08006595
 80065e8:	08006595 	.word	0x08006595
 80065ec:	08006747 	.word	0x08006747
 80065f0:	08006595 	.word	0x08006595
 80065f4:	08006649 	.word	0x08006649
 80065f8:	08006595 	.word	0x08006595
 80065fc:	08006595 	.word	0x08006595
 8006600:	0800670f 	.word	0x0800670f
 8006604:	682b      	ldr	r3, [r5, #0]
 8006606:	1d1a      	adds	r2, r3, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	602a      	str	r2, [r5, #0]
 800660c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006614:	2301      	movs	r3, #1
 8006616:	e0a3      	b.n	8006760 <_printf_i+0x1f4>
 8006618:	6820      	ldr	r0, [r4, #0]
 800661a:	6829      	ldr	r1, [r5, #0]
 800661c:	0606      	lsls	r6, r0, #24
 800661e:	f101 0304 	add.w	r3, r1, #4
 8006622:	d50a      	bpl.n	800663a <_printf_i+0xce>
 8006624:	680e      	ldr	r6, [r1, #0]
 8006626:	602b      	str	r3, [r5, #0]
 8006628:	2e00      	cmp	r6, #0
 800662a:	da03      	bge.n	8006634 <_printf_i+0xc8>
 800662c:	232d      	movs	r3, #45	; 0x2d
 800662e:	4276      	negs	r6, r6
 8006630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006634:	485e      	ldr	r0, [pc, #376]	; (80067b0 <_printf_i+0x244>)
 8006636:	230a      	movs	r3, #10
 8006638:	e019      	b.n	800666e <_printf_i+0x102>
 800663a:	680e      	ldr	r6, [r1, #0]
 800663c:	602b      	str	r3, [r5, #0]
 800663e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006642:	bf18      	it	ne
 8006644:	b236      	sxthne	r6, r6
 8006646:	e7ef      	b.n	8006628 <_printf_i+0xbc>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	6820      	ldr	r0, [r4, #0]
 800664c:	1d19      	adds	r1, r3, #4
 800664e:	6029      	str	r1, [r5, #0]
 8006650:	0601      	lsls	r1, r0, #24
 8006652:	d501      	bpl.n	8006658 <_printf_i+0xec>
 8006654:	681e      	ldr	r6, [r3, #0]
 8006656:	e002      	b.n	800665e <_printf_i+0xf2>
 8006658:	0646      	lsls	r6, r0, #25
 800665a:	d5fb      	bpl.n	8006654 <_printf_i+0xe8>
 800665c:	881e      	ldrh	r6, [r3, #0]
 800665e:	4854      	ldr	r0, [pc, #336]	; (80067b0 <_printf_i+0x244>)
 8006660:	2f6f      	cmp	r7, #111	; 0x6f
 8006662:	bf0c      	ite	eq
 8006664:	2308      	moveq	r3, #8
 8006666:	230a      	movne	r3, #10
 8006668:	2100      	movs	r1, #0
 800666a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800666e:	6865      	ldr	r5, [r4, #4]
 8006670:	60a5      	str	r5, [r4, #8]
 8006672:	2d00      	cmp	r5, #0
 8006674:	bfa2      	ittt	ge
 8006676:	6821      	ldrge	r1, [r4, #0]
 8006678:	f021 0104 	bicge.w	r1, r1, #4
 800667c:	6021      	strge	r1, [r4, #0]
 800667e:	b90e      	cbnz	r6, 8006684 <_printf_i+0x118>
 8006680:	2d00      	cmp	r5, #0
 8006682:	d04d      	beq.n	8006720 <_printf_i+0x1b4>
 8006684:	4615      	mov	r5, r2
 8006686:	fbb6 f1f3 	udiv	r1, r6, r3
 800668a:	fb03 6711 	mls	r7, r3, r1, r6
 800668e:	5dc7      	ldrb	r7, [r0, r7]
 8006690:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006694:	4637      	mov	r7, r6
 8006696:	42bb      	cmp	r3, r7
 8006698:	460e      	mov	r6, r1
 800669a:	d9f4      	bls.n	8006686 <_printf_i+0x11a>
 800669c:	2b08      	cmp	r3, #8
 800669e:	d10b      	bne.n	80066b8 <_printf_i+0x14c>
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	07de      	lsls	r6, r3, #31
 80066a4:	d508      	bpl.n	80066b8 <_printf_i+0x14c>
 80066a6:	6923      	ldr	r3, [r4, #16]
 80066a8:	6861      	ldr	r1, [r4, #4]
 80066aa:	4299      	cmp	r1, r3
 80066ac:	bfde      	ittt	le
 80066ae:	2330      	movle	r3, #48	; 0x30
 80066b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066b8:	1b52      	subs	r2, r2, r5
 80066ba:	6122      	str	r2, [r4, #16]
 80066bc:	f8cd a000 	str.w	sl, [sp]
 80066c0:	464b      	mov	r3, r9
 80066c2:	aa03      	add	r2, sp, #12
 80066c4:	4621      	mov	r1, r4
 80066c6:	4640      	mov	r0, r8
 80066c8:	f7ff fee2 	bl	8006490 <_printf_common>
 80066cc:	3001      	adds	r0, #1
 80066ce:	d14c      	bne.n	800676a <_printf_i+0x1fe>
 80066d0:	f04f 30ff 	mov.w	r0, #4294967295
 80066d4:	b004      	add	sp, #16
 80066d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066da:	4835      	ldr	r0, [pc, #212]	; (80067b0 <_printf_i+0x244>)
 80066dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066e0:	6829      	ldr	r1, [r5, #0]
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80066e8:	6029      	str	r1, [r5, #0]
 80066ea:	061d      	lsls	r5, r3, #24
 80066ec:	d514      	bpl.n	8006718 <_printf_i+0x1ac>
 80066ee:	07df      	lsls	r7, r3, #31
 80066f0:	bf44      	itt	mi
 80066f2:	f043 0320 	orrmi.w	r3, r3, #32
 80066f6:	6023      	strmi	r3, [r4, #0]
 80066f8:	b91e      	cbnz	r6, 8006702 <_printf_i+0x196>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	f023 0320 	bic.w	r3, r3, #32
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	2310      	movs	r3, #16
 8006704:	e7b0      	b.n	8006668 <_printf_i+0xfc>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	f043 0320 	orr.w	r3, r3, #32
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	2378      	movs	r3, #120	; 0x78
 8006710:	4828      	ldr	r0, [pc, #160]	; (80067b4 <_printf_i+0x248>)
 8006712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006716:	e7e3      	b.n	80066e0 <_printf_i+0x174>
 8006718:	0659      	lsls	r1, r3, #25
 800671a:	bf48      	it	mi
 800671c:	b2b6      	uxthmi	r6, r6
 800671e:	e7e6      	b.n	80066ee <_printf_i+0x182>
 8006720:	4615      	mov	r5, r2
 8006722:	e7bb      	b.n	800669c <_printf_i+0x130>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	6826      	ldr	r6, [r4, #0]
 8006728:	6961      	ldr	r1, [r4, #20]
 800672a:	1d18      	adds	r0, r3, #4
 800672c:	6028      	str	r0, [r5, #0]
 800672e:	0635      	lsls	r5, r6, #24
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	d501      	bpl.n	8006738 <_printf_i+0x1cc>
 8006734:	6019      	str	r1, [r3, #0]
 8006736:	e002      	b.n	800673e <_printf_i+0x1d2>
 8006738:	0670      	lsls	r0, r6, #25
 800673a:	d5fb      	bpl.n	8006734 <_printf_i+0x1c8>
 800673c:	8019      	strh	r1, [r3, #0]
 800673e:	2300      	movs	r3, #0
 8006740:	6123      	str	r3, [r4, #16]
 8006742:	4615      	mov	r5, r2
 8006744:	e7ba      	b.n	80066bc <_printf_i+0x150>
 8006746:	682b      	ldr	r3, [r5, #0]
 8006748:	1d1a      	adds	r2, r3, #4
 800674a:	602a      	str	r2, [r5, #0]
 800674c:	681d      	ldr	r5, [r3, #0]
 800674e:	6862      	ldr	r2, [r4, #4]
 8006750:	2100      	movs	r1, #0
 8006752:	4628      	mov	r0, r5
 8006754:	f7f9 fd4c 	bl	80001f0 <memchr>
 8006758:	b108      	cbz	r0, 800675e <_printf_i+0x1f2>
 800675a:	1b40      	subs	r0, r0, r5
 800675c:	6060      	str	r0, [r4, #4]
 800675e:	6863      	ldr	r3, [r4, #4]
 8006760:	6123      	str	r3, [r4, #16]
 8006762:	2300      	movs	r3, #0
 8006764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006768:	e7a8      	b.n	80066bc <_printf_i+0x150>
 800676a:	6923      	ldr	r3, [r4, #16]
 800676c:	462a      	mov	r2, r5
 800676e:	4649      	mov	r1, r9
 8006770:	4640      	mov	r0, r8
 8006772:	47d0      	blx	sl
 8006774:	3001      	adds	r0, #1
 8006776:	d0ab      	beq.n	80066d0 <_printf_i+0x164>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	079b      	lsls	r3, r3, #30
 800677c:	d413      	bmi.n	80067a6 <_printf_i+0x23a>
 800677e:	68e0      	ldr	r0, [r4, #12]
 8006780:	9b03      	ldr	r3, [sp, #12]
 8006782:	4298      	cmp	r0, r3
 8006784:	bfb8      	it	lt
 8006786:	4618      	movlt	r0, r3
 8006788:	e7a4      	b.n	80066d4 <_printf_i+0x168>
 800678a:	2301      	movs	r3, #1
 800678c:	4632      	mov	r2, r6
 800678e:	4649      	mov	r1, r9
 8006790:	4640      	mov	r0, r8
 8006792:	47d0      	blx	sl
 8006794:	3001      	adds	r0, #1
 8006796:	d09b      	beq.n	80066d0 <_printf_i+0x164>
 8006798:	3501      	adds	r5, #1
 800679a:	68e3      	ldr	r3, [r4, #12]
 800679c:	9903      	ldr	r1, [sp, #12]
 800679e:	1a5b      	subs	r3, r3, r1
 80067a0:	42ab      	cmp	r3, r5
 80067a2:	dcf2      	bgt.n	800678a <_printf_i+0x21e>
 80067a4:	e7eb      	b.n	800677e <_printf_i+0x212>
 80067a6:	2500      	movs	r5, #0
 80067a8:	f104 0619 	add.w	r6, r4, #25
 80067ac:	e7f5      	b.n	800679a <_printf_i+0x22e>
 80067ae:	bf00      	nop
 80067b0:	0800afa2 	.word	0x0800afa2
 80067b4:	0800afb3 	.word	0x0800afb3

080067b8 <_scanf_float>:
 80067b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067bc:	b087      	sub	sp, #28
 80067be:	4617      	mov	r7, r2
 80067c0:	9303      	str	r3, [sp, #12]
 80067c2:	688b      	ldr	r3, [r1, #8]
 80067c4:	1e5a      	subs	r2, r3, #1
 80067c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80067ca:	bf83      	ittte	hi
 80067cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80067d0:	195b      	addhi	r3, r3, r5
 80067d2:	9302      	strhi	r3, [sp, #8]
 80067d4:	2300      	movls	r3, #0
 80067d6:	bf86      	itte	hi
 80067d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80067dc:	608b      	strhi	r3, [r1, #8]
 80067de:	9302      	strls	r3, [sp, #8]
 80067e0:	680b      	ldr	r3, [r1, #0]
 80067e2:	468b      	mov	fp, r1
 80067e4:	2500      	movs	r5, #0
 80067e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80067ea:	f84b 3b1c 	str.w	r3, [fp], #28
 80067ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80067f2:	4680      	mov	r8, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	465e      	mov	r6, fp
 80067f8:	46aa      	mov	sl, r5
 80067fa:	46a9      	mov	r9, r5
 80067fc:	9501      	str	r5, [sp, #4]
 80067fe:	68a2      	ldr	r2, [r4, #8]
 8006800:	b152      	cbz	r2, 8006818 <_scanf_float+0x60>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b4e      	cmp	r3, #78	; 0x4e
 8006808:	d864      	bhi.n	80068d4 <_scanf_float+0x11c>
 800680a:	2b40      	cmp	r3, #64	; 0x40
 800680c:	d83c      	bhi.n	8006888 <_scanf_float+0xd0>
 800680e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006812:	b2c8      	uxtb	r0, r1
 8006814:	280e      	cmp	r0, #14
 8006816:	d93a      	bls.n	800688e <_scanf_float+0xd6>
 8006818:	f1b9 0f00 	cmp.w	r9, #0
 800681c:	d003      	beq.n	8006826 <_scanf_float+0x6e>
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	f10a 3aff 	add.w	sl, sl, #4294967295
 800682a:	f1ba 0f01 	cmp.w	sl, #1
 800682e:	f200 8113 	bhi.w	8006a58 <_scanf_float+0x2a0>
 8006832:	455e      	cmp	r6, fp
 8006834:	f200 8105 	bhi.w	8006a42 <_scanf_float+0x28a>
 8006838:	2501      	movs	r5, #1
 800683a:	4628      	mov	r0, r5
 800683c:	b007      	add	sp, #28
 800683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006842:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006846:	2a0d      	cmp	r2, #13
 8006848:	d8e6      	bhi.n	8006818 <_scanf_float+0x60>
 800684a:	a101      	add	r1, pc, #4	; (adr r1, 8006850 <_scanf_float+0x98>)
 800684c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006850:	0800698f 	.word	0x0800698f
 8006854:	08006819 	.word	0x08006819
 8006858:	08006819 	.word	0x08006819
 800685c:	08006819 	.word	0x08006819
 8006860:	080069ef 	.word	0x080069ef
 8006864:	080069c7 	.word	0x080069c7
 8006868:	08006819 	.word	0x08006819
 800686c:	08006819 	.word	0x08006819
 8006870:	0800699d 	.word	0x0800699d
 8006874:	08006819 	.word	0x08006819
 8006878:	08006819 	.word	0x08006819
 800687c:	08006819 	.word	0x08006819
 8006880:	08006819 	.word	0x08006819
 8006884:	08006955 	.word	0x08006955
 8006888:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800688c:	e7db      	b.n	8006846 <_scanf_float+0x8e>
 800688e:	290e      	cmp	r1, #14
 8006890:	d8c2      	bhi.n	8006818 <_scanf_float+0x60>
 8006892:	a001      	add	r0, pc, #4	; (adr r0, 8006898 <_scanf_float+0xe0>)
 8006894:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006898:	08006947 	.word	0x08006947
 800689c:	08006819 	.word	0x08006819
 80068a0:	08006947 	.word	0x08006947
 80068a4:	080069db 	.word	0x080069db
 80068a8:	08006819 	.word	0x08006819
 80068ac:	080068f5 	.word	0x080068f5
 80068b0:	08006931 	.word	0x08006931
 80068b4:	08006931 	.word	0x08006931
 80068b8:	08006931 	.word	0x08006931
 80068bc:	08006931 	.word	0x08006931
 80068c0:	08006931 	.word	0x08006931
 80068c4:	08006931 	.word	0x08006931
 80068c8:	08006931 	.word	0x08006931
 80068cc:	08006931 	.word	0x08006931
 80068d0:	08006931 	.word	0x08006931
 80068d4:	2b6e      	cmp	r3, #110	; 0x6e
 80068d6:	d809      	bhi.n	80068ec <_scanf_float+0x134>
 80068d8:	2b60      	cmp	r3, #96	; 0x60
 80068da:	d8b2      	bhi.n	8006842 <_scanf_float+0x8a>
 80068dc:	2b54      	cmp	r3, #84	; 0x54
 80068de:	d077      	beq.n	80069d0 <_scanf_float+0x218>
 80068e0:	2b59      	cmp	r3, #89	; 0x59
 80068e2:	d199      	bne.n	8006818 <_scanf_float+0x60>
 80068e4:	2d07      	cmp	r5, #7
 80068e6:	d197      	bne.n	8006818 <_scanf_float+0x60>
 80068e8:	2508      	movs	r5, #8
 80068ea:	e029      	b.n	8006940 <_scanf_float+0x188>
 80068ec:	2b74      	cmp	r3, #116	; 0x74
 80068ee:	d06f      	beq.n	80069d0 <_scanf_float+0x218>
 80068f0:	2b79      	cmp	r3, #121	; 0x79
 80068f2:	e7f6      	b.n	80068e2 <_scanf_float+0x12a>
 80068f4:	6821      	ldr	r1, [r4, #0]
 80068f6:	05c8      	lsls	r0, r1, #23
 80068f8:	d51a      	bpl.n	8006930 <_scanf_float+0x178>
 80068fa:	9b02      	ldr	r3, [sp, #8]
 80068fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006900:	6021      	str	r1, [r4, #0]
 8006902:	f109 0901 	add.w	r9, r9, #1
 8006906:	b11b      	cbz	r3, 8006910 <_scanf_float+0x158>
 8006908:	3b01      	subs	r3, #1
 800690a:	3201      	adds	r2, #1
 800690c:	9302      	str	r3, [sp, #8]
 800690e:	60a2      	str	r2, [r4, #8]
 8006910:	68a3      	ldr	r3, [r4, #8]
 8006912:	3b01      	subs	r3, #1
 8006914:	60a3      	str	r3, [r4, #8]
 8006916:	6923      	ldr	r3, [r4, #16]
 8006918:	3301      	adds	r3, #1
 800691a:	6123      	str	r3, [r4, #16]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3b01      	subs	r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	607b      	str	r3, [r7, #4]
 8006924:	f340 8084 	ble.w	8006a30 <_scanf_float+0x278>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	3301      	adds	r3, #1
 800692c:	603b      	str	r3, [r7, #0]
 800692e:	e766      	b.n	80067fe <_scanf_float+0x46>
 8006930:	eb1a 0f05 	cmn.w	sl, r5
 8006934:	f47f af70 	bne.w	8006818 <_scanf_float+0x60>
 8006938:	6822      	ldr	r2, [r4, #0]
 800693a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800693e:	6022      	str	r2, [r4, #0]
 8006940:	f806 3b01 	strb.w	r3, [r6], #1
 8006944:	e7e4      	b.n	8006910 <_scanf_float+0x158>
 8006946:	6822      	ldr	r2, [r4, #0]
 8006948:	0610      	lsls	r0, r2, #24
 800694a:	f57f af65 	bpl.w	8006818 <_scanf_float+0x60>
 800694e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006952:	e7f4      	b.n	800693e <_scanf_float+0x186>
 8006954:	f1ba 0f00 	cmp.w	sl, #0
 8006958:	d10e      	bne.n	8006978 <_scanf_float+0x1c0>
 800695a:	f1b9 0f00 	cmp.w	r9, #0
 800695e:	d10e      	bne.n	800697e <_scanf_float+0x1c6>
 8006960:	6822      	ldr	r2, [r4, #0]
 8006962:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006966:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800696a:	d108      	bne.n	800697e <_scanf_float+0x1c6>
 800696c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006970:	6022      	str	r2, [r4, #0]
 8006972:	f04f 0a01 	mov.w	sl, #1
 8006976:	e7e3      	b.n	8006940 <_scanf_float+0x188>
 8006978:	f1ba 0f02 	cmp.w	sl, #2
 800697c:	d055      	beq.n	8006a2a <_scanf_float+0x272>
 800697e:	2d01      	cmp	r5, #1
 8006980:	d002      	beq.n	8006988 <_scanf_float+0x1d0>
 8006982:	2d04      	cmp	r5, #4
 8006984:	f47f af48 	bne.w	8006818 <_scanf_float+0x60>
 8006988:	3501      	adds	r5, #1
 800698a:	b2ed      	uxtb	r5, r5
 800698c:	e7d8      	b.n	8006940 <_scanf_float+0x188>
 800698e:	f1ba 0f01 	cmp.w	sl, #1
 8006992:	f47f af41 	bne.w	8006818 <_scanf_float+0x60>
 8006996:	f04f 0a02 	mov.w	sl, #2
 800699a:	e7d1      	b.n	8006940 <_scanf_float+0x188>
 800699c:	b97d      	cbnz	r5, 80069be <_scanf_float+0x206>
 800699e:	f1b9 0f00 	cmp.w	r9, #0
 80069a2:	f47f af3c 	bne.w	800681e <_scanf_float+0x66>
 80069a6:	6822      	ldr	r2, [r4, #0]
 80069a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80069ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80069b0:	f47f af39 	bne.w	8006826 <_scanf_float+0x6e>
 80069b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069b8:	6022      	str	r2, [r4, #0]
 80069ba:	2501      	movs	r5, #1
 80069bc:	e7c0      	b.n	8006940 <_scanf_float+0x188>
 80069be:	2d03      	cmp	r5, #3
 80069c0:	d0e2      	beq.n	8006988 <_scanf_float+0x1d0>
 80069c2:	2d05      	cmp	r5, #5
 80069c4:	e7de      	b.n	8006984 <_scanf_float+0x1cc>
 80069c6:	2d02      	cmp	r5, #2
 80069c8:	f47f af26 	bne.w	8006818 <_scanf_float+0x60>
 80069cc:	2503      	movs	r5, #3
 80069ce:	e7b7      	b.n	8006940 <_scanf_float+0x188>
 80069d0:	2d06      	cmp	r5, #6
 80069d2:	f47f af21 	bne.w	8006818 <_scanf_float+0x60>
 80069d6:	2507      	movs	r5, #7
 80069d8:	e7b2      	b.n	8006940 <_scanf_float+0x188>
 80069da:	6822      	ldr	r2, [r4, #0]
 80069dc:	0591      	lsls	r1, r2, #22
 80069de:	f57f af1b 	bpl.w	8006818 <_scanf_float+0x60>
 80069e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80069e6:	6022      	str	r2, [r4, #0]
 80069e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80069ec:	e7a8      	b.n	8006940 <_scanf_float+0x188>
 80069ee:	6822      	ldr	r2, [r4, #0]
 80069f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80069f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80069f8:	d006      	beq.n	8006a08 <_scanf_float+0x250>
 80069fa:	0550      	lsls	r0, r2, #21
 80069fc:	f57f af0c 	bpl.w	8006818 <_scanf_float+0x60>
 8006a00:	f1b9 0f00 	cmp.w	r9, #0
 8006a04:	f43f af0f 	beq.w	8006826 <_scanf_float+0x6e>
 8006a08:	0591      	lsls	r1, r2, #22
 8006a0a:	bf58      	it	pl
 8006a0c:	9901      	ldrpl	r1, [sp, #4]
 8006a0e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a12:	bf58      	it	pl
 8006a14:	eba9 0101 	subpl.w	r1, r9, r1
 8006a18:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006a1c:	bf58      	it	pl
 8006a1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a22:	6022      	str	r2, [r4, #0]
 8006a24:	f04f 0900 	mov.w	r9, #0
 8006a28:	e78a      	b.n	8006940 <_scanf_float+0x188>
 8006a2a:	f04f 0a03 	mov.w	sl, #3
 8006a2e:	e787      	b.n	8006940 <_scanf_float+0x188>
 8006a30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006a34:	4639      	mov	r1, r7
 8006a36:	4640      	mov	r0, r8
 8006a38:	4798      	blx	r3
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	f43f aedf 	beq.w	80067fe <_scanf_float+0x46>
 8006a40:	e6ea      	b.n	8006818 <_scanf_float+0x60>
 8006a42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a4a:	463a      	mov	r2, r7
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	4798      	blx	r3
 8006a50:	6923      	ldr	r3, [r4, #16]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	6123      	str	r3, [r4, #16]
 8006a56:	e6ec      	b.n	8006832 <_scanf_float+0x7a>
 8006a58:	1e6b      	subs	r3, r5, #1
 8006a5a:	2b06      	cmp	r3, #6
 8006a5c:	d825      	bhi.n	8006aaa <_scanf_float+0x2f2>
 8006a5e:	2d02      	cmp	r5, #2
 8006a60:	d836      	bhi.n	8006ad0 <_scanf_float+0x318>
 8006a62:	455e      	cmp	r6, fp
 8006a64:	f67f aee8 	bls.w	8006838 <_scanf_float+0x80>
 8006a68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a6c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a70:	463a      	mov	r2, r7
 8006a72:	4640      	mov	r0, r8
 8006a74:	4798      	blx	r3
 8006a76:	6923      	ldr	r3, [r4, #16]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	6123      	str	r3, [r4, #16]
 8006a7c:	e7f1      	b.n	8006a62 <_scanf_float+0x2aa>
 8006a7e:	9802      	ldr	r0, [sp, #8]
 8006a80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a84:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006a88:	9002      	str	r0, [sp, #8]
 8006a8a:	463a      	mov	r2, r7
 8006a8c:	4640      	mov	r0, r8
 8006a8e:	4798      	blx	r3
 8006a90:	6923      	ldr	r3, [r4, #16]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	6123      	str	r3, [r4, #16]
 8006a96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a9a:	fa5f fa8a 	uxtb.w	sl, sl
 8006a9e:	f1ba 0f02 	cmp.w	sl, #2
 8006aa2:	d1ec      	bne.n	8006a7e <_scanf_float+0x2c6>
 8006aa4:	3d03      	subs	r5, #3
 8006aa6:	b2ed      	uxtb	r5, r5
 8006aa8:	1b76      	subs	r6, r6, r5
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	05da      	lsls	r2, r3, #23
 8006aae:	d52f      	bpl.n	8006b10 <_scanf_float+0x358>
 8006ab0:	055b      	lsls	r3, r3, #21
 8006ab2:	d510      	bpl.n	8006ad6 <_scanf_float+0x31e>
 8006ab4:	455e      	cmp	r6, fp
 8006ab6:	f67f aebf 	bls.w	8006838 <_scanf_float+0x80>
 8006aba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006abe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ac2:	463a      	mov	r2, r7
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	4798      	blx	r3
 8006ac8:	6923      	ldr	r3, [r4, #16]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	6123      	str	r3, [r4, #16]
 8006ace:	e7f1      	b.n	8006ab4 <_scanf_float+0x2fc>
 8006ad0:	46aa      	mov	sl, r5
 8006ad2:	9602      	str	r6, [sp, #8]
 8006ad4:	e7df      	b.n	8006a96 <_scanf_float+0x2de>
 8006ad6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	2965      	cmp	r1, #101	; 0x65
 8006ade:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ae2:	f106 35ff 	add.w	r5, r6, #4294967295
 8006ae6:	6123      	str	r3, [r4, #16]
 8006ae8:	d00c      	beq.n	8006b04 <_scanf_float+0x34c>
 8006aea:	2945      	cmp	r1, #69	; 0x45
 8006aec:	d00a      	beq.n	8006b04 <_scanf_float+0x34c>
 8006aee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006af2:	463a      	mov	r2, r7
 8006af4:	4640      	mov	r0, r8
 8006af6:	4798      	blx	r3
 8006af8:	6923      	ldr	r3, [r4, #16]
 8006afa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	1eb5      	subs	r5, r6, #2
 8006b02:	6123      	str	r3, [r4, #16]
 8006b04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b08:	463a      	mov	r2, r7
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	4798      	blx	r3
 8006b0e:	462e      	mov	r6, r5
 8006b10:	6825      	ldr	r5, [r4, #0]
 8006b12:	f015 0510 	ands.w	r5, r5, #16
 8006b16:	d159      	bne.n	8006bcc <_scanf_float+0x414>
 8006b18:	7035      	strb	r5, [r6, #0]
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b24:	d11b      	bne.n	8006b5e <_scanf_float+0x3a6>
 8006b26:	9b01      	ldr	r3, [sp, #4]
 8006b28:	454b      	cmp	r3, r9
 8006b2a:	eba3 0209 	sub.w	r2, r3, r9
 8006b2e:	d123      	bne.n	8006b78 <_scanf_float+0x3c0>
 8006b30:	2200      	movs	r2, #0
 8006b32:	4659      	mov	r1, fp
 8006b34:	4640      	mov	r0, r8
 8006b36:	f000 fecd 	bl	80078d4 <_strtod_r>
 8006b3a:	6822      	ldr	r2, [r4, #0]
 8006b3c:	9b03      	ldr	r3, [sp, #12]
 8006b3e:	f012 0f02 	tst.w	r2, #2
 8006b42:	ec57 6b10 	vmov	r6, r7, d0
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	d021      	beq.n	8006b8e <_scanf_float+0x3d6>
 8006b4a:	9903      	ldr	r1, [sp, #12]
 8006b4c:	1d1a      	adds	r2, r3, #4
 8006b4e:	600a      	str	r2, [r1, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	e9c3 6700 	strd	r6, r7, [r3]
 8006b56:	68e3      	ldr	r3, [r4, #12]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	60e3      	str	r3, [r4, #12]
 8006b5c:	e66d      	b.n	800683a <_scanf_float+0x82>
 8006b5e:	9b04      	ldr	r3, [sp, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0e5      	beq.n	8006b30 <_scanf_float+0x378>
 8006b64:	9905      	ldr	r1, [sp, #20]
 8006b66:	230a      	movs	r3, #10
 8006b68:	462a      	mov	r2, r5
 8006b6a:	3101      	adds	r1, #1
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	f000 ff39 	bl	80079e4 <_strtol_r>
 8006b72:	9b04      	ldr	r3, [sp, #16]
 8006b74:	9e05      	ldr	r6, [sp, #20]
 8006b76:	1ac2      	subs	r2, r0, r3
 8006b78:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006b7c:	429e      	cmp	r6, r3
 8006b7e:	bf28      	it	cs
 8006b80:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006b84:	4912      	ldr	r1, [pc, #72]	; (8006bd0 <_scanf_float+0x418>)
 8006b86:	4630      	mov	r0, r6
 8006b88:	f000 f860 	bl	8006c4c <siprintf>
 8006b8c:	e7d0      	b.n	8006b30 <_scanf_float+0x378>
 8006b8e:	9903      	ldr	r1, [sp, #12]
 8006b90:	f012 0f04 	tst.w	r2, #4
 8006b94:	f103 0204 	add.w	r2, r3, #4
 8006b98:	600a      	str	r2, [r1, #0]
 8006b9a:	d1d9      	bne.n	8006b50 <_scanf_float+0x398>
 8006b9c:	f8d3 8000 	ldr.w	r8, [r3]
 8006ba0:	ee10 2a10 	vmov	r2, s0
 8006ba4:	ee10 0a10 	vmov	r0, s0
 8006ba8:	463b      	mov	r3, r7
 8006baa:	4639      	mov	r1, r7
 8006bac:	f7f9 ffc6 	bl	8000b3c <__aeabi_dcmpun>
 8006bb0:	b128      	cbz	r0, 8006bbe <_scanf_float+0x406>
 8006bb2:	4808      	ldr	r0, [pc, #32]	; (8006bd4 <_scanf_float+0x41c>)
 8006bb4:	f000 f810 	bl	8006bd8 <nanf>
 8006bb8:	ed88 0a00 	vstr	s0, [r8]
 8006bbc:	e7cb      	b.n	8006b56 <_scanf_float+0x39e>
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	4639      	mov	r1, r7
 8006bc2:	f7fa f819 	bl	8000bf8 <__aeabi_d2f>
 8006bc6:	f8c8 0000 	str.w	r0, [r8]
 8006bca:	e7c4      	b.n	8006b56 <_scanf_float+0x39e>
 8006bcc:	2500      	movs	r5, #0
 8006bce:	e634      	b.n	800683a <_scanf_float+0x82>
 8006bd0:	0800afc4 	.word	0x0800afc4
 8006bd4:	0800b3d0 	.word	0x0800b3d0

08006bd8 <nanf>:
 8006bd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006be0 <nanf+0x8>
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	7fc00000 	.word	0x7fc00000

08006be4 <sniprintf>:
 8006be4:	b40c      	push	{r2, r3}
 8006be6:	b530      	push	{r4, r5, lr}
 8006be8:	4b17      	ldr	r3, [pc, #92]	; (8006c48 <sniprintf+0x64>)
 8006bea:	1e0c      	subs	r4, r1, #0
 8006bec:	681d      	ldr	r5, [r3, #0]
 8006bee:	b09d      	sub	sp, #116	; 0x74
 8006bf0:	da08      	bge.n	8006c04 <sniprintf+0x20>
 8006bf2:	238b      	movs	r3, #139	; 0x8b
 8006bf4:	602b      	str	r3, [r5, #0]
 8006bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfa:	b01d      	add	sp, #116	; 0x74
 8006bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c00:	b002      	add	sp, #8
 8006c02:	4770      	bx	lr
 8006c04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006c08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c0c:	bf14      	ite	ne
 8006c0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c12:	4623      	moveq	r3, r4
 8006c14:	9304      	str	r3, [sp, #16]
 8006c16:	9307      	str	r3, [sp, #28]
 8006c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c1c:	9002      	str	r0, [sp, #8]
 8006c1e:	9006      	str	r0, [sp, #24]
 8006c20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c26:	ab21      	add	r3, sp, #132	; 0x84
 8006c28:	a902      	add	r1, sp, #8
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	f002 fef7 	bl	8009a20 <_svfiprintf_r>
 8006c32:	1c43      	adds	r3, r0, #1
 8006c34:	bfbc      	itt	lt
 8006c36:	238b      	movlt	r3, #139	; 0x8b
 8006c38:	602b      	strlt	r3, [r5, #0]
 8006c3a:	2c00      	cmp	r4, #0
 8006c3c:	d0dd      	beq.n	8006bfa <sniprintf+0x16>
 8006c3e:	9b02      	ldr	r3, [sp, #8]
 8006c40:	2200      	movs	r2, #0
 8006c42:	701a      	strb	r2, [r3, #0]
 8006c44:	e7d9      	b.n	8006bfa <sniprintf+0x16>
 8006c46:	bf00      	nop
 8006c48:	20000014 	.word	0x20000014

08006c4c <siprintf>:
 8006c4c:	b40e      	push	{r1, r2, r3}
 8006c4e:	b500      	push	{lr}
 8006c50:	b09c      	sub	sp, #112	; 0x70
 8006c52:	ab1d      	add	r3, sp, #116	; 0x74
 8006c54:	9002      	str	r0, [sp, #8]
 8006c56:	9006      	str	r0, [sp, #24]
 8006c58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c5c:	4809      	ldr	r0, [pc, #36]	; (8006c84 <siprintf+0x38>)
 8006c5e:	9107      	str	r1, [sp, #28]
 8006c60:	9104      	str	r1, [sp, #16]
 8006c62:	4909      	ldr	r1, [pc, #36]	; (8006c88 <siprintf+0x3c>)
 8006c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c68:	9105      	str	r1, [sp, #20]
 8006c6a:	6800      	ldr	r0, [r0, #0]
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	a902      	add	r1, sp, #8
 8006c70:	f002 fed6 	bl	8009a20 <_svfiprintf_r>
 8006c74:	9b02      	ldr	r3, [sp, #8]
 8006c76:	2200      	movs	r2, #0
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	b01c      	add	sp, #112	; 0x70
 8006c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c80:	b003      	add	sp, #12
 8006c82:	4770      	bx	lr
 8006c84:	20000014 	.word	0x20000014
 8006c88:	ffff0208 	.word	0xffff0208

08006c8c <sulp>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	4604      	mov	r4, r0
 8006c90:	460d      	mov	r5, r1
 8006c92:	ec45 4b10 	vmov	d0, r4, r5
 8006c96:	4616      	mov	r6, r2
 8006c98:	f002 fc20 	bl	80094dc <__ulp>
 8006c9c:	ec51 0b10 	vmov	r0, r1, d0
 8006ca0:	b17e      	cbz	r6, 8006cc2 <sulp+0x36>
 8006ca2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ca6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	dd09      	ble.n	8006cc2 <sulp+0x36>
 8006cae:	051b      	lsls	r3, r3, #20
 8006cb0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006cb4:	2400      	movs	r4, #0
 8006cb6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006cba:	4622      	mov	r2, r4
 8006cbc:	462b      	mov	r3, r5
 8006cbe:	f7f9 fca3 	bl	8000608 <__aeabi_dmul>
 8006cc2:	bd70      	pop	{r4, r5, r6, pc}
 8006cc4:	0000      	movs	r0, r0
	...

08006cc8 <_strtod_l>:
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	ed2d 8b02 	vpush	{d8}
 8006cd0:	b09d      	sub	sp, #116	; 0x74
 8006cd2:	461f      	mov	r7, r3
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	9318      	str	r3, [sp, #96]	; 0x60
 8006cd8:	4ba2      	ldr	r3, [pc, #648]	; (8006f64 <_strtod_l+0x29c>)
 8006cda:	9213      	str	r2, [sp, #76]	; 0x4c
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	9305      	str	r3, [sp, #20]
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	4688      	mov	r8, r1
 8006ce6:	f7f9 fa7b 	bl	80001e0 <strlen>
 8006cea:	f04f 0a00 	mov.w	sl, #0
 8006cee:	4605      	mov	r5, r0
 8006cf0:	f04f 0b00 	mov.w	fp, #0
 8006cf4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006cf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cfa:	781a      	ldrb	r2, [r3, #0]
 8006cfc:	2a2b      	cmp	r2, #43	; 0x2b
 8006cfe:	d04e      	beq.n	8006d9e <_strtod_l+0xd6>
 8006d00:	d83b      	bhi.n	8006d7a <_strtod_l+0xb2>
 8006d02:	2a0d      	cmp	r2, #13
 8006d04:	d834      	bhi.n	8006d70 <_strtod_l+0xa8>
 8006d06:	2a08      	cmp	r2, #8
 8006d08:	d834      	bhi.n	8006d74 <_strtod_l+0xac>
 8006d0a:	2a00      	cmp	r2, #0
 8006d0c:	d03e      	beq.n	8006d8c <_strtod_l+0xc4>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	930a      	str	r3, [sp, #40]	; 0x28
 8006d12:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006d14:	7833      	ldrb	r3, [r6, #0]
 8006d16:	2b30      	cmp	r3, #48	; 0x30
 8006d18:	f040 80b0 	bne.w	8006e7c <_strtod_l+0x1b4>
 8006d1c:	7873      	ldrb	r3, [r6, #1]
 8006d1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d22:	2b58      	cmp	r3, #88	; 0x58
 8006d24:	d168      	bne.n	8006df8 <_strtod_l+0x130>
 8006d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	ab18      	add	r3, sp, #96	; 0x60
 8006d2c:	9702      	str	r7, [sp, #8]
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	4a8d      	ldr	r2, [pc, #564]	; (8006f68 <_strtod_l+0x2a0>)
 8006d32:	ab19      	add	r3, sp, #100	; 0x64
 8006d34:	a917      	add	r1, sp, #92	; 0x5c
 8006d36:	4620      	mov	r0, r4
 8006d38:	f001 fd38 	bl	80087ac <__gethex>
 8006d3c:	f010 0707 	ands.w	r7, r0, #7
 8006d40:	4605      	mov	r5, r0
 8006d42:	d005      	beq.n	8006d50 <_strtod_l+0x88>
 8006d44:	2f06      	cmp	r7, #6
 8006d46:	d12c      	bne.n	8006da2 <_strtod_l+0xda>
 8006d48:	3601      	adds	r6, #1
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	9617      	str	r6, [sp, #92]	; 0x5c
 8006d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f040 8590 	bne.w	8007878 <_strtod_l+0xbb0>
 8006d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d5a:	b1eb      	cbz	r3, 8006d98 <_strtod_l+0xd0>
 8006d5c:	4652      	mov	r2, sl
 8006d5e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d62:	ec43 2b10 	vmov	d0, r2, r3
 8006d66:	b01d      	add	sp, #116	; 0x74
 8006d68:	ecbd 8b02 	vpop	{d8}
 8006d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d70:	2a20      	cmp	r2, #32
 8006d72:	d1cc      	bne.n	8006d0e <_strtod_l+0x46>
 8006d74:	3301      	adds	r3, #1
 8006d76:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d78:	e7be      	b.n	8006cf8 <_strtod_l+0x30>
 8006d7a:	2a2d      	cmp	r2, #45	; 0x2d
 8006d7c:	d1c7      	bne.n	8006d0e <_strtod_l+0x46>
 8006d7e:	2201      	movs	r2, #1
 8006d80:	920a      	str	r2, [sp, #40]	; 0x28
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d86:	785b      	ldrb	r3, [r3, #1]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1c2      	bne.n	8006d12 <_strtod_l+0x4a>
 8006d8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d8e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f040 856e 	bne.w	8007874 <_strtod_l+0xbac>
 8006d98:	4652      	mov	r2, sl
 8006d9a:	465b      	mov	r3, fp
 8006d9c:	e7e1      	b.n	8006d62 <_strtod_l+0x9a>
 8006d9e:	2200      	movs	r2, #0
 8006da0:	e7ee      	b.n	8006d80 <_strtod_l+0xb8>
 8006da2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006da4:	b13a      	cbz	r2, 8006db6 <_strtod_l+0xee>
 8006da6:	2135      	movs	r1, #53	; 0x35
 8006da8:	a81a      	add	r0, sp, #104	; 0x68
 8006daa:	f002 fca2 	bl	80096f2 <__copybits>
 8006dae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006db0:	4620      	mov	r0, r4
 8006db2:	f002 f861 	bl	8008e78 <_Bfree>
 8006db6:	3f01      	subs	r7, #1
 8006db8:	2f04      	cmp	r7, #4
 8006dba:	d806      	bhi.n	8006dca <_strtod_l+0x102>
 8006dbc:	e8df f007 	tbb	[pc, r7]
 8006dc0:	1714030a 	.word	0x1714030a
 8006dc4:	0a          	.byte	0x0a
 8006dc5:	00          	.byte	0x00
 8006dc6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006dca:	0728      	lsls	r0, r5, #28
 8006dcc:	d5c0      	bpl.n	8006d50 <_strtod_l+0x88>
 8006dce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006dd2:	e7bd      	b.n	8006d50 <_strtod_l+0x88>
 8006dd4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006dd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006dda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006dde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006de2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006de6:	e7f0      	b.n	8006dca <_strtod_l+0x102>
 8006de8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006f6c <_strtod_l+0x2a4>
 8006dec:	e7ed      	b.n	8006dca <_strtod_l+0x102>
 8006dee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006df2:	f04f 3aff 	mov.w	sl, #4294967295
 8006df6:	e7e8      	b.n	8006dca <_strtod_l+0x102>
 8006df8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	2b30      	cmp	r3, #48	; 0x30
 8006e02:	d0f9      	beq.n	8006df8 <_strtod_l+0x130>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0a3      	beq.n	8006d50 <_strtod_l+0x88>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	f04f 0900 	mov.w	r9, #0
 8006e0e:	9304      	str	r3, [sp, #16]
 8006e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e12:	9308      	str	r3, [sp, #32]
 8006e14:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e18:	464f      	mov	r7, r9
 8006e1a:	220a      	movs	r2, #10
 8006e1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006e1e:	7806      	ldrb	r6, [r0, #0]
 8006e20:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006e24:	b2d9      	uxtb	r1, r3
 8006e26:	2909      	cmp	r1, #9
 8006e28:	d92a      	bls.n	8006e80 <_strtod_l+0x1b8>
 8006e2a:	9905      	ldr	r1, [sp, #20]
 8006e2c:	462a      	mov	r2, r5
 8006e2e:	f002 ff0f 	bl	8009c50 <strncmp>
 8006e32:	b398      	cbz	r0, 8006e9c <_strtod_l+0x1d4>
 8006e34:	2000      	movs	r0, #0
 8006e36:	4632      	mov	r2, r6
 8006e38:	463d      	mov	r5, r7
 8006e3a:	9005      	str	r0, [sp, #20]
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2a65      	cmp	r2, #101	; 0x65
 8006e40:	d001      	beq.n	8006e46 <_strtod_l+0x17e>
 8006e42:	2a45      	cmp	r2, #69	; 0x45
 8006e44:	d118      	bne.n	8006e78 <_strtod_l+0x1b0>
 8006e46:	b91d      	cbnz	r5, 8006e50 <_strtod_l+0x188>
 8006e48:	9a04      	ldr	r2, [sp, #16]
 8006e4a:	4302      	orrs	r2, r0
 8006e4c:	d09e      	beq.n	8006d8c <_strtod_l+0xc4>
 8006e4e:	2500      	movs	r5, #0
 8006e50:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006e54:	f108 0201 	add.w	r2, r8, #1
 8006e58:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006e5e:	2a2b      	cmp	r2, #43	; 0x2b
 8006e60:	d075      	beq.n	8006f4e <_strtod_l+0x286>
 8006e62:	2a2d      	cmp	r2, #45	; 0x2d
 8006e64:	d07b      	beq.n	8006f5e <_strtod_l+0x296>
 8006e66:	f04f 0c00 	mov.w	ip, #0
 8006e6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e6e:	2909      	cmp	r1, #9
 8006e70:	f240 8082 	bls.w	8006f78 <_strtod_l+0x2b0>
 8006e74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006e78:	2600      	movs	r6, #0
 8006e7a:	e09d      	b.n	8006fb8 <_strtod_l+0x2f0>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	e7c4      	b.n	8006e0a <_strtod_l+0x142>
 8006e80:	2f08      	cmp	r7, #8
 8006e82:	bfd8      	it	le
 8006e84:	9907      	ldrle	r1, [sp, #28]
 8006e86:	f100 0001 	add.w	r0, r0, #1
 8006e8a:	bfda      	itte	le
 8006e8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006e90:	9307      	strle	r3, [sp, #28]
 8006e92:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006e96:	3701      	adds	r7, #1
 8006e98:	9017      	str	r0, [sp, #92]	; 0x5c
 8006e9a:	e7bf      	b.n	8006e1c <_strtod_l+0x154>
 8006e9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e9e:	195a      	adds	r2, r3, r5
 8006ea0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ea2:	5d5a      	ldrb	r2, [r3, r5]
 8006ea4:	2f00      	cmp	r7, #0
 8006ea6:	d037      	beq.n	8006f18 <_strtod_l+0x250>
 8006ea8:	9005      	str	r0, [sp, #20]
 8006eaa:	463d      	mov	r5, r7
 8006eac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006eb0:	2b09      	cmp	r3, #9
 8006eb2:	d912      	bls.n	8006eda <_strtod_l+0x212>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e7c2      	b.n	8006e3e <_strtod_l+0x176>
 8006eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ebe:	785a      	ldrb	r2, [r3, #1]
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	2a30      	cmp	r2, #48	; 0x30
 8006ec4:	d0f8      	beq.n	8006eb8 <_strtod_l+0x1f0>
 8006ec6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	f200 84d9 	bhi.w	8007882 <_strtod_l+0xbba>
 8006ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ed2:	9005      	str	r0, [sp, #20]
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	9308      	str	r3, [sp, #32]
 8006ed8:	4605      	mov	r5, r0
 8006eda:	3a30      	subs	r2, #48	; 0x30
 8006edc:	f100 0301 	add.w	r3, r0, #1
 8006ee0:	d014      	beq.n	8006f0c <_strtod_l+0x244>
 8006ee2:	9905      	ldr	r1, [sp, #20]
 8006ee4:	4419      	add	r1, r3
 8006ee6:	9105      	str	r1, [sp, #20]
 8006ee8:	462b      	mov	r3, r5
 8006eea:	eb00 0e05 	add.w	lr, r0, r5
 8006eee:	210a      	movs	r1, #10
 8006ef0:	4573      	cmp	r3, lr
 8006ef2:	d113      	bne.n	8006f1c <_strtod_l+0x254>
 8006ef4:	182b      	adds	r3, r5, r0
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	f105 0501 	add.w	r5, r5, #1
 8006efc:	4405      	add	r5, r0
 8006efe:	dc1c      	bgt.n	8006f3a <_strtod_l+0x272>
 8006f00:	9907      	ldr	r1, [sp, #28]
 8006f02:	230a      	movs	r3, #10
 8006f04:	fb03 2301 	mla	r3, r3, r1, r2
 8006f08:	9307      	str	r3, [sp, #28]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f0e:	1c51      	adds	r1, r2, #1
 8006f10:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f12:	7852      	ldrb	r2, [r2, #1]
 8006f14:	4618      	mov	r0, r3
 8006f16:	e7c9      	b.n	8006eac <_strtod_l+0x1e4>
 8006f18:	4638      	mov	r0, r7
 8006f1a:	e7d2      	b.n	8006ec2 <_strtod_l+0x1fa>
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	dc04      	bgt.n	8006f2a <_strtod_l+0x262>
 8006f20:	9e07      	ldr	r6, [sp, #28]
 8006f22:	434e      	muls	r6, r1
 8006f24:	9607      	str	r6, [sp, #28]
 8006f26:	3301      	adds	r3, #1
 8006f28:	e7e2      	b.n	8006ef0 <_strtod_l+0x228>
 8006f2a:	f103 0c01 	add.w	ip, r3, #1
 8006f2e:	f1bc 0f10 	cmp.w	ip, #16
 8006f32:	bfd8      	it	le
 8006f34:	fb01 f909 	mulle.w	r9, r1, r9
 8006f38:	e7f5      	b.n	8006f26 <_strtod_l+0x25e>
 8006f3a:	2d10      	cmp	r5, #16
 8006f3c:	bfdc      	itt	le
 8006f3e:	230a      	movle	r3, #10
 8006f40:	fb03 2909 	mlale	r9, r3, r9, r2
 8006f44:	e7e1      	b.n	8006f0a <_strtod_l+0x242>
 8006f46:	2300      	movs	r3, #0
 8006f48:	9305      	str	r3, [sp, #20]
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e77c      	b.n	8006e48 <_strtod_l+0x180>
 8006f4e:	f04f 0c00 	mov.w	ip, #0
 8006f52:	f108 0202 	add.w	r2, r8, #2
 8006f56:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f58:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006f5c:	e785      	b.n	8006e6a <_strtod_l+0x1a2>
 8006f5e:	f04f 0c01 	mov.w	ip, #1
 8006f62:	e7f6      	b.n	8006f52 <_strtod_l+0x28a>
 8006f64:	0800b218 	.word	0x0800b218
 8006f68:	0800afcc 	.word	0x0800afcc
 8006f6c:	7ff00000 	.word	0x7ff00000
 8006f70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f72:	1c51      	adds	r1, r2, #1
 8006f74:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f76:	7852      	ldrb	r2, [r2, #1]
 8006f78:	2a30      	cmp	r2, #48	; 0x30
 8006f7a:	d0f9      	beq.n	8006f70 <_strtod_l+0x2a8>
 8006f7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006f80:	2908      	cmp	r1, #8
 8006f82:	f63f af79 	bhi.w	8006e78 <_strtod_l+0x1b0>
 8006f86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006f8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f8c:	9206      	str	r2, [sp, #24]
 8006f8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f90:	1c51      	adds	r1, r2, #1
 8006f92:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f94:	7852      	ldrb	r2, [r2, #1]
 8006f96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006f9a:	2e09      	cmp	r6, #9
 8006f9c:	d937      	bls.n	800700e <_strtod_l+0x346>
 8006f9e:	9e06      	ldr	r6, [sp, #24]
 8006fa0:	1b89      	subs	r1, r1, r6
 8006fa2:	2908      	cmp	r1, #8
 8006fa4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006fa8:	dc02      	bgt.n	8006fb0 <_strtod_l+0x2e8>
 8006faa:	4576      	cmp	r6, lr
 8006fac:	bfa8      	it	ge
 8006fae:	4676      	movge	r6, lr
 8006fb0:	f1bc 0f00 	cmp.w	ip, #0
 8006fb4:	d000      	beq.n	8006fb8 <_strtod_l+0x2f0>
 8006fb6:	4276      	negs	r6, r6
 8006fb8:	2d00      	cmp	r5, #0
 8006fba:	d14d      	bne.n	8007058 <_strtod_l+0x390>
 8006fbc:	9904      	ldr	r1, [sp, #16]
 8006fbe:	4301      	orrs	r1, r0
 8006fc0:	f47f aec6 	bne.w	8006d50 <_strtod_l+0x88>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f47f aee1 	bne.w	8006d8c <_strtod_l+0xc4>
 8006fca:	2a69      	cmp	r2, #105	; 0x69
 8006fcc:	d027      	beq.n	800701e <_strtod_l+0x356>
 8006fce:	dc24      	bgt.n	800701a <_strtod_l+0x352>
 8006fd0:	2a49      	cmp	r2, #73	; 0x49
 8006fd2:	d024      	beq.n	800701e <_strtod_l+0x356>
 8006fd4:	2a4e      	cmp	r2, #78	; 0x4e
 8006fd6:	f47f aed9 	bne.w	8006d8c <_strtod_l+0xc4>
 8006fda:	499f      	ldr	r1, [pc, #636]	; (8007258 <_strtod_l+0x590>)
 8006fdc:	a817      	add	r0, sp, #92	; 0x5c
 8006fde:	f001 fe3d 	bl	8008c5c <__match>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	f43f aed2 	beq.w	8006d8c <_strtod_l+0xc4>
 8006fe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	2b28      	cmp	r3, #40	; 0x28
 8006fee:	d12d      	bne.n	800704c <_strtod_l+0x384>
 8006ff0:	499a      	ldr	r1, [pc, #616]	; (800725c <_strtod_l+0x594>)
 8006ff2:	aa1a      	add	r2, sp, #104	; 0x68
 8006ff4:	a817      	add	r0, sp, #92	; 0x5c
 8006ff6:	f001 fe45 	bl	8008c84 <__hexnan>
 8006ffa:	2805      	cmp	r0, #5
 8006ffc:	d126      	bne.n	800704c <_strtod_l+0x384>
 8006ffe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007000:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007004:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007008:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800700c:	e6a0      	b.n	8006d50 <_strtod_l+0x88>
 800700e:	210a      	movs	r1, #10
 8007010:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007014:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007018:	e7b9      	b.n	8006f8e <_strtod_l+0x2c6>
 800701a:	2a6e      	cmp	r2, #110	; 0x6e
 800701c:	e7db      	b.n	8006fd6 <_strtod_l+0x30e>
 800701e:	4990      	ldr	r1, [pc, #576]	; (8007260 <_strtod_l+0x598>)
 8007020:	a817      	add	r0, sp, #92	; 0x5c
 8007022:	f001 fe1b 	bl	8008c5c <__match>
 8007026:	2800      	cmp	r0, #0
 8007028:	f43f aeb0 	beq.w	8006d8c <_strtod_l+0xc4>
 800702c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800702e:	498d      	ldr	r1, [pc, #564]	; (8007264 <_strtod_l+0x59c>)
 8007030:	3b01      	subs	r3, #1
 8007032:	a817      	add	r0, sp, #92	; 0x5c
 8007034:	9317      	str	r3, [sp, #92]	; 0x5c
 8007036:	f001 fe11 	bl	8008c5c <__match>
 800703a:	b910      	cbnz	r0, 8007042 <_strtod_l+0x37a>
 800703c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800703e:	3301      	adds	r3, #1
 8007040:	9317      	str	r3, [sp, #92]	; 0x5c
 8007042:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007274 <_strtod_l+0x5ac>
 8007046:	f04f 0a00 	mov.w	sl, #0
 800704a:	e681      	b.n	8006d50 <_strtod_l+0x88>
 800704c:	4886      	ldr	r0, [pc, #536]	; (8007268 <_strtod_l+0x5a0>)
 800704e:	f002 fde7 	bl	8009c20 <nan>
 8007052:	ec5b ab10 	vmov	sl, fp, d0
 8007056:	e67b      	b.n	8006d50 <_strtod_l+0x88>
 8007058:	9b05      	ldr	r3, [sp, #20]
 800705a:	9807      	ldr	r0, [sp, #28]
 800705c:	1af3      	subs	r3, r6, r3
 800705e:	2f00      	cmp	r7, #0
 8007060:	bf08      	it	eq
 8007062:	462f      	moveq	r7, r5
 8007064:	2d10      	cmp	r5, #16
 8007066:	9306      	str	r3, [sp, #24]
 8007068:	46a8      	mov	r8, r5
 800706a:	bfa8      	it	ge
 800706c:	f04f 0810 	movge.w	r8, #16
 8007070:	f7f9 fa50 	bl	8000514 <__aeabi_ui2d>
 8007074:	2d09      	cmp	r5, #9
 8007076:	4682      	mov	sl, r0
 8007078:	468b      	mov	fp, r1
 800707a:	dd13      	ble.n	80070a4 <_strtod_l+0x3dc>
 800707c:	4b7b      	ldr	r3, [pc, #492]	; (800726c <_strtod_l+0x5a4>)
 800707e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007082:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007086:	f7f9 fabf 	bl	8000608 <__aeabi_dmul>
 800708a:	4682      	mov	sl, r0
 800708c:	4648      	mov	r0, r9
 800708e:	468b      	mov	fp, r1
 8007090:	f7f9 fa40 	bl	8000514 <__aeabi_ui2d>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4650      	mov	r0, sl
 800709a:	4659      	mov	r1, fp
 800709c:	f7f9 f8fe 	bl	800029c <__adddf3>
 80070a0:	4682      	mov	sl, r0
 80070a2:	468b      	mov	fp, r1
 80070a4:	2d0f      	cmp	r5, #15
 80070a6:	dc38      	bgt.n	800711a <_strtod_l+0x452>
 80070a8:	9b06      	ldr	r3, [sp, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f43f ae50 	beq.w	8006d50 <_strtod_l+0x88>
 80070b0:	dd24      	ble.n	80070fc <_strtod_l+0x434>
 80070b2:	2b16      	cmp	r3, #22
 80070b4:	dc0b      	bgt.n	80070ce <_strtod_l+0x406>
 80070b6:	496d      	ldr	r1, [pc, #436]	; (800726c <_strtod_l+0x5a4>)
 80070b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070c0:	4652      	mov	r2, sl
 80070c2:	465b      	mov	r3, fp
 80070c4:	f7f9 faa0 	bl	8000608 <__aeabi_dmul>
 80070c8:	4682      	mov	sl, r0
 80070ca:	468b      	mov	fp, r1
 80070cc:	e640      	b.n	8006d50 <_strtod_l+0x88>
 80070ce:	9a06      	ldr	r2, [sp, #24]
 80070d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80070d4:	4293      	cmp	r3, r2
 80070d6:	db20      	blt.n	800711a <_strtod_l+0x452>
 80070d8:	4c64      	ldr	r4, [pc, #400]	; (800726c <_strtod_l+0x5a4>)
 80070da:	f1c5 050f 	rsb	r5, r5, #15
 80070de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80070e2:	4652      	mov	r2, sl
 80070e4:	465b      	mov	r3, fp
 80070e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070ea:	f7f9 fa8d 	bl	8000608 <__aeabi_dmul>
 80070ee:	9b06      	ldr	r3, [sp, #24]
 80070f0:	1b5d      	subs	r5, r3, r5
 80070f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80070f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80070fa:	e7e3      	b.n	80070c4 <_strtod_l+0x3fc>
 80070fc:	9b06      	ldr	r3, [sp, #24]
 80070fe:	3316      	adds	r3, #22
 8007100:	db0b      	blt.n	800711a <_strtod_l+0x452>
 8007102:	9b05      	ldr	r3, [sp, #20]
 8007104:	1b9e      	subs	r6, r3, r6
 8007106:	4b59      	ldr	r3, [pc, #356]	; (800726c <_strtod_l+0x5a4>)
 8007108:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800710c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007110:	4650      	mov	r0, sl
 8007112:	4659      	mov	r1, fp
 8007114:	f7f9 fba2 	bl	800085c <__aeabi_ddiv>
 8007118:	e7d6      	b.n	80070c8 <_strtod_l+0x400>
 800711a:	9b06      	ldr	r3, [sp, #24]
 800711c:	eba5 0808 	sub.w	r8, r5, r8
 8007120:	4498      	add	r8, r3
 8007122:	f1b8 0f00 	cmp.w	r8, #0
 8007126:	dd74      	ble.n	8007212 <_strtod_l+0x54a>
 8007128:	f018 030f 	ands.w	r3, r8, #15
 800712c:	d00a      	beq.n	8007144 <_strtod_l+0x47c>
 800712e:	494f      	ldr	r1, [pc, #316]	; (800726c <_strtod_l+0x5a4>)
 8007130:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007134:	4652      	mov	r2, sl
 8007136:	465b      	mov	r3, fp
 8007138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800713c:	f7f9 fa64 	bl	8000608 <__aeabi_dmul>
 8007140:	4682      	mov	sl, r0
 8007142:	468b      	mov	fp, r1
 8007144:	f038 080f 	bics.w	r8, r8, #15
 8007148:	d04f      	beq.n	80071ea <_strtod_l+0x522>
 800714a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800714e:	dd22      	ble.n	8007196 <_strtod_l+0x4ce>
 8007150:	2500      	movs	r5, #0
 8007152:	462e      	mov	r6, r5
 8007154:	9507      	str	r5, [sp, #28]
 8007156:	9505      	str	r5, [sp, #20]
 8007158:	2322      	movs	r3, #34	; 0x22
 800715a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007274 <_strtod_l+0x5ac>
 800715e:	6023      	str	r3, [r4, #0]
 8007160:	f04f 0a00 	mov.w	sl, #0
 8007164:	9b07      	ldr	r3, [sp, #28]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f43f adf2 	beq.w	8006d50 <_strtod_l+0x88>
 800716c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800716e:	4620      	mov	r0, r4
 8007170:	f001 fe82 	bl	8008e78 <_Bfree>
 8007174:	9905      	ldr	r1, [sp, #20]
 8007176:	4620      	mov	r0, r4
 8007178:	f001 fe7e 	bl	8008e78 <_Bfree>
 800717c:	4631      	mov	r1, r6
 800717e:	4620      	mov	r0, r4
 8007180:	f001 fe7a 	bl	8008e78 <_Bfree>
 8007184:	9907      	ldr	r1, [sp, #28]
 8007186:	4620      	mov	r0, r4
 8007188:	f001 fe76 	bl	8008e78 <_Bfree>
 800718c:	4629      	mov	r1, r5
 800718e:	4620      	mov	r0, r4
 8007190:	f001 fe72 	bl	8008e78 <_Bfree>
 8007194:	e5dc      	b.n	8006d50 <_strtod_l+0x88>
 8007196:	4b36      	ldr	r3, [pc, #216]	; (8007270 <_strtod_l+0x5a8>)
 8007198:	9304      	str	r3, [sp, #16]
 800719a:	2300      	movs	r3, #0
 800719c:	ea4f 1828 	mov.w	r8, r8, asr #4
 80071a0:	4650      	mov	r0, sl
 80071a2:	4659      	mov	r1, fp
 80071a4:	4699      	mov	r9, r3
 80071a6:	f1b8 0f01 	cmp.w	r8, #1
 80071aa:	dc21      	bgt.n	80071f0 <_strtod_l+0x528>
 80071ac:	b10b      	cbz	r3, 80071b2 <_strtod_l+0x4ea>
 80071ae:	4682      	mov	sl, r0
 80071b0:	468b      	mov	fp, r1
 80071b2:	4b2f      	ldr	r3, [pc, #188]	; (8007270 <_strtod_l+0x5a8>)
 80071b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80071b8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80071bc:	4652      	mov	r2, sl
 80071be:	465b      	mov	r3, fp
 80071c0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80071c4:	f7f9 fa20 	bl	8000608 <__aeabi_dmul>
 80071c8:	4b2a      	ldr	r3, [pc, #168]	; (8007274 <_strtod_l+0x5ac>)
 80071ca:	460a      	mov	r2, r1
 80071cc:	400b      	ands	r3, r1
 80071ce:	492a      	ldr	r1, [pc, #168]	; (8007278 <_strtod_l+0x5b0>)
 80071d0:	428b      	cmp	r3, r1
 80071d2:	4682      	mov	sl, r0
 80071d4:	d8bc      	bhi.n	8007150 <_strtod_l+0x488>
 80071d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80071da:	428b      	cmp	r3, r1
 80071dc:	bf86      	itte	hi
 80071de:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800727c <_strtod_l+0x5b4>
 80071e2:	f04f 3aff 	movhi.w	sl, #4294967295
 80071e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80071ea:	2300      	movs	r3, #0
 80071ec:	9304      	str	r3, [sp, #16]
 80071ee:	e084      	b.n	80072fa <_strtod_l+0x632>
 80071f0:	f018 0f01 	tst.w	r8, #1
 80071f4:	d005      	beq.n	8007202 <_strtod_l+0x53a>
 80071f6:	9b04      	ldr	r3, [sp, #16]
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	f7f9 fa04 	bl	8000608 <__aeabi_dmul>
 8007200:	2301      	movs	r3, #1
 8007202:	9a04      	ldr	r2, [sp, #16]
 8007204:	3208      	adds	r2, #8
 8007206:	f109 0901 	add.w	r9, r9, #1
 800720a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800720e:	9204      	str	r2, [sp, #16]
 8007210:	e7c9      	b.n	80071a6 <_strtod_l+0x4de>
 8007212:	d0ea      	beq.n	80071ea <_strtod_l+0x522>
 8007214:	f1c8 0800 	rsb	r8, r8, #0
 8007218:	f018 020f 	ands.w	r2, r8, #15
 800721c:	d00a      	beq.n	8007234 <_strtod_l+0x56c>
 800721e:	4b13      	ldr	r3, [pc, #76]	; (800726c <_strtod_l+0x5a4>)
 8007220:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007224:	4650      	mov	r0, sl
 8007226:	4659      	mov	r1, fp
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f7f9 fb16 	bl	800085c <__aeabi_ddiv>
 8007230:	4682      	mov	sl, r0
 8007232:	468b      	mov	fp, r1
 8007234:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007238:	d0d7      	beq.n	80071ea <_strtod_l+0x522>
 800723a:	f1b8 0f1f 	cmp.w	r8, #31
 800723e:	dd1f      	ble.n	8007280 <_strtod_l+0x5b8>
 8007240:	2500      	movs	r5, #0
 8007242:	462e      	mov	r6, r5
 8007244:	9507      	str	r5, [sp, #28]
 8007246:	9505      	str	r5, [sp, #20]
 8007248:	2322      	movs	r3, #34	; 0x22
 800724a:	f04f 0a00 	mov.w	sl, #0
 800724e:	f04f 0b00 	mov.w	fp, #0
 8007252:	6023      	str	r3, [r4, #0]
 8007254:	e786      	b.n	8007164 <_strtod_l+0x49c>
 8007256:	bf00      	nop
 8007258:	0800af9d 	.word	0x0800af9d
 800725c:	0800afe0 	.word	0x0800afe0
 8007260:	0800af95 	.word	0x0800af95
 8007264:	0800b124 	.word	0x0800b124
 8007268:	0800b3d0 	.word	0x0800b3d0
 800726c:	0800b2b0 	.word	0x0800b2b0
 8007270:	0800b288 	.word	0x0800b288
 8007274:	7ff00000 	.word	0x7ff00000
 8007278:	7ca00000 	.word	0x7ca00000
 800727c:	7fefffff 	.word	0x7fefffff
 8007280:	f018 0310 	ands.w	r3, r8, #16
 8007284:	bf18      	it	ne
 8007286:	236a      	movne	r3, #106	; 0x6a
 8007288:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007638 <_strtod_l+0x970>
 800728c:	9304      	str	r3, [sp, #16]
 800728e:	4650      	mov	r0, sl
 8007290:	4659      	mov	r1, fp
 8007292:	2300      	movs	r3, #0
 8007294:	f018 0f01 	tst.w	r8, #1
 8007298:	d004      	beq.n	80072a4 <_strtod_l+0x5dc>
 800729a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800729e:	f7f9 f9b3 	bl	8000608 <__aeabi_dmul>
 80072a2:	2301      	movs	r3, #1
 80072a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80072a8:	f109 0908 	add.w	r9, r9, #8
 80072ac:	d1f2      	bne.n	8007294 <_strtod_l+0x5cc>
 80072ae:	b10b      	cbz	r3, 80072b4 <_strtod_l+0x5ec>
 80072b0:	4682      	mov	sl, r0
 80072b2:	468b      	mov	fp, r1
 80072b4:	9b04      	ldr	r3, [sp, #16]
 80072b6:	b1c3      	cbz	r3, 80072ea <_strtod_l+0x622>
 80072b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	4659      	mov	r1, fp
 80072c4:	dd11      	ble.n	80072ea <_strtod_l+0x622>
 80072c6:	2b1f      	cmp	r3, #31
 80072c8:	f340 8124 	ble.w	8007514 <_strtod_l+0x84c>
 80072cc:	2b34      	cmp	r3, #52	; 0x34
 80072ce:	bfde      	ittt	le
 80072d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80072d4:	f04f 33ff 	movle.w	r3, #4294967295
 80072d8:	fa03 f202 	lslle.w	r2, r3, r2
 80072dc:	f04f 0a00 	mov.w	sl, #0
 80072e0:	bfcc      	ite	gt
 80072e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80072e6:	ea02 0b01 	andle.w	fp, r2, r1
 80072ea:	2200      	movs	r2, #0
 80072ec:	2300      	movs	r3, #0
 80072ee:	4650      	mov	r0, sl
 80072f0:	4659      	mov	r1, fp
 80072f2:	f7f9 fbf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d1a2      	bne.n	8007240 <_strtod_l+0x578>
 80072fa:	9b07      	ldr	r3, [sp, #28]
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	9908      	ldr	r1, [sp, #32]
 8007300:	462b      	mov	r3, r5
 8007302:	463a      	mov	r2, r7
 8007304:	4620      	mov	r0, r4
 8007306:	f001 fe1f 	bl	8008f48 <__s2b>
 800730a:	9007      	str	r0, [sp, #28]
 800730c:	2800      	cmp	r0, #0
 800730e:	f43f af1f 	beq.w	8007150 <_strtod_l+0x488>
 8007312:	9b05      	ldr	r3, [sp, #20]
 8007314:	1b9e      	subs	r6, r3, r6
 8007316:	9b06      	ldr	r3, [sp, #24]
 8007318:	2b00      	cmp	r3, #0
 800731a:	bfb4      	ite	lt
 800731c:	4633      	movlt	r3, r6
 800731e:	2300      	movge	r3, #0
 8007320:	930c      	str	r3, [sp, #48]	; 0x30
 8007322:	9b06      	ldr	r3, [sp, #24]
 8007324:	2500      	movs	r5, #0
 8007326:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800732a:	9312      	str	r3, [sp, #72]	; 0x48
 800732c:	462e      	mov	r6, r5
 800732e:	9b07      	ldr	r3, [sp, #28]
 8007330:	4620      	mov	r0, r4
 8007332:	6859      	ldr	r1, [r3, #4]
 8007334:	f001 fd60 	bl	8008df8 <_Balloc>
 8007338:	9005      	str	r0, [sp, #20]
 800733a:	2800      	cmp	r0, #0
 800733c:	f43f af0c 	beq.w	8007158 <_strtod_l+0x490>
 8007340:	9b07      	ldr	r3, [sp, #28]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	3202      	adds	r2, #2
 8007346:	f103 010c 	add.w	r1, r3, #12
 800734a:	0092      	lsls	r2, r2, #2
 800734c:	300c      	adds	r0, #12
 800734e:	f7fe fd99 	bl	8005e84 <memcpy>
 8007352:	ec4b ab10 	vmov	d0, sl, fp
 8007356:	aa1a      	add	r2, sp, #104	; 0x68
 8007358:	a919      	add	r1, sp, #100	; 0x64
 800735a:	4620      	mov	r0, r4
 800735c:	f002 f93a 	bl	80095d4 <__d2b>
 8007360:	ec4b ab18 	vmov	d8, sl, fp
 8007364:	9018      	str	r0, [sp, #96]	; 0x60
 8007366:	2800      	cmp	r0, #0
 8007368:	f43f aef6 	beq.w	8007158 <_strtod_l+0x490>
 800736c:	2101      	movs	r1, #1
 800736e:	4620      	mov	r0, r4
 8007370:	f001 fe84 	bl	800907c <__i2b>
 8007374:	4606      	mov	r6, r0
 8007376:	2800      	cmp	r0, #0
 8007378:	f43f aeee 	beq.w	8007158 <_strtod_l+0x490>
 800737c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800737e:	9904      	ldr	r1, [sp, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	bfab      	itete	ge
 8007384:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007386:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007388:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800738a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800738e:	bfac      	ite	ge
 8007390:	eb03 0902 	addge.w	r9, r3, r2
 8007394:	1ad7      	sublt	r7, r2, r3
 8007396:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007398:	eba3 0801 	sub.w	r8, r3, r1
 800739c:	4490      	add	r8, r2
 800739e:	4ba1      	ldr	r3, [pc, #644]	; (8007624 <_strtod_l+0x95c>)
 80073a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80073a4:	4598      	cmp	r8, r3
 80073a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80073aa:	f280 80c7 	bge.w	800753c <_strtod_l+0x874>
 80073ae:	eba3 0308 	sub.w	r3, r3, r8
 80073b2:	2b1f      	cmp	r3, #31
 80073b4:	eba2 0203 	sub.w	r2, r2, r3
 80073b8:	f04f 0101 	mov.w	r1, #1
 80073bc:	f300 80b1 	bgt.w	8007522 <_strtod_l+0x85a>
 80073c0:	fa01 f303 	lsl.w	r3, r1, r3
 80073c4:	930d      	str	r3, [sp, #52]	; 0x34
 80073c6:	2300      	movs	r3, #0
 80073c8:	9308      	str	r3, [sp, #32]
 80073ca:	eb09 0802 	add.w	r8, r9, r2
 80073ce:	9b04      	ldr	r3, [sp, #16]
 80073d0:	45c1      	cmp	r9, r8
 80073d2:	4417      	add	r7, r2
 80073d4:	441f      	add	r7, r3
 80073d6:	464b      	mov	r3, r9
 80073d8:	bfa8      	it	ge
 80073da:	4643      	movge	r3, r8
 80073dc:	42bb      	cmp	r3, r7
 80073de:	bfa8      	it	ge
 80073e0:	463b      	movge	r3, r7
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	bfc2      	ittt	gt
 80073e6:	eba8 0803 	subgt.w	r8, r8, r3
 80073ea:	1aff      	subgt	r7, r7, r3
 80073ec:	eba9 0903 	subgt.w	r9, r9, r3
 80073f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	dd17      	ble.n	8007426 <_strtod_l+0x75e>
 80073f6:	4631      	mov	r1, r6
 80073f8:	461a      	mov	r2, r3
 80073fa:	4620      	mov	r0, r4
 80073fc:	f001 fefe 	bl	80091fc <__pow5mult>
 8007400:	4606      	mov	r6, r0
 8007402:	2800      	cmp	r0, #0
 8007404:	f43f aea8 	beq.w	8007158 <_strtod_l+0x490>
 8007408:	4601      	mov	r1, r0
 800740a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800740c:	4620      	mov	r0, r4
 800740e:	f001 fe4b 	bl	80090a8 <__multiply>
 8007412:	900b      	str	r0, [sp, #44]	; 0x2c
 8007414:	2800      	cmp	r0, #0
 8007416:	f43f ae9f 	beq.w	8007158 <_strtod_l+0x490>
 800741a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800741c:	4620      	mov	r0, r4
 800741e:	f001 fd2b 	bl	8008e78 <_Bfree>
 8007422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007424:	9318      	str	r3, [sp, #96]	; 0x60
 8007426:	f1b8 0f00 	cmp.w	r8, #0
 800742a:	f300 808c 	bgt.w	8007546 <_strtod_l+0x87e>
 800742e:	9b06      	ldr	r3, [sp, #24]
 8007430:	2b00      	cmp	r3, #0
 8007432:	dd08      	ble.n	8007446 <_strtod_l+0x77e>
 8007434:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007436:	9905      	ldr	r1, [sp, #20]
 8007438:	4620      	mov	r0, r4
 800743a:	f001 fedf 	bl	80091fc <__pow5mult>
 800743e:	9005      	str	r0, [sp, #20]
 8007440:	2800      	cmp	r0, #0
 8007442:	f43f ae89 	beq.w	8007158 <_strtod_l+0x490>
 8007446:	2f00      	cmp	r7, #0
 8007448:	dd08      	ble.n	800745c <_strtod_l+0x794>
 800744a:	9905      	ldr	r1, [sp, #20]
 800744c:	463a      	mov	r2, r7
 800744e:	4620      	mov	r0, r4
 8007450:	f001 ff2e 	bl	80092b0 <__lshift>
 8007454:	9005      	str	r0, [sp, #20]
 8007456:	2800      	cmp	r0, #0
 8007458:	f43f ae7e 	beq.w	8007158 <_strtod_l+0x490>
 800745c:	f1b9 0f00 	cmp.w	r9, #0
 8007460:	dd08      	ble.n	8007474 <_strtod_l+0x7ac>
 8007462:	4631      	mov	r1, r6
 8007464:	464a      	mov	r2, r9
 8007466:	4620      	mov	r0, r4
 8007468:	f001 ff22 	bl	80092b0 <__lshift>
 800746c:	4606      	mov	r6, r0
 800746e:	2800      	cmp	r0, #0
 8007470:	f43f ae72 	beq.w	8007158 <_strtod_l+0x490>
 8007474:	9a05      	ldr	r2, [sp, #20]
 8007476:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007478:	4620      	mov	r0, r4
 800747a:	f001 ffa5 	bl	80093c8 <__mdiff>
 800747e:	4605      	mov	r5, r0
 8007480:	2800      	cmp	r0, #0
 8007482:	f43f ae69 	beq.w	8007158 <_strtod_l+0x490>
 8007486:	68c3      	ldr	r3, [r0, #12]
 8007488:	930b      	str	r3, [sp, #44]	; 0x2c
 800748a:	2300      	movs	r3, #0
 800748c:	60c3      	str	r3, [r0, #12]
 800748e:	4631      	mov	r1, r6
 8007490:	f001 ff7e 	bl	8009390 <__mcmp>
 8007494:	2800      	cmp	r0, #0
 8007496:	da60      	bge.n	800755a <_strtod_l+0x892>
 8007498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800749a:	ea53 030a 	orrs.w	r3, r3, sl
 800749e:	f040 8082 	bne.w	80075a6 <_strtod_l+0x8de>
 80074a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d17d      	bne.n	80075a6 <_strtod_l+0x8de>
 80074aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074ae:	0d1b      	lsrs	r3, r3, #20
 80074b0:	051b      	lsls	r3, r3, #20
 80074b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80074b6:	d976      	bls.n	80075a6 <_strtod_l+0x8de>
 80074b8:	696b      	ldr	r3, [r5, #20]
 80074ba:	b913      	cbnz	r3, 80074c2 <_strtod_l+0x7fa>
 80074bc:	692b      	ldr	r3, [r5, #16]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	dd71      	ble.n	80075a6 <_strtod_l+0x8de>
 80074c2:	4629      	mov	r1, r5
 80074c4:	2201      	movs	r2, #1
 80074c6:	4620      	mov	r0, r4
 80074c8:	f001 fef2 	bl	80092b0 <__lshift>
 80074cc:	4631      	mov	r1, r6
 80074ce:	4605      	mov	r5, r0
 80074d0:	f001 ff5e 	bl	8009390 <__mcmp>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	dd66      	ble.n	80075a6 <_strtod_l+0x8de>
 80074d8:	9904      	ldr	r1, [sp, #16]
 80074da:	4a53      	ldr	r2, [pc, #332]	; (8007628 <_strtod_l+0x960>)
 80074dc:	465b      	mov	r3, fp
 80074de:	2900      	cmp	r1, #0
 80074e0:	f000 8081 	beq.w	80075e6 <_strtod_l+0x91e>
 80074e4:	ea02 010b 	and.w	r1, r2, fp
 80074e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80074ec:	dc7b      	bgt.n	80075e6 <_strtod_l+0x91e>
 80074ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80074f2:	f77f aea9 	ble.w	8007248 <_strtod_l+0x580>
 80074f6:	4b4d      	ldr	r3, [pc, #308]	; (800762c <_strtod_l+0x964>)
 80074f8:	4650      	mov	r0, sl
 80074fa:	4659      	mov	r1, fp
 80074fc:	2200      	movs	r2, #0
 80074fe:	f7f9 f883 	bl	8000608 <__aeabi_dmul>
 8007502:	460b      	mov	r3, r1
 8007504:	4303      	orrs	r3, r0
 8007506:	bf08      	it	eq
 8007508:	2322      	moveq	r3, #34	; 0x22
 800750a:	4682      	mov	sl, r0
 800750c:	468b      	mov	fp, r1
 800750e:	bf08      	it	eq
 8007510:	6023      	streq	r3, [r4, #0]
 8007512:	e62b      	b.n	800716c <_strtod_l+0x4a4>
 8007514:	f04f 32ff 	mov.w	r2, #4294967295
 8007518:	fa02 f303 	lsl.w	r3, r2, r3
 800751c:	ea03 0a0a 	and.w	sl, r3, sl
 8007520:	e6e3      	b.n	80072ea <_strtod_l+0x622>
 8007522:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007526:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800752a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800752e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007532:	fa01 f308 	lsl.w	r3, r1, r8
 8007536:	9308      	str	r3, [sp, #32]
 8007538:	910d      	str	r1, [sp, #52]	; 0x34
 800753a:	e746      	b.n	80073ca <_strtod_l+0x702>
 800753c:	2300      	movs	r3, #0
 800753e:	9308      	str	r3, [sp, #32]
 8007540:	2301      	movs	r3, #1
 8007542:	930d      	str	r3, [sp, #52]	; 0x34
 8007544:	e741      	b.n	80073ca <_strtod_l+0x702>
 8007546:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007548:	4642      	mov	r2, r8
 800754a:	4620      	mov	r0, r4
 800754c:	f001 feb0 	bl	80092b0 <__lshift>
 8007550:	9018      	str	r0, [sp, #96]	; 0x60
 8007552:	2800      	cmp	r0, #0
 8007554:	f47f af6b 	bne.w	800742e <_strtod_l+0x766>
 8007558:	e5fe      	b.n	8007158 <_strtod_l+0x490>
 800755a:	465f      	mov	r7, fp
 800755c:	d16e      	bne.n	800763c <_strtod_l+0x974>
 800755e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007560:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007564:	b342      	cbz	r2, 80075b8 <_strtod_l+0x8f0>
 8007566:	4a32      	ldr	r2, [pc, #200]	; (8007630 <_strtod_l+0x968>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d128      	bne.n	80075be <_strtod_l+0x8f6>
 800756c:	9b04      	ldr	r3, [sp, #16]
 800756e:	4651      	mov	r1, sl
 8007570:	b1eb      	cbz	r3, 80075ae <_strtod_l+0x8e6>
 8007572:	4b2d      	ldr	r3, [pc, #180]	; (8007628 <_strtod_l+0x960>)
 8007574:	403b      	ands	r3, r7
 8007576:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800757a:	f04f 32ff 	mov.w	r2, #4294967295
 800757e:	d819      	bhi.n	80075b4 <_strtod_l+0x8ec>
 8007580:	0d1b      	lsrs	r3, r3, #20
 8007582:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007586:	fa02 f303 	lsl.w	r3, r2, r3
 800758a:	4299      	cmp	r1, r3
 800758c:	d117      	bne.n	80075be <_strtod_l+0x8f6>
 800758e:	4b29      	ldr	r3, [pc, #164]	; (8007634 <_strtod_l+0x96c>)
 8007590:	429f      	cmp	r7, r3
 8007592:	d102      	bne.n	800759a <_strtod_l+0x8d2>
 8007594:	3101      	adds	r1, #1
 8007596:	f43f addf 	beq.w	8007158 <_strtod_l+0x490>
 800759a:	4b23      	ldr	r3, [pc, #140]	; (8007628 <_strtod_l+0x960>)
 800759c:	403b      	ands	r3, r7
 800759e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80075a2:	f04f 0a00 	mov.w	sl, #0
 80075a6:	9b04      	ldr	r3, [sp, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1a4      	bne.n	80074f6 <_strtod_l+0x82e>
 80075ac:	e5de      	b.n	800716c <_strtod_l+0x4a4>
 80075ae:	f04f 33ff 	mov.w	r3, #4294967295
 80075b2:	e7ea      	b.n	800758a <_strtod_l+0x8c2>
 80075b4:	4613      	mov	r3, r2
 80075b6:	e7e8      	b.n	800758a <_strtod_l+0x8c2>
 80075b8:	ea53 030a 	orrs.w	r3, r3, sl
 80075bc:	d08c      	beq.n	80074d8 <_strtod_l+0x810>
 80075be:	9b08      	ldr	r3, [sp, #32]
 80075c0:	b1db      	cbz	r3, 80075fa <_strtod_l+0x932>
 80075c2:	423b      	tst	r3, r7
 80075c4:	d0ef      	beq.n	80075a6 <_strtod_l+0x8de>
 80075c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075c8:	9a04      	ldr	r2, [sp, #16]
 80075ca:	4650      	mov	r0, sl
 80075cc:	4659      	mov	r1, fp
 80075ce:	b1c3      	cbz	r3, 8007602 <_strtod_l+0x93a>
 80075d0:	f7ff fb5c 	bl	8006c8c <sulp>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	ec51 0b18 	vmov	r0, r1, d8
 80075dc:	f7f8 fe5e 	bl	800029c <__adddf3>
 80075e0:	4682      	mov	sl, r0
 80075e2:	468b      	mov	fp, r1
 80075e4:	e7df      	b.n	80075a6 <_strtod_l+0x8de>
 80075e6:	4013      	ands	r3, r2
 80075e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80075ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80075f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80075f4:	f04f 3aff 	mov.w	sl, #4294967295
 80075f8:	e7d5      	b.n	80075a6 <_strtod_l+0x8de>
 80075fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075fc:	ea13 0f0a 	tst.w	r3, sl
 8007600:	e7e0      	b.n	80075c4 <_strtod_l+0x8fc>
 8007602:	f7ff fb43 	bl	8006c8c <sulp>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	ec51 0b18 	vmov	r0, r1, d8
 800760e:	f7f8 fe43 	bl	8000298 <__aeabi_dsub>
 8007612:	2200      	movs	r2, #0
 8007614:	2300      	movs	r3, #0
 8007616:	4682      	mov	sl, r0
 8007618:	468b      	mov	fp, r1
 800761a:	f7f9 fa5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800761e:	2800      	cmp	r0, #0
 8007620:	d0c1      	beq.n	80075a6 <_strtod_l+0x8de>
 8007622:	e611      	b.n	8007248 <_strtod_l+0x580>
 8007624:	fffffc02 	.word	0xfffffc02
 8007628:	7ff00000 	.word	0x7ff00000
 800762c:	39500000 	.word	0x39500000
 8007630:	000fffff 	.word	0x000fffff
 8007634:	7fefffff 	.word	0x7fefffff
 8007638:	0800aff8 	.word	0x0800aff8
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	f002 f824 	bl	800968c <__ratio>
 8007644:	ec59 8b10 	vmov	r8, r9, d0
 8007648:	ee10 0a10 	vmov	r0, s0
 800764c:	2200      	movs	r2, #0
 800764e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007652:	4649      	mov	r1, r9
 8007654:	f7f9 fa54 	bl	8000b00 <__aeabi_dcmple>
 8007658:	2800      	cmp	r0, #0
 800765a:	d07a      	beq.n	8007752 <_strtod_l+0xa8a>
 800765c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800765e:	2b00      	cmp	r3, #0
 8007660:	d04a      	beq.n	80076f8 <_strtod_l+0xa30>
 8007662:	4b95      	ldr	r3, [pc, #596]	; (80078b8 <_strtod_l+0xbf0>)
 8007664:	2200      	movs	r2, #0
 8007666:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800766a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80078b8 <_strtod_l+0xbf0>
 800766e:	f04f 0800 	mov.w	r8, #0
 8007672:	4b92      	ldr	r3, [pc, #584]	; (80078bc <_strtod_l+0xbf4>)
 8007674:	403b      	ands	r3, r7
 8007676:	930d      	str	r3, [sp, #52]	; 0x34
 8007678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800767a:	4b91      	ldr	r3, [pc, #580]	; (80078c0 <_strtod_l+0xbf8>)
 800767c:	429a      	cmp	r2, r3
 800767e:	f040 80b0 	bne.w	80077e2 <_strtod_l+0xb1a>
 8007682:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007686:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800768a:	ec4b ab10 	vmov	d0, sl, fp
 800768e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007692:	f001 ff23 	bl	80094dc <__ulp>
 8007696:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800769a:	ec53 2b10 	vmov	r2, r3, d0
 800769e:	f7f8 ffb3 	bl	8000608 <__aeabi_dmul>
 80076a2:	4652      	mov	r2, sl
 80076a4:	465b      	mov	r3, fp
 80076a6:	f7f8 fdf9 	bl	800029c <__adddf3>
 80076aa:	460b      	mov	r3, r1
 80076ac:	4983      	ldr	r1, [pc, #524]	; (80078bc <_strtod_l+0xbf4>)
 80076ae:	4a85      	ldr	r2, [pc, #532]	; (80078c4 <_strtod_l+0xbfc>)
 80076b0:	4019      	ands	r1, r3
 80076b2:	4291      	cmp	r1, r2
 80076b4:	4682      	mov	sl, r0
 80076b6:	d960      	bls.n	800777a <_strtod_l+0xab2>
 80076b8:	ee18 3a90 	vmov	r3, s17
 80076bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d104      	bne.n	80076ce <_strtod_l+0xa06>
 80076c4:	ee18 3a10 	vmov	r3, s16
 80076c8:	3301      	adds	r3, #1
 80076ca:	f43f ad45 	beq.w	8007158 <_strtod_l+0x490>
 80076ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 80078d0 <_strtod_l+0xc08>
 80076d2:	f04f 3aff 	mov.w	sl, #4294967295
 80076d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076d8:	4620      	mov	r0, r4
 80076da:	f001 fbcd 	bl	8008e78 <_Bfree>
 80076de:	9905      	ldr	r1, [sp, #20]
 80076e0:	4620      	mov	r0, r4
 80076e2:	f001 fbc9 	bl	8008e78 <_Bfree>
 80076e6:	4631      	mov	r1, r6
 80076e8:	4620      	mov	r0, r4
 80076ea:	f001 fbc5 	bl	8008e78 <_Bfree>
 80076ee:	4629      	mov	r1, r5
 80076f0:	4620      	mov	r0, r4
 80076f2:	f001 fbc1 	bl	8008e78 <_Bfree>
 80076f6:	e61a      	b.n	800732e <_strtod_l+0x666>
 80076f8:	f1ba 0f00 	cmp.w	sl, #0
 80076fc:	d11b      	bne.n	8007736 <_strtod_l+0xa6e>
 80076fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007702:	b9f3      	cbnz	r3, 8007742 <_strtod_l+0xa7a>
 8007704:	4b6c      	ldr	r3, [pc, #432]	; (80078b8 <_strtod_l+0xbf0>)
 8007706:	2200      	movs	r2, #0
 8007708:	4640      	mov	r0, r8
 800770a:	4649      	mov	r1, r9
 800770c:	f7f9 f9ee 	bl	8000aec <__aeabi_dcmplt>
 8007710:	b9d0      	cbnz	r0, 8007748 <_strtod_l+0xa80>
 8007712:	4640      	mov	r0, r8
 8007714:	4649      	mov	r1, r9
 8007716:	4b6c      	ldr	r3, [pc, #432]	; (80078c8 <_strtod_l+0xc00>)
 8007718:	2200      	movs	r2, #0
 800771a:	f7f8 ff75 	bl	8000608 <__aeabi_dmul>
 800771e:	4680      	mov	r8, r0
 8007720:	4689      	mov	r9, r1
 8007722:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007726:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800772a:	9315      	str	r3, [sp, #84]	; 0x54
 800772c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007730:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007734:	e79d      	b.n	8007672 <_strtod_l+0x9aa>
 8007736:	f1ba 0f01 	cmp.w	sl, #1
 800773a:	d102      	bne.n	8007742 <_strtod_l+0xa7a>
 800773c:	2f00      	cmp	r7, #0
 800773e:	f43f ad83 	beq.w	8007248 <_strtod_l+0x580>
 8007742:	4b62      	ldr	r3, [pc, #392]	; (80078cc <_strtod_l+0xc04>)
 8007744:	2200      	movs	r2, #0
 8007746:	e78e      	b.n	8007666 <_strtod_l+0x99e>
 8007748:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80078c8 <_strtod_l+0xc00>
 800774c:	f04f 0800 	mov.w	r8, #0
 8007750:	e7e7      	b.n	8007722 <_strtod_l+0xa5a>
 8007752:	4b5d      	ldr	r3, [pc, #372]	; (80078c8 <_strtod_l+0xc00>)
 8007754:	4640      	mov	r0, r8
 8007756:	4649      	mov	r1, r9
 8007758:	2200      	movs	r2, #0
 800775a:	f7f8 ff55 	bl	8000608 <__aeabi_dmul>
 800775e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007760:	4680      	mov	r8, r0
 8007762:	4689      	mov	r9, r1
 8007764:	b933      	cbnz	r3, 8007774 <_strtod_l+0xaac>
 8007766:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800776a:	900e      	str	r0, [sp, #56]	; 0x38
 800776c:	930f      	str	r3, [sp, #60]	; 0x3c
 800776e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007772:	e7dd      	b.n	8007730 <_strtod_l+0xa68>
 8007774:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007778:	e7f9      	b.n	800776e <_strtod_l+0xaa6>
 800777a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800777e:	9b04      	ldr	r3, [sp, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1a8      	bne.n	80076d6 <_strtod_l+0xa0e>
 8007784:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800778a:	0d1b      	lsrs	r3, r3, #20
 800778c:	051b      	lsls	r3, r3, #20
 800778e:	429a      	cmp	r2, r3
 8007790:	d1a1      	bne.n	80076d6 <_strtod_l+0xa0e>
 8007792:	4640      	mov	r0, r8
 8007794:	4649      	mov	r1, r9
 8007796:	f7f9 fa97 	bl	8000cc8 <__aeabi_d2lz>
 800779a:	f7f8 ff07 	bl	80005ac <__aeabi_l2d>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4640      	mov	r0, r8
 80077a4:	4649      	mov	r1, r9
 80077a6:	f7f8 fd77 	bl	8000298 <__aeabi_dsub>
 80077aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077b0:	ea43 030a 	orr.w	r3, r3, sl
 80077b4:	4313      	orrs	r3, r2
 80077b6:	4680      	mov	r8, r0
 80077b8:	4689      	mov	r9, r1
 80077ba:	d055      	beq.n	8007868 <_strtod_l+0xba0>
 80077bc:	a336      	add	r3, pc, #216	; (adr r3, 8007898 <_strtod_l+0xbd0>)
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	f7f9 f993 	bl	8000aec <__aeabi_dcmplt>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f47f acd0 	bne.w	800716c <_strtod_l+0x4a4>
 80077cc:	a334      	add	r3, pc, #208	; (adr r3, 80078a0 <_strtod_l+0xbd8>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	4640      	mov	r0, r8
 80077d4:	4649      	mov	r1, r9
 80077d6:	f7f9 f9a7 	bl	8000b28 <__aeabi_dcmpgt>
 80077da:	2800      	cmp	r0, #0
 80077dc:	f43f af7b 	beq.w	80076d6 <_strtod_l+0xa0e>
 80077e0:	e4c4      	b.n	800716c <_strtod_l+0x4a4>
 80077e2:	9b04      	ldr	r3, [sp, #16]
 80077e4:	b333      	cbz	r3, 8007834 <_strtod_l+0xb6c>
 80077e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80077ec:	d822      	bhi.n	8007834 <_strtod_l+0xb6c>
 80077ee:	a32e      	add	r3, pc, #184	; (adr r3, 80078a8 <_strtod_l+0xbe0>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	4640      	mov	r0, r8
 80077f6:	4649      	mov	r1, r9
 80077f8:	f7f9 f982 	bl	8000b00 <__aeabi_dcmple>
 80077fc:	b1a0      	cbz	r0, 8007828 <_strtod_l+0xb60>
 80077fe:	4649      	mov	r1, r9
 8007800:	4640      	mov	r0, r8
 8007802:	f7f9 f9d9 	bl	8000bb8 <__aeabi_d2uiz>
 8007806:	2801      	cmp	r0, #1
 8007808:	bf38      	it	cc
 800780a:	2001      	movcc	r0, #1
 800780c:	f7f8 fe82 	bl	8000514 <__aeabi_ui2d>
 8007810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007812:	4680      	mov	r8, r0
 8007814:	4689      	mov	r9, r1
 8007816:	bb23      	cbnz	r3, 8007862 <_strtod_l+0xb9a>
 8007818:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800781c:	9010      	str	r0, [sp, #64]	; 0x40
 800781e:	9311      	str	r3, [sp, #68]	; 0x44
 8007820:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007824:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800782a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800782c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007830:	1a9b      	subs	r3, r3, r2
 8007832:	9309      	str	r3, [sp, #36]	; 0x24
 8007834:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007838:	eeb0 0a48 	vmov.f32	s0, s16
 800783c:	eef0 0a68 	vmov.f32	s1, s17
 8007840:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007844:	f001 fe4a 	bl	80094dc <__ulp>
 8007848:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800784c:	ec53 2b10 	vmov	r2, r3, d0
 8007850:	f7f8 feda 	bl	8000608 <__aeabi_dmul>
 8007854:	ec53 2b18 	vmov	r2, r3, d8
 8007858:	f7f8 fd20 	bl	800029c <__adddf3>
 800785c:	4682      	mov	sl, r0
 800785e:	468b      	mov	fp, r1
 8007860:	e78d      	b.n	800777e <_strtod_l+0xab6>
 8007862:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007866:	e7db      	b.n	8007820 <_strtod_l+0xb58>
 8007868:	a311      	add	r3, pc, #68	; (adr r3, 80078b0 <_strtod_l+0xbe8>)
 800786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786e:	f7f9 f93d 	bl	8000aec <__aeabi_dcmplt>
 8007872:	e7b2      	b.n	80077da <_strtod_l+0xb12>
 8007874:	2300      	movs	r3, #0
 8007876:	930a      	str	r3, [sp, #40]	; 0x28
 8007878:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800787a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	f7ff ba6b 	b.w	8006d58 <_strtod_l+0x90>
 8007882:	2a65      	cmp	r2, #101	; 0x65
 8007884:	f43f ab5f 	beq.w	8006f46 <_strtod_l+0x27e>
 8007888:	2a45      	cmp	r2, #69	; 0x45
 800788a:	f43f ab5c 	beq.w	8006f46 <_strtod_l+0x27e>
 800788e:	2301      	movs	r3, #1
 8007890:	f7ff bb94 	b.w	8006fbc <_strtod_l+0x2f4>
 8007894:	f3af 8000 	nop.w
 8007898:	94a03595 	.word	0x94a03595
 800789c:	3fdfffff 	.word	0x3fdfffff
 80078a0:	35afe535 	.word	0x35afe535
 80078a4:	3fe00000 	.word	0x3fe00000
 80078a8:	ffc00000 	.word	0xffc00000
 80078ac:	41dfffff 	.word	0x41dfffff
 80078b0:	94a03595 	.word	0x94a03595
 80078b4:	3fcfffff 	.word	0x3fcfffff
 80078b8:	3ff00000 	.word	0x3ff00000
 80078bc:	7ff00000 	.word	0x7ff00000
 80078c0:	7fe00000 	.word	0x7fe00000
 80078c4:	7c9fffff 	.word	0x7c9fffff
 80078c8:	3fe00000 	.word	0x3fe00000
 80078cc:	bff00000 	.word	0xbff00000
 80078d0:	7fefffff 	.word	0x7fefffff

080078d4 <_strtod_r>:
 80078d4:	4b01      	ldr	r3, [pc, #4]	; (80078dc <_strtod_r+0x8>)
 80078d6:	f7ff b9f7 	b.w	8006cc8 <_strtod_l>
 80078da:	bf00      	nop
 80078dc:	2000007c 	.word	0x2000007c

080078e0 <_strtol_l.constprop.0>:
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e6:	d001      	beq.n	80078ec <_strtol_l.constprop.0+0xc>
 80078e8:	2b24      	cmp	r3, #36	; 0x24
 80078ea:	d906      	bls.n	80078fa <_strtol_l.constprop.0+0x1a>
 80078ec:	f7fe faa0 	bl	8005e30 <__errno>
 80078f0:	2316      	movs	r3, #22
 80078f2:	6003      	str	r3, [r0, #0]
 80078f4:	2000      	movs	r0, #0
 80078f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80079e0 <_strtol_l.constprop.0+0x100>
 80078fe:	460d      	mov	r5, r1
 8007900:	462e      	mov	r6, r5
 8007902:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007906:	f814 700c 	ldrb.w	r7, [r4, ip]
 800790a:	f017 0708 	ands.w	r7, r7, #8
 800790e:	d1f7      	bne.n	8007900 <_strtol_l.constprop.0+0x20>
 8007910:	2c2d      	cmp	r4, #45	; 0x2d
 8007912:	d132      	bne.n	800797a <_strtol_l.constprop.0+0x9a>
 8007914:	782c      	ldrb	r4, [r5, #0]
 8007916:	2701      	movs	r7, #1
 8007918:	1cb5      	adds	r5, r6, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d05b      	beq.n	80079d6 <_strtol_l.constprop.0+0xf6>
 800791e:	2b10      	cmp	r3, #16
 8007920:	d109      	bne.n	8007936 <_strtol_l.constprop.0+0x56>
 8007922:	2c30      	cmp	r4, #48	; 0x30
 8007924:	d107      	bne.n	8007936 <_strtol_l.constprop.0+0x56>
 8007926:	782c      	ldrb	r4, [r5, #0]
 8007928:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800792c:	2c58      	cmp	r4, #88	; 0x58
 800792e:	d14d      	bne.n	80079cc <_strtol_l.constprop.0+0xec>
 8007930:	786c      	ldrb	r4, [r5, #1]
 8007932:	2310      	movs	r3, #16
 8007934:	3502      	adds	r5, #2
 8007936:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800793a:	f108 38ff 	add.w	r8, r8, #4294967295
 800793e:	f04f 0c00 	mov.w	ip, #0
 8007942:	fbb8 f9f3 	udiv	r9, r8, r3
 8007946:	4666      	mov	r6, ip
 8007948:	fb03 8a19 	mls	sl, r3, r9, r8
 800794c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007950:	f1be 0f09 	cmp.w	lr, #9
 8007954:	d816      	bhi.n	8007984 <_strtol_l.constprop.0+0xa4>
 8007956:	4674      	mov	r4, lr
 8007958:	42a3      	cmp	r3, r4
 800795a:	dd24      	ble.n	80079a6 <_strtol_l.constprop.0+0xc6>
 800795c:	f1bc 0f00 	cmp.w	ip, #0
 8007960:	db1e      	blt.n	80079a0 <_strtol_l.constprop.0+0xc0>
 8007962:	45b1      	cmp	r9, r6
 8007964:	d31c      	bcc.n	80079a0 <_strtol_l.constprop.0+0xc0>
 8007966:	d101      	bne.n	800796c <_strtol_l.constprop.0+0x8c>
 8007968:	45a2      	cmp	sl, r4
 800796a:	db19      	blt.n	80079a0 <_strtol_l.constprop.0+0xc0>
 800796c:	fb06 4603 	mla	r6, r6, r3, r4
 8007970:	f04f 0c01 	mov.w	ip, #1
 8007974:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007978:	e7e8      	b.n	800794c <_strtol_l.constprop.0+0x6c>
 800797a:	2c2b      	cmp	r4, #43	; 0x2b
 800797c:	bf04      	itt	eq
 800797e:	782c      	ldrbeq	r4, [r5, #0]
 8007980:	1cb5      	addeq	r5, r6, #2
 8007982:	e7ca      	b.n	800791a <_strtol_l.constprop.0+0x3a>
 8007984:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007988:	f1be 0f19 	cmp.w	lr, #25
 800798c:	d801      	bhi.n	8007992 <_strtol_l.constprop.0+0xb2>
 800798e:	3c37      	subs	r4, #55	; 0x37
 8007990:	e7e2      	b.n	8007958 <_strtol_l.constprop.0+0x78>
 8007992:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007996:	f1be 0f19 	cmp.w	lr, #25
 800799a:	d804      	bhi.n	80079a6 <_strtol_l.constprop.0+0xc6>
 800799c:	3c57      	subs	r4, #87	; 0x57
 800799e:	e7db      	b.n	8007958 <_strtol_l.constprop.0+0x78>
 80079a0:	f04f 3cff 	mov.w	ip, #4294967295
 80079a4:	e7e6      	b.n	8007974 <_strtol_l.constprop.0+0x94>
 80079a6:	f1bc 0f00 	cmp.w	ip, #0
 80079aa:	da05      	bge.n	80079b8 <_strtol_l.constprop.0+0xd8>
 80079ac:	2322      	movs	r3, #34	; 0x22
 80079ae:	6003      	str	r3, [r0, #0]
 80079b0:	4646      	mov	r6, r8
 80079b2:	b942      	cbnz	r2, 80079c6 <_strtol_l.constprop.0+0xe6>
 80079b4:	4630      	mov	r0, r6
 80079b6:	e79e      	b.n	80078f6 <_strtol_l.constprop.0+0x16>
 80079b8:	b107      	cbz	r7, 80079bc <_strtol_l.constprop.0+0xdc>
 80079ba:	4276      	negs	r6, r6
 80079bc:	2a00      	cmp	r2, #0
 80079be:	d0f9      	beq.n	80079b4 <_strtol_l.constprop.0+0xd4>
 80079c0:	f1bc 0f00 	cmp.w	ip, #0
 80079c4:	d000      	beq.n	80079c8 <_strtol_l.constprop.0+0xe8>
 80079c6:	1e69      	subs	r1, r5, #1
 80079c8:	6011      	str	r1, [r2, #0]
 80079ca:	e7f3      	b.n	80079b4 <_strtol_l.constprop.0+0xd4>
 80079cc:	2430      	movs	r4, #48	; 0x30
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1b1      	bne.n	8007936 <_strtol_l.constprop.0+0x56>
 80079d2:	2308      	movs	r3, #8
 80079d4:	e7af      	b.n	8007936 <_strtol_l.constprop.0+0x56>
 80079d6:	2c30      	cmp	r4, #48	; 0x30
 80079d8:	d0a5      	beq.n	8007926 <_strtol_l.constprop.0+0x46>
 80079da:	230a      	movs	r3, #10
 80079dc:	e7ab      	b.n	8007936 <_strtol_l.constprop.0+0x56>
 80079de:	bf00      	nop
 80079e0:	0800b021 	.word	0x0800b021

080079e4 <_strtol_r>:
 80079e4:	f7ff bf7c 	b.w	80078e0 <_strtol_l.constprop.0>

080079e8 <quorem>:
 80079e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	6903      	ldr	r3, [r0, #16]
 80079ee:	690c      	ldr	r4, [r1, #16]
 80079f0:	42a3      	cmp	r3, r4
 80079f2:	4607      	mov	r7, r0
 80079f4:	f2c0 8081 	blt.w	8007afa <quorem+0x112>
 80079f8:	3c01      	subs	r4, #1
 80079fa:	f101 0814 	add.w	r8, r1, #20
 80079fe:	f100 0514 	add.w	r5, r0, #20
 8007a02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a10:	3301      	adds	r3, #1
 8007a12:	429a      	cmp	r2, r3
 8007a14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a20:	d331      	bcc.n	8007a86 <quorem+0x9e>
 8007a22:	f04f 0e00 	mov.w	lr, #0
 8007a26:	4640      	mov	r0, r8
 8007a28:	46ac      	mov	ip, r5
 8007a2a:	46f2      	mov	sl, lr
 8007a2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a30:	b293      	uxth	r3, r2
 8007a32:	fb06 e303 	mla	r3, r6, r3, lr
 8007a36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	ebaa 0303 	sub.w	r3, sl, r3
 8007a40:	f8dc a000 	ldr.w	sl, [ip]
 8007a44:	0c12      	lsrs	r2, r2, #16
 8007a46:	fa13 f38a 	uxtah	r3, r3, sl
 8007a4a:	fb06 e202 	mla	r2, r6, r2, lr
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	9b00      	ldr	r3, [sp, #0]
 8007a52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a56:	b292      	uxth	r2, r2
 8007a58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a60:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a64:	4581      	cmp	r9, r0
 8007a66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a6a:	f84c 3b04 	str.w	r3, [ip], #4
 8007a6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a72:	d2db      	bcs.n	8007a2c <quorem+0x44>
 8007a74:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a78:	b92b      	cbnz	r3, 8007a86 <quorem+0x9e>
 8007a7a:	9b01      	ldr	r3, [sp, #4]
 8007a7c:	3b04      	subs	r3, #4
 8007a7e:	429d      	cmp	r5, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	d32e      	bcc.n	8007ae2 <quorem+0xfa>
 8007a84:	613c      	str	r4, [r7, #16]
 8007a86:	4638      	mov	r0, r7
 8007a88:	f001 fc82 	bl	8009390 <__mcmp>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	db24      	blt.n	8007ada <quorem+0xf2>
 8007a90:	3601      	adds	r6, #1
 8007a92:	4628      	mov	r0, r5
 8007a94:	f04f 0c00 	mov.w	ip, #0
 8007a98:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a9c:	f8d0 e000 	ldr.w	lr, [r0]
 8007aa0:	b293      	uxth	r3, r2
 8007aa2:	ebac 0303 	sub.w	r3, ip, r3
 8007aa6:	0c12      	lsrs	r2, r2, #16
 8007aa8:	fa13 f38e 	uxtah	r3, r3, lr
 8007aac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aba:	45c1      	cmp	r9, r8
 8007abc:	f840 3b04 	str.w	r3, [r0], #4
 8007ac0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ac4:	d2e8      	bcs.n	8007a98 <quorem+0xb0>
 8007ac6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ace:	b922      	cbnz	r2, 8007ada <quorem+0xf2>
 8007ad0:	3b04      	subs	r3, #4
 8007ad2:	429d      	cmp	r5, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	d30a      	bcc.n	8007aee <quorem+0x106>
 8007ad8:	613c      	str	r4, [r7, #16]
 8007ada:	4630      	mov	r0, r6
 8007adc:	b003      	add	sp, #12
 8007ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae2:	6812      	ldr	r2, [r2, #0]
 8007ae4:	3b04      	subs	r3, #4
 8007ae6:	2a00      	cmp	r2, #0
 8007ae8:	d1cc      	bne.n	8007a84 <quorem+0x9c>
 8007aea:	3c01      	subs	r4, #1
 8007aec:	e7c7      	b.n	8007a7e <quorem+0x96>
 8007aee:	6812      	ldr	r2, [r2, #0]
 8007af0:	3b04      	subs	r3, #4
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	d1f0      	bne.n	8007ad8 <quorem+0xf0>
 8007af6:	3c01      	subs	r4, #1
 8007af8:	e7eb      	b.n	8007ad2 <quorem+0xea>
 8007afa:	2000      	movs	r0, #0
 8007afc:	e7ee      	b.n	8007adc <quorem+0xf4>
	...

08007b00 <_dtoa_r>:
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	ed2d 8b04 	vpush	{d8-d9}
 8007b08:	ec57 6b10 	vmov	r6, r7, d0
 8007b0c:	b093      	sub	sp, #76	; 0x4c
 8007b0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b14:	9106      	str	r1, [sp, #24]
 8007b16:	ee10 aa10 	vmov	sl, s0
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b1e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b20:	46bb      	mov	fp, r7
 8007b22:	b975      	cbnz	r5, 8007b42 <_dtoa_r+0x42>
 8007b24:	2010      	movs	r0, #16
 8007b26:	f001 f94d 	bl	8008dc4 <malloc>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	6260      	str	r0, [r4, #36]	; 0x24
 8007b2e:	b920      	cbnz	r0, 8007b3a <_dtoa_r+0x3a>
 8007b30:	4ba7      	ldr	r3, [pc, #668]	; (8007dd0 <_dtoa_r+0x2d0>)
 8007b32:	21ea      	movs	r1, #234	; 0xea
 8007b34:	48a7      	ldr	r0, [pc, #668]	; (8007dd4 <_dtoa_r+0x2d4>)
 8007b36:	f002 f8ad 	bl	8009c94 <__assert_func>
 8007b3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b3e:	6005      	str	r5, [r0, #0]
 8007b40:	60c5      	str	r5, [r0, #12]
 8007b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b44:	6819      	ldr	r1, [r3, #0]
 8007b46:	b151      	cbz	r1, 8007b5e <_dtoa_r+0x5e>
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	604a      	str	r2, [r1, #4]
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	4093      	lsls	r3, r2
 8007b50:	608b      	str	r3, [r1, #8]
 8007b52:	4620      	mov	r0, r4
 8007b54:	f001 f990 	bl	8008e78 <_Bfree>
 8007b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	1e3b      	subs	r3, r7, #0
 8007b60:	bfaa      	itet	ge
 8007b62:	2300      	movge	r3, #0
 8007b64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007b68:	f8c8 3000 	strge.w	r3, [r8]
 8007b6c:	4b9a      	ldr	r3, [pc, #616]	; (8007dd8 <_dtoa_r+0x2d8>)
 8007b6e:	bfbc      	itt	lt
 8007b70:	2201      	movlt	r2, #1
 8007b72:	f8c8 2000 	strlt.w	r2, [r8]
 8007b76:	ea33 030b 	bics.w	r3, r3, fp
 8007b7a:	d11b      	bne.n	8007bb4 <_dtoa_r+0xb4>
 8007b7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b88:	4333      	orrs	r3, r6
 8007b8a:	f000 8592 	beq.w	80086b2 <_dtoa_r+0xbb2>
 8007b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b90:	b963      	cbnz	r3, 8007bac <_dtoa_r+0xac>
 8007b92:	4b92      	ldr	r3, [pc, #584]	; (8007ddc <_dtoa_r+0x2dc>)
 8007b94:	e022      	b.n	8007bdc <_dtoa_r+0xdc>
 8007b96:	4b92      	ldr	r3, [pc, #584]	; (8007de0 <_dtoa_r+0x2e0>)
 8007b98:	9301      	str	r3, [sp, #4]
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	9801      	ldr	r0, [sp, #4]
 8007ba2:	b013      	add	sp, #76	; 0x4c
 8007ba4:	ecbd 8b04 	vpop	{d8-d9}
 8007ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bac:	4b8b      	ldr	r3, [pc, #556]	; (8007ddc <_dtoa_r+0x2dc>)
 8007bae:	9301      	str	r3, [sp, #4]
 8007bb0:	3303      	adds	r3, #3
 8007bb2:	e7f3      	b.n	8007b9c <_dtoa_r+0x9c>
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	4650      	mov	r0, sl
 8007bba:	4659      	mov	r1, fp
 8007bbc:	f7f8 ff8c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bc0:	ec4b ab19 	vmov	d9, sl, fp
 8007bc4:	4680      	mov	r8, r0
 8007bc6:	b158      	cbz	r0, 8007be0 <_dtoa_r+0xe0>
 8007bc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bca:	2301      	movs	r3, #1
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 856b 	beq.w	80086ac <_dtoa_r+0xbac>
 8007bd6:	4883      	ldr	r0, [pc, #524]	; (8007de4 <_dtoa_r+0x2e4>)
 8007bd8:	6018      	str	r0, [r3, #0]
 8007bda:	1e43      	subs	r3, r0, #1
 8007bdc:	9301      	str	r3, [sp, #4]
 8007bde:	e7df      	b.n	8007ba0 <_dtoa_r+0xa0>
 8007be0:	ec4b ab10 	vmov	d0, sl, fp
 8007be4:	aa10      	add	r2, sp, #64	; 0x40
 8007be6:	a911      	add	r1, sp, #68	; 0x44
 8007be8:	4620      	mov	r0, r4
 8007bea:	f001 fcf3 	bl	80095d4 <__d2b>
 8007bee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007bf2:	ee08 0a10 	vmov	s16, r0
 8007bf6:	2d00      	cmp	r5, #0
 8007bf8:	f000 8084 	beq.w	8007d04 <_dtoa_r+0x204>
 8007bfc:	ee19 3a90 	vmov	r3, s19
 8007c00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c08:	4656      	mov	r6, sl
 8007c0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007c16:	4b74      	ldr	r3, [pc, #464]	; (8007de8 <_dtoa_r+0x2e8>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	f7f8 fb3b 	bl	8000298 <__aeabi_dsub>
 8007c22:	a365      	add	r3, pc, #404	; (adr r3, 8007db8 <_dtoa_r+0x2b8>)
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	f7f8 fcee 	bl	8000608 <__aeabi_dmul>
 8007c2c:	a364      	add	r3, pc, #400	; (adr r3, 8007dc0 <_dtoa_r+0x2c0>)
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f7f8 fb33 	bl	800029c <__adddf3>
 8007c36:	4606      	mov	r6, r0
 8007c38:	4628      	mov	r0, r5
 8007c3a:	460f      	mov	r7, r1
 8007c3c:	f7f8 fc7a 	bl	8000534 <__aeabi_i2d>
 8007c40:	a361      	add	r3, pc, #388	; (adr r3, 8007dc8 <_dtoa_r+0x2c8>)
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	f7f8 fcdf 	bl	8000608 <__aeabi_dmul>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4630      	mov	r0, r6
 8007c50:	4639      	mov	r1, r7
 8007c52:	f7f8 fb23 	bl	800029c <__adddf3>
 8007c56:	4606      	mov	r6, r0
 8007c58:	460f      	mov	r7, r1
 8007c5a:	f7f8 ff85 	bl	8000b68 <__aeabi_d2iz>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	9000      	str	r0, [sp, #0]
 8007c62:	2300      	movs	r3, #0
 8007c64:	4630      	mov	r0, r6
 8007c66:	4639      	mov	r1, r7
 8007c68:	f7f8 ff40 	bl	8000aec <__aeabi_dcmplt>
 8007c6c:	b150      	cbz	r0, 8007c84 <_dtoa_r+0x184>
 8007c6e:	9800      	ldr	r0, [sp, #0]
 8007c70:	f7f8 fc60 	bl	8000534 <__aeabi_i2d>
 8007c74:	4632      	mov	r2, r6
 8007c76:	463b      	mov	r3, r7
 8007c78:	f7f8 ff2e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c7c:	b910      	cbnz	r0, 8007c84 <_dtoa_r+0x184>
 8007c7e:	9b00      	ldr	r3, [sp, #0]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	9b00      	ldr	r3, [sp, #0]
 8007c86:	2b16      	cmp	r3, #22
 8007c88:	d85a      	bhi.n	8007d40 <_dtoa_r+0x240>
 8007c8a:	9a00      	ldr	r2, [sp, #0]
 8007c8c:	4b57      	ldr	r3, [pc, #348]	; (8007dec <_dtoa_r+0x2ec>)
 8007c8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	ec51 0b19 	vmov	r0, r1, d9
 8007c9a:	f7f8 ff27 	bl	8000aec <__aeabi_dcmplt>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d050      	beq.n	8007d44 <_dtoa_r+0x244>
 8007ca2:	9b00      	ldr	r3, [sp, #0]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	2300      	movs	r3, #0
 8007caa:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cae:	1b5d      	subs	r5, r3, r5
 8007cb0:	1e6b      	subs	r3, r5, #1
 8007cb2:	9305      	str	r3, [sp, #20]
 8007cb4:	bf45      	ittet	mi
 8007cb6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007cba:	9304      	strmi	r3, [sp, #16]
 8007cbc:	2300      	movpl	r3, #0
 8007cbe:	2300      	movmi	r3, #0
 8007cc0:	bf4c      	ite	mi
 8007cc2:	9305      	strmi	r3, [sp, #20]
 8007cc4:	9304      	strpl	r3, [sp, #16]
 8007cc6:	9b00      	ldr	r3, [sp, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	db3d      	blt.n	8007d48 <_dtoa_r+0x248>
 8007ccc:	9b05      	ldr	r3, [sp, #20]
 8007cce:	9a00      	ldr	r2, [sp, #0]
 8007cd0:	920a      	str	r2, [sp, #40]	; 0x28
 8007cd2:	4413      	add	r3, r2
 8007cd4:	9305      	str	r3, [sp, #20]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	9307      	str	r3, [sp, #28]
 8007cda:	9b06      	ldr	r3, [sp, #24]
 8007cdc:	2b09      	cmp	r3, #9
 8007cde:	f200 8089 	bhi.w	8007df4 <_dtoa_r+0x2f4>
 8007ce2:	2b05      	cmp	r3, #5
 8007ce4:	bfc4      	itt	gt
 8007ce6:	3b04      	subgt	r3, #4
 8007ce8:	9306      	strgt	r3, [sp, #24]
 8007cea:	9b06      	ldr	r3, [sp, #24]
 8007cec:	f1a3 0302 	sub.w	r3, r3, #2
 8007cf0:	bfcc      	ite	gt
 8007cf2:	2500      	movgt	r5, #0
 8007cf4:	2501      	movle	r5, #1
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	f200 8087 	bhi.w	8007e0a <_dtoa_r+0x30a>
 8007cfc:	e8df f003 	tbb	[pc, r3]
 8007d00:	59383a2d 	.word	0x59383a2d
 8007d04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d08:	441d      	add	r5, r3
 8007d0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d0e:	2b20      	cmp	r3, #32
 8007d10:	bfc1      	itttt	gt
 8007d12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d1a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007d1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d22:	bfda      	itte	le
 8007d24:	f1c3 0320 	rsble	r3, r3, #32
 8007d28:	fa06 f003 	lslle.w	r0, r6, r3
 8007d2c:	4318      	orrgt	r0, r3
 8007d2e:	f7f8 fbf1 	bl	8000514 <__aeabi_ui2d>
 8007d32:	2301      	movs	r3, #1
 8007d34:	4606      	mov	r6, r0
 8007d36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d3a:	3d01      	subs	r5, #1
 8007d3c:	930e      	str	r3, [sp, #56]	; 0x38
 8007d3e:	e76a      	b.n	8007c16 <_dtoa_r+0x116>
 8007d40:	2301      	movs	r3, #1
 8007d42:	e7b2      	b.n	8007caa <_dtoa_r+0x1aa>
 8007d44:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d46:	e7b1      	b.n	8007cac <_dtoa_r+0x1ac>
 8007d48:	9b04      	ldr	r3, [sp, #16]
 8007d4a:	9a00      	ldr	r2, [sp, #0]
 8007d4c:	1a9b      	subs	r3, r3, r2
 8007d4e:	9304      	str	r3, [sp, #16]
 8007d50:	4253      	negs	r3, r2
 8007d52:	9307      	str	r3, [sp, #28]
 8007d54:	2300      	movs	r3, #0
 8007d56:	930a      	str	r3, [sp, #40]	; 0x28
 8007d58:	e7bf      	b.n	8007cda <_dtoa_r+0x1da>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9308      	str	r3, [sp, #32]
 8007d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	dc55      	bgt.n	8007e10 <_dtoa_r+0x310>
 8007d64:	2301      	movs	r3, #1
 8007d66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d6e:	e00c      	b.n	8007d8a <_dtoa_r+0x28a>
 8007d70:	2301      	movs	r3, #1
 8007d72:	e7f3      	b.n	8007d5c <_dtoa_r+0x25c>
 8007d74:	2300      	movs	r3, #0
 8007d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d78:	9308      	str	r3, [sp, #32]
 8007d7a:	9b00      	ldr	r3, [sp, #0]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	9302      	str	r3, [sp, #8]
 8007d80:	3301      	adds	r3, #1
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	9303      	str	r3, [sp, #12]
 8007d86:	bfb8      	it	lt
 8007d88:	2301      	movlt	r3, #1
 8007d8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	6042      	str	r2, [r0, #4]
 8007d90:	2204      	movs	r2, #4
 8007d92:	f102 0614 	add.w	r6, r2, #20
 8007d96:	429e      	cmp	r6, r3
 8007d98:	6841      	ldr	r1, [r0, #4]
 8007d9a:	d93d      	bls.n	8007e18 <_dtoa_r+0x318>
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f001 f82b 	bl	8008df8 <_Balloc>
 8007da2:	9001      	str	r0, [sp, #4]
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d13b      	bne.n	8007e20 <_dtoa_r+0x320>
 8007da8:	4b11      	ldr	r3, [pc, #68]	; (8007df0 <_dtoa_r+0x2f0>)
 8007daa:	4602      	mov	r2, r0
 8007dac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007db0:	e6c0      	b.n	8007b34 <_dtoa_r+0x34>
 8007db2:	2301      	movs	r3, #1
 8007db4:	e7df      	b.n	8007d76 <_dtoa_r+0x276>
 8007db6:	bf00      	nop
 8007db8:	636f4361 	.word	0x636f4361
 8007dbc:	3fd287a7 	.word	0x3fd287a7
 8007dc0:	8b60c8b3 	.word	0x8b60c8b3
 8007dc4:	3fc68a28 	.word	0x3fc68a28
 8007dc8:	509f79fb 	.word	0x509f79fb
 8007dcc:	3fd34413 	.word	0x3fd34413
 8007dd0:	0800b12e 	.word	0x0800b12e
 8007dd4:	0800b145 	.word	0x0800b145
 8007dd8:	7ff00000 	.word	0x7ff00000
 8007ddc:	0800b12a 	.word	0x0800b12a
 8007de0:	0800b121 	.word	0x0800b121
 8007de4:	0800afa1 	.word	0x0800afa1
 8007de8:	3ff80000 	.word	0x3ff80000
 8007dec:	0800b2b0 	.word	0x0800b2b0
 8007df0:	0800b1a0 	.word	0x0800b1a0
 8007df4:	2501      	movs	r5, #1
 8007df6:	2300      	movs	r3, #0
 8007df8:	9306      	str	r3, [sp, #24]
 8007dfa:	9508      	str	r5, [sp, #32]
 8007dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8007e00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e04:	2200      	movs	r2, #0
 8007e06:	2312      	movs	r3, #18
 8007e08:	e7b0      	b.n	8007d6c <_dtoa_r+0x26c>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	9308      	str	r3, [sp, #32]
 8007e0e:	e7f5      	b.n	8007dfc <_dtoa_r+0x2fc>
 8007e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e16:	e7b8      	b.n	8007d8a <_dtoa_r+0x28a>
 8007e18:	3101      	adds	r1, #1
 8007e1a:	6041      	str	r1, [r0, #4]
 8007e1c:	0052      	lsls	r2, r2, #1
 8007e1e:	e7b8      	b.n	8007d92 <_dtoa_r+0x292>
 8007e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e22:	9a01      	ldr	r2, [sp, #4]
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	9b03      	ldr	r3, [sp, #12]
 8007e28:	2b0e      	cmp	r3, #14
 8007e2a:	f200 809d 	bhi.w	8007f68 <_dtoa_r+0x468>
 8007e2e:	2d00      	cmp	r5, #0
 8007e30:	f000 809a 	beq.w	8007f68 <_dtoa_r+0x468>
 8007e34:	9b00      	ldr	r3, [sp, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	dd32      	ble.n	8007ea0 <_dtoa_r+0x3a0>
 8007e3a:	4ab7      	ldr	r2, [pc, #732]	; (8008118 <_dtoa_r+0x618>)
 8007e3c:	f003 030f 	and.w	r3, r3, #15
 8007e40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e48:	9b00      	ldr	r3, [sp, #0]
 8007e4a:	05d8      	lsls	r0, r3, #23
 8007e4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e50:	d516      	bpl.n	8007e80 <_dtoa_r+0x380>
 8007e52:	4bb2      	ldr	r3, [pc, #712]	; (800811c <_dtoa_r+0x61c>)
 8007e54:	ec51 0b19 	vmov	r0, r1, d9
 8007e58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e5c:	f7f8 fcfe 	bl	800085c <__aeabi_ddiv>
 8007e60:	f007 070f 	and.w	r7, r7, #15
 8007e64:	4682      	mov	sl, r0
 8007e66:	468b      	mov	fp, r1
 8007e68:	2503      	movs	r5, #3
 8007e6a:	4eac      	ldr	r6, [pc, #688]	; (800811c <_dtoa_r+0x61c>)
 8007e6c:	b957      	cbnz	r7, 8007e84 <_dtoa_r+0x384>
 8007e6e:	4642      	mov	r2, r8
 8007e70:	464b      	mov	r3, r9
 8007e72:	4650      	mov	r0, sl
 8007e74:	4659      	mov	r1, fp
 8007e76:	f7f8 fcf1 	bl	800085c <__aeabi_ddiv>
 8007e7a:	4682      	mov	sl, r0
 8007e7c:	468b      	mov	fp, r1
 8007e7e:	e028      	b.n	8007ed2 <_dtoa_r+0x3d2>
 8007e80:	2502      	movs	r5, #2
 8007e82:	e7f2      	b.n	8007e6a <_dtoa_r+0x36a>
 8007e84:	07f9      	lsls	r1, r7, #31
 8007e86:	d508      	bpl.n	8007e9a <_dtoa_r+0x39a>
 8007e88:	4640      	mov	r0, r8
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e90:	f7f8 fbba 	bl	8000608 <__aeabi_dmul>
 8007e94:	3501      	adds	r5, #1
 8007e96:	4680      	mov	r8, r0
 8007e98:	4689      	mov	r9, r1
 8007e9a:	107f      	asrs	r7, r7, #1
 8007e9c:	3608      	adds	r6, #8
 8007e9e:	e7e5      	b.n	8007e6c <_dtoa_r+0x36c>
 8007ea0:	f000 809b 	beq.w	8007fda <_dtoa_r+0x4da>
 8007ea4:	9b00      	ldr	r3, [sp, #0]
 8007ea6:	4f9d      	ldr	r7, [pc, #628]	; (800811c <_dtoa_r+0x61c>)
 8007ea8:	425e      	negs	r6, r3
 8007eaa:	4b9b      	ldr	r3, [pc, #620]	; (8008118 <_dtoa_r+0x618>)
 8007eac:	f006 020f 	and.w	r2, r6, #15
 8007eb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	ec51 0b19 	vmov	r0, r1, d9
 8007ebc:	f7f8 fba4 	bl	8000608 <__aeabi_dmul>
 8007ec0:	1136      	asrs	r6, r6, #4
 8007ec2:	4682      	mov	sl, r0
 8007ec4:	468b      	mov	fp, r1
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2502      	movs	r5, #2
 8007eca:	2e00      	cmp	r6, #0
 8007ecc:	d17a      	bne.n	8007fc4 <_dtoa_r+0x4c4>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1d3      	bne.n	8007e7a <_dtoa_r+0x37a>
 8007ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 8082 	beq.w	8007fde <_dtoa_r+0x4de>
 8007eda:	4b91      	ldr	r3, [pc, #580]	; (8008120 <_dtoa_r+0x620>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	4650      	mov	r0, sl
 8007ee0:	4659      	mov	r1, fp
 8007ee2:	f7f8 fe03 	bl	8000aec <__aeabi_dcmplt>
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d079      	beq.n	8007fde <_dtoa_r+0x4de>
 8007eea:	9b03      	ldr	r3, [sp, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d076      	beq.n	8007fde <_dtoa_r+0x4de>
 8007ef0:	9b02      	ldr	r3, [sp, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	dd36      	ble.n	8007f64 <_dtoa_r+0x464>
 8007ef6:	9b00      	ldr	r3, [sp, #0]
 8007ef8:	4650      	mov	r0, sl
 8007efa:	4659      	mov	r1, fp
 8007efc:	1e5f      	subs	r7, r3, #1
 8007efe:	2200      	movs	r2, #0
 8007f00:	4b88      	ldr	r3, [pc, #544]	; (8008124 <_dtoa_r+0x624>)
 8007f02:	f7f8 fb81 	bl	8000608 <__aeabi_dmul>
 8007f06:	9e02      	ldr	r6, [sp, #8]
 8007f08:	4682      	mov	sl, r0
 8007f0a:	468b      	mov	fp, r1
 8007f0c:	3501      	adds	r5, #1
 8007f0e:	4628      	mov	r0, r5
 8007f10:	f7f8 fb10 	bl	8000534 <__aeabi_i2d>
 8007f14:	4652      	mov	r2, sl
 8007f16:	465b      	mov	r3, fp
 8007f18:	f7f8 fb76 	bl	8000608 <__aeabi_dmul>
 8007f1c:	4b82      	ldr	r3, [pc, #520]	; (8008128 <_dtoa_r+0x628>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f7f8 f9bc 	bl	800029c <__adddf3>
 8007f24:	46d0      	mov	r8, sl
 8007f26:	46d9      	mov	r9, fp
 8007f28:	4682      	mov	sl, r0
 8007f2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007f2e:	2e00      	cmp	r6, #0
 8007f30:	d158      	bne.n	8007fe4 <_dtoa_r+0x4e4>
 8007f32:	4b7e      	ldr	r3, [pc, #504]	; (800812c <_dtoa_r+0x62c>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	4640      	mov	r0, r8
 8007f38:	4649      	mov	r1, r9
 8007f3a:	f7f8 f9ad 	bl	8000298 <__aeabi_dsub>
 8007f3e:	4652      	mov	r2, sl
 8007f40:	465b      	mov	r3, fp
 8007f42:	4680      	mov	r8, r0
 8007f44:	4689      	mov	r9, r1
 8007f46:	f7f8 fdef 	bl	8000b28 <__aeabi_dcmpgt>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	f040 8295 	bne.w	800847a <_dtoa_r+0x97a>
 8007f50:	4652      	mov	r2, sl
 8007f52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f56:	4640      	mov	r0, r8
 8007f58:	4649      	mov	r1, r9
 8007f5a:	f7f8 fdc7 	bl	8000aec <__aeabi_dcmplt>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f040 8289 	bne.w	8008476 <_dtoa_r+0x976>
 8007f64:	ec5b ab19 	vmov	sl, fp, d9
 8007f68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f2c0 8148 	blt.w	8008200 <_dtoa_r+0x700>
 8007f70:	9a00      	ldr	r2, [sp, #0]
 8007f72:	2a0e      	cmp	r2, #14
 8007f74:	f300 8144 	bgt.w	8008200 <_dtoa_r+0x700>
 8007f78:	4b67      	ldr	r3, [pc, #412]	; (8008118 <_dtoa_r+0x618>)
 8007f7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f280 80d5 	bge.w	8008134 <_dtoa_r+0x634>
 8007f8a:	9b03      	ldr	r3, [sp, #12]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f300 80d1 	bgt.w	8008134 <_dtoa_r+0x634>
 8007f92:	f040 826f 	bne.w	8008474 <_dtoa_r+0x974>
 8007f96:	4b65      	ldr	r3, [pc, #404]	; (800812c <_dtoa_r+0x62c>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	f7f8 fb33 	bl	8000608 <__aeabi_dmul>
 8007fa2:	4652      	mov	r2, sl
 8007fa4:	465b      	mov	r3, fp
 8007fa6:	f7f8 fdb5 	bl	8000b14 <__aeabi_dcmpge>
 8007faa:	9e03      	ldr	r6, [sp, #12]
 8007fac:	4637      	mov	r7, r6
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f040 8245 	bne.w	800843e <_dtoa_r+0x93e>
 8007fb4:	9d01      	ldr	r5, [sp, #4]
 8007fb6:	2331      	movs	r3, #49	; 0x31
 8007fb8:	f805 3b01 	strb.w	r3, [r5], #1
 8007fbc:	9b00      	ldr	r3, [sp, #0]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	e240      	b.n	8008446 <_dtoa_r+0x946>
 8007fc4:	07f2      	lsls	r2, r6, #31
 8007fc6:	d505      	bpl.n	8007fd4 <_dtoa_r+0x4d4>
 8007fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fcc:	f7f8 fb1c 	bl	8000608 <__aeabi_dmul>
 8007fd0:	3501      	adds	r5, #1
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	1076      	asrs	r6, r6, #1
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	e777      	b.n	8007eca <_dtoa_r+0x3ca>
 8007fda:	2502      	movs	r5, #2
 8007fdc:	e779      	b.n	8007ed2 <_dtoa_r+0x3d2>
 8007fde:	9f00      	ldr	r7, [sp, #0]
 8007fe0:	9e03      	ldr	r6, [sp, #12]
 8007fe2:	e794      	b.n	8007f0e <_dtoa_r+0x40e>
 8007fe4:	9901      	ldr	r1, [sp, #4]
 8007fe6:	4b4c      	ldr	r3, [pc, #304]	; (8008118 <_dtoa_r+0x618>)
 8007fe8:	4431      	add	r1, r6
 8007fea:	910d      	str	r1, [sp, #52]	; 0x34
 8007fec:	9908      	ldr	r1, [sp, #32]
 8007fee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ff2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ff6:	2900      	cmp	r1, #0
 8007ff8:	d043      	beq.n	8008082 <_dtoa_r+0x582>
 8007ffa:	494d      	ldr	r1, [pc, #308]	; (8008130 <_dtoa_r+0x630>)
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	f7f8 fc2d 	bl	800085c <__aeabi_ddiv>
 8008002:	4652      	mov	r2, sl
 8008004:	465b      	mov	r3, fp
 8008006:	f7f8 f947 	bl	8000298 <__aeabi_dsub>
 800800a:	9d01      	ldr	r5, [sp, #4]
 800800c:	4682      	mov	sl, r0
 800800e:	468b      	mov	fp, r1
 8008010:	4649      	mov	r1, r9
 8008012:	4640      	mov	r0, r8
 8008014:	f7f8 fda8 	bl	8000b68 <__aeabi_d2iz>
 8008018:	4606      	mov	r6, r0
 800801a:	f7f8 fa8b 	bl	8000534 <__aeabi_i2d>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4640      	mov	r0, r8
 8008024:	4649      	mov	r1, r9
 8008026:	f7f8 f937 	bl	8000298 <__aeabi_dsub>
 800802a:	3630      	adds	r6, #48	; 0x30
 800802c:	f805 6b01 	strb.w	r6, [r5], #1
 8008030:	4652      	mov	r2, sl
 8008032:	465b      	mov	r3, fp
 8008034:	4680      	mov	r8, r0
 8008036:	4689      	mov	r9, r1
 8008038:	f7f8 fd58 	bl	8000aec <__aeabi_dcmplt>
 800803c:	2800      	cmp	r0, #0
 800803e:	d163      	bne.n	8008108 <_dtoa_r+0x608>
 8008040:	4642      	mov	r2, r8
 8008042:	464b      	mov	r3, r9
 8008044:	4936      	ldr	r1, [pc, #216]	; (8008120 <_dtoa_r+0x620>)
 8008046:	2000      	movs	r0, #0
 8008048:	f7f8 f926 	bl	8000298 <__aeabi_dsub>
 800804c:	4652      	mov	r2, sl
 800804e:	465b      	mov	r3, fp
 8008050:	f7f8 fd4c 	bl	8000aec <__aeabi_dcmplt>
 8008054:	2800      	cmp	r0, #0
 8008056:	f040 80b5 	bne.w	80081c4 <_dtoa_r+0x6c4>
 800805a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800805c:	429d      	cmp	r5, r3
 800805e:	d081      	beq.n	8007f64 <_dtoa_r+0x464>
 8008060:	4b30      	ldr	r3, [pc, #192]	; (8008124 <_dtoa_r+0x624>)
 8008062:	2200      	movs	r2, #0
 8008064:	4650      	mov	r0, sl
 8008066:	4659      	mov	r1, fp
 8008068:	f7f8 face 	bl	8000608 <__aeabi_dmul>
 800806c:	4b2d      	ldr	r3, [pc, #180]	; (8008124 <_dtoa_r+0x624>)
 800806e:	4682      	mov	sl, r0
 8008070:	468b      	mov	fp, r1
 8008072:	4640      	mov	r0, r8
 8008074:	4649      	mov	r1, r9
 8008076:	2200      	movs	r2, #0
 8008078:	f7f8 fac6 	bl	8000608 <__aeabi_dmul>
 800807c:	4680      	mov	r8, r0
 800807e:	4689      	mov	r9, r1
 8008080:	e7c6      	b.n	8008010 <_dtoa_r+0x510>
 8008082:	4650      	mov	r0, sl
 8008084:	4659      	mov	r1, fp
 8008086:	f7f8 fabf 	bl	8000608 <__aeabi_dmul>
 800808a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800808c:	9d01      	ldr	r5, [sp, #4]
 800808e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008090:	4682      	mov	sl, r0
 8008092:	468b      	mov	fp, r1
 8008094:	4649      	mov	r1, r9
 8008096:	4640      	mov	r0, r8
 8008098:	f7f8 fd66 	bl	8000b68 <__aeabi_d2iz>
 800809c:	4606      	mov	r6, r0
 800809e:	f7f8 fa49 	bl	8000534 <__aeabi_i2d>
 80080a2:	3630      	adds	r6, #48	; 0x30
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4640      	mov	r0, r8
 80080aa:	4649      	mov	r1, r9
 80080ac:	f7f8 f8f4 	bl	8000298 <__aeabi_dsub>
 80080b0:	f805 6b01 	strb.w	r6, [r5], #1
 80080b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080b6:	429d      	cmp	r5, r3
 80080b8:	4680      	mov	r8, r0
 80080ba:	4689      	mov	r9, r1
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	d124      	bne.n	800810c <_dtoa_r+0x60c>
 80080c2:	4b1b      	ldr	r3, [pc, #108]	; (8008130 <_dtoa_r+0x630>)
 80080c4:	4650      	mov	r0, sl
 80080c6:	4659      	mov	r1, fp
 80080c8:	f7f8 f8e8 	bl	800029c <__adddf3>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4640      	mov	r0, r8
 80080d2:	4649      	mov	r1, r9
 80080d4:	f7f8 fd28 	bl	8000b28 <__aeabi_dcmpgt>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d173      	bne.n	80081c4 <_dtoa_r+0x6c4>
 80080dc:	4652      	mov	r2, sl
 80080de:	465b      	mov	r3, fp
 80080e0:	4913      	ldr	r1, [pc, #76]	; (8008130 <_dtoa_r+0x630>)
 80080e2:	2000      	movs	r0, #0
 80080e4:	f7f8 f8d8 	bl	8000298 <__aeabi_dsub>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4640      	mov	r0, r8
 80080ee:	4649      	mov	r1, r9
 80080f0:	f7f8 fcfc 	bl	8000aec <__aeabi_dcmplt>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	f43f af35 	beq.w	8007f64 <_dtoa_r+0x464>
 80080fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80080fc:	1e6b      	subs	r3, r5, #1
 80080fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008100:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008104:	2b30      	cmp	r3, #48	; 0x30
 8008106:	d0f8      	beq.n	80080fa <_dtoa_r+0x5fa>
 8008108:	9700      	str	r7, [sp, #0]
 800810a:	e049      	b.n	80081a0 <_dtoa_r+0x6a0>
 800810c:	4b05      	ldr	r3, [pc, #20]	; (8008124 <_dtoa_r+0x624>)
 800810e:	f7f8 fa7b 	bl	8000608 <__aeabi_dmul>
 8008112:	4680      	mov	r8, r0
 8008114:	4689      	mov	r9, r1
 8008116:	e7bd      	b.n	8008094 <_dtoa_r+0x594>
 8008118:	0800b2b0 	.word	0x0800b2b0
 800811c:	0800b288 	.word	0x0800b288
 8008120:	3ff00000 	.word	0x3ff00000
 8008124:	40240000 	.word	0x40240000
 8008128:	401c0000 	.word	0x401c0000
 800812c:	40140000 	.word	0x40140000
 8008130:	3fe00000 	.word	0x3fe00000
 8008134:	9d01      	ldr	r5, [sp, #4]
 8008136:	4656      	mov	r6, sl
 8008138:	465f      	mov	r7, fp
 800813a:	4642      	mov	r2, r8
 800813c:	464b      	mov	r3, r9
 800813e:	4630      	mov	r0, r6
 8008140:	4639      	mov	r1, r7
 8008142:	f7f8 fb8b 	bl	800085c <__aeabi_ddiv>
 8008146:	f7f8 fd0f 	bl	8000b68 <__aeabi_d2iz>
 800814a:	4682      	mov	sl, r0
 800814c:	f7f8 f9f2 	bl	8000534 <__aeabi_i2d>
 8008150:	4642      	mov	r2, r8
 8008152:	464b      	mov	r3, r9
 8008154:	f7f8 fa58 	bl	8000608 <__aeabi_dmul>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4630      	mov	r0, r6
 800815e:	4639      	mov	r1, r7
 8008160:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008164:	f7f8 f898 	bl	8000298 <__aeabi_dsub>
 8008168:	f805 6b01 	strb.w	r6, [r5], #1
 800816c:	9e01      	ldr	r6, [sp, #4]
 800816e:	9f03      	ldr	r7, [sp, #12]
 8008170:	1bae      	subs	r6, r5, r6
 8008172:	42b7      	cmp	r7, r6
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	d135      	bne.n	80081e6 <_dtoa_r+0x6e6>
 800817a:	f7f8 f88f 	bl	800029c <__adddf3>
 800817e:	4642      	mov	r2, r8
 8008180:	464b      	mov	r3, r9
 8008182:	4606      	mov	r6, r0
 8008184:	460f      	mov	r7, r1
 8008186:	f7f8 fccf 	bl	8000b28 <__aeabi_dcmpgt>
 800818a:	b9d0      	cbnz	r0, 80081c2 <_dtoa_r+0x6c2>
 800818c:	4642      	mov	r2, r8
 800818e:	464b      	mov	r3, r9
 8008190:	4630      	mov	r0, r6
 8008192:	4639      	mov	r1, r7
 8008194:	f7f8 fca0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008198:	b110      	cbz	r0, 80081a0 <_dtoa_r+0x6a0>
 800819a:	f01a 0f01 	tst.w	sl, #1
 800819e:	d110      	bne.n	80081c2 <_dtoa_r+0x6c2>
 80081a0:	4620      	mov	r0, r4
 80081a2:	ee18 1a10 	vmov	r1, s16
 80081a6:	f000 fe67 	bl	8008e78 <_Bfree>
 80081aa:	2300      	movs	r3, #0
 80081ac:	9800      	ldr	r0, [sp, #0]
 80081ae:	702b      	strb	r3, [r5, #0]
 80081b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081b2:	3001      	adds	r0, #1
 80081b4:	6018      	str	r0, [r3, #0]
 80081b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f43f acf1 	beq.w	8007ba0 <_dtoa_r+0xa0>
 80081be:	601d      	str	r5, [r3, #0]
 80081c0:	e4ee      	b.n	8007ba0 <_dtoa_r+0xa0>
 80081c2:	9f00      	ldr	r7, [sp, #0]
 80081c4:	462b      	mov	r3, r5
 80081c6:	461d      	mov	r5, r3
 80081c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081cc:	2a39      	cmp	r2, #57	; 0x39
 80081ce:	d106      	bne.n	80081de <_dtoa_r+0x6de>
 80081d0:	9a01      	ldr	r2, [sp, #4]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d1f7      	bne.n	80081c6 <_dtoa_r+0x6c6>
 80081d6:	9901      	ldr	r1, [sp, #4]
 80081d8:	2230      	movs	r2, #48	; 0x30
 80081da:	3701      	adds	r7, #1
 80081dc:	700a      	strb	r2, [r1, #0]
 80081de:	781a      	ldrb	r2, [r3, #0]
 80081e0:	3201      	adds	r2, #1
 80081e2:	701a      	strb	r2, [r3, #0]
 80081e4:	e790      	b.n	8008108 <_dtoa_r+0x608>
 80081e6:	4ba6      	ldr	r3, [pc, #664]	; (8008480 <_dtoa_r+0x980>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	f7f8 fa0d 	bl	8000608 <__aeabi_dmul>
 80081ee:	2200      	movs	r2, #0
 80081f0:	2300      	movs	r3, #0
 80081f2:	4606      	mov	r6, r0
 80081f4:	460f      	mov	r7, r1
 80081f6:	f7f8 fc6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d09d      	beq.n	800813a <_dtoa_r+0x63a>
 80081fe:	e7cf      	b.n	80081a0 <_dtoa_r+0x6a0>
 8008200:	9a08      	ldr	r2, [sp, #32]
 8008202:	2a00      	cmp	r2, #0
 8008204:	f000 80d7 	beq.w	80083b6 <_dtoa_r+0x8b6>
 8008208:	9a06      	ldr	r2, [sp, #24]
 800820a:	2a01      	cmp	r2, #1
 800820c:	f300 80ba 	bgt.w	8008384 <_dtoa_r+0x884>
 8008210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008212:	2a00      	cmp	r2, #0
 8008214:	f000 80b2 	beq.w	800837c <_dtoa_r+0x87c>
 8008218:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800821c:	9e07      	ldr	r6, [sp, #28]
 800821e:	9d04      	ldr	r5, [sp, #16]
 8008220:	9a04      	ldr	r2, [sp, #16]
 8008222:	441a      	add	r2, r3
 8008224:	9204      	str	r2, [sp, #16]
 8008226:	9a05      	ldr	r2, [sp, #20]
 8008228:	2101      	movs	r1, #1
 800822a:	441a      	add	r2, r3
 800822c:	4620      	mov	r0, r4
 800822e:	9205      	str	r2, [sp, #20]
 8008230:	f000 ff24 	bl	800907c <__i2b>
 8008234:	4607      	mov	r7, r0
 8008236:	2d00      	cmp	r5, #0
 8008238:	dd0c      	ble.n	8008254 <_dtoa_r+0x754>
 800823a:	9b05      	ldr	r3, [sp, #20]
 800823c:	2b00      	cmp	r3, #0
 800823e:	dd09      	ble.n	8008254 <_dtoa_r+0x754>
 8008240:	42ab      	cmp	r3, r5
 8008242:	9a04      	ldr	r2, [sp, #16]
 8008244:	bfa8      	it	ge
 8008246:	462b      	movge	r3, r5
 8008248:	1ad2      	subs	r2, r2, r3
 800824a:	9204      	str	r2, [sp, #16]
 800824c:	9a05      	ldr	r2, [sp, #20]
 800824e:	1aed      	subs	r5, r5, r3
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	9305      	str	r3, [sp, #20]
 8008254:	9b07      	ldr	r3, [sp, #28]
 8008256:	b31b      	cbz	r3, 80082a0 <_dtoa_r+0x7a0>
 8008258:	9b08      	ldr	r3, [sp, #32]
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 80af 	beq.w	80083be <_dtoa_r+0x8be>
 8008260:	2e00      	cmp	r6, #0
 8008262:	dd13      	ble.n	800828c <_dtoa_r+0x78c>
 8008264:	4639      	mov	r1, r7
 8008266:	4632      	mov	r2, r6
 8008268:	4620      	mov	r0, r4
 800826a:	f000 ffc7 	bl	80091fc <__pow5mult>
 800826e:	ee18 2a10 	vmov	r2, s16
 8008272:	4601      	mov	r1, r0
 8008274:	4607      	mov	r7, r0
 8008276:	4620      	mov	r0, r4
 8008278:	f000 ff16 	bl	80090a8 <__multiply>
 800827c:	ee18 1a10 	vmov	r1, s16
 8008280:	4680      	mov	r8, r0
 8008282:	4620      	mov	r0, r4
 8008284:	f000 fdf8 	bl	8008e78 <_Bfree>
 8008288:	ee08 8a10 	vmov	s16, r8
 800828c:	9b07      	ldr	r3, [sp, #28]
 800828e:	1b9a      	subs	r2, r3, r6
 8008290:	d006      	beq.n	80082a0 <_dtoa_r+0x7a0>
 8008292:	ee18 1a10 	vmov	r1, s16
 8008296:	4620      	mov	r0, r4
 8008298:	f000 ffb0 	bl	80091fc <__pow5mult>
 800829c:	ee08 0a10 	vmov	s16, r0
 80082a0:	2101      	movs	r1, #1
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 feea 	bl	800907c <__i2b>
 80082a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	4606      	mov	r6, r0
 80082ae:	f340 8088 	ble.w	80083c2 <_dtoa_r+0x8c2>
 80082b2:	461a      	mov	r2, r3
 80082b4:	4601      	mov	r1, r0
 80082b6:	4620      	mov	r0, r4
 80082b8:	f000 ffa0 	bl	80091fc <__pow5mult>
 80082bc:	9b06      	ldr	r3, [sp, #24]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	4606      	mov	r6, r0
 80082c2:	f340 8081 	ble.w	80083c8 <_dtoa_r+0x8c8>
 80082c6:	f04f 0800 	mov.w	r8, #0
 80082ca:	6933      	ldr	r3, [r6, #16]
 80082cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082d0:	6918      	ldr	r0, [r3, #16]
 80082d2:	f000 fe83 	bl	8008fdc <__hi0bits>
 80082d6:	f1c0 0020 	rsb	r0, r0, #32
 80082da:	9b05      	ldr	r3, [sp, #20]
 80082dc:	4418      	add	r0, r3
 80082de:	f010 001f 	ands.w	r0, r0, #31
 80082e2:	f000 8092 	beq.w	800840a <_dtoa_r+0x90a>
 80082e6:	f1c0 0320 	rsb	r3, r0, #32
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	f340 808a 	ble.w	8008404 <_dtoa_r+0x904>
 80082f0:	f1c0 001c 	rsb	r0, r0, #28
 80082f4:	9b04      	ldr	r3, [sp, #16]
 80082f6:	4403      	add	r3, r0
 80082f8:	9304      	str	r3, [sp, #16]
 80082fa:	9b05      	ldr	r3, [sp, #20]
 80082fc:	4403      	add	r3, r0
 80082fe:	4405      	add	r5, r0
 8008300:	9305      	str	r3, [sp, #20]
 8008302:	9b04      	ldr	r3, [sp, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	dd07      	ble.n	8008318 <_dtoa_r+0x818>
 8008308:	ee18 1a10 	vmov	r1, s16
 800830c:	461a      	mov	r2, r3
 800830e:	4620      	mov	r0, r4
 8008310:	f000 ffce 	bl	80092b0 <__lshift>
 8008314:	ee08 0a10 	vmov	s16, r0
 8008318:	9b05      	ldr	r3, [sp, #20]
 800831a:	2b00      	cmp	r3, #0
 800831c:	dd05      	ble.n	800832a <_dtoa_r+0x82a>
 800831e:	4631      	mov	r1, r6
 8008320:	461a      	mov	r2, r3
 8008322:	4620      	mov	r0, r4
 8008324:	f000 ffc4 	bl	80092b0 <__lshift>
 8008328:	4606      	mov	r6, r0
 800832a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800832c:	2b00      	cmp	r3, #0
 800832e:	d06e      	beq.n	800840e <_dtoa_r+0x90e>
 8008330:	ee18 0a10 	vmov	r0, s16
 8008334:	4631      	mov	r1, r6
 8008336:	f001 f82b 	bl	8009390 <__mcmp>
 800833a:	2800      	cmp	r0, #0
 800833c:	da67      	bge.n	800840e <_dtoa_r+0x90e>
 800833e:	9b00      	ldr	r3, [sp, #0]
 8008340:	3b01      	subs	r3, #1
 8008342:	ee18 1a10 	vmov	r1, s16
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	220a      	movs	r2, #10
 800834a:	2300      	movs	r3, #0
 800834c:	4620      	mov	r0, r4
 800834e:	f000 fdb5 	bl	8008ebc <__multadd>
 8008352:	9b08      	ldr	r3, [sp, #32]
 8008354:	ee08 0a10 	vmov	s16, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 81b1 	beq.w	80086c0 <_dtoa_r+0xbc0>
 800835e:	2300      	movs	r3, #0
 8008360:	4639      	mov	r1, r7
 8008362:	220a      	movs	r2, #10
 8008364:	4620      	mov	r0, r4
 8008366:	f000 fda9 	bl	8008ebc <__multadd>
 800836a:	9b02      	ldr	r3, [sp, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	4607      	mov	r7, r0
 8008370:	f300 808e 	bgt.w	8008490 <_dtoa_r+0x990>
 8008374:	9b06      	ldr	r3, [sp, #24]
 8008376:	2b02      	cmp	r3, #2
 8008378:	dc51      	bgt.n	800841e <_dtoa_r+0x91e>
 800837a:	e089      	b.n	8008490 <_dtoa_r+0x990>
 800837c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800837e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008382:	e74b      	b.n	800821c <_dtoa_r+0x71c>
 8008384:	9b03      	ldr	r3, [sp, #12]
 8008386:	1e5e      	subs	r6, r3, #1
 8008388:	9b07      	ldr	r3, [sp, #28]
 800838a:	42b3      	cmp	r3, r6
 800838c:	bfbf      	itttt	lt
 800838e:	9b07      	ldrlt	r3, [sp, #28]
 8008390:	9607      	strlt	r6, [sp, #28]
 8008392:	1af2      	sublt	r2, r6, r3
 8008394:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008396:	bfb6      	itet	lt
 8008398:	189b      	addlt	r3, r3, r2
 800839a:	1b9e      	subge	r6, r3, r6
 800839c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800839e:	9b03      	ldr	r3, [sp, #12]
 80083a0:	bfb8      	it	lt
 80083a2:	2600      	movlt	r6, #0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	bfb7      	itett	lt
 80083a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80083ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80083b0:	1a9d      	sublt	r5, r3, r2
 80083b2:	2300      	movlt	r3, #0
 80083b4:	e734      	b.n	8008220 <_dtoa_r+0x720>
 80083b6:	9e07      	ldr	r6, [sp, #28]
 80083b8:	9d04      	ldr	r5, [sp, #16]
 80083ba:	9f08      	ldr	r7, [sp, #32]
 80083bc:	e73b      	b.n	8008236 <_dtoa_r+0x736>
 80083be:	9a07      	ldr	r2, [sp, #28]
 80083c0:	e767      	b.n	8008292 <_dtoa_r+0x792>
 80083c2:	9b06      	ldr	r3, [sp, #24]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	dc18      	bgt.n	80083fa <_dtoa_r+0x8fa>
 80083c8:	f1ba 0f00 	cmp.w	sl, #0
 80083cc:	d115      	bne.n	80083fa <_dtoa_r+0x8fa>
 80083ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083d2:	b993      	cbnz	r3, 80083fa <_dtoa_r+0x8fa>
 80083d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80083d8:	0d1b      	lsrs	r3, r3, #20
 80083da:	051b      	lsls	r3, r3, #20
 80083dc:	b183      	cbz	r3, 8008400 <_dtoa_r+0x900>
 80083de:	9b04      	ldr	r3, [sp, #16]
 80083e0:	3301      	adds	r3, #1
 80083e2:	9304      	str	r3, [sp, #16]
 80083e4:	9b05      	ldr	r3, [sp, #20]
 80083e6:	3301      	adds	r3, #1
 80083e8:	9305      	str	r3, [sp, #20]
 80083ea:	f04f 0801 	mov.w	r8, #1
 80083ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f47f af6a 	bne.w	80082ca <_dtoa_r+0x7ca>
 80083f6:	2001      	movs	r0, #1
 80083f8:	e76f      	b.n	80082da <_dtoa_r+0x7da>
 80083fa:	f04f 0800 	mov.w	r8, #0
 80083fe:	e7f6      	b.n	80083ee <_dtoa_r+0x8ee>
 8008400:	4698      	mov	r8, r3
 8008402:	e7f4      	b.n	80083ee <_dtoa_r+0x8ee>
 8008404:	f43f af7d 	beq.w	8008302 <_dtoa_r+0x802>
 8008408:	4618      	mov	r0, r3
 800840a:	301c      	adds	r0, #28
 800840c:	e772      	b.n	80082f4 <_dtoa_r+0x7f4>
 800840e:	9b03      	ldr	r3, [sp, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	dc37      	bgt.n	8008484 <_dtoa_r+0x984>
 8008414:	9b06      	ldr	r3, [sp, #24]
 8008416:	2b02      	cmp	r3, #2
 8008418:	dd34      	ble.n	8008484 <_dtoa_r+0x984>
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	9302      	str	r3, [sp, #8]
 800841e:	9b02      	ldr	r3, [sp, #8]
 8008420:	b96b      	cbnz	r3, 800843e <_dtoa_r+0x93e>
 8008422:	4631      	mov	r1, r6
 8008424:	2205      	movs	r2, #5
 8008426:	4620      	mov	r0, r4
 8008428:	f000 fd48 	bl	8008ebc <__multadd>
 800842c:	4601      	mov	r1, r0
 800842e:	4606      	mov	r6, r0
 8008430:	ee18 0a10 	vmov	r0, s16
 8008434:	f000 ffac 	bl	8009390 <__mcmp>
 8008438:	2800      	cmp	r0, #0
 800843a:	f73f adbb 	bgt.w	8007fb4 <_dtoa_r+0x4b4>
 800843e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008440:	9d01      	ldr	r5, [sp, #4]
 8008442:	43db      	mvns	r3, r3
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	f04f 0800 	mov.w	r8, #0
 800844a:	4631      	mov	r1, r6
 800844c:	4620      	mov	r0, r4
 800844e:	f000 fd13 	bl	8008e78 <_Bfree>
 8008452:	2f00      	cmp	r7, #0
 8008454:	f43f aea4 	beq.w	80081a0 <_dtoa_r+0x6a0>
 8008458:	f1b8 0f00 	cmp.w	r8, #0
 800845c:	d005      	beq.n	800846a <_dtoa_r+0x96a>
 800845e:	45b8      	cmp	r8, r7
 8008460:	d003      	beq.n	800846a <_dtoa_r+0x96a>
 8008462:	4641      	mov	r1, r8
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fd07 	bl	8008e78 <_Bfree>
 800846a:	4639      	mov	r1, r7
 800846c:	4620      	mov	r0, r4
 800846e:	f000 fd03 	bl	8008e78 <_Bfree>
 8008472:	e695      	b.n	80081a0 <_dtoa_r+0x6a0>
 8008474:	2600      	movs	r6, #0
 8008476:	4637      	mov	r7, r6
 8008478:	e7e1      	b.n	800843e <_dtoa_r+0x93e>
 800847a:	9700      	str	r7, [sp, #0]
 800847c:	4637      	mov	r7, r6
 800847e:	e599      	b.n	8007fb4 <_dtoa_r+0x4b4>
 8008480:	40240000 	.word	0x40240000
 8008484:	9b08      	ldr	r3, [sp, #32]
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 80ca 	beq.w	8008620 <_dtoa_r+0xb20>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	9302      	str	r3, [sp, #8]
 8008490:	2d00      	cmp	r5, #0
 8008492:	dd05      	ble.n	80084a0 <_dtoa_r+0x9a0>
 8008494:	4639      	mov	r1, r7
 8008496:	462a      	mov	r2, r5
 8008498:	4620      	mov	r0, r4
 800849a:	f000 ff09 	bl	80092b0 <__lshift>
 800849e:	4607      	mov	r7, r0
 80084a0:	f1b8 0f00 	cmp.w	r8, #0
 80084a4:	d05b      	beq.n	800855e <_dtoa_r+0xa5e>
 80084a6:	6879      	ldr	r1, [r7, #4]
 80084a8:	4620      	mov	r0, r4
 80084aa:	f000 fca5 	bl	8008df8 <_Balloc>
 80084ae:	4605      	mov	r5, r0
 80084b0:	b928      	cbnz	r0, 80084be <_dtoa_r+0x9be>
 80084b2:	4b87      	ldr	r3, [pc, #540]	; (80086d0 <_dtoa_r+0xbd0>)
 80084b4:	4602      	mov	r2, r0
 80084b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084ba:	f7ff bb3b 	b.w	8007b34 <_dtoa_r+0x34>
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	3202      	adds	r2, #2
 80084c2:	0092      	lsls	r2, r2, #2
 80084c4:	f107 010c 	add.w	r1, r7, #12
 80084c8:	300c      	adds	r0, #12
 80084ca:	f7fd fcdb 	bl	8005e84 <memcpy>
 80084ce:	2201      	movs	r2, #1
 80084d0:	4629      	mov	r1, r5
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 feec 	bl	80092b0 <__lshift>
 80084d8:	9b01      	ldr	r3, [sp, #4]
 80084da:	f103 0901 	add.w	r9, r3, #1
 80084de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80084e2:	4413      	add	r3, r2
 80084e4:	9305      	str	r3, [sp, #20]
 80084e6:	f00a 0301 	and.w	r3, sl, #1
 80084ea:	46b8      	mov	r8, r7
 80084ec:	9304      	str	r3, [sp, #16]
 80084ee:	4607      	mov	r7, r0
 80084f0:	4631      	mov	r1, r6
 80084f2:	ee18 0a10 	vmov	r0, s16
 80084f6:	f7ff fa77 	bl	80079e8 <quorem>
 80084fa:	4641      	mov	r1, r8
 80084fc:	9002      	str	r0, [sp, #8]
 80084fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008502:	ee18 0a10 	vmov	r0, s16
 8008506:	f000 ff43 	bl	8009390 <__mcmp>
 800850a:	463a      	mov	r2, r7
 800850c:	9003      	str	r0, [sp, #12]
 800850e:	4631      	mov	r1, r6
 8008510:	4620      	mov	r0, r4
 8008512:	f000 ff59 	bl	80093c8 <__mdiff>
 8008516:	68c2      	ldr	r2, [r0, #12]
 8008518:	f109 3bff 	add.w	fp, r9, #4294967295
 800851c:	4605      	mov	r5, r0
 800851e:	bb02      	cbnz	r2, 8008562 <_dtoa_r+0xa62>
 8008520:	4601      	mov	r1, r0
 8008522:	ee18 0a10 	vmov	r0, s16
 8008526:	f000 ff33 	bl	8009390 <__mcmp>
 800852a:	4602      	mov	r2, r0
 800852c:	4629      	mov	r1, r5
 800852e:	4620      	mov	r0, r4
 8008530:	9207      	str	r2, [sp, #28]
 8008532:	f000 fca1 	bl	8008e78 <_Bfree>
 8008536:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800853a:	ea43 0102 	orr.w	r1, r3, r2
 800853e:	9b04      	ldr	r3, [sp, #16]
 8008540:	430b      	orrs	r3, r1
 8008542:	464d      	mov	r5, r9
 8008544:	d10f      	bne.n	8008566 <_dtoa_r+0xa66>
 8008546:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800854a:	d02a      	beq.n	80085a2 <_dtoa_r+0xaa2>
 800854c:	9b03      	ldr	r3, [sp, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	dd02      	ble.n	8008558 <_dtoa_r+0xa58>
 8008552:	9b02      	ldr	r3, [sp, #8]
 8008554:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008558:	f88b a000 	strb.w	sl, [fp]
 800855c:	e775      	b.n	800844a <_dtoa_r+0x94a>
 800855e:	4638      	mov	r0, r7
 8008560:	e7ba      	b.n	80084d8 <_dtoa_r+0x9d8>
 8008562:	2201      	movs	r2, #1
 8008564:	e7e2      	b.n	800852c <_dtoa_r+0xa2c>
 8008566:	9b03      	ldr	r3, [sp, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	db04      	blt.n	8008576 <_dtoa_r+0xa76>
 800856c:	9906      	ldr	r1, [sp, #24]
 800856e:	430b      	orrs	r3, r1
 8008570:	9904      	ldr	r1, [sp, #16]
 8008572:	430b      	orrs	r3, r1
 8008574:	d122      	bne.n	80085bc <_dtoa_r+0xabc>
 8008576:	2a00      	cmp	r2, #0
 8008578:	ddee      	ble.n	8008558 <_dtoa_r+0xa58>
 800857a:	ee18 1a10 	vmov	r1, s16
 800857e:	2201      	movs	r2, #1
 8008580:	4620      	mov	r0, r4
 8008582:	f000 fe95 	bl	80092b0 <__lshift>
 8008586:	4631      	mov	r1, r6
 8008588:	ee08 0a10 	vmov	s16, r0
 800858c:	f000 ff00 	bl	8009390 <__mcmp>
 8008590:	2800      	cmp	r0, #0
 8008592:	dc03      	bgt.n	800859c <_dtoa_r+0xa9c>
 8008594:	d1e0      	bne.n	8008558 <_dtoa_r+0xa58>
 8008596:	f01a 0f01 	tst.w	sl, #1
 800859a:	d0dd      	beq.n	8008558 <_dtoa_r+0xa58>
 800859c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085a0:	d1d7      	bne.n	8008552 <_dtoa_r+0xa52>
 80085a2:	2339      	movs	r3, #57	; 0x39
 80085a4:	f88b 3000 	strb.w	r3, [fp]
 80085a8:	462b      	mov	r3, r5
 80085aa:	461d      	mov	r5, r3
 80085ac:	3b01      	subs	r3, #1
 80085ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085b2:	2a39      	cmp	r2, #57	; 0x39
 80085b4:	d071      	beq.n	800869a <_dtoa_r+0xb9a>
 80085b6:	3201      	adds	r2, #1
 80085b8:	701a      	strb	r2, [r3, #0]
 80085ba:	e746      	b.n	800844a <_dtoa_r+0x94a>
 80085bc:	2a00      	cmp	r2, #0
 80085be:	dd07      	ble.n	80085d0 <_dtoa_r+0xad0>
 80085c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085c4:	d0ed      	beq.n	80085a2 <_dtoa_r+0xaa2>
 80085c6:	f10a 0301 	add.w	r3, sl, #1
 80085ca:	f88b 3000 	strb.w	r3, [fp]
 80085ce:	e73c      	b.n	800844a <_dtoa_r+0x94a>
 80085d0:	9b05      	ldr	r3, [sp, #20]
 80085d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80085d6:	4599      	cmp	r9, r3
 80085d8:	d047      	beq.n	800866a <_dtoa_r+0xb6a>
 80085da:	ee18 1a10 	vmov	r1, s16
 80085de:	2300      	movs	r3, #0
 80085e0:	220a      	movs	r2, #10
 80085e2:	4620      	mov	r0, r4
 80085e4:	f000 fc6a 	bl	8008ebc <__multadd>
 80085e8:	45b8      	cmp	r8, r7
 80085ea:	ee08 0a10 	vmov	s16, r0
 80085ee:	f04f 0300 	mov.w	r3, #0
 80085f2:	f04f 020a 	mov.w	r2, #10
 80085f6:	4641      	mov	r1, r8
 80085f8:	4620      	mov	r0, r4
 80085fa:	d106      	bne.n	800860a <_dtoa_r+0xb0a>
 80085fc:	f000 fc5e 	bl	8008ebc <__multadd>
 8008600:	4680      	mov	r8, r0
 8008602:	4607      	mov	r7, r0
 8008604:	f109 0901 	add.w	r9, r9, #1
 8008608:	e772      	b.n	80084f0 <_dtoa_r+0x9f0>
 800860a:	f000 fc57 	bl	8008ebc <__multadd>
 800860e:	4639      	mov	r1, r7
 8008610:	4680      	mov	r8, r0
 8008612:	2300      	movs	r3, #0
 8008614:	220a      	movs	r2, #10
 8008616:	4620      	mov	r0, r4
 8008618:	f000 fc50 	bl	8008ebc <__multadd>
 800861c:	4607      	mov	r7, r0
 800861e:	e7f1      	b.n	8008604 <_dtoa_r+0xb04>
 8008620:	9b03      	ldr	r3, [sp, #12]
 8008622:	9302      	str	r3, [sp, #8]
 8008624:	9d01      	ldr	r5, [sp, #4]
 8008626:	ee18 0a10 	vmov	r0, s16
 800862a:	4631      	mov	r1, r6
 800862c:	f7ff f9dc 	bl	80079e8 <quorem>
 8008630:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008634:	9b01      	ldr	r3, [sp, #4]
 8008636:	f805 ab01 	strb.w	sl, [r5], #1
 800863a:	1aea      	subs	r2, r5, r3
 800863c:	9b02      	ldr	r3, [sp, #8]
 800863e:	4293      	cmp	r3, r2
 8008640:	dd09      	ble.n	8008656 <_dtoa_r+0xb56>
 8008642:	ee18 1a10 	vmov	r1, s16
 8008646:	2300      	movs	r3, #0
 8008648:	220a      	movs	r2, #10
 800864a:	4620      	mov	r0, r4
 800864c:	f000 fc36 	bl	8008ebc <__multadd>
 8008650:	ee08 0a10 	vmov	s16, r0
 8008654:	e7e7      	b.n	8008626 <_dtoa_r+0xb26>
 8008656:	9b02      	ldr	r3, [sp, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	bfc8      	it	gt
 800865c:	461d      	movgt	r5, r3
 800865e:	9b01      	ldr	r3, [sp, #4]
 8008660:	bfd8      	it	le
 8008662:	2501      	movle	r5, #1
 8008664:	441d      	add	r5, r3
 8008666:	f04f 0800 	mov.w	r8, #0
 800866a:	ee18 1a10 	vmov	r1, s16
 800866e:	2201      	movs	r2, #1
 8008670:	4620      	mov	r0, r4
 8008672:	f000 fe1d 	bl	80092b0 <__lshift>
 8008676:	4631      	mov	r1, r6
 8008678:	ee08 0a10 	vmov	s16, r0
 800867c:	f000 fe88 	bl	8009390 <__mcmp>
 8008680:	2800      	cmp	r0, #0
 8008682:	dc91      	bgt.n	80085a8 <_dtoa_r+0xaa8>
 8008684:	d102      	bne.n	800868c <_dtoa_r+0xb8c>
 8008686:	f01a 0f01 	tst.w	sl, #1
 800868a:	d18d      	bne.n	80085a8 <_dtoa_r+0xaa8>
 800868c:	462b      	mov	r3, r5
 800868e:	461d      	mov	r5, r3
 8008690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008694:	2a30      	cmp	r2, #48	; 0x30
 8008696:	d0fa      	beq.n	800868e <_dtoa_r+0xb8e>
 8008698:	e6d7      	b.n	800844a <_dtoa_r+0x94a>
 800869a:	9a01      	ldr	r2, [sp, #4]
 800869c:	429a      	cmp	r2, r3
 800869e:	d184      	bne.n	80085aa <_dtoa_r+0xaaa>
 80086a0:	9b00      	ldr	r3, [sp, #0]
 80086a2:	3301      	adds	r3, #1
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	2331      	movs	r3, #49	; 0x31
 80086a8:	7013      	strb	r3, [r2, #0]
 80086aa:	e6ce      	b.n	800844a <_dtoa_r+0x94a>
 80086ac:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <_dtoa_r+0xbd4>)
 80086ae:	f7ff ba95 	b.w	8007bdc <_dtoa_r+0xdc>
 80086b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f47f aa6e 	bne.w	8007b96 <_dtoa_r+0x96>
 80086ba:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <_dtoa_r+0xbd8>)
 80086bc:	f7ff ba8e 	b.w	8007bdc <_dtoa_r+0xdc>
 80086c0:	9b02      	ldr	r3, [sp, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dcae      	bgt.n	8008624 <_dtoa_r+0xb24>
 80086c6:	9b06      	ldr	r3, [sp, #24]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	f73f aea8 	bgt.w	800841e <_dtoa_r+0x91e>
 80086ce:	e7a9      	b.n	8008624 <_dtoa_r+0xb24>
 80086d0:	0800b1a0 	.word	0x0800b1a0
 80086d4:	0800afa0 	.word	0x0800afa0
 80086d8:	0800b121 	.word	0x0800b121

080086dc <rshift>:
 80086dc:	6903      	ldr	r3, [r0, #16]
 80086de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80086e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80086ea:	f100 0414 	add.w	r4, r0, #20
 80086ee:	dd45      	ble.n	800877c <rshift+0xa0>
 80086f0:	f011 011f 	ands.w	r1, r1, #31
 80086f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80086f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80086fc:	d10c      	bne.n	8008718 <rshift+0x3c>
 80086fe:	f100 0710 	add.w	r7, r0, #16
 8008702:	4629      	mov	r1, r5
 8008704:	42b1      	cmp	r1, r6
 8008706:	d334      	bcc.n	8008772 <rshift+0x96>
 8008708:	1a9b      	subs	r3, r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	1eea      	subs	r2, r5, #3
 800870e:	4296      	cmp	r6, r2
 8008710:	bf38      	it	cc
 8008712:	2300      	movcc	r3, #0
 8008714:	4423      	add	r3, r4
 8008716:	e015      	b.n	8008744 <rshift+0x68>
 8008718:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800871c:	f1c1 0820 	rsb	r8, r1, #32
 8008720:	40cf      	lsrs	r7, r1
 8008722:	f105 0e04 	add.w	lr, r5, #4
 8008726:	46a1      	mov	r9, r4
 8008728:	4576      	cmp	r6, lr
 800872a:	46f4      	mov	ip, lr
 800872c:	d815      	bhi.n	800875a <rshift+0x7e>
 800872e:	1a9a      	subs	r2, r3, r2
 8008730:	0092      	lsls	r2, r2, #2
 8008732:	3a04      	subs	r2, #4
 8008734:	3501      	adds	r5, #1
 8008736:	42ae      	cmp	r6, r5
 8008738:	bf38      	it	cc
 800873a:	2200      	movcc	r2, #0
 800873c:	18a3      	adds	r3, r4, r2
 800873e:	50a7      	str	r7, [r4, r2]
 8008740:	b107      	cbz	r7, 8008744 <rshift+0x68>
 8008742:	3304      	adds	r3, #4
 8008744:	1b1a      	subs	r2, r3, r4
 8008746:	42a3      	cmp	r3, r4
 8008748:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800874c:	bf08      	it	eq
 800874e:	2300      	moveq	r3, #0
 8008750:	6102      	str	r2, [r0, #16]
 8008752:	bf08      	it	eq
 8008754:	6143      	streq	r3, [r0, #20]
 8008756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800875a:	f8dc c000 	ldr.w	ip, [ip]
 800875e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008762:	ea4c 0707 	orr.w	r7, ip, r7
 8008766:	f849 7b04 	str.w	r7, [r9], #4
 800876a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800876e:	40cf      	lsrs	r7, r1
 8008770:	e7da      	b.n	8008728 <rshift+0x4c>
 8008772:	f851 cb04 	ldr.w	ip, [r1], #4
 8008776:	f847 cf04 	str.w	ip, [r7, #4]!
 800877a:	e7c3      	b.n	8008704 <rshift+0x28>
 800877c:	4623      	mov	r3, r4
 800877e:	e7e1      	b.n	8008744 <rshift+0x68>

08008780 <__hexdig_fun>:
 8008780:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008784:	2b09      	cmp	r3, #9
 8008786:	d802      	bhi.n	800878e <__hexdig_fun+0xe>
 8008788:	3820      	subs	r0, #32
 800878a:	b2c0      	uxtb	r0, r0
 800878c:	4770      	bx	lr
 800878e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008792:	2b05      	cmp	r3, #5
 8008794:	d801      	bhi.n	800879a <__hexdig_fun+0x1a>
 8008796:	3847      	subs	r0, #71	; 0x47
 8008798:	e7f7      	b.n	800878a <__hexdig_fun+0xa>
 800879a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800879e:	2b05      	cmp	r3, #5
 80087a0:	d801      	bhi.n	80087a6 <__hexdig_fun+0x26>
 80087a2:	3827      	subs	r0, #39	; 0x27
 80087a4:	e7f1      	b.n	800878a <__hexdig_fun+0xa>
 80087a6:	2000      	movs	r0, #0
 80087a8:	4770      	bx	lr
	...

080087ac <__gethex>:
 80087ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b0:	ed2d 8b02 	vpush	{d8}
 80087b4:	b089      	sub	sp, #36	; 0x24
 80087b6:	ee08 0a10 	vmov	s16, r0
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	4bb4      	ldr	r3, [pc, #720]	; (8008a90 <__gethex+0x2e4>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	9301      	str	r3, [sp, #4]
 80087c2:	4618      	mov	r0, r3
 80087c4:	468b      	mov	fp, r1
 80087c6:	4690      	mov	r8, r2
 80087c8:	f7f7 fd0a 	bl	80001e0 <strlen>
 80087cc:	9b01      	ldr	r3, [sp, #4]
 80087ce:	f8db 2000 	ldr.w	r2, [fp]
 80087d2:	4403      	add	r3, r0
 80087d4:	4682      	mov	sl, r0
 80087d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80087da:	9305      	str	r3, [sp, #20]
 80087dc:	1c93      	adds	r3, r2, #2
 80087de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80087e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80087e6:	32fe      	adds	r2, #254	; 0xfe
 80087e8:	18d1      	adds	r1, r2, r3
 80087ea:	461f      	mov	r7, r3
 80087ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80087f0:	9100      	str	r1, [sp, #0]
 80087f2:	2830      	cmp	r0, #48	; 0x30
 80087f4:	d0f8      	beq.n	80087e8 <__gethex+0x3c>
 80087f6:	f7ff ffc3 	bl	8008780 <__hexdig_fun>
 80087fa:	4604      	mov	r4, r0
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d13a      	bne.n	8008876 <__gethex+0xca>
 8008800:	9901      	ldr	r1, [sp, #4]
 8008802:	4652      	mov	r2, sl
 8008804:	4638      	mov	r0, r7
 8008806:	f001 fa23 	bl	8009c50 <strncmp>
 800880a:	4605      	mov	r5, r0
 800880c:	2800      	cmp	r0, #0
 800880e:	d168      	bne.n	80088e2 <__gethex+0x136>
 8008810:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008814:	eb07 060a 	add.w	r6, r7, sl
 8008818:	f7ff ffb2 	bl	8008780 <__hexdig_fun>
 800881c:	2800      	cmp	r0, #0
 800881e:	d062      	beq.n	80088e6 <__gethex+0x13a>
 8008820:	4633      	mov	r3, r6
 8008822:	7818      	ldrb	r0, [r3, #0]
 8008824:	2830      	cmp	r0, #48	; 0x30
 8008826:	461f      	mov	r7, r3
 8008828:	f103 0301 	add.w	r3, r3, #1
 800882c:	d0f9      	beq.n	8008822 <__gethex+0x76>
 800882e:	f7ff ffa7 	bl	8008780 <__hexdig_fun>
 8008832:	2301      	movs	r3, #1
 8008834:	fab0 f480 	clz	r4, r0
 8008838:	0964      	lsrs	r4, r4, #5
 800883a:	4635      	mov	r5, r6
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	463a      	mov	r2, r7
 8008840:	4616      	mov	r6, r2
 8008842:	3201      	adds	r2, #1
 8008844:	7830      	ldrb	r0, [r6, #0]
 8008846:	f7ff ff9b 	bl	8008780 <__hexdig_fun>
 800884a:	2800      	cmp	r0, #0
 800884c:	d1f8      	bne.n	8008840 <__gethex+0x94>
 800884e:	9901      	ldr	r1, [sp, #4]
 8008850:	4652      	mov	r2, sl
 8008852:	4630      	mov	r0, r6
 8008854:	f001 f9fc 	bl	8009c50 <strncmp>
 8008858:	b980      	cbnz	r0, 800887c <__gethex+0xd0>
 800885a:	b94d      	cbnz	r5, 8008870 <__gethex+0xc4>
 800885c:	eb06 050a 	add.w	r5, r6, sl
 8008860:	462a      	mov	r2, r5
 8008862:	4616      	mov	r6, r2
 8008864:	3201      	adds	r2, #1
 8008866:	7830      	ldrb	r0, [r6, #0]
 8008868:	f7ff ff8a 	bl	8008780 <__hexdig_fun>
 800886c:	2800      	cmp	r0, #0
 800886e:	d1f8      	bne.n	8008862 <__gethex+0xb6>
 8008870:	1bad      	subs	r5, r5, r6
 8008872:	00ad      	lsls	r5, r5, #2
 8008874:	e004      	b.n	8008880 <__gethex+0xd4>
 8008876:	2400      	movs	r4, #0
 8008878:	4625      	mov	r5, r4
 800887a:	e7e0      	b.n	800883e <__gethex+0x92>
 800887c:	2d00      	cmp	r5, #0
 800887e:	d1f7      	bne.n	8008870 <__gethex+0xc4>
 8008880:	7833      	ldrb	r3, [r6, #0]
 8008882:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008886:	2b50      	cmp	r3, #80	; 0x50
 8008888:	d13b      	bne.n	8008902 <__gethex+0x156>
 800888a:	7873      	ldrb	r3, [r6, #1]
 800888c:	2b2b      	cmp	r3, #43	; 0x2b
 800888e:	d02c      	beq.n	80088ea <__gethex+0x13e>
 8008890:	2b2d      	cmp	r3, #45	; 0x2d
 8008892:	d02e      	beq.n	80088f2 <__gethex+0x146>
 8008894:	1c71      	adds	r1, r6, #1
 8008896:	f04f 0900 	mov.w	r9, #0
 800889a:	7808      	ldrb	r0, [r1, #0]
 800889c:	f7ff ff70 	bl	8008780 <__hexdig_fun>
 80088a0:	1e43      	subs	r3, r0, #1
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b18      	cmp	r3, #24
 80088a6:	d82c      	bhi.n	8008902 <__gethex+0x156>
 80088a8:	f1a0 0210 	sub.w	r2, r0, #16
 80088ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088b0:	f7ff ff66 	bl	8008780 <__hexdig_fun>
 80088b4:	1e43      	subs	r3, r0, #1
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b18      	cmp	r3, #24
 80088ba:	d91d      	bls.n	80088f8 <__gethex+0x14c>
 80088bc:	f1b9 0f00 	cmp.w	r9, #0
 80088c0:	d000      	beq.n	80088c4 <__gethex+0x118>
 80088c2:	4252      	negs	r2, r2
 80088c4:	4415      	add	r5, r2
 80088c6:	f8cb 1000 	str.w	r1, [fp]
 80088ca:	b1e4      	cbz	r4, 8008906 <__gethex+0x15a>
 80088cc:	9b00      	ldr	r3, [sp, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	bf14      	ite	ne
 80088d2:	2700      	movne	r7, #0
 80088d4:	2706      	moveq	r7, #6
 80088d6:	4638      	mov	r0, r7
 80088d8:	b009      	add	sp, #36	; 0x24
 80088da:	ecbd 8b02 	vpop	{d8}
 80088de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e2:	463e      	mov	r6, r7
 80088e4:	4625      	mov	r5, r4
 80088e6:	2401      	movs	r4, #1
 80088e8:	e7ca      	b.n	8008880 <__gethex+0xd4>
 80088ea:	f04f 0900 	mov.w	r9, #0
 80088ee:	1cb1      	adds	r1, r6, #2
 80088f0:	e7d3      	b.n	800889a <__gethex+0xee>
 80088f2:	f04f 0901 	mov.w	r9, #1
 80088f6:	e7fa      	b.n	80088ee <__gethex+0x142>
 80088f8:	230a      	movs	r3, #10
 80088fa:	fb03 0202 	mla	r2, r3, r2, r0
 80088fe:	3a10      	subs	r2, #16
 8008900:	e7d4      	b.n	80088ac <__gethex+0x100>
 8008902:	4631      	mov	r1, r6
 8008904:	e7df      	b.n	80088c6 <__gethex+0x11a>
 8008906:	1bf3      	subs	r3, r6, r7
 8008908:	3b01      	subs	r3, #1
 800890a:	4621      	mov	r1, r4
 800890c:	2b07      	cmp	r3, #7
 800890e:	dc0b      	bgt.n	8008928 <__gethex+0x17c>
 8008910:	ee18 0a10 	vmov	r0, s16
 8008914:	f000 fa70 	bl	8008df8 <_Balloc>
 8008918:	4604      	mov	r4, r0
 800891a:	b940      	cbnz	r0, 800892e <__gethex+0x182>
 800891c:	4b5d      	ldr	r3, [pc, #372]	; (8008a94 <__gethex+0x2e8>)
 800891e:	4602      	mov	r2, r0
 8008920:	21de      	movs	r1, #222	; 0xde
 8008922:	485d      	ldr	r0, [pc, #372]	; (8008a98 <__gethex+0x2ec>)
 8008924:	f001 f9b6 	bl	8009c94 <__assert_func>
 8008928:	3101      	adds	r1, #1
 800892a:	105b      	asrs	r3, r3, #1
 800892c:	e7ee      	b.n	800890c <__gethex+0x160>
 800892e:	f100 0914 	add.w	r9, r0, #20
 8008932:	f04f 0b00 	mov.w	fp, #0
 8008936:	f1ca 0301 	rsb	r3, sl, #1
 800893a:	f8cd 9008 	str.w	r9, [sp, #8]
 800893e:	f8cd b000 	str.w	fp, [sp]
 8008942:	9306      	str	r3, [sp, #24]
 8008944:	42b7      	cmp	r7, r6
 8008946:	d340      	bcc.n	80089ca <__gethex+0x21e>
 8008948:	9802      	ldr	r0, [sp, #8]
 800894a:	9b00      	ldr	r3, [sp, #0]
 800894c:	f840 3b04 	str.w	r3, [r0], #4
 8008950:	eba0 0009 	sub.w	r0, r0, r9
 8008954:	1080      	asrs	r0, r0, #2
 8008956:	0146      	lsls	r6, r0, #5
 8008958:	6120      	str	r0, [r4, #16]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fb3e 	bl	8008fdc <__hi0bits>
 8008960:	1a30      	subs	r0, r6, r0
 8008962:	f8d8 6000 	ldr.w	r6, [r8]
 8008966:	42b0      	cmp	r0, r6
 8008968:	dd63      	ble.n	8008a32 <__gethex+0x286>
 800896a:	1b87      	subs	r7, r0, r6
 800896c:	4639      	mov	r1, r7
 800896e:	4620      	mov	r0, r4
 8008970:	f000 fee2 	bl	8009738 <__any_on>
 8008974:	4682      	mov	sl, r0
 8008976:	b1a8      	cbz	r0, 80089a4 <__gethex+0x1f8>
 8008978:	1e7b      	subs	r3, r7, #1
 800897a:	1159      	asrs	r1, r3, #5
 800897c:	f003 021f 	and.w	r2, r3, #31
 8008980:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008984:	f04f 0a01 	mov.w	sl, #1
 8008988:	fa0a f202 	lsl.w	r2, sl, r2
 800898c:	420a      	tst	r2, r1
 800898e:	d009      	beq.n	80089a4 <__gethex+0x1f8>
 8008990:	4553      	cmp	r3, sl
 8008992:	dd05      	ble.n	80089a0 <__gethex+0x1f4>
 8008994:	1eb9      	subs	r1, r7, #2
 8008996:	4620      	mov	r0, r4
 8008998:	f000 fece 	bl	8009738 <__any_on>
 800899c:	2800      	cmp	r0, #0
 800899e:	d145      	bne.n	8008a2c <__gethex+0x280>
 80089a0:	f04f 0a02 	mov.w	sl, #2
 80089a4:	4639      	mov	r1, r7
 80089a6:	4620      	mov	r0, r4
 80089a8:	f7ff fe98 	bl	80086dc <rshift>
 80089ac:	443d      	add	r5, r7
 80089ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089b2:	42ab      	cmp	r3, r5
 80089b4:	da4c      	bge.n	8008a50 <__gethex+0x2a4>
 80089b6:	ee18 0a10 	vmov	r0, s16
 80089ba:	4621      	mov	r1, r4
 80089bc:	f000 fa5c 	bl	8008e78 <_Bfree>
 80089c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089c2:	2300      	movs	r3, #0
 80089c4:	6013      	str	r3, [r2, #0]
 80089c6:	27a3      	movs	r7, #163	; 0xa3
 80089c8:	e785      	b.n	80088d6 <__gethex+0x12a>
 80089ca:	1e73      	subs	r3, r6, #1
 80089cc:	9a05      	ldr	r2, [sp, #20]
 80089ce:	9303      	str	r3, [sp, #12]
 80089d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d019      	beq.n	8008a0c <__gethex+0x260>
 80089d8:	f1bb 0f20 	cmp.w	fp, #32
 80089dc:	d107      	bne.n	80089ee <__gethex+0x242>
 80089de:	9b02      	ldr	r3, [sp, #8]
 80089e0:	9a00      	ldr	r2, [sp, #0]
 80089e2:	f843 2b04 	str.w	r2, [r3], #4
 80089e6:	9302      	str	r3, [sp, #8]
 80089e8:	2300      	movs	r3, #0
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	469b      	mov	fp, r3
 80089ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80089f2:	f7ff fec5 	bl	8008780 <__hexdig_fun>
 80089f6:	9b00      	ldr	r3, [sp, #0]
 80089f8:	f000 000f 	and.w	r0, r0, #15
 80089fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8008a00:	4303      	orrs	r3, r0
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	f10b 0b04 	add.w	fp, fp, #4
 8008a08:	9b03      	ldr	r3, [sp, #12]
 8008a0a:	e00d      	b.n	8008a28 <__gethex+0x27c>
 8008a0c:	9b03      	ldr	r3, [sp, #12]
 8008a0e:	9a06      	ldr	r2, [sp, #24]
 8008a10:	4413      	add	r3, r2
 8008a12:	42bb      	cmp	r3, r7
 8008a14:	d3e0      	bcc.n	80089d8 <__gethex+0x22c>
 8008a16:	4618      	mov	r0, r3
 8008a18:	9901      	ldr	r1, [sp, #4]
 8008a1a:	9307      	str	r3, [sp, #28]
 8008a1c:	4652      	mov	r2, sl
 8008a1e:	f001 f917 	bl	8009c50 <strncmp>
 8008a22:	9b07      	ldr	r3, [sp, #28]
 8008a24:	2800      	cmp	r0, #0
 8008a26:	d1d7      	bne.n	80089d8 <__gethex+0x22c>
 8008a28:	461e      	mov	r6, r3
 8008a2a:	e78b      	b.n	8008944 <__gethex+0x198>
 8008a2c:	f04f 0a03 	mov.w	sl, #3
 8008a30:	e7b8      	b.n	80089a4 <__gethex+0x1f8>
 8008a32:	da0a      	bge.n	8008a4a <__gethex+0x29e>
 8008a34:	1a37      	subs	r7, r6, r0
 8008a36:	4621      	mov	r1, r4
 8008a38:	ee18 0a10 	vmov	r0, s16
 8008a3c:	463a      	mov	r2, r7
 8008a3e:	f000 fc37 	bl	80092b0 <__lshift>
 8008a42:	1bed      	subs	r5, r5, r7
 8008a44:	4604      	mov	r4, r0
 8008a46:	f100 0914 	add.w	r9, r0, #20
 8008a4a:	f04f 0a00 	mov.w	sl, #0
 8008a4e:	e7ae      	b.n	80089ae <__gethex+0x202>
 8008a50:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008a54:	42a8      	cmp	r0, r5
 8008a56:	dd72      	ble.n	8008b3e <__gethex+0x392>
 8008a58:	1b45      	subs	r5, r0, r5
 8008a5a:	42ae      	cmp	r6, r5
 8008a5c:	dc36      	bgt.n	8008acc <__gethex+0x320>
 8008a5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d02a      	beq.n	8008abc <__gethex+0x310>
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	d02c      	beq.n	8008ac4 <__gethex+0x318>
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d11c      	bne.n	8008aa8 <__gethex+0x2fc>
 8008a6e:	42ae      	cmp	r6, r5
 8008a70:	d11a      	bne.n	8008aa8 <__gethex+0x2fc>
 8008a72:	2e01      	cmp	r6, #1
 8008a74:	d112      	bne.n	8008a9c <__gethex+0x2f0>
 8008a76:	9a04      	ldr	r2, [sp, #16]
 8008a78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	2301      	movs	r3, #1
 8008a80:	6123      	str	r3, [r4, #16]
 8008a82:	f8c9 3000 	str.w	r3, [r9]
 8008a86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a88:	2762      	movs	r7, #98	; 0x62
 8008a8a:	601c      	str	r4, [r3, #0]
 8008a8c:	e723      	b.n	80088d6 <__gethex+0x12a>
 8008a8e:	bf00      	nop
 8008a90:	0800b218 	.word	0x0800b218
 8008a94:	0800b1a0 	.word	0x0800b1a0
 8008a98:	0800b1b1 	.word	0x0800b1b1
 8008a9c:	1e71      	subs	r1, r6, #1
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 fe4a 	bl	8009738 <__any_on>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d1e6      	bne.n	8008a76 <__gethex+0x2ca>
 8008aa8:	ee18 0a10 	vmov	r0, s16
 8008aac:	4621      	mov	r1, r4
 8008aae:	f000 f9e3 	bl	8008e78 <_Bfree>
 8008ab2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	6013      	str	r3, [r2, #0]
 8008ab8:	2750      	movs	r7, #80	; 0x50
 8008aba:	e70c      	b.n	80088d6 <__gethex+0x12a>
 8008abc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1f2      	bne.n	8008aa8 <__gethex+0x2fc>
 8008ac2:	e7d8      	b.n	8008a76 <__gethex+0x2ca>
 8008ac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1d5      	bne.n	8008a76 <__gethex+0x2ca>
 8008aca:	e7ed      	b.n	8008aa8 <__gethex+0x2fc>
 8008acc:	1e6f      	subs	r7, r5, #1
 8008ace:	f1ba 0f00 	cmp.w	sl, #0
 8008ad2:	d131      	bne.n	8008b38 <__gethex+0x38c>
 8008ad4:	b127      	cbz	r7, 8008ae0 <__gethex+0x334>
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 fe2d 	bl	8009738 <__any_on>
 8008ade:	4682      	mov	sl, r0
 8008ae0:	117b      	asrs	r3, r7, #5
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008ae8:	f007 071f 	and.w	r7, r7, #31
 8008aec:	fa01 f707 	lsl.w	r7, r1, r7
 8008af0:	421f      	tst	r7, r3
 8008af2:	4629      	mov	r1, r5
 8008af4:	4620      	mov	r0, r4
 8008af6:	bf18      	it	ne
 8008af8:	f04a 0a02 	orrne.w	sl, sl, #2
 8008afc:	1b76      	subs	r6, r6, r5
 8008afe:	f7ff fded 	bl	80086dc <rshift>
 8008b02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b06:	2702      	movs	r7, #2
 8008b08:	f1ba 0f00 	cmp.w	sl, #0
 8008b0c:	d048      	beq.n	8008ba0 <__gethex+0x3f4>
 8008b0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d015      	beq.n	8008b42 <__gethex+0x396>
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d017      	beq.n	8008b4a <__gethex+0x39e>
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d109      	bne.n	8008b32 <__gethex+0x386>
 8008b1e:	f01a 0f02 	tst.w	sl, #2
 8008b22:	d006      	beq.n	8008b32 <__gethex+0x386>
 8008b24:	f8d9 0000 	ldr.w	r0, [r9]
 8008b28:	ea4a 0a00 	orr.w	sl, sl, r0
 8008b2c:	f01a 0f01 	tst.w	sl, #1
 8008b30:	d10e      	bne.n	8008b50 <__gethex+0x3a4>
 8008b32:	f047 0710 	orr.w	r7, r7, #16
 8008b36:	e033      	b.n	8008ba0 <__gethex+0x3f4>
 8008b38:	f04f 0a01 	mov.w	sl, #1
 8008b3c:	e7d0      	b.n	8008ae0 <__gethex+0x334>
 8008b3e:	2701      	movs	r7, #1
 8008b40:	e7e2      	b.n	8008b08 <__gethex+0x35c>
 8008b42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b44:	f1c3 0301 	rsb	r3, r3, #1
 8008b48:	9315      	str	r3, [sp, #84]	; 0x54
 8008b4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0f0      	beq.n	8008b32 <__gethex+0x386>
 8008b50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b54:	f104 0314 	add.w	r3, r4, #20
 8008b58:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b5c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b60:	f04f 0c00 	mov.w	ip, #0
 8008b64:	4618      	mov	r0, r3
 8008b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b6a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b6e:	d01c      	beq.n	8008baa <__gethex+0x3fe>
 8008b70:	3201      	adds	r2, #1
 8008b72:	6002      	str	r2, [r0, #0]
 8008b74:	2f02      	cmp	r7, #2
 8008b76:	f104 0314 	add.w	r3, r4, #20
 8008b7a:	d13f      	bne.n	8008bfc <__gethex+0x450>
 8008b7c:	f8d8 2000 	ldr.w	r2, [r8]
 8008b80:	3a01      	subs	r2, #1
 8008b82:	42b2      	cmp	r2, r6
 8008b84:	d10a      	bne.n	8008b9c <__gethex+0x3f0>
 8008b86:	1171      	asrs	r1, r6, #5
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b8e:	f006 061f 	and.w	r6, r6, #31
 8008b92:	fa02 f606 	lsl.w	r6, r2, r6
 8008b96:	421e      	tst	r6, r3
 8008b98:	bf18      	it	ne
 8008b9a:	4617      	movne	r7, r2
 8008b9c:	f047 0720 	orr.w	r7, r7, #32
 8008ba0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ba2:	601c      	str	r4, [r3, #0]
 8008ba4:	9b04      	ldr	r3, [sp, #16]
 8008ba6:	601d      	str	r5, [r3, #0]
 8008ba8:	e695      	b.n	80088d6 <__gethex+0x12a>
 8008baa:	4299      	cmp	r1, r3
 8008bac:	f843 cc04 	str.w	ip, [r3, #-4]
 8008bb0:	d8d8      	bhi.n	8008b64 <__gethex+0x3b8>
 8008bb2:	68a3      	ldr	r3, [r4, #8]
 8008bb4:	459b      	cmp	fp, r3
 8008bb6:	db19      	blt.n	8008bec <__gethex+0x440>
 8008bb8:	6861      	ldr	r1, [r4, #4]
 8008bba:	ee18 0a10 	vmov	r0, s16
 8008bbe:	3101      	adds	r1, #1
 8008bc0:	f000 f91a 	bl	8008df8 <_Balloc>
 8008bc4:	4681      	mov	r9, r0
 8008bc6:	b918      	cbnz	r0, 8008bd0 <__gethex+0x424>
 8008bc8:	4b1a      	ldr	r3, [pc, #104]	; (8008c34 <__gethex+0x488>)
 8008bca:	4602      	mov	r2, r0
 8008bcc:	2184      	movs	r1, #132	; 0x84
 8008bce:	e6a8      	b.n	8008922 <__gethex+0x176>
 8008bd0:	6922      	ldr	r2, [r4, #16]
 8008bd2:	3202      	adds	r2, #2
 8008bd4:	f104 010c 	add.w	r1, r4, #12
 8008bd8:	0092      	lsls	r2, r2, #2
 8008bda:	300c      	adds	r0, #12
 8008bdc:	f7fd f952 	bl	8005e84 <memcpy>
 8008be0:	4621      	mov	r1, r4
 8008be2:	ee18 0a10 	vmov	r0, s16
 8008be6:	f000 f947 	bl	8008e78 <_Bfree>
 8008bea:	464c      	mov	r4, r9
 8008bec:	6923      	ldr	r3, [r4, #16]
 8008bee:	1c5a      	adds	r2, r3, #1
 8008bf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008bf4:	6122      	str	r2, [r4, #16]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	615a      	str	r2, [r3, #20]
 8008bfa:	e7bb      	b.n	8008b74 <__gethex+0x3c8>
 8008bfc:	6922      	ldr	r2, [r4, #16]
 8008bfe:	455a      	cmp	r2, fp
 8008c00:	dd0b      	ble.n	8008c1a <__gethex+0x46e>
 8008c02:	2101      	movs	r1, #1
 8008c04:	4620      	mov	r0, r4
 8008c06:	f7ff fd69 	bl	80086dc <rshift>
 8008c0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c0e:	3501      	adds	r5, #1
 8008c10:	42ab      	cmp	r3, r5
 8008c12:	f6ff aed0 	blt.w	80089b6 <__gethex+0x20a>
 8008c16:	2701      	movs	r7, #1
 8008c18:	e7c0      	b.n	8008b9c <__gethex+0x3f0>
 8008c1a:	f016 061f 	ands.w	r6, r6, #31
 8008c1e:	d0fa      	beq.n	8008c16 <__gethex+0x46a>
 8008c20:	4453      	add	r3, sl
 8008c22:	f1c6 0620 	rsb	r6, r6, #32
 8008c26:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c2a:	f000 f9d7 	bl	8008fdc <__hi0bits>
 8008c2e:	42b0      	cmp	r0, r6
 8008c30:	dbe7      	blt.n	8008c02 <__gethex+0x456>
 8008c32:	e7f0      	b.n	8008c16 <__gethex+0x46a>
 8008c34:	0800b1a0 	.word	0x0800b1a0

08008c38 <L_shift>:
 8008c38:	f1c2 0208 	rsb	r2, r2, #8
 8008c3c:	0092      	lsls	r2, r2, #2
 8008c3e:	b570      	push	{r4, r5, r6, lr}
 8008c40:	f1c2 0620 	rsb	r6, r2, #32
 8008c44:	6843      	ldr	r3, [r0, #4]
 8008c46:	6804      	ldr	r4, [r0, #0]
 8008c48:	fa03 f506 	lsl.w	r5, r3, r6
 8008c4c:	432c      	orrs	r4, r5
 8008c4e:	40d3      	lsrs	r3, r2
 8008c50:	6004      	str	r4, [r0, #0]
 8008c52:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c56:	4288      	cmp	r0, r1
 8008c58:	d3f4      	bcc.n	8008c44 <L_shift+0xc>
 8008c5a:	bd70      	pop	{r4, r5, r6, pc}

08008c5c <__match>:
 8008c5c:	b530      	push	{r4, r5, lr}
 8008c5e:	6803      	ldr	r3, [r0, #0]
 8008c60:	3301      	adds	r3, #1
 8008c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c66:	b914      	cbnz	r4, 8008c6e <__match+0x12>
 8008c68:	6003      	str	r3, [r0, #0]
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	bd30      	pop	{r4, r5, pc}
 8008c6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008c76:	2d19      	cmp	r5, #25
 8008c78:	bf98      	it	ls
 8008c7a:	3220      	addls	r2, #32
 8008c7c:	42a2      	cmp	r2, r4
 8008c7e:	d0f0      	beq.n	8008c62 <__match+0x6>
 8008c80:	2000      	movs	r0, #0
 8008c82:	e7f3      	b.n	8008c6c <__match+0x10>

08008c84 <__hexnan>:
 8008c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c88:	680b      	ldr	r3, [r1, #0]
 8008c8a:	115e      	asrs	r6, r3, #5
 8008c8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c90:	f013 031f 	ands.w	r3, r3, #31
 8008c94:	b087      	sub	sp, #28
 8008c96:	bf18      	it	ne
 8008c98:	3604      	addne	r6, #4
 8008c9a:	2500      	movs	r5, #0
 8008c9c:	1f37      	subs	r7, r6, #4
 8008c9e:	4690      	mov	r8, r2
 8008ca0:	6802      	ldr	r2, [r0, #0]
 8008ca2:	9301      	str	r3, [sp, #4]
 8008ca4:	4682      	mov	sl, r0
 8008ca6:	f846 5c04 	str.w	r5, [r6, #-4]
 8008caa:	46b9      	mov	r9, r7
 8008cac:	463c      	mov	r4, r7
 8008cae:	9502      	str	r5, [sp, #8]
 8008cb0:	46ab      	mov	fp, r5
 8008cb2:	7851      	ldrb	r1, [r2, #1]
 8008cb4:	1c53      	adds	r3, r2, #1
 8008cb6:	9303      	str	r3, [sp, #12]
 8008cb8:	b341      	cbz	r1, 8008d0c <__hexnan+0x88>
 8008cba:	4608      	mov	r0, r1
 8008cbc:	9205      	str	r2, [sp, #20]
 8008cbe:	9104      	str	r1, [sp, #16]
 8008cc0:	f7ff fd5e 	bl	8008780 <__hexdig_fun>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d14f      	bne.n	8008d68 <__hexnan+0xe4>
 8008cc8:	9904      	ldr	r1, [sp, #16]
 8008cca:	9a05      	ldr	r2, [sp, #20]
 8008ccc:	2920      	cmp	r1, #32
 8008cce:	d818      	bhi.n	8008d02 <__hexnan+0x7e>
 8008cd0:	9b02      	ldr	r3, [sp, #8]
 8008cd2:	459b      	cmp	fp, r3
 8008cd4:	dd13      	ble.n	8008cfe <__hexnan+0x7a>
 8008cd6:	454c      	cmp	r4, r9
 8008cd8:	d206      	bcs.n	8008ce8 <__hexnan+0x64>
 8008cda:	2d07      	cmp	r5, #7
 8008cdc:	dc04      	bgt.n	8008ce8 <__hexnan+0x64>
 8008cde:	462a      	mov	r2, r5
 8008ce0:	4649      	mov	r1, r9
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f7ff ffa8 	bl	8008c38 <L_shift>
 8008ce8:	4544      	cmp	r4, r8
 8008cea:	d950      	bls.n	8008d8e <__hexnan+0x10a>
 8008cec:	2300      	movs	r3, #0
 8008cee:	f1a4 0904 	sub.w	r9, r4, #4
 8008cf2:	f844 3c04 	str.w	r3, [r4, #-4]
 8008cf6:	f8cd b008 	str.w	fp, [sp, #8]
 8008cfa:	464c      	mov	r4, r9
 8008cfc:	461d      	mov	r5, r3
 8008cfe:	9a03      	ldr	r2, [sp, #12]
 8008d00:	e7d7      	b.n	8008cb2 <__hexnan+0x2e>
 8008d02:	2929      	cmp	r1, #41	; 0x29
 8008d04:	d156      	bne.n	8008db4 <__hexnan+0x130>
 8008d06:	3202      	adds	r2, #2
 8008d08:	f8ca 2000 	str.w	r2, [sl]
 8008d0c:	f1bb 0f00 	cmp.w	fp, #0
 8008d10:	d050      	beq.n	8008db4 <__hexnan+0x130>
 8008d12:	454c      	cmp	r4, r9
 8008d14:	d206      	bcs.n	8008d24 <__hexnan+0xa0>
 8008d16:	2d07      	cmp	r5, #7
 8008d18:	dc04      	bgt.n	8008d24 <__hexnan+0xa0>
 8008d1a:	462a      	mov	r2, r5
 8008d1c:	4649      	mov	r1, r9
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f7ff ff8a 	bl	8008c38 <L_shift>
 8008d24:	4544      	cmp	r4, r8
 8008d26:	d934      	bls.n	8008d92 <__hexnan+0x10e>
 8008d28:	f1a8 0204 	sub.w	r2, r8, #4
 8008d2c:	4623      	mov	r3, r4
 8008d2e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d32:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d36:	429f      	cmp	r7, r3
 8008d38:	d2f9      	bcs.n	8008d2e <__hexnan+0xaa>
 8008d3a:	1b3b      	subs	r3, r7, r4
 8008d3c:	f023 0303 	bic.w	r3, r3, #3
 8008d40:	3304      	adds	r3, #4
 8008d42:	3401      	adds	r4, #1
 8008d44:	3e03      	subs	r6, #3
 8008d46:	42b4      	cmp	r4, r6
 8008d48:	bf88      	it	hi
 8008d4a:	2304      	movhi	r3, #4
 8008d4c:	4443      	add	r3, r8
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f843 2b04 	str.w	r2, [r3], #4
 8008d54:	429f      	cmp	r7, r3
 8008d56:	d2fb      	bcs.n	8008d50 <__hexnan+0xcc>
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	b91b      	cbnz	r3, 8008d64 <__hexnan+0xe0>
 8008d5c:	4547      	cmp	r7, r8
 8008d5e:	d127      	bne.n	8008db0 <__hexnan+0x12c>
 8008d60:	2301      	movs	r3, #1
 8008d62:	603b      	str	r3, [r7, #0]
 8008d64:	2005      	movs	r0, #5
 8008d66:	e026      	b.n	8008db6 <__hexnan+0x132>
 8008d68:	3501      	adds	r5, #1
 8008d6a:	2d08      	cmp	r5, #8
 8008d6c:	f10b 0b01 	add.w	fp, fp, #1
 8008d70:	dd06      	ble.n	8008d80 <__hexnan+0xfc>
 8008d72:	4544      	cmp	r4, r8
 8008d74:	d9c3      	bls.n	8008cfe <__hexnan+0x7a>
 8008d76:	2300      	movs	r3, #0
 8008d78:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d7c:	2501      	movs	r5, #1
 8008d7e:	3c04      	subs	r4, #4
 8008d80:	6822      	ldr	r2, [r4, #0]
 8008d82:	f000 000f 	and.w	r0, r0, #15
 8008d86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008d8a:	6022      	str	r2, [r4, #0]
 8008d8c:	e7b7      	b.n	8008cfe <__hexnan+0x7a>
 8008d8e:	2508      	movs	r5, #8
 8008d90:	e7b5      	b.n	8008cfe <__hexnan+0x7a>
 8008d92:	9b01      	ldr	r3, [sp, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d0df      	beq.n	8008d58 <__hexnan+0xd4>
 8008d98:	f04f 32ff 	mov.w	r2, #4294967295
 8008d9c:	f1c3 0320 	rsb	r3, r3, #32
 8008da0:	fa22 f303 	lsr.w	r3, r2, r3
 8008da4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008da8:	401a      	ands	r2, r3
 8008daa:	f846 2c04 	str.w	r2, [r6, #-4]
 8008dae:	e7d3      	b.n	8008d58 <__hexnan+0xd4>
 8008db0:	3f04      	subs	r7, #4
 8008db2:	e7d1      	b.n	8008d58 <__hexnan+0xd4>
 8008db4:	2004      	movs	r0, #4
 8008db6:	b007      	add	sp, #28
 8008db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008dbc <_localeconv_r>:
 8008dbc:	4800      	ldr	r0, [pc, #0]	; (8008dc0 <_localeconv_r+0x4>)
 8008dbe:	4770      	bx	lr
 8008dc0:	2000016c 	.word	0x2000016c

08008dc4 <malloc>:
 8008dc4:	4b02      	ldr	r3, [pc, #8]	; (8008dd0 <malloc+0xc>)
 8008dc6:	4601      	mov	r1, r0
 8008dc8:	6818      	ldr	r0, [r3, #0]
 8008dca:	f000 bd59 	b.w	8009880 <_malloc_r>
 8008dce:	bf00      	nop
 8008dd0:	20000014 	.word	0x20000014

08008dd4 <__ascii_mbtowc>:
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	b901      	cbnz	r1, 8008dda <__ascii_mbtowc+0x6>
 8008dd8:	a901      	add	r1, sp, #4
 8008dda:	b142      	cbz	r2, 8008dee <__ascii_mbtowc+0x1a>
 8008ddc:	b14b      	cbz	r3, 8008df2 <__ascii_mbtowc+0x1e>
 8008dde:	7813      	ldrb	r3, [r2, #0]
 8008de0:	600b      	str	r3, [r1, #0]
 8008de2:	7812      	ldrb	r2, [r2, #0]
 8008de4:	1e10      	subs	r0, r2, #0
 8008de6:	bf18      	it	ne
 8008de8:	2001      	movne	r0, #1
 8008dea:	b002      	add	sp, #8
 8008dec:	4770      	bx	lr
 8008dee:	4610      	mov	r0, r2
 8008df0:	e7fb      	b.n	8008dea <__ascii_mbtowc+0x16>
 8008df2:	f06f 0001 	mvn.w	r0, #1
 8008df6:	e7f8      	b.n	8008dea <__ascii_mbtowc+0x16>

08008df8 <_Balloc>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	460d      	mov	r5, r1
 8008e00:	b976      	cbnz	r6, 8008e20 <_Balloc+0x28>
 8008e02:	2010      	movs	r0, #16
 8008e04:	f7ff ffde 	bl	8008dc4 <malloc>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	6260      	str	r0, [r4, #36]	; 0x24
 8008e0c:	b920      	cbnz	r0, 8008e18 <_Balloc+0x20>
 8008e0e:	4b18      	ldr	r3, [pc, #96]	; (8008e70 <_Balloc+0x78>)
 8008e10:	4818      	ldr	r0, [pc, #96]	; (8008e74 <_Balloc+0x7c>)
 8008e12:	2166      	movs	r1, #102	; 0x66
 8008e14:	f000 ff3e 	bl	8009c94 <__assert_func>
 8008e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e1c:	6006      	str	r6, [r0, #0]
 8008e1e:	60c6      	str	r6, [r0, #12]
 8008e20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e22:	68f3      	ldr	r3, [r6, #12]
 8008e24:	b183      	cbz	r3, 8008e48 <_Balloc+0x50>
 8008e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e2e:	b9b8      	cbnz	r0, 8008e60 <_Balloc+0x68>
 8008e30:	2101      	movs	r1, #1
 8008e32:	fa01 f605 	lsl.w	r6, r1, r5
 8008e36:	1d72      	adds	r2, r6, #5
 8008e38:	0092      	lsls	r2, r2, #2
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 fc9d 	bl	800977a <_calloc_r>
 8008e40:	b160      	cbz	r0, 8008e5c <_Balloc+0x64>
 8008e42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e46:	e00e      	b.n	8008e66 <_Balloc+0x6e>
 8008e48:	2221      	movs	r2, #33	; 0x21
 8008e4a:	2104      	movs	r1, #4
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f000 fc94 	bl	800977a <_calloc_r>
 8008e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e54:	60f0      	str	r0, [r6, #12]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e4      	bne.n	8008e26 <_Balloc+0x2e>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	6802      	ldr	r2, [r0, #0]
 8008e62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e66:	2300      	movs	r3, #0
 8008e68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e6c:	e7f7      	b.n	8008e5e <_Balloc+0x66>
 8008e6e:	bf00      	nop
 8008e70:	0800b12e 	.word	0x0800b12e
 8008e74:	0800b22c 	.word	0x0800b22c

08008e78 <_Bfree>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	460c      	mov	r4, r1
 8008e80:	b976      	cbnz	r6, 8008ea0 <_Bfree+0x28>
 8008e82:	2010      	movs	r0, #16
 8008e84:	f7ff ff9e 	bl	8008dc4 <malloc>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	6268      	str	r0, [r5, #36]	; 0x24
 8008e8c:	b920      	cbnz	r0, 8008e98 <_Bfree+0x20>
 8008e8e:	4b09      	ldr	r3, [pc, #36]	; (8008eb4 <_Bfree+0x3c>)
 8008e90:	4809      	ldr	r0, [pc, #36]	; (8008eb8 <_Bfree+0x40>)
 8008e92:	218a      	movs	r1, #138	; 0x8a
 8008e94:	f000 fefe 	bl	8009c94 <__assert_func>
 8008e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e9c:	6006      	str	r6, [r0, #0]
 8008e9e:	60c6      	str	r6, [r0, #12]
 8008ea0:	b13c      	cbz	r4, 8008eb2 <_Bfree+0x3a>
 8008ea2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ea4:	6862      	ldr	r2, [r4, #4]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008eac:	6021      	str	r1, [r4, #0]
 8008eae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	0800b12e 	.word	0x0800b12e
 8008eb8:	0800b22c 	.word	0x0800b22c

08008ebc <__multadd>:
 8008ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec0:	690d      	ldr	r5, [r1, #16]
 8008ec2:	4607      	mov	r7, r0
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	461e      	mov	r6, r3
 8008ec8:	f101 0c14 	add.w	ip, r1, #20
 8008ecc:	2000      	movs	r0, #0
 8008ece:	f8dc 3000 	ldr.w	r3, [ip]
 8008ed2:	b299      	uxth	r1, r3
 8008ed4:	fb02 6101 	mla	r1, r2, r1, r6
 8008ed8:	0c1e      	lsrs	r6, r3, #16
 8008eda:	0c0b      	lsrs	r3, r1, #16
 8008edc:	fb02 3306 	mla	r3, r2, r6, r3
 8008ee0:	b289      	uxth	r1, r1
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ee8:	4285      	cmp	r5, r0
 8008eea:	f84c 1b04 	str.w	r1, [ip], #4
 8008eee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ef2:	dcec      	bgt.n	8008ece <__multadd+0x12>
 8008ef4:	b30e      	cbz	r6, 8008f3a <__multadd+0x7e>
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	42ab      	cmp	r3, r5
 8008efa:	dc19      	bgt.n	8008f30 <__multadd+0x74>
 8008efc:	6861      	ldr	r1, [r4, #4]
 8008efe:	4638      	mov	r0, r7
 8008f00:	3101      	adds	r1, #1
 8008f02:	f7ff ff79 	bl	8008df8 <_Balloc>
 8008f06:	4680      	mov	r8, r0
 8008f08:	b928      	cbnz	r0, 8008f16 <__multadd+0x5a>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	4b0c      	ldr	r3, [pc, #48]	; (8008f40 <__multadd+0x84>)
 8008f0e:	480d      	ldr	r0, [pc, #52]	; (8008f44 <__multadd+0x88>)
 8008f10:	21b5      	movs	r1, #181	; 0xb5
 8008f12:	f000 febf 	bl	8009c94 <__assert_func>
 8008f16:	6922      	ldr	r2, [r4, #16]
 8008f18:	3202      	adds	r2, #2
 8008f1a:	f104 010c 	add.w	r1, r4, #12
 8008f1e:	0092      	lsls	r2, r2, #2
 8008f20:	300c      	adds	r0, #12
 8008f22:	f7fc ffaf 	bl	8005e84 <memcpy>
 8008f26:	4621      	mov	r1, r4
 8008f28:	4638      	mov	r0, r7
 8008f2a:	f7ff ffa5 	bl	8008e78 <_Bfree>
 8008f2e:	4644      	mov	r4, r8
 8008f30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f34:	3501      	adds	r5, #1
 8008f36:	615e      	str	r6, [r3, #20]
 8008f38:	6125      	str	r5, [r4, #16]
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f40:	0800b1a0 	.word	0x0800b1a0
 8008f44:	0800b22c 	.word	0x0800b22c

08008f48 <__s2b>:
 8008f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	4615      	mov	r5, r2
 8008f50:	461f      	mov	r7, r3
 8008f52:	2209      	movs	r2, #9
 8008f54:	3308      	adds	r3, #8
 8008f56:	4606      	mov	r6, r0
 8008f58:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	2201      	movs	r2, #1
 8008f60:	429a      	cmp	r2, r3
 8008f62:	db09      	blt.n	8008f78 <__s2b+0x30>
 8008f64:	4630      	mov	r0, r6
 8008f66:	f7ff ff47 	bl	8008df8 <_Balloc>
 8008f6a:	b940      	cbnz	r0, 8008f7e <__s2b+0x36>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	4b19      	ldr	r3, [pc, #100]	; (8008fd4 <__s2b+0x8c>)
 8008f70:	4819      	ldr	r0, [pc, #100]	; (8008fd8 <__s2b+0x90>)
 8008f72:	21ce      	movs	r1, #206	; 0xce
 8008f74:	f000 fe8e 	bl	8009c94 <__assert_func>
 8008f78:	0052      	lsls	r2, r2, #1
 8008f7a:	3101      	adds	r1, #1
 8008f7c:	e7f0      	b.n	8008f60 <__s2b+0x18>
 8008f7e:	9b08      	ldr	r3, [sp, #32]
 8008f80:	6143      	str	r3, [r0, #20]
 8008f82:	2d09      	cmp	r5, #9
 8008f84:	f04f 0301 	mov.w	r3, #1
 8008f88:	6103      	str	r3, [r0, #16]
 8008f8a:	dd16      	ble.n	8008fba <__s2b+0x72>
 8008f8c:	f104 0909 	add.w	r9, r4, #9
 8008f90:	46c8      	mov	r8, r9
 8008f92:	442c      	add	r4, r5
 8008f94:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008f98:	4601      	mov	r1, r0
 8008f9a:	3b30      	subs	r3, #48	; 0x30
 8008f9c:	220a      	movs	r2, #10
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7ff ff8c 	bl	8008ebc <__multadd>
 8008fa4:	45a0      	cmp	r8, r4
 8008fa6:	d1f5      	bne.n	8008f94 <__s2b+0x4c>
 8008fa8:	f1a5 0408 	sub.w	r4, r5, #8
 8008fac:	444c      	add	r4, r9
 8008fae:	1b2d      	subs	r5, r5, r4
 8008fb0:	1963      	adds	r3, r4, r5
 8008fb2:	42bb      	cmp	r3, r7
 8008fb4:	db04      	blt.n	8008fc0 <__s2b+0x78>
 8008fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fba:	340a      	adds	r4, #10
 8008fbc:	2509      	movs	r5, #9
 8008fbe:	e7f6      	b.n	8008fae <__s2b+0x66>
 8008fc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008fc4:	4601      	mov	r1, r0
 8008fc6:	3b30      	subs	r3, #48	; 0x30
 8008fc8:	220a      	movs	r2, #10
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f7ff ff76 	bl	8008ebc <__multadd>
 8008fd0:	e7ee      	b.n	8008fb0 <__s2b+0x68>
 8008fd2:	bf00      	nop
 8008fd4:	0800b1a0 	.word	0x0800b1a0
 8008fd8:	0800b22c 	.word	0x0800b22c

08008fdc <__hi0bits>:
 8008fdc:	0c03      	lsrs	r3, r0, #16
 8008fde:	041b      	lsls	r3, r3, #16
 8008fe0:	b9d3      	cbnz	r3, 8009018 <__hi0bits+0x3c>
 8008fe2:	0400      	lsls	r0, r0, #16
 8008fe4:	2310      	movs	r3, #16
 8008fe6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008fea:	bf04      	itt	eq
 8008fec:	0200      	lsleq	r0, r0, #8
 8008fee:	3308      	addeq	r3, #8
 8008ff0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ff4:	bf04      	itt	eq
 8008ff6:	0100      	lsleq	r0, r0, #4
 8008ff8:	3304      	addeq	r3, #4
 8008ffa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ffe:	bf04      	itt	eq
 8009000:	0080      	lsleq	r0, r0, #2
 8009002:	3302      	addeq	r3, #2
 8009004:	2800      	cmp	r0, #0
 8009006:	db05      	blt.n	8009014 <__hi0bits+0x38>
 8009008:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800900c:	f103 0301 	add.w	r3, r3, #1
 8009010:	bf08      	it	eq
 8009012:	2320      	moveq	r3, #32
 8009014:	4618      	mov	r0, r3
 8009016:	4770      	bx	lr
 8009018:	2300      	movs	r3, #0
 800901a:	e7e4      	b.n	8008fe6 <__hi0bits+0xa>

0800901c <__lo0bits>:
 800901c:	6803      	ldr	r3, [r0, #0]
 800901e:	f013 0207 	ands.w	r2, r3, #7
 8009022:	4601      	mov	r1, r0
 8009024:	d00b      	beq.n	800903e <__lo0bits+0x22>
 8009026:	07da      	lsls	r2, r3, #31
 8009028:	d423      	bmi.n	8009072 <__lo0bits+0x56>
 800902a:	0798      	lsls	r0, r3, #30
 800902c:	bf49      	itett	mi
 800902e:	085b      	lsrmi	r3, r3, #1
 8009030:	089b      	lsrpl	r3, r3, #2
 8009032:	2001      	movmi	r0, #1
 8009034:	600b      	strmi	r3, [r1, #0]
 8009036:	bf5c      	itt	pl
 8009038:	600b      	strpl	r3, [r1, #0]
 800903a:	2002      	movpl	r0, #2
 800903c:	4770      	bx	lr
 800903e:	b298      	uxth	r0, r3
 8009040:	b9a8      	cbnz	r0, 800906e <__lo0bits+0x52>
 8009042:	0c1b      	lsrs	r3, r3, #16
 8009044:	2010      	movs	r0, #16
 8009046:	b2da      	uxtb	r2, r3
 8009048:	b90a      	cbnz	r2, 800904e <__lo0bits+0x32>
 800904a:	3008      	adds	r0, #8
 800904c:	0a1b      	lsrs	r3, r3, #8
 800904e:	071a      	lsls	r2, r3, #28
 8009050:	bf04      	itt	eq
 8009052:	091b      	lsreq	r3, r3, #4
 8009054:	3004      	addeq	r0, #4
 8009056:	079a      	lsls	r2, r3, #30
 8009058:	bf04      	itt	eq
 800905a:	089b      	lsreq	r3, r3, #2
 800905c:	3002      	addeq	r0, #2
 800905e:	07da      	lsls	r2, r3, #31
 8009060:	d403      	bmi.n	800906a <__lo0bits+0x4e>
 8009062:	085b      	lsrs	r3, r3, #1
 8009064:	f100 0001 	add.w	r0, r0, #1
 8009068:	d005      	beq.n	8009076 <__lo0bits+0x5a>
 800906a:	600b      	str	r3, [r1, #0]
 800906c:	4770      	bx	lr
 800906e:	4610      	mov	r0, r2
 8009070:	e7e9      	b.n	8009046 <__lo0bits+0x2a>
 8009072:	2000      	movs	r0, #0
 8009074:	4770      	bx	lr
 8009076:	2020      	movs	r0, #32
 8009078:	4770      	bx	lr
	...

0800907c <__i2b>:
 800907c:	b510      	push	{r4, lr}
 800907e:	460c      	mov	r4, r1
 8009080:	2101      	movs	r1, #1
 8009082:	f7ff feb9 	bl	8008df8 <_Balloc>
 8009086:	4602      	mov	r2, r0
 8009088:	b928      	cbnz	r0, 8009096 <__i2b+0x1a>
 800908a:	4b05      	ldr	r3, [pc, #20]	; (80090a0 <__i2b+0x24>)
 800908c:	4805      	ldr	r0, [pc, #20]	; (80090a4 <__i2b+0x28>)
 800908e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009092:	f000 fdff 	bl	8009c94 <__assert_func>
 8009096:	2301      	movs	r3, #1
 8009098:	6144      	str	r4, [r0, #20]
 800909a:	6103      	str	r3, [r0, #16]
 800909c:	bd10      	pop	{r4, pc}
 800909e:	bf00      	nop
 80090a0:	0800b1a0 	.word	0x0800b1a0
 80090a4:	0800b22c 	.word	0x0800b22c

080090a8 <__multiply>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	4691      	mov	r9, r2
 80090ae:	690a      	ldr	r2, [r1, #16]
 80090b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	bfb8      	it	lt
 80090b8:	460b      	movlt	r3, r1
 80090ba:	460c      	mov	r4, r1
 80090bc:	bfbc      	itt	lt
 80090be:	464c      	movlt	r4, r9
 80090c0:	4699      	movlt	r9, r3
 80090c2:	6927      	ldr	r7, [r4, #16]
 80090c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090c8:	68a3      	ldr	r3, [r4, #8]
 80090ca:	6861      	ldr	r1, [r4, #4]
 80090cc:	eb07 060a 	add.w	r6, r7, sl
 80090d0:	42b3      	cmp	r3, r6
 80090d2:	b085      	sub	sp, #20
 80090d4:	bfb8      	it	lt
 80090d6:	3101      	addlt	r1, #1
 80090d8:	f7ff fe8e 	bl	8008df8 <_Balloc>
 80090dc:	b930      	cbnz	r0, 80090ec <__multiply+0x44>
 80090de:	4602      	mov	r2, r0
 80090e0:	4b44      	ldr	r3, [pc, #272]	; (80091f4 <__multiply+0x14c>)
 80090e2:	4845      	ldr	r0, [pc, #276]	; (80091f8 <__multiply+0x150>)
 80090e4:	f240 115d 	movw	r1, #349	; 0x15d
 80090e8:	f000 fdd4 	bl	8009c94 <__assert_func>
 80090ec:	f100 0514 	add.w	r5, r0, #20
 80090f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090f4:	462b      	mov	r3, r5
 80090f6:	2200      	movs	r2, #0
 80090f8:	4543      	cmp	r3, r8
 80090fa:	d321      	bcc.n	8009140 <__multiply+0x98>
 80090fc:	f104 0314 	add.w	r3, r4, #20
 8009100:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009104:	f109 0314 	add.w	r3, r9, #20
 8009108:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800910c:	9202      	str	r2, [sp, #8]
 800910e:	1b3a      	subs	r2, r7, r4
 8009110:	3a15      	subs	r2, #21
 8009112:	f022 0203 	bic.w	r2, r2, #3
 8009116:	3204      	adds	r2, #4
 8009118:	f104 0115 	add.w	r1, r4, #21
 800911c:	428f      	cmp	r7, r1
 800911e:	bf38      	it	cc
 8009120:	2204      	movcc	r2, #4
 8009122:	9201      	str	r2, [sp, #4]
 8009124:	9a02      	ldr	r2, [sp, #8]
 8009126:	9303      	str	r3, [sp, #12]
 8009128:	429a      	cmp	r2, r3
 800912a:	d80c      	bhi.n	8009146 <__multiply+0x9e>
 800912c:	2e00      	cmp	r6, #0
 800912e:	dd03      	ble.n	8009138 <__multiply+0x90>
 8009130:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009134:	2b00      	cmp	r3, #0
 8009136:	d05a      	beq.n	80091ee <__multiply+0x146>
 8009138:	6106      	str	r6, [r0, #16]
 800913a:	b005      	add	sp, #20
 800913c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009140:	f843 2b04 	str.w	r2, [r3], #4
 8009144:	e7d8      	b.n	80090f8 <__multiply+0x50>
 8009146:	f8b3 a000 	ldrh.w	sl, [r3]
 800914a:	f1ba 0f00 	cmp.w	sl, #0
 800914e:	d024      	beq.n	800919a <__multiply+0xf2>
 8009150:	f104 0e14 	add.w	lr, r4, #20
 8009154:	46a9      	mov	r9, r5
 8009156:	f04f 0c00 	mov.w	ip, #0
 800915a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800915e:	f8d9 1000 	ldr.w	r1, [r9]
 8009162:	fa1f fb82 	uxth.w	fp, r2
 8009166:	b289      	uxth	r1, r1
 8009168:	fb0a 110b 	mla	r1, sl, fp, r1
 800916c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009170:	f8d9 2000 	ldr.w	r2, [r9]
 8009174:	4461      	add	r1, ip
 8009176:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800917a:	fb0a c20b 	mla	r2, sl, fp, ip
 800917e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009182:	b289      	uxth	r1, r1
 8009184:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009188:	4577      	cmp	r7, lr
 800918a:	f849 1b04 	str.w	r1, [r9], #4
 800918e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009192:	d8e2      	bhi.n	800915a <__multiply+0xb2>
 8009194:	9a01      	ldr	r2, [sp, #4]
 8009196:	f845 c002 	str.w	ip, [r5, r2]
 800919a:	9a03      	ldr	r2, [sp, #12]
 800919c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091a0:	3304      	adds	r3, #4
 80091a2:	f1b9 0f00 	cmp.w	r9, #0
 80091a6:	d020      	beq.n	80091ea <__multiply+0x142>
 80091a8:	6829      	ldr	r1, [r5, #0]
 80091aa:	f104 0c14 	add.w	ip, r4, #20
 80091ae:	46ae      	mov	lr, r5
 80091b0:	f04f 0a00 	mov.w	sl, #0
 80091b4:	f8bc b000 	ldrh.w	fp, [ip]
 80091b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80091bc:	fb09 220b 	mla	r2, r9, fp, r2
 80091c0:	4492      	add	sl, r2
 80091c2:	b289      	uxth	r1, r1
 80091c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80091c8:	f84e 1b04 	str.w	r1, [lr], #4
 80091cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80091d0:	f8be 1000 	ldrh.w	r1, [lr]
 80091d4:	0c12      	lsrs	r2, r2, #16
 80091d6:	fb09 1102 	mla	r1, r9, r2, r1
 80091da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80091de:	4567      	cmp	r7, ip
 80091e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091e4:	d8e6      	bhi.n	80091b4 <__multiply+0x10c>
 80091e6:	9a01      	ldr	r2, [sp, #4]
 80091e8:	50a9      	str	r1, [r5, r2]
 80091ea:	3504      	adds	r5, #4
 80091ec:	e79a      	b.n	8009124 <__multiply+0x7c>
 80091ee:	3e01      	subs	r6, #1
 80091f0:	e79c      	b.n	800912c <__multiply+0x84>
 80091f2:	bf00      	nop
 80091f4:	0800b1a0 	.word	0x0800b1a0
 80091f8:	0800b22c 	.word	0x0800b22c

080091fc <__pow5mult>:
 80091fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009200:	4615      	mov	r5, r2
 8009202:	f012 0203 	ands.w	r2, r2, #3
 8009206:	4606      	mov	r6, r0
 8009208:	460f      	mov	r7, r1
 800920a:	d007      	beq.n	800921c <__pow5mult+0x20>
 800920c:	4c25      	ldr	r4, [pc, #148]	; (80092a4 <__pow5mult+0xa8>)
 800920e:	3a01      	subs	r2, #1
 8009210:	2300      	movs	r3, #0
 8009212:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009216:	f7ff fe51 	bl	8008ebc <__multadd>
 800921a:	4607      	mov	r7, r0
 800921c:	10ad      	asrs	r5, r5, #2
 800921e:	d03d      	beq.n	800929c <__pow5mult+0xa0>
 8009220:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009222:	b97c      	cbnz	r4, 8009244 <__pow5mult+0x48>
 8009224:	2010      	movs	r0, #16
 8009226:	f7ff fdcd 	bl	8008dc4 <malloc>
 800922a:	4602      	mov	r2, r0
 800922c:	6270      	str	r0, [r6, #36]	; 0x24
 800922e:	b928      	cbnz	r0, 800923c <__pow5mult+0x40>
 8009230:	4b1d      	ldr	r3, [pc, #116]	; (80092a8 <__pow5mult+0xac>)
 8009232:	481e      	ldr	r0, [pc, #120]	; (80092ac <__pow5mult+0xb0>)
 8009234:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009238:	f000 fd2c 	bl	8009c94 <__assert_func>
 800923c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009240:	6004      	str	r4, [r0, #0]
 8009242:	60c4      	str	r4, [r0, #12]
 8009244:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009248:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800924c:	b94c      	cbnz	r4, 8009262 <__pow5mult+0x66>
 800924e:	f240 2171 	movw	r1, #625	; 0x271
 8009252:	4630      	mov	r0, r6
 8009254:	f7ff ff12 	bl	800907c <__i2b>
 8009258:	2300      	movs	r3, #0
 800925a:	f8c8 0008 	str.w	r0, [r8, #8]
 800925e:	4604      	mov	r4, r0
 8009260:	6003      	str	r3, [r0, #0]
 8009262:	f04f 0900 	mov.w	r9, #0
 8009266:	07eb      	lsls	r3, r5, #31
 8009268:	d50a      	bpl.n	8009280 <__pow5mult+0x84>
 800926a:	4639      	mov	r1, r7
 800926c:	4622      	mov	r2, r4
 800926e:	4630      	mov	r0, r6
 8009270:	f7ff ff1a 	bl	80090a8 <__multiply>
 8009274:	4639      	mov	r1, r7
 8009276:	4680      	mov	r8, r0
 8009278:	4630      	mov	r0, r6
 800927a:	f7ff fdfd 	bl	8008e78 <_Bfree>
 800927e:	4647      	mov	r7, r8
 8009280:	106d      	asrs	r5, r5, #1
 8009282:	d00b      	beq.n	800929c <__pow5mult+0xa0>
 8009284:	6820      	ldr	r0, [r4, #0]
 8009286:	b938      	cbnz	r0, 8009298 <__pow5mult+0x9c>
 8009288:	4622      	mov	r2, r4
 800928a:	4621      	mov	r1, r4
 800928c:	4630      	mov	r0, r6
 800928e:	f7ff ff0b 	bl	80090a8 <__multiply>
 8009292:	6020      	str	r0, [r4, #0]
 8009294:	f8c0 9000 	str.w	r9, [r0]
 8009298:	4604      	mov	r4, r0
 800929a:	e7e4      	b.n	8009266 <__pow5mult+0x6a>
 800929c:	4638      	mov	r0, r7
 800929e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092a2:	bf00      	nop
 80092a4:	0800b378 	.word	0x0800b378
 80092a8:	0800b12e 	.word	0x0800b12e
 80092ac:	0800b22c 	.word	0x0800b22c

080092b0 <__lshift>:
 80092b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b4:	460c      	mov	r4, r1
 80092b6:	6849      	ldr	r1, [r1, #4]
 80092b8:	6923      	ldr	r3, [r4, #16]
 80092ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092be:	68a3      	ldr	r3, [r4, #8]
 80092c0:	4607      	mov	r7, r0
 80092c2:	4691      	mov	r9, r2
 80092c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092c8:	f108 0601 	add.w	r6, r8, #1
 80092cc:	42b3      	cmp	r3, r6
 80092ce:	db0b      	blt.n	80092e8 <__lshift+0x38>
 80092d0:	4638      	mov	r0, r7
 80092d2:	f7ff fd91 	bl	8008df8 <_Balloc>
 80092d6:	4605      	mov	r5, r0
 80092d8:	b948      	cbnz	r0, 80092ee <__lshift+0x3e>
 80092da:	4602      	mov	r2, r0
 80092dc:	4b2a      	ldr	r3, [pc, #168]	; (8009388 <__lshift+0xd8>)
 80092de:	482b      	ldr	r0, [pc, #172]	; (800938c <__lshift+0xdc>)
 80092e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80092e4:	f000 fcd6 	bl	8009c94 <__assert_func>
 80092e8:	3101      	adds	r1, #1
 80092ea:	005b      	lsls	r3, r3, #1
 80092ec:	e7ee      	b.n	80092cc <__lshift+0x1c>
 80092ee:	2300      	movs	r3, #0
 80092f0:	f100 0114 	add.w	r1, r0, #20
 80092f4:	f100 0210 	add.w	r2, r0, #16
 80092f8:	4618      	mov	r0, r3
 80092fa:	4553      	cmp	r3, sl
 80092fc:	db37      	blt.n	800936e <__lshift+0xbe>
 80092fe:	6920      	ldr	r0, [r4, #16]
 8009300:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009304:	f104 0314 	add.w	r3, r4, #20
 8009308:	f019 091f 	ands.w	r9, r9, #31
 800930c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009310:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009314:	d02f      	beq.n	8009376 <__lshift+0xc6>
 8009316:	f1c9 0e20 	rsb	lr, r9, #32
 800931a:	468a      	mov	sl, r1
 800931c:	f04f 0c00 	mov.w	ip, #0
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	fa02 f209 	lsl.w	r2, r2, r9
 8009326:	ea42 020c 	orr.w	r2, r2, ip
 800932a:	f84a 2b04 	str.w	r2, [sl], #4
 800932e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009332:	4298      	cmp	r0, r3
 8009334:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009338:	d8f2      	bhi.n	8009320 <__lshift+0x70>
 800933a:	1b03      	subs	r3, r0, r4
 800933c:	3b15      	subs	r3, #21
 800933e:	f023 0303 	bic.w	r3, r3, #3
 8009342:	3304      	adds	r3, #4
 8009344:	f104 0215 	add.w	r2, r4, #21
 8009348:	4290      	cmp	r0, r2
 800934a:	bf38      	it	cc
 800934c:	2304      	movcc	r3, #4
 800934e:	f841 c003 	str.w	ip, [r1, r3]
 8009352:	f1bc 0f00 	cmp.w	ip, #0
 8009356:	d001      	beq.n	800935c <__lshift+0xac>
 8009358:	f108 0602 	add.w	r6, r8, #2
 800935c:	3e01      	subs	r6, #1
 800935e:	4638      	mov	r0, r7
 8009360:	612e      	str	r6, [r5, #16]
 8009362:	4621      	mov	r1, r4
 8009364:	f7ff fd88 	bl	8008e78 <_Bfree>
 8009368:	4628      	mov	r0, r5
 800936a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009372:	3301      	adds	r3, #1
 8009374:	e7c1      	b.n	80092fa <__lshift+0x4a>
 8009376:	3904      	subs	r1, #4
 8009378:	f853 2b04 	ldr.w	r2, [r3], #4
 800937c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009380:	4298      	cmp	r0, r3
 8009382:	d8f9      	bhi.n	8009378 <__lshift+0xc8>
 8009384:	e7ea      	b.n	800935c <__lshift+0xac>
 8009386:	bf00      	nop
 8009388:	0800b1a0 	.word	0x0800b1a0
 800938c:	0800b22c 	.word	0x0800b22c

08009390 <__mcmp>:
 8009390:	b530      	push	{r4, r5, lr}
 8009392:	6902      	ldr	r2, [r0, #16]
 8009394:	690c      	ldr	r4, [r1, #16]
 8009396:	1b12      	subs	r2, r2, r4
 8009398:	d10e      	bne.n	80093b8 <__mcmp+0x28>
 800939a:	f100 0314 	add.w	r3, r0, #20
 800939e:	3114      	adds	r1, #20
 80093a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80093ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80093b0:	42a5      	cmp	r5, r4
 80093b2:	d003      	beq.n	80093bc <__mcmp+0x2c>
 80093b4:	d305      	bcc.n	80093c2 <__mcmp+0x32>
 80093b6:	2201      	movs	r2, #1
 80093b8:	4610      	mov	r0, r2
 80093ba:	bd30      	pop	{r4, r5, pc}
 80093bc:	4283      	cmp	r3, r0
 80093be:	d3f3      	bcc.n	80093a8 <__mcmp+0x18>
 80093c0:	e7fa      	b.n	80093b8 <__mcmp+0x28>
 80093c2:	f04f 32ff 	mov.w	r2, #4294967295
 80093c6:	e7f7      	b.n	80093b8 <__mcmp+0x28>

080093c8 <__mdiff>:
 80093c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	460c      	mov	r4, r1
 80093ce:	4606      	mov	r6, r0
 80093d0:	4611      	mov	r1, r2
 80093d2:	4620      	mov	r0, r4
 80093d4:	4690      	mov	r8, r2
 80093d6:	f7ff ffdb 	bl	8009390 <__mcmp>
 80093da:	1e05      	subs	r5, r0, #0
 80093dc:	d110      	bne.n	8009400 <__mdiff+0x38>
 80093de:	4629      	mov	r1, r5
 80093e0:	4630      	mov	r0, r6
 80093e2:	f7ff fd09 	bl	8008df8 <_Balloc>
 80093e6:	b930      	cbnz	r0, 80093f6 <__mdiff+0x2e>
 80093e8:	4b3a      	ldr	r3, [pc, #232]	; (80094d4 <__mdiff+0x10c>)
 80093ea:	4602      	mov	r2, r0
 80093ec:	f240 2132 	movw	r1, #562	; 0x232
 80093f0:	4839      	ldr	r0, [pc, #228]	; (80094d8 <__mdiff+0x110>)
 80093f2:	f000 fc4f 	bl	8009c94 <__assert_func>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	bfa4      	itt	ge
 8009402:	4643      	movge	r3, r8
 8009404:	46a0      	movge	r8, r4
 8009406:	4630      	mov	r0, r6
 8009408:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800940c:	bfa6      	itte	ge
 800940e:	461c      	movge	r4, r3
 8009410:	2500      	movge	r5, #0
 8009412:	2501      	movlt	r5, #1
 8009414:	f7ff fcf0 	bl	8008df8 <_Balloc>
 8009418:	b920      	cbnz	r0, 8009424 <__mdiff+0x5c>
 800941a:	4b2e      	ldr	r3, [pc, #184]	; (80094d4 <__mdiff+0x10c>)
 800941c:	4602      	mov	r2, r0
 800941e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009422:	e7e5      	b.n	80093f0 <__mdiff+0x28>
 8009424:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009428:	6926      	ldr	r6, [r4, #16]
 800942a:	60c5      	str	r5, [r0, #12]
 800942c:	f104 0914 	add.w	r9, r4, #20
 8009430:	f108 0514 	add.w	r5, r8, #20
 8009434:	f100 0e14 	add.w	lr, r0, #20
 8009438:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800943c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009440:	f108 0210 	add.w	r2, r8, #16
 8009444:	46f2      	mov	sl, lr
 8009446:	2100      	movs	r1, #0
 8009448:	f859 3b04 	ldr.w	r3, [r9], #4
 800944c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009450:	fa1f f883 	uxth.w	r8, r3
 8009454:	fa11 f18b 	uxtah	r1, r1, fp
 8009458:	0c1b      	lsrs	r3, r3, #16
 800945a:	eba1 0808 	sub.w	r8, r1, r8
 800945e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009462:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009466:	fa1f f888 	uxth.w	r8, r8
 800946a:	1419      	asrs	r1, r3, #16
 800946c:	454e      	cmp	r6, r9
 800946e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009472:	f84a 3b04 	str.w	r3, [sl], #4
 8009476:	d8e7      	bhi.n	8009448 <__mdiff+0x80>
 8009478:	1b33      	subs	r3, r6, r4
 800947a:	3b15      	subs	r3, #21
 800947c:	f023 0303 	bic.w	r3, r3, #3
 8009480:	3304      	adds	r3, #4
 8009482:	3415      	adds	r4, #21
 8009484:	42a6      	cmp	r6, r4
 8009486:	bf38      	it	cc
 8009488:	2304      	movcc	r3, #4
 800948a:	441d      	add	r5, r3
 800948c:	4473      	add	r3, lr
 800948e:	469e      	mov	lr, r3
 8009490:	462e      	mov	r6, r5
 8009492:	4566      	cmp	r6, ip
 8009494:	d30e      	bcc.n	80094b4 <__mdiff+0xec>
 8009496:	f10c 0203 	add.w	r2, ip, #3
 800949a:	1b52      	subs	r2, r2, r5
 800949c:	f022 0203 	bic.w	r2, r2, #3
 80094a0:	3d03      	subs	r5, #3
 80094a2:	45ac      	cmp	ip, r5
 80094a4:	bf38      	it	cc
 80094a6:	2200      	movcc	r2, #0
 80094a8:	441a      	add	r2, r3
 80094aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80094ae:	b17b      	cbz	r3, 80094d0 <__mdiff+0x108>
 80094b0:	6107      	str	r7, [r0, #16]
 80094b2:	e7a3      	b.n	80093fc <__mdiff+0x34>
 80094b4:	f856 8b04 	ldr.w	r8, [r6], #4
 80094b8:	fa11 f288 	uxtah	r2, r1, r8
 80094bc:	1414      	asrs	r4, r2, #16
 80094be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80094c2:	b292      	uxth	r2, r2
 80094c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80094c8:	f84e 2b04 	str.w	r2, [lr], #4
 80094cc:	1421      	asrs	r1, r4, #16
 80094ce:	e7e0      	b.n	8009492 <__mdiff+0xca>
 80094d0:	3f01      	subs	r7, #1
 80094d2:	e7ea      	b.n	80094aa <__mdiff+0xe2>
 80094d4:	0800b1a0 	.word	0x0800b1a0
 80094d8:	0800b22c 	.word	0x0800b22c

080094dc <__ulp>:
 80094dc:	b082      	sub	sp, #8
 80094de:	ed8d 0b00 	vstr	d0, [sp]
 80094e2:	9b01      	ldr	r3, [sp, #4]
 80094e4:	4912      	ldr	r1, [pc, #72]	; (8009530 <__ulp+0x54>)
 80094e6:	4019      	ands	r1, r3
 80094e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80094ec:	2900      	cmp	r1, #0
 80094ee:	dd05      	ble.n	80094fc <__ulp+0x20>
 80094f0:	2200      	movs	r2, #0
 80094f2:	460b      	mov	r3, r1
 80094f4:	ec43 2b10 	vmov	d0, r2, r3
 80094f8:	b002      	add	sp, #8
 80094fa:	4770      	bx	lr
 80094fc:	4249      	negs	r1, r1
 80094fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009502:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009506:	f04f 0200 	mov.w	r2, #0
 800950a:	f04f 0300 	mov.w	r3, #0
 800950e:	da04      	bge.n	800951a <__ulp+0x3e>
 8009510:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009514:	fa41 f300 	asr.w	r3, r1, r0
 8009518:	e7ec      	b.n	80094f4 <__ulp+0x18>
 800951a:	f1a0 0114 	sub.w	r1, r0, #20
 800951e:	291e      	cmp	r1, #30
 8009520:	bfda      	itte	le
 8009522:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009526:	fa20 f101 	lsrle.w	r1, r0, r1
 800952a:	2101      	movgt	r1, #1
 800952c:	460a      	mov	r2, r1
 800952e:	e7e1      	b.n	80094f4 <__ulp+0x18>
 8009530:	7ff00000 	.word	0x7ff00000

08009534 <__b2d>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	6905      	ldr	r5, [r0, #16]
 8009538:	f100 0714 	add.w	r7, r0, #20
 800953c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009540:	1f2e      	subs	r6, r5, #4
 8009542:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009546:	4620      	mov	r0, r4
 8009548:	f7ff fd48 	bl	8008fdc <__hi0bits>
 800954c:	f1c0 0320 	rsb	r3, r0, #32
 8009550:	280a      	cmp	r0, #10
 8009552:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80095d0 <__b2d+0x9c>
 8009556:	600b      	str	r3, [r1, #0]
 8009558:	dc14      	bgt.n	8009584 <__b2d+0x50>
 800955a:	f1c0 0e0b 	rsb	lr, r0, #11
 800955e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009562:	42b7      	cmp	r7, r6
 8009564:	ea41 030c 	orr.w	r3, r1, ip
 8009568:	bf34      	ite	cc
 800956a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800956e:	2100      	movcs	r1, #0
 8009570:	3015      	adds	r0, #21
 8009572:	fa04 f000 	lsl.w	r0, r4, r0
 8009576:	fa21 f10e 	lsr.w	r1, r1, lr
 800957a:	ea40 0201 	orr.w	r2, r0, r1
 800957e:	ec43 2b10 	vmov	d0, r2, r3
 8009582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009584:	42b7      	cmp	r7, r6
 8009586:	bf3a      	itte	cc
 8009588:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800958c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009590:	2100      	movcs	r1, #0
 8009592:	380b      	subs	r0, #11
 8009594:	d017      	beq.n	80095c6 <__b2d+0x92>
 8009596:	f1c0 0c20 	rsb	ip, r0, #32
 800959a:	fa04 f500 	lsl.w	r5, r4, r0
 800959e:	42be      	cmp	r6, r7
 80095a0:	fa21 f40c 	lsr.w	r4, r1, ip
 80095a4:	ea45 0504 	orr.w	r5, r5, r4
 80095a8:	bf8c      	ite	hi
 80095aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80095ae:	2400      	movls	r4, #0
 80095b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80095b4:	fa01 f000 	lsl.w	r0, r1, r0
 80095b8:	fa24 f40c 	lsr.w	r4, r4, ip
 80095bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80095c0:	ea40 0204 	orr.w	r2, r0, r4
 80095c4:	e7db      	b.n	800957e <__b2d+0x4a>
 80095c6:	ea44 030c 	orr.w	r3, r4, ip
 80095ca:	460a      	mov	r2, r1
 80095cc:	e7d7      	b.n	800957e <__b2d+0x4a>
 80095ce:	bf00      	nop
 80095d0:	3ff00000 	.word	0x3ff00000

080095d4 <__d2b>:
 80095d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095d8:	4689      	mov	r9, r1
 80095da:	2101      	movs	r1, #1
 80095dc:	ec57 6b10 	vmov	r6, r7, d0
 80095e0:	4690      	mov	r8, r2
 80095e2:	f7ff fc09 	bl	8008df8 <_Balloc>
 80095e6:	4604      	mov	r4, r0
 80095e8:	b930      	cbnz	r0, 80095f8 <__d2b+0x24>
 80095ea:	4602      	mov	r2, r0
 80095ec:	4b25      	ldr	r3, [pc, #148]	; (8009684 <__d2b+0xb0>)
 80095ee:	4826      	ldr	r0, [pc, #152]	; (8009688 <__d2b+0xb4>)
 80095f0:	f240 310a 	movw	r1, #778	; 0x30a
 80095f4:	f000 fb4e 	bl	8009c94 <__assert_func>
 80095f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80095fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009600:	bb35      	cbnz	r5, 8009650 <__d2b+0x7c>
 8009602:	2e00      	cmp	r6, #0
 8009604:	9301      	str	r3, [sp, #4]
 8009606:	d028      	beq.n	800965a <__d2b+0x86>
 8009608:	4668      	mov	r0, sp
 800960a:	9600      	str	r6, [sp, #0]
 800960c:	f7ff fd06 	bl	800901c <__lo0bits>
 8009610:	9900      	ldr	r1, [sp, #0]
 8009612:	b300      	cbz	r0, 8009656 <__d2b+0x82>
 8009614:	9a01      	ldr	r2, [sp, #4]
 8009616:	f1c0 0320 	rsb	r3, r0, #32
 800961a:	fa02 f303 	lsl.w	r3, r2, r3
 800961e:	430b      	orrs	r3, r1
 8009620:	40c2      	lsrs	r2, r0
 8009622:	6163      	str	r3, [r4, #20]
 8009624:	9201      	str	r2, [sp, #4]
 8009626:	9b01      	ldr	r3, [sp, #4]
 8009628:	61a3      	str	r3, [r4, #24]
 800962a:	2b00      	cmp	r3, #0
 800962c:	bf14      	ite	ne
 800962e:	2202      	movne	r2, #2
 8009630:	2201      	moveq	r2, #1
 8009632:	6122      	str	r2, [r4, #16]
 8009634:	b1d5      	cbz	r5, 800966c <__d2b+0x98>
 8009636:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800963a:	4405      	add	r5, r0
 800963c:	f8c9 5000 	str.w	r5, [r9]
 8009640:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009644:	f8c8 0000 	str.w	r0, [r8]
 8009648:	4620      	mov	r0, r4
 800964a:	b003      	add	sp, #12
 800964c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009654:	e7d5      	b.n	8009602 <__d2b+0x2e>
 8009656:	6161      	str	r1, [r4, #20]
 8009658:	e7e5      	b.n	8009626 <__d2b+0x52>
 800965a:	a801      	add	r0, sp, #4
 800965c:	f7ff fcde 	bl	800901c <__lo0bits>
 8009660:	9b01      	ldr	r3, [sp, #4]
 8009662:	6163      	str	r3, [r4, #20]
 8009664:	2201      	movs	r2, #1
 8009666:	6122      	str	r2, [r4, #16]
 8009668:	3020      	adds	r0, #32
 800966a:	e7e3      	b.n	8009634 <__d2b+0x60>
 800966c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009670:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009674:	f8c9 0000 	str.w	r0, [r9]
 8009678:	6918      	ldr	r0, [r3, #16]
 800967a:	f7ff fcaf 	bl	8008fdc <__hi0bits>
 800967e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009682:	e7df      	b.n	8009644 <__d2b+0x70>
 8009684:	0800b1a0 	.word	0x0800b1a0
 8009688:	0800b22c 	.word	0x0800b22c

0800968c <__ratio>:
 800968c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	4688      	mov	r8, r1
 8009692:	4669      	mov	r1, sp
 8009694:	4681      	mov	r9, r0
 8009696:	f7ff ff4d 	bl	8009534 <__b2d>
 800969a:	a901      	add	r1, sp, #4
 800969c:	4640      	mov	r0, r8
 800969e:	ec55 4b10 	vmov	r4, r5, d0
 80096a2:	f7ff ff47 	bl	8009534 <__b2d>
 80096a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80096ae:	eba3 0c02 	sub.w	ip, r3, r2
 80096b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80096b6:	1a9b      	subs	r3, r3, r2
 80096b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80096bc:	ec51 0b10 	vmov	r0, r1, d0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	bfd6      	itet	le
 80096c4:	460a      	movle	r2, r1
 80096c6:	462a      	movgt	r2, r5
 80096c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80096cc:	468b      	mov	fp, r1
 80096ce:	462f      	mov	r7, r5
 80096d0:	bfd4      	ite	le
 80096d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80096d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80096da:	4620      	mov	r0, r4
 80096dc:	ee10 2a10 	vmov	r2, s0
 80096e0:	465b      	mov	r3, fp
 80096e2:	4639      	mov	r1, r7
 80096e4:	f7f7 f8ba 	bl	800085c <__aeabi_ddiv>
 80096e8:	ec41 0b10 	vmov	d0, r0, r1
 80096ec:	b003      	add	sp, #12
 80096ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096f2 <__copybits>:
 80096f2:	3901      	subs	r1, #1
 80096f4:	b570      	push	{r4, r5, r6, lr}
 80096f6:	1149      	asrs	r1, r1, #5
 80096f8:	6914      	ldr	r4, [r2, #16]
 80096fa:	3101      	adds	r1, #1
 80096fc:	f102 0314 	add.w	r3, r2, #20
 8009700:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009704:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009708:	1f05      	subs	r5, r0, #4
 800970a:	42a3      	cmp	r3, r4
 800970c:	d30c      	bcc.n	8009728 <__copybits+0x36>
 800970e:	1aa3      	subs	r3, r4, r2
 8009710:	3b11      	subs	r3, #17
 8009712:	f023 0303 	bic.w	r3, r3, #3
 8009716:	3211      	adds	r2, #17
 8009718:	42a2      	cmp	r2, r4
 800971a:	bf88      	it	hi
 800971c:	2300      	movhi	r3, #0
 800971e:	4418      	add	r0, r3
 8009720:	2300      	movs	r3, #0
 8009722:	4288      	cmp	r0, r1
 8009724:	d305      	bcc.n	8009732 <__copybits+0x40>
 8009726:	bd70      	pop	{r4, r5, r6, pc}
 8009728:	f853 6b04 	ldr.w	r6, [r3], #4
 800972c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009730:	e7eb      	b.n	800970a <__copybits+0x18>
 8009732:	f840 3b04 	str.w	r3, [r0], #4
 8009736:	e7f4      	b.n	8009722 <__copybits+0x30>

08009738 <__any_on>:
 8009738:	f100 0214 	add.w	r2, r0, #20
 800973c:	6900      	ldr	r0, [r0, #16]
 800973e:	114b      	asrs	r3, r1, #5
 8009740:	4298      	cmp	r0, r3
 8009742:	b510      	push	{r4, lr}
 8009744:	db11      	blt.n	800976a <__any_on+0x32>
 8009746:	dd0a      	ble.n	800975e <__any_on+0x26>
 8009748:	f011 011f 	ands.w	r1, r1, #31
 800974c:	d007      	beq.n	800975e <__any_on+0x26>
 800974e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009752:	fa24 f001 	lsr.w	r0, r4, r1
 8009756:	fa00 f101 	lsl.w	r1, r0, r1
 800975a:	428c      	cmp	r4, r1
 800975c:	d10b      	bne.n	8009776 <__any_on+0x3e>
 800975e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009762:	4293      	cmp	r3, r2
 8009764:	d803      	bhi.n	800976e <__any_on+0x36>
 8009766:	2000      	movs	r0, #0
 8009768:	bd10      	pop	{r4, pc}
 800976a:	4603      	mov	r3, r0
 800976c:	e7f7      	b.n	800975e <__any_on+0x26>
 800976e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009772:	2900      	cmp	r1, #0
 8009774:	d0f5      	beq.n	8009762 <__any_on+0x2a>
 8009776:	2001      	movs	r0, #1
 8009778:	e7f6      	b.n	8009768 <__any_on+0x30>

0800977a <_calloc_r>:
 800977a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800977c:	fba1 2402 	umull	r2, r4, r1, r2
 8009780:	b94c      	cbnz	r4, 8009796 <_calloc_r+0x1c>
 8009782:	4611      	mov	r1, r2
 8009784:	9201      	str	r2, [sp, #4]
 8009786:	f000 f87b 	bl	8009880 <_malloc_r>
 800978a:	9a01      	ldr	r2, [sp, #4]
 800978c:	4605      	mov	r5, r0
 800978e:	b930      	cbnz	r0, 800979e <_calloc_r+0x24>
 8009790:	4628      	mov	r0, r5
 8009792:	b003      	add	sp, #12
 8009794:	bd30      	pop	{r4, r5, pc}
 8009796:	220c      	movs	r2, #12
 8009798:	6002      	str	r2, [r0, #0]
 800979a:	2500      	movs	r5, #0
 800979c:	e7f8      	b.n	8009790 <_calloc_r+0x16>
 800979e:	4621      	mov	r1, r4
 80097a0:	f7fc fb98 	bl	8005ed4 <memset>
 80097a4:	e7f4      	b.n	8009790 <_calloc_r+0x16>
	...

080097a8 <_free_r>:
 80097a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097aa:	2900      	cmp	r1, #0
 80097ac:	d044      	beq.n	8009838 <_free_r+0x90>
 80097ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097b2:	9001      	str	r0, [sp, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f1a1 0404 	sub.w	r4, r1, #4
 80097ba:	bfb8      	it	lt
 80097bc:	18e4      	addlt	r4, r4, r3
 80097be:	f000 fa99 	bl	8009cf4 <__malloc_lock>
 80097c2:	4a1e      	ldr	r2, [pc, #120]	; (800983c <_free_r+0x94>)
 80097c4:	9801      	ldr	r0, [sp, #4]
 80097c6:	6813      	ldr	r3, [r2, #0]
 80097c8:	b933      	cbnz	r3, 80097d8 <_free_r+0x30>
 80097ca:	6063      	str	r3, [r4, #4]
 80097cc:	6014      	str	r4, [r2, #0]
 80097ce:	b003      	add	sp, #12
 80097d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097d4:	f000 ba94 	b.w	8009d00 <__malloc_unlock>
 80097d8:	42a3      	cmp	r3, r4
 80097da:	d908      	bls.n	80097ee <_free_r+0x46>
 80097dc:	6825      	ldr	r5, [r4, #0]
 80097de:	1961      	adds	r1, r4, r5
 80097e0:	428b      	cmp	r3, r1
 80097e2:	bf01      	itttt	eq
 80097e4:	6819      	ldreq	r1, [r3, #0]
 80097e6:	685b      	ldreq	r3, [r3, #4]
 80097e8:	1949      	addeq	r1, r1, r5
 80097ea:	6021      	streq	r1, [r4, #0]
 80097ec:	e7ed      	b.n	80097ca <_free_r+0x22>
 80097ee:	461a      	mov	r2, r3
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	b10b      	cbz	r3, 80097f8 <_free_r+0x50>
 80097f4:	42a3      	cmp	r3, r4
 80097f6:	d9fa      	bls.n	80097ee <_free_r+0x46>
 80097f8:	6811      	ldr	r1, [r2, #0]
 80097fa:	1855      	adds	r5, r2, r1
 80097fc:	42a5      	cmp	r5, r4
 80097fe:	d10b      	bne.n	8009818 <_free_r+0x70>
 8009800:	6824      	ldr	r4, [r4, #0]
 8009802:	4421      	add	r1, r4
 8009804:	1854      	adds	r4, r2, r1
 8009806:	42a3      	cmp	r3, r4
 8009808:	6011      	str	r1, [r2, #0]
 800980a:	d1e0      	bne.n	80097ce <_free_r+0x26>
 800980c:	681c      	ldr	r4, [r3, #0]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	6053      	str	r3, [r2, #4]
 8009812:	4421      	add	r1, r4
 8009814:	6011      	str	r1, [r2, #0]
 8009816:	e7da      	b.n	80097ce <_free_r+0x26>
 8009818:	d902      	bls.n	8009820 <_free_r+0x78>
 800981a:	230c      	movs	r3, #12
 800981c:	6003      	str	r3, [r0, #0]
 800981e:	e7d6      	b.n	80097ce <_free_r+0x26>
 8009820:	6825      	ldr	r5, [r4, #0]
 8009822:	1961      	adds	r1, r4, r5
 8009824:	428b      	cmp	r3, r1
 8009826:	bf04      	itt	eq
 8009828:	6819      	ldreq	r1, [r3, #0]
 800982a:	685b      	ldreq	r3, [r3, #4]
 800982c:	6063      	str	r3, [r4, #4]
 800982e:	bf04      	itt	eq
 8009830:	1949      	addeq	r1, r1, r5
 8009832:	6021      	streq	r1, [r4, #0]
 8009834:	6054      	str	r4, [r2, #4]
 8009836:	e7ca      	b.n	80097ce <_free_r+0x26>
 8009838:	b003      	add	sp, #12
 800983a:	bd30      	pop	{r4, r5, pc}
 800983c:	20000760 	.word	0x20000760

08009840 <sbrk_aligned>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	4e0e      	ldr	r6, [pc, #56]	; (800987c <sbrk_aligned+0x3c>)
 8009844:	460c      	mov	r4, r1
 8009846:	6831      	ldr	r1, [r6, #0]
 8009848:	4605      	mov	r5, r0
 800984a:	b911      	cbnz	r1, 8009852 <sbrk_aligned+0x12>
 800984c:	f000 f9f0 	bl	8009c30 <_sbrk_r>
 8009850:	6030      	str	r0, [r6, #0]
 8009852:	4621      	mov	r1, r4
 8009854:	4628      	mov	r0, r5
 8009856:	f000 f9eb 	bl	8009c30 <_sbrk_r>
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	d00a      	beq.n	8009874 <sbrk_aligned+0x34>
 800985e:	1cc4      	adds	r4, r0, #3
 8009860:	f024 0403 	bic.w	r4, r4, #3
 8009864:	42a0      	cmp	r0, r4
 8009866:	d007      	beq.n	8009878 <sbrk_aligned+0x38>
 8009868:	1a21      	subs	r1, r4, r0
 800986a:	4628      	mov	r0, r5
 800986c:	f000 f9e0 	bl	8009c30 <_sbrk_r>
 8009870:	3001      	adds	r0, #1
 8009872:	d101      	bne.n	8009878 <sbrk_aligned+0x38>
 8009874:	f04f 34ff 	mov.w	r4, #4294967295
 8009878:	4620      	mov	r0, r4
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	20000764 	.word	0x20000764

08009880 <_malloc_r>:
 8009880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009884:	1ccd      	adds	r5, r1, #3
 8009886:	f025 0503 	bic.w	r5, r5, #3
 800988a:	3508      	adds	r5, #8
 800988c:	2d0c      	cmp	r5, #12
 800988e:	bf38      	it	cc
 8009890:	250c      	movcc	r5, #12
 8009892:	2d00      	cmp	r5, #0
 8009894:	4607      	mov	r7, r0
 8009896:	db01      	blt.n	800989c <_malloc_r+0x1c>
 8009898:	42a9      	cmp	r1, r5
 800989a:	d905      	bls.n	80098a8 <_malloc_r+0x28>
 800989c:	230c      	movs	r3, #12
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	2600      	movs	r6, #0
 80098a2:	4630      	mov	r0, r6
 80098a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a8:	4e2e      	ldr	r6, [pc, #184]	; (8009964 <_malloc_r+0xe4>)
 80098aa:	f000 fa23 	bl	8009cf4 <__malloc_lock>
 80098ae:	6833      	ldr	r3, [r6, #0]
 80098b0:	461c      	mov	r4, r3
 80098b2:	bb34      	cbnz	r4, 8009902 <_malloc_r+0x82>
 80098b4:	4629      	mov	r1, r5
 80098b6:	4638      	mov	r0, r7
 80098b8:	f7ff ffc2 	bl	8009840 <sbrk_aligned>
 80098bc:	1c43      	adds	r3, r0, #1
 80098be:	4604      	mov	r4, r0
 80098c0:	d14d      	bne.n	800995e <_malloc_r+0xde>
 80098c2:	6834      	ldr	r4, [r6, #0]
 80098c4:	4626      	mov	r6, r4
 80098c6:	2e00      	cmp	r6, #0
 80098c8:	d140      	bne.n	800994c <_malloc_r+0xcc>
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	4631      	mov	r1, r6
 80098ce:	4638      	mov	r0, r7
 80098d0:	eb04 0803 	add.w	r8, r4, r3
 80098d4:	f000 f9ac 	bl	8009c30 <_sbrk_r>
 80098d8:	4580      	cmp	r8, r0
 80098da:	d13a      	bne.n	8009952 <_malloc_r+0xd2>
 80098dc:	6821      	ldr	r1, [r4, #0]
 80098de:	3503      	adds	r5, #3
 80098e0:	1a6d      	subs	r5, r5, r1
 80098e2:	f025 0503 	bic.w	r5, r5, #3
 80098e6:	3508      	adds	r5, #8
 80098e8:	2d0c      	cmp	r5, #12
 80098ea:	bf38      	it	cc
 80098ec:	250c      	movcc	r5, #12
 80098ee:	4629      	mov	r1, r5
 80098f0:	4638      	mov	r0, r7
 80098f2:	f7ff ffa5 	bl	8009840 <sbrk_aligned>
 80098f6:	3001      	adds	r0, #1
 80098f8:	d02b      	beq.n	8009952 <_malloc_r+0xd2>
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	442b      	add	r3, r5
 80098fe:	6023      	str	r3, [r4, #0]
 8009900:	e00e      	b.n	8009920 <_malloc_r+0xa0>
 8009902:	6822      	ldr	r2, [r4, #0]
 8009904:	1b52      	subs	r2, r2, r5
 8009906:	d41e      	bmi.n	8009946 <_malloc_r+0xc6>
 8009908:	2a0b      	cmp	r2, #11
 800990a:	d916      	bls.n	800993a <_malloc_r+0xba>
 800990c:	1961      	adds	r1, r4, r5
 800990e:	42a3      	cmp	r3, r4
 8009910:	6025      	str	r5, [r4, #0]
 8009912:	bf18      	it	ne
 8009914:	6059      	strne	r1, [r3, #4]
 8009916:	6863      	ldr	r3, [r4, #4]
 8009918:	bf08      	it	eq
 800991a:	6031      	streq	r1, [r6, #0]
 800991c:	5162      	str	r2, [r4, r5]
 800991e:	604b      	str	r3, [r1, #4]
 8009920:	4638      	mov	r0, r7
 8009922:	f104 060b 	add.w	r6, r4, #11
 8009926:	f000 f9eb 	bl	8009d00 <__malloc_unlock>
 800992a:	f026 0607 	bic.w	r6, r6, #7
 800992e:	1d23      	adds	r3, r4, #4
 8009930:	1af2      	subs	r2, r6, r3
 8009932:	d0b6      	beq.n	80098a2 <_malloc_r+0x22>
 8009934:	1b9b      	subs	r3, r3, r6
 8009936:	50a3      	str	r3, [r4, r2]
 8009938:	e7b3      	b.n	80098a2 <_malloc_r+0x22>
 800993a:	6862      	ldr	r2, [r4, #4]
 800993c:	42a3      	cmp	r3, r4
 800993e:	bf0c      	ite	eq
 8009940:	6032      	streq	r2, [r6, #0]
 8009942:	605a      	strne	r2, [r3, #4]
 8009944:	e7ec      	b.n	8009920 <_malloc_r+0xa0>
 8009946:	4623      	mov	r3, r4
 8009948:	6864      	ldr	r4, [r4, #4]
 800994a:	e7b2      	b.n	80098b2 <_malloc_r+0x32>
 800994c:	4634      	mov	r4, r6
 800994e:	6876      	ldr	r6, [r6, #4]
 8009950:	e7b9      	b.n	80098c6 <_malloc_r+0x46>
 8009952:	230c      	movs	r3, #12
 8009954:	603b      	str	r3, [r7, #0]
 8009956:	4638      	mov	r0, r7
 8009958:	f000 f9d2 	bl	8009d00 <__malloc_unlock>
 800995c:	e7a1      	b.n	80098a2 <_malloc_r+0x22>
 800995e:	6025      	str	r5, [r4, #0]
 8009960:	e7de      	b.n	8009920 <_malloc_r+0xa0>
 8009962:	bf00      	nop
 8009964:	20000760 	.word	0x20000760

08009968 <__ssputs_r>:
 8009968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800996c:	688e      	ldr	r6, [r1, #8]
 800996e:	429e      	cmp	r6, r3
 8009970:	4682      	mov	sl, r0
 8009972:	460c      	mov	r4, r1
 8009974:	4690      	mov	r8, r2
 8009976:	461f      	mov	r7, r3
 8009978:	d838      	bhi.n	80099ec <__ssputs_r+0x84>
 800997a:	898a      	ldrh	r2, [r1, #12]
 800997c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009980:	d032      	beq.n	80099e8 <__ssputs_r+0x80>
 8009982:	6825      	ldr	r5, [r4, #0]
 8009984:	6909      	ldr	r1, [r1, #16]
 8009986:	eba5 0901 	sub.w	r9, r5, r1
 800998a:	6965      	ldr	r5, [r4, #20]
 800998c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009990:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009994:	3301      	adds	r3, #1
 8009996:	444b      	add	r3, r9
 8009998:	106d      	asrs	r5, r5, #1
 800999a:	429d      	cmp	r5, r3
 800999c:	bf38      	it	cc
 800999e:	461d      	movcc	r5, r3
 80099a0:	0553      	lsls	r3, r2, #21
 80099a2:	d531      	bpl.n	8009a08 <__ssputs_r+0xa0>
 80099a4:	4629      	mov	r1, r5
 80099a6:	f7ff ff6b 	bl	8009880 <_malloc_r>
 80099aa:	4606      	mov	r6, r0
 80099ac:	b950      	cbnz	r0, 80099c4 <__ssputs_r+0x5c>
 80099ae:	230c      	movs	r3, #12
 80099b0:	f8ca 3000 	str.w	r3, [sl]
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ba:	81a3      	strh	r3, [r4, #12]
 80099bc:	f04f 30ff 	mov.w	r0, #4294967295
 80099c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c4:	6921      	ldr	r1, [r4, #16]
 80099c6:	464a      	mov	r2, r9
 80099c8:	f7fc fa5c 	bl	8005e84 <memcpy>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d6:	81a3      	strh	r3, [r4, #12]
 80099d8:	6126      	str	r6, [r4, #16]
 80099da:	6165      	str	r5, [r4, #20]
 80099dc:	444e      	add	r6, r9
 80099de:	eba5 0509 	sub.w	r5, r5, r9
 80099e2:	6026      	str	r6, [r4, #0]
 80099e4:	60a5      	str	r5, [r4, #8]
 80099e6:	463e      	mov	r6, r7
 80099e8:	42be      	cmp	r6, r7
 80099ea:	d900      	bls.n	80099ee <__ssputs_r+0x86>
 80099ec:	463e      	mov	r6, r7
 80099ee:	6820      	ldr	r0, [r4, #0]
 80099f0:	4632      	mov	r2, r6
 80099f2:	4641      	mov	r1, r8
 80099f4:	f7fc fa54 	bl	8005ea0 <memmove>
 80099f8:	68a3      	ldr	r3, [r4, #8]
 80099fa:	1b9b      	subs	r3, r3, r6
 80099fc:	60a3      	str	r3, [r4, #8]
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	4433      	add	r3, r6
 8009a02:	6023      	str	r3, [r4, #0]
 8009a04:	2000      	movs	r0, #0
 8009a06:	e7db      	b.n	80099c0 <__ssputs_r+0x58>
 8009a08:	462a      	mov	r2, r5
 8009a0a:	f000 f97f 	bl	8009d0c <_realloc_r>
 8009a0e:	4606      	mov	r6, r0
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d1e1      	bne.n	80099d8 <__ssputs_r+0x70>
 8009a14:	6921      	ldr	r1, [r4, #16]
 8009a16:	4650      	mov	r0, sl
 8009a18:	f7ff fec6 	bl	80097a8 <_free_r>
 8009a1c:	e7c7      	b.n	80099ae <__ssputs_r+0x46>
	...

08009a20 <_svfiprintf_r>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	4698      	mov	r8, r3
 8009a26:	898b      	ldrh	r3, [r1, #12]
 8009a28:	061b      	lsls	r3, r3, #24
 8009a2a:	b09d      	sub	sp, #116	; 0x74
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	460d      	mov	r5, r1
 8009a30:	4614      	mov	r4, r2
 8009a32:	d50e      	bpl.n	8009a52 <_svfiprintf_r+0x32>
 8009a34:	690b      	ldr	r3, [r1, #16]
 8009a36:	b963      	cbnz	r3, 8009a52 <_svfiprintf_r+0x32>
 8009a38:	2140      	movs	r1, #64	; 0x40
 8009a3a:	f7ff ff21 	bl	8009880 <_malloc_r>
 8009a3e:	6028      	str	r0, [r5, #0]
 8009a40:	6128      	str	r0, [r5, #16]
 8009a42:	b920      	cbnz	r0, 8009a4e <_svfiprintf_r+0x2e>
 8009a44:	230c      	movs	r3, #12
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4c:	e0d1      	b.n	8009bf2 <_svfiprintf_r+0x1d2>
 8009a4e:	2340      	movs	r3, #64	; 0x40
 8009a50:	616b      	str	r3, [r5, #20]
 8009a52:	2300      	movs	r3, #0
 8009a54:	9309      	str	r3, [sp, #36]	; 0x24
 8009a56:	2320      	movs	r3, #32
 8009a58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a60:	2330      	movs	r3, #48	; 0x30
 8009a62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c0c <_svfiprintf_r+0x1ec>
 8009a66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a6a:	f04f 0901 	mov.w	r9, #1
 8009a6e:	4623      	mov	r3, r4
 8009a70:	469a      	mov	sl, r3
 8009a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a76:	b10a      	cbz	r2, 8009a7c <_svfiprintf_r+0x5c>
 8009a78:	2a25      	cmp	r2, #37	; 0x25
 8009a7a:	d1f9      	bne.n	8009a70 <_svfiprintf_r+0x50>
 8009a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a80:	d00b      	beq.n	8009a9a <_svfiprintf_r+0x7a>
 8009a82:	465b      	mov	r3, fp
 8009a84:	4622      	mov	r2, r4
 8009a86:	4629      	mov	r1, r5
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff ff6d 	bl	8009968 <__ssputs_r>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	f000 80aa 	beq.w	8009be8 <_svfiprintf_r+0x1c8>
 8009a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a96:	445a      	add	r2, fp
 8009a98:	9209      	str	r2, [sp, #36]	; 0x24
 8009a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 80a2 	beq.w	8009be8 <_svfiprintf_r+0x1c8>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aae:	f10a 0a01 	add.w	sl, sl, #1
 8009ab2:	9304      	str	r3, [sp, #16]
 8009ab4:	9307      	str	r3, [sp, #28]
 8009ab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aba:	931a      	str	r3, [sp, #104]	; 0x68
 8009abc:	4654      	mov	r4, sl
 8009abe:	2205      	movs	r2, #5
 8009ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac4:	4851      	ldr	r0, [pc, #324]	; (8009c0c <_svfiprintf_r+0x1ec>)
 8009ac6:	f7f6 fb93 	bl	80001f0 <memchr>
 8009aca:	9a04      	ldr	r2, [sp, #16]
 8009acc:	b9d8      	cbnz	r0, 8009b06 <_svfiprintf_r+0xe6>
 8009ace:	06d0      	lsls	r0, r2, #27
 8009ad0:	bf44      	itt	mi
 8009ad2:	2320      	movmi	r3, #32
 8009ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ad8:	0711      	lsls	r1, r2, #28
 8009ada:	bf44      	itt	mi
 8009adc:	232b      	movmi	r3, #43	; 0x2b
 8009ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ae8:	d015      	beq.n	8009b16 <_svfiprintf_r+0xf6>
 8009aea:	9a07      	ldr	r2, [sp, #28]
 8009aec:	4654      	mov	r4, sl
 8009aee:	2000      	movs	r0, #0
 8009af0:	f04f 0c0a 	mov.w	ip, #10
 8009af4:	4621      	mov	r1, r4
 8009af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009afa:	3b30      	subs	r3, #48	; 0x30
 8009afc:	2b09      	cmp	r3, #9
 8009afe:	d94e      	bls.n	8009b9e <_svfiprintf_r+0x17e>
 8009b00:	b1b0      	cbz	r0, 8009b30 <_svfiprintf_r+0x110>
 8009b02:	9207      	str	r2, [sp, #28]
 8009b04:	e014      	b.n	8009b30 <_svfiprintf_r+0x110>
 8009b06:	eba0 0308 	sub.w	r3, r0, r8
 8009b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	9304      	str	r3, [sp, #16]
 8009b12:	46a2      	mov	sl, r4
 8009b14:	e7d2      	b.n	8009abc <_svfiprintf_r+0x9c>
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	1d19      	adds	r1, r3, #4
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	9103      	str	r1, [sp, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	bfbb      	ittet	lt
 8009b22:	425b      	neglt	r3, r3
 8009b24:	f042 0202 	orrlt.w	r2, r2, #2
 8009b28:	9307      	strge	r3, [sp, #28]
 8009b2a:	9307      	strlt	r3, [sp, #28]
 8009b2c:	bfb8      	it	lt
 8009b2e:	9204      	strlt	r2, [sp, #16]
 8009b30:	7823      	ldrb	r3, [r4, #0]
 8009b32:	2b2e      	cmp	r3, #46	; 0x2e
 8009b34:	d10c      	bne.n	8009b50 <_svfiprintf_r+0x130>
 8009b36:	7863      	ldrb	r3, [r4, #1]
 8009b38:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3a:	d135      	bne.n	8009ba8 <_svfiprintf_r+0x188>
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	1d1a      	adds	r2, r3, #4
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	9203      	str	r2, [sp, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	bfb8      	it	lt
 8009b48:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b4c:	3402      	adds	r4, #2
 8009b4e:	9305      	str	r3, [sp, #20]
 8009b50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c1c <_svfiprintf_r+0x1fc>
 8009b54:	7821      	ldrb	r1, [r4, #0]
 8009b56:	2203      	movs	r2, #3
 8009b58:	4650      	mov	r0, sl
 8009b5a:	f7f6 fb49 	bl	80001f0 <memchr>
 8009b5e:	b140      	cbz	r0, 8009b72 <_svfiprintf_r+0x152>
 8009b60:	2340      	movs	r3, #64	; 0x40
 8009b62:	eba0 000a 	sub.w	r0, r0, sl
 8009b66:	fa03 f000 	lsl.w	r0, r3, r0
 8009b6a:	9b04      	ldr	r3, [sp, #16]
 8009b6c:	4303      	orrs	r3, r0
 8009b6e:	3401      	adds	r4, #1
 8009b70:	9304      	str	r3, [sp, #16]
 8009b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b76:	4826      	ldr	r0, [pc, #152]	; (8009c10 <_svfiprintf_r+0x1f0>)
 8009b78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b7c:	2206      	movs	r2, #6
 8009b7e:	f7f6 fb37 	bl	80001f0 <memchr>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d038      	beq.n	8009bf8 <_svfiprintf_r+0x1d8>
 8009b86:	4b23      	ldr	r3, [pc, #140]	; (8009c14 <_svfiprintf_r+0x1f4>)
 8009b88:	bb1b      	cbnz	r3, 8009bd2 <_svfiprintf_r+0x1b2>
 8009b8a:	9b03      	ldr	r3, [sp, #12]
 8009b8c:	3307      	adds	r3, #7
 8009b8e:	f023 0307 	bic.w	r3, r3, #7
 8009b92:	3308      	adds	r3, #8
 8009b94:	9303      	str	r3, [sp, #12]
 8009b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b98:	4433      	add	r3, r6
 8009b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b9c:	e767      	b.n	8009a6e <_svfiprintf_r+0x4e>
 8009b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	2001      	movs	r0, #1
 8009ba6:	e7a5      	b.n	8009af4 <_svfiprintf_r+0xd4>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	3401      	adds	r4, #1
 8009bac:	9305      	str	r3, [sp, #20]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	f04f 0c0a 	mov.w	ip, #10
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bba:	3a30      	subs	r2, #48	; 0x30
 8009bbc:	2a09      	cmp	r2, #9
 8009bbe:	d903      	bls.n	8009bc8 <_svfiprintf_r+0x1a8>
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d0c5      	beq.n	8009b50 <_svfiprintf_r+0x130>
 8009bc4:	9105      	str	r1, [sp, #20]
 8009bc6:	e7c3      	b.n	8009b50 <_svfiprintf_r+0x130>
 8009bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bcc:	4604      	mov	r4, r0
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e7f0      	b.n	8009bb4 <_svfiprintf_r+0x194>
 8009bd2:	ab03      	add	r3, sp, #12
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	462a      	mov	r2, r5
 8009bd8:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <_svfiprintf_r+0x1f8>)
 8009bda:	a904      	add	r1, sp, #16
 8009bdc:	4638      	mov	r0, r7
 8009bde:	f7fc fa21 	bl	8006024 <_printf_float>
 8009be2:	1c42      	adds	r2, r0, #1
 8009be4:	4606      	mov	r6, r0
 8009be6:	d1d6      	bne.n	8009b96 <_svfiprintf_r+0x176>
 8009be8:	89ab      	ldrh	r3, [r5, #12]
 8009bea:	065b      	lsls	r3, r3, #25
 8009bec:	f53f af2c 	bmi.w	8009a48 <_svfiprintf_r+0x28>
 8009bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bf2:	b01d      	add	sp, #116	; 0x74
 8009bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf8:	ab03      	add	r3, sp, #12
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <_svfiprintf_r+0x1f8>)
 8009c00:	a904      	add	r1, sp, #16
 8009c02:	4638      	mov	r0, r7
 8009c04:	f7fc fcb2 	bl	800656c <_printf_i>
 8009c08:	e7eb      	b.n	8009be2 <_svfiprintf_r+0x1c2>
 8009c0a:	bf00      	nop
 8009c0c:	0800b384 	.word	0x0800b384
 8009c10:	0800b38e 	.word	0x0800b38e
 8009c14:	08006025 	.word	0x08006025
 8009c18:	08009969 	.word	0x08009969
 8009c1c:	0800b38a 	.word	0x0800b38a

08009c20 <nan>:
 8009c20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c28 <nan+0x8>
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	00000000 	.word	0x00000000
 8009c2c:	7ff80000 	.word	0x7ff80000

08009c30 <_sbrk_r>:
 8009c30:	b538      	push	{r3, r4, r5, lr}
 8009c32:	4d06      	ldr	r5, [pc, #24]	; (8009c4c <_sbrk_r+0x1c>)
 8009c34:	2300      	movs	r3, #0
 8009c36:	4604      	mov	r4, r0
 8009c38:	4608      	mov	r0, r1
 8009c3a:	602b      	str	r3, [r5, #0]
 8009c3c:	f7f7 fe36 	bl	80018ac <_sbrk>
 8009c40:	1c43      	adds	r3, r0, #1
 8009c42:	d102      	bne.n	8009c4a <_sbrk_r+0x1a>
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	b103      	cbz	r3, 8009c4a <_sbrk_r+0x1a>
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	20000768 	.word	0x20000768

08009c50 <strncmp>:
 8009c50:	b510      	push	{r4, lr}
 8009c52:	b17a      	cbz	r2, 8009c74 <strncmp+0x24>
 8009c54:	4603      	mov	r3, r0
 8009c56:	3901      	subs	r1, #1
 8009c58:	1884      	adds	r4, r0, r2
 8009c5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009c5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009c62:	4290      	cmp	r0, r2
 8009c64:	d101      	bne.n	8009c6a <strncmp+0x1a>
 8009c66:	42a3      	cmp	r3, r4
 8009c68:	d101      	bne.n	8009c6e <strncmp+0x1e>
 8009c6a:	1a80      	subs	r0, r0, r2
 8009c6c:	bd10      	pop	{r4, pc}
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d1f3      	bne.n	8009c5a <strncmp+0xa>
 8009c72:	e7fa      	b.n	8009c6a <strncmp+0x1a>
 8009c74:	4610      	mov	r0, r2
 8009c76:	e7f9      	b.n	8009c6c <strncmp+0x1c>

08009c78 <__ascii_wctomb>:
 8009c78:	b149      	cbz	r1, 8009c8e <__ascii_wctomb+0x16>
 8009c7a:	2aff      	cmp	r2, #255	; 0xff
 8009c7c:	bf85      	ittet	hi
 8009c7e:	238a      	movhi	r3, #138	; 0x8a
 8009c80:	6003      	strhi	r3, [r0, #0]
 8009c82:	700a      	strbls	r2, [r1, #0]
 8009c84:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c88:	bf98      	it	ls
 8009c8a:	2001      	movls	r0, #1
 8009c8c:	4770      	bx	lr
 8009c8e:	4608      	mov	r0, r1
 8009c90:	4770      	bx	lr
	...

08009c94 <__assert_func>:
 8009c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c96:	4614      	mov	r4, r2
 8009c98:	461a      	mov	r2, r3
 8009c9a:	4b09      	ldr	r3, [pc, #36]	; (8009cc0 <__assert_func+0x2c>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	68d8      	ldr	r0, [r3, #12]
 8009ca2:	b14c      	cbz	r4, 8009cb8 <__assert_func+0x24>
 8009ca4:	4b07      	ldr	r3, [pc, #28]	; (8009cc4 <__assert_func+0x30>)
 8009ca6:	9100      	str	r1, [sp, #0]
 8009ca8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cac:	4906      	ldr	r1, [pc, #24]	; (8009cc8 <__assert_func+0x34>)
 8009cae:	462b      	mov	r3, r5
 8009cb0:	f000 f80e 	bl	8009cd0 <fiprintf>
 8009cb4:	f000 fa72 	bl	800a19c <abort>
 8009cb8:	4b04      	ldr	r3, [pc, #16]	; (8009ccc <__assert_func+0x38>)
 8009cba:	461c      	mov	r4, r3
 8009cbc:	e7f3      	b.n	8009ca6 <__assert_func+0x12>
 8009cbe:	bf00      	nop
 8009cc0:	20000014 	.word	0x20000014
 8009cc4:	0800b395 	.word	0x0800b395
 8009cc8:	0800b3a2 	.word	0x0800b3a2
 8009ccc:	0800b3d0 	.word	0x0800b3d0

08009cd0 <fiprintf>:
 8009cd0:	b40e      	push	{r1, r2, r3}
 8009cd2:	b503      	push	{r0, r1, lr}
 8009cd4:	4601      	mov	r1, r0
 8009cd6:	ab03      	add	r3, sp, #12
 8009cd8:	4805      	ldr	r0, [pc, #20]	; (8009cf0 <fiprintf+0x20>)
 8009cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cde:	6800      	ldr	r0, [r0, #0]
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	f000 f86b 	bl	8009dbc <_vfiprintf_r>
 8009ce6:	b002      	add	sp, #8
 8009ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cec:	b003      	add	sp, #12
 8009cee:	4770      	bx	lr
 8009cf0:	20000014 	.word	0x20000014

08009cf4 <__malloc_lock>:
 8009cf4:	4801      	ldr	r0, [pc, #4]	; (8009cfc <__malloc_lock+0x8>)
 8009cf6:	f000 bc11 	b.w	800a51c <__retarget_lock_acquire_recursive>
 8009cfa:	bf00      	nop
 8009cfc:	2000076c 	.word	0x2000076c

08009d00 <__malloc_unlock>:
 8009d00:	4801      	ldr	r0, [pc, #4]	; (8009d08 <__malloc_unlock+0x8>)
 8009d02:	f000 bc0c 	b.w	800a51e <__retarget_lock_release_recursive>
 8009d06:	bf00      	nop
 8009d08:	2000076c 	.word	0x2000076c

08009d0c <_realloc_r>:
 8009d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d10:	4680      	mov	r8, r0
 8009d12:	4614      	mov	r4, r2
 8009d14:	460e      	mov	r6, r1
 8009d16:	b921      	cbnz	r1, 8009d22 <_realloc_r+0x16>
 8009d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	f7ff bdaf 	b.w	8009880 <_malloc_r>
 8009d22:	b92a      	cbnz	r2, 8009d30 <_realloc_r+0x24>
 8009d24:	f7ff fd40 	bl	80097a8 <_free_r>
 8009d28:	4625      	mov	r5, r4
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d30:	f000 fc5c 	bl	800a5ec <_malloc_usable_size_r>
 8009d34:	4284      	cmp	r4, r0
 8009d36:	4607      	mov	r7, r0
 8009d38:	d802      	bhi.n	8009d40 <_realloc_r+0x34>
 8009d3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d3e:	d812      	bhi.n	8009d66 <_realloc_r+0x5a>
 8009d40:	4621      	mov	r1, r4
 8009d42:	4640      	mov	r0, r8
 8009d44:	f7ff fd9c 	bl	8009880 <_malloc_r>
 8009d48:	4605      	mov	r5, r0
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d0ed      	beq.n	8009d2a <_realloc_r+0x1e>
 8009d4e:	42bc      	cmp	r4, r7
 8009d50:	4622      	mov	r2, r4
 8009d52:	4631      	mov	r1, r6
 8009d54:	bf28      	it	cs
 8009d56:	463a      	movcs	r2, r7
 8009d58:	f7fc f894 	bl	8005e84 <memcpy>
 8009d5c:	4631      	mov	r1, r6
 8009d5e:	4640      	mov	r0, r8
 8009d60:	f7ff fd22 	bl	80097a8 <_free_r>
 8009d64:	e7e1      	b.n	8009d2a <_realloc_r+0x1e>
 8009d66:	4635      	mov	r5, r6
 8009d68:	e7df      	b.n	8009d2a <_realloc_r+0x1e>

08009d6a <__sfputc_r>:
 8009d6a:	6893      	ldr	r3, [r2, #8]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	b410      	push	{r4}
 8009d72:	6093      	str	r3, [r2, #8]
 8009d74:	da08      	bge.n	8009d88 <__sfputc_r+0x1e>
 8009d76:	6994      	ldr	r4, [r2, #24]
 8009d78:	42a3      	cmp	r3, r4
 8009d7a:	db01      	blt.n	8009d80 <__sfputc_r+0x16>
 8009d7c:	290a      	cmp	r1, #10
 8009d7e:	d103      	bne.n	8009d88 <__sfputc_r+0x1e>
 8009d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d84:	f000 b94a 	b.w	800a01c <__swbuf_r>
 8009d88:	6813      	ldr	r3, [r2, #0]
 8009d8a:	1c58      	adds	r0, r3, #1
 8009d8c:	6010      	str	r0, [r2, #0]
 8009d8e:	7019      	strb	r1, [r3, #0]
 8009d90:	4608      	mov	r0, r1
 8009d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <__sfputs_r>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460f      	mov	r7, r1
 8009d9e:	4614      	mov	r4, r2
 8009da0:	18d5      	adds	r5, r2, r3
 8009da2:	42ac      	cmp	r4, r5
 8009da4:	d101      	bne.n	8009daa <__sfputs_r+0x12>
 8009da6:	2000      	movs	r0, #0
 8009da8:	e007      	b.n	8009dba <__sfputs_r+0x22>
 8009daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dae:	463a      	mov	r2, r7
 8009db0:	4630      	mov	r0, r6
 8009db2:	f7ff ffda 	bl	8009d6a <__sfputc_r>
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	d1f3      	bne.n	8009da2 <__sfputs_r+0xa>
 8009dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009dbc <_vfiprintf_r>:
 8009dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	460d      	mov	r5, r1
 8009dc2:	b09d      	sub	sp, #116	; 0x74
 8009dc4:	4614      	mov	r4, r2
 8009dc6:	4698      	mov	r8, r3
 8009dc8:	4606      	mov	r6, r0
 8009dca:	b118      	cbz	r0, 8009dd4 <_vfiprintf_r+0x18>
 8009dcc:	6983      	ldr	r3, [r0, #24]
 8009dce:	b90b      	cbnz	r3, 8009dd4 <_vfiprintf_r+0x18>
 8009dd0:	f000 fb06 	bl	800a3e0 <__sinit>
 8009dd4:	4b89      	ldr	r3, [pc, #548]	; (8009ffc <_vfiprintf_r+0x240>)
 8009dd6:	429d      	cmp	r5, r3
 8009dd8:	d11b      	bne.n	8009e12 <_vfiprintf_r+0x56>
 8009dda:	6875      	ldr	r5, [r6, #4]
 8009ddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dde:	07d9      	lsls	r1, r3, #31
 8009de0:	d405      	bmi.n	8009dee <_vfiprintf_r+0x32>
 8009de2:	89ab      	ldrh	r3, [r5, #12]
 8009de4:	059a      	lsls	r2, r3, #22
 8009de6:	d402      	bmi.n	8009dee <_vfiprintf_r+0x32>
 8009de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dea:	f000 fb97 	bl	800a51c <__retarget_lock_acquire_recursive>
 8009dee:	89ab      	ldrh	r3, [r5, #12]
 8009df0:	071b      	lsls	r3, r3, #28
 8009df2:	d501      	bpl.n	8009df8 <_vfiprintf_r+0x3c>
 8009df4:	692b      	ldr	r3, [r5, #16]
 8009df6:	b9eb      	cbnz	r3, 8009e34 <_vfiprintf_r+0x78>
 8009df8:	4629      	mov	r1, r5
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f000 f960 	bl	800a0c0 <__swsetup_r>
 8009e00:	b1c0      	cbz	r0, 8009e34 <_vfiprintf_r+0x78>
 8009e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e04:	07dc      	lsls	r4, r3, #31
 8009e06:	d50e      	bpl.n	8009e26 <_vfiprintf_r+0x6a>
 8009e08:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0c:	b01d      	add	sp, #116	; 0x74
 8009e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e12:	4b7b      	ldr	r3, [pc, #492]	; (800a000 <_vfiprintf_r+0x244>)
 8009e14:	429d      	cmp	r5, r3
 8009e16:	d101      	bne.n	8009e1c <_vfiprintf_r+0x60>
 8009e18:	68b5      	ldr	r5, [r6, #8]
 8009e1a:	e7df      	b.n	8009ddc <_vfiprintf_r+0x20>
 8009e1c:	4b79      	ldr	r3, [pc, #484]	; (800a004 <_vfiprintf_r+0x248>)
 8009e1e:	429d      	cmp	r5, r3
 8009e20:	bf08      	it	eq
 8009e22:	68f5      	ldreq	r5, [r6, #12]
 8009e24:	e7da      	b.n	8009ddc <_vfiprintf_r+0x20>
 8009e26:	89ab      	ldrh	r3, [r5, #12]
 8009e28:	0598      	lsls	r0, r3, #22
 8009e2a:	d4ed      	bmi.n	8009e08 <_vfiprintf_r+0x4c>
 8009e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e2e:	f000 fb76 	bl	800a51e <__retarget_lock_release_recursive>
 8009e32:	e7e9      	b.n	8009e08 <_vfiprintf_r+0x4c>
 8009e34:	2300      	movs	r3, #0
 8009e36:	9309      	str	r3, [sp, #36]	; 0x24
 8009e38:	2320      	movs	r3, #32
 8009e3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e42:	2330      	movs	r3, #48	; 0x30
 8009e44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a008 <_vfiprintf_r+0x24c>
 8009e48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e4c:	f04f 0901 	mov.w	r9, #1
 8009e50:	4623      	mov	r3, r4
 8009e52:	469a      	mov	sl, r3
 8009e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e58:	b10a      	cbz	r2, 8009e5e <_vfiprintf_r+0xa2>
 8009e5a:	2a25      	cmp	r2, #37	; 0x25
 8009e5c:	d1f9      	bne.n	8009e52 <_vfiprintf_r+0x96>
 8009e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009e62:	d00b      	beq.n	8009e7c <_vfiprintf_r+0xc0>
 8009e64:	465b      	mov	r3, fp
 8009e66:	4622      	mov	r2, r4
 8009e68:	4629      	mov	r1, r5
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f7ff ff94 	bl	8009d98 <__sfputs_r>
 8009e70:	3001      	adds	r0, #1
 8009e72:	f000 80aa 	beq.w	8009fca <_vfiprintf_r+0x20e>
 8009e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e78:	445a      	add	r2, fp
 8009e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 80a2 	beq.w	8009fca <_vfiprintf_r+0x20e>
 8009e86:	2300      	movs	r3, #0
 8009e88:	f04f 32ff 	mov.w	r2, #4294967295
 8009e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e90:	f10a 0a01 	add.w	sl, sl, #1
 8009e94:	9304      	str	r3, [sp, #16]
 8009e96:	9307      	str	r3, [sp, #28]
 8009e98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009e9e:	4654      	mov	r4, sl
 8009ea0:	2205      	movs	r2, #5
 8009ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea6:	4858      	ldr	r0, [pc, #352]	; (800a008 <_vfiprintf_r+0x24c>)
 8009ea8:	f7f6 f9a2 	bl	80001f0 <memchr>
 8009eac:	9a04      	ldr	r2, [sp, #16]
 8009eae:	b9d8      	cbnz	r0, 8009ee8 <_vfiprintf_r+0x12c>
 8009eb0:	06d1      	lsls	r1, r2, #27
 8009eb2:	bf44      	itt	mi
 8009eb4:	2320      	movmi	r3, #32
 8009eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eba:	0713      	lsls	r3, r2, #28
 8009ebc:	bf44      	itt	mi
 8009ebe:	232b      	movmi	r3, #43	; 0x2b
 8009ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8009eca:	d015      	beq.n	8009ef8 <_vfiprintf_r+0x13c>
 8009ecc:	9a07      	ldr	r2, [sp, #28]
 8009ece:	4654      	mov	r4, sl
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	f04f 0c0a 	mov.w	ip, #10
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009edc:	3b30      	subs	r3, #48	; 0x30
 8009ede:	2b09      	cmp	r3, #9
 8009ee0:	d94e      	bls.n	8009f80 <_vfiprintf_r+0x1c4>
 8009ee2:	b1b0      	cbz	r0, 8009f12 <_vfiprintf_r+0x156>
 8009ee4:	9207      	str	r2, [sp, #28]
 8009ee6:	e014      	b.n	8009f12 <_vfiprintf_r+0x156>
 8009ee8:	eba0 0308 	sub.w	r3, r0, r8
 8009eec:	fa09 f303 	lsl.w	r3, r9, r3
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	9304      	str	r3, [sp, #16]
 8009ef4:	46a2      	mov	sl, r4
 8009ef6:	e7d2      	b.n	8009e9e <_vfiprintf_r+0xe2>
 8009ef8:	9b03      	ldr	r3, [sp, #12]
 8009efa:	1d19      	adds	r1, r3, #4
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	9103      	str	r1, [sp, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	bfbb      	ittet	lt
 8009f04:	425b      	neglt	r3, r3
 8009f06:	f042 0202 	orrlt.w	r2, r2, #2
 8009f0a:	9307      	strge	r3, [sp, #28]
 8009f0c:	9307      	strlt	r3, [sp, #28]
 8009f0e:	bfb8      	it	lt
 8009f10:	9204      	strlt	r2, [sp, #16]
 8009f12:	7823      	ldrb	r3, [r4, #0]
 8009f14:	2b2e      	cmp	r3, #46	; 0x2e
 8009f16:	d10c      	bne.n	8009f32 <_vfiprintf_r+0x176>
 8009f18:	7863      	ldrb	r3, [r4, #1]
 8009f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f1c:	d135      	bne.n	8009f8a <_vfiprintf_r+0x1ce>
 8009f1e:	9b03      	ldr	r3, [sp, #12]
 8009f20:	1d1a      	adds	r2, r3, #4
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	9203      	str	r2, [sp, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	bfb8      	it	lt
 8009f2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f2e:	3402      	adds	r4, #2
 8009f30:	9305      	str	r3, [sp, #20]
 8009f32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a018 <_vfiprintf_r+0x25c>
 8009f36:	7821      	ldrb	r1, [r4, #0]
 8009f38:	2203      	movs	r2, #3
 8009f3a:	4650      	mov	r0, sl
 8009f3c:	f7f6 f958 	bl	80001f0 <memchr>
 8009f40:	b140      	cbz	r0, 8009f54 <_vfiprintf_r+0x198>
 8009f42:	2340      	movs	r3, #64	; 0x40
 8009f44:	eba0 000a 	sub.w	r0, r0, sl
 8009f48:	fa03 f000 	lsl.w	r0, r3, r0
 8009f4c:	9b04      	ldr	r3, [sp, #16]
 8009f4e:	4303      	orrs	r3, r0
 8009f50:	3401      	adds	r4, #1
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f58:	482c      	ldr	r0, [pc, #176]	; (800a00c <_vfiprintf_r+0x250>)
 8009f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f5e:	2206      	movs	r2, #6
 8009f60:	f7f6 f946 	bl	80001f0 <memchr>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d03f      	beq.n	8009fe8 <_vfiprintf_r+0x22c>
 8009f68:	4b29      	ldr	r3, [pc, #164]	; (800a010 <_vfiprintf_r+0x254>)
 8009f6a:	bb1b      	cbnz	r3, 8009fb4 <_vfiprintf_r+0x1f8>
 8009f6c:	9b03      	ldr	r3, [sp, #12]
 8009f6e:	3307      	adds	r3, #7
 8009f70:	f023 0307 	bic.w	r3, r3, #7
 8009f74:	3308      	adds	r3, #8
 8009f76:	9303      	str	r3, [sp, #12]
 8009f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f7a:	443b      	add	r3, r7
 8009f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f7e:	e767      	b.n	8009e50 <_vfiprintf_r+0x94>
 8009f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f84:	460c      	mov	r4, r1
 8009f86:	2001      	movs	r0, #1
 8009f88:	e7a5      	b.n	8009ed6 <_vfiprintf_r+0x11a>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	3401      	adds	r4, #1
 8009f8e:	9305      	str	r3, [sp, #20]
 8009f90:	4619      	mov	r1, r3
 8009f92:	f04f 0c0a 	mov.w	ip, #10
 8009f96:	4620      	mov	r0, r4
 8009f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f9c:	3a30      	subs	r2, #48	; 0x30
 8009f9e:	2a09      	cmp	r2, #9
 8009fa0:	d903      	bls.n	8009faa <_vfiprintf_r+0x1ee>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0c5      	beq.n	8009f32 <_vfiprintf_r+0x176>
 8009fa6:	9105      	str	r1, [sp, #20]
 8009fa8:	e7c3      	b.n	8009f32 <_vfiprintf_r+0x176>
 8009faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fae:	4604      	mov	r4, r0
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e7f0      	b.n	8009f96 <_vfiprintf_r+0x1da>
 8009fb4:	ab03      	add	r3, sp, #12
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	462a      	mov	r2, r5
 8009fba:	4b16      	ldr	r3, [pc, #88]	; (800a014 <_vfiprintf_r+0x258>)
 8009fbc:	a904      	add	r1, sp, #16
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f7fc f830 	bl	8006024 <_printf_float>
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	1c78      	adds	r0, r7, #1
 8009fc8:	d1d6      	bne.n	8009f78 <_vfiprintf_r+0x1bc>
 8009fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fcc:	07d9      	lsls	r1, r3, #31
 8009fce:	d405      	bmi.n	8009fdc <_vfiprintf_r+0x220>
 8009fd0:	89ab      	ldrh	r3, [r5, #12]
 8009fd2:	059a      	lsls	r2, r3, #22
 8009fd4:	d402      	bmi.n	8009fdc <_vfiprintf_r+0x220>
 8009fd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fd8:	f000 faa1 	bl	800a51e <__retarget_lock_release_recursive>
 8009fdc:	89ab      	ldrh	r3, [r5, #12]
 8009fde:	065b      	lsls	r3, r3, #25
 8009fe0:	f53f af12 	bmi.w	8009e08 <_vfiprintf_r+0x4c>
 8009fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fe6:	e711      	b.n	8009e0c <_vfiprintf_r+0x50>
 8009fe8:	ab03      	add	r3, sp, #12
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	462a      	mov	r2, r5
 8009fee:	4b09      	ldr	r3, [pc, #36]	; (800a014 <_vfiprintf_r+0x258>)
 8009ff0:	a904      	add	r1, sp, #16
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f7fc faba 	bl	800656c <_printf_i>
 8009ff8:	e7e4      	b.n	8009fc4 <_vfiprintf_r+0x208>
 8009ffa:	bf00      	nop
 8009ffc:	0800b3f4 	.word	0x0800b3f4
 800a000:	0800b414 	.word	0x0800b414
 800a004:	0800b3d4 	.word	0x0800b3d4
 800a008:	0800b384 	.word	0x0800b384
 800a00c:	0800b38e 	.word	0x0800b38e
 800a010:	08006025 	.word	0x08006025
 800a014:	08009d99 	.word	0x08009d99
 800a018:	0800b38a 	.word	0x0800b38a

0800a01c <__swbuf_r>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	460e      	mov	r6, r1
 800a020:	4614      	mov	r4, r2
 800a022:	4605      	mov	r5, r0
 800a024:	b118      	cbz	r0, 800a02e <__swbuf_r+0x12>
 800a026:	6983      	ldr	r3, [r0, #24]
 800a028:	b90b      	cbnz	r3, 800a02e <__swbuf_r+0x12>
 800a02a:	f000 f9d9 	bl	800a3e0 <__sinit>
 800a02e:	4b21      	ldr	r3, [pc, #132]	; (800a0b4 <__swbuf_r+0x98>)
 800a030:	429c      	cmp	r4, r3
 800a032:	d12b      	bne.n	800a08c <__swbuf_r+0x70>
 800a034:	686c      	ldr	r4, [r5, #4]
 800a036:	69a3      	ldr	r3, [r4, #24]
 800a038:	60a3      	str	r3, [r4, #8]
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	071a      	lsls	r2, r3, #28
 800a03e:	d52f      	bpl.n	800a0a0 <__swbuf_r+0x84>
 800a040:	6923      	ldr	r3, [r4, #16]
 800a042:	b36b      	cbz	r3, 800a0a0 <__swbuf_r+0x84>
 800a044:	6923      	ldr	r3, [r4, #16]
 800a046:	6820      	ldr	r0, [r4, #0]
 800a048:	1ac0      	subs	r0, r0, r3
 800a04a:	6963      	ldr	r3, [r4, #20]
 800a04c:	b2f6      	uxtb	r6, r6
 800a04e:	4283      	cmp	r3, r0
 800a050:	4637      	mov	r7, r6
 800a052:	dc04      	bgt.n	800a05e <__swbuf_r+0x42>
 800a054:	4621      	mov	r1, r4
 800a056:	4628      	mov	r0, r5
 800a058:	f000 f92e 	bl	800a2b8 <_fflush_r>
 800a05c:	bb30      	cbnz	r0, 800a0ac <__swbuf_r+0x90>
 800a05e:	68a3      	ldr	r3, [r4, #8]
 800a060:	3b01      	subs	r3, #1
 800a062:	60a3      	str	r3, [r4, #8]
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	1c5a      	adds	r2, r3, #1
 800a068:	6022      	str	r2, [r4, #0]
 800a06a:	701e      	strb	r6, [r3, #0]
 800a06c:	6963      	ldr	r3, [r4, #20]
 800a06e:	3001      	adds	r0, #1
 800a070:	4283      	cmp	r3, r0
 800a072:	d004      	beq.n	800a07e <__swbuf_r+0x62>
 800a074:	89a3      	ldrh	r3, [r4, #12]
 800a076:	07db      	lsls	r3, r3, #31
 800a078:	d506      	bpl.n	800a088 <__swbuf_r+0x6c>
 800a07a:	2e0a      	cmp	r6, #10
 800a07c:	d104      	bne.n	800a088 <__swbuf_r+0x6c>
 800a07e:	4621      	mov	r1, r4
 800a080:	4628      	mov	r0, r5
 800a082:	f000 f919 	bl	800a2b8 <_fflush_r>
 800a086:	b988      	cbnz	r0, 800a0ac <__swbuf_r+0x90>
 800a088:	4638      	mov	r0, r7
 800a08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a08c:	4b0a      	ldr	r3, [pc, #40]	; (800a0b8 <__swbuf_r+0x9c>)
 800a08e:	429c      	cmp	r4, r3
 800a090:	d101      	bne.n	800a096 <__swbuf_r+0x7a>
 800a092:	68ac      	ldr	r4, [r5, #8]
 800a094:	e7cf      	b.n	800a036 <__swbuf_r+0x1a>
 800a096:	4b09      	ldr	r3, [pc, #36]	; (800a0bc <__swbuf_r+0xa0>)
 800a098:	429c      	cmp	r4, r3
 800a09a:	bf08      	it	eq
 800a09c:	68ec      	ldreq	r4, [r5, #12]
 800a09e:	e7ca      	b.n	800a036 <__swbuf_r+0x1a>
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	f000 f80c 	bl	800a0c0 <__swsetup_r>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d0cb      	beq.n	800a044 <__swbuf_r+0x28>
 800a0ac:	f04f 37ff 	mov.w	r7, #4294967295
 800a0b0:	e7ea      	b.n	800a088 <__swbuf_r+0x6c>
 800a0b2:	bf00      	nop
 800a0b4:	0800b3f4 	.word	0x0800b3f4
 800a0b8:	0800b414 	.word	0x0800b414
 800a0bc:	0800b3d4 	.word	0x0800b3d4

0800a0c0 <__swsetup_r>:
 800a0c0:	4b32      	ldr	r3, [pc, #200]	; (800a18c <__swsetup_r+0xcc>)
 800a0c2:	b570      	push	{r4, r5, r6, lr}
 800a0c4:	681d      	ldr	r5, [r3, #0]
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	b125      	cbz	r5, 800a0d6 <__swsetup_r+0x16>
 800a0cc:	69ab      	ldr	r3, [r5, #24]
 800a0ce:	b913      	cbnz	r3, 800a0d6 <__swsetup_r+0x16>
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	f000 f985 	bl	800a3e0 <__sinit>
 800a0d6:	4b2e      	ldr	r3, [pc, #184]	; (800a190 <__swsetup_r+0xd0>)
 800a0d8:	429c      	cmp	r4, r3
 800a0da:	d10f      	bne.n	800a0fc <__swsetup_r+0x3c>
 800a0dc:	686c      	ldr	r4, [r5, #4]
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0e4:	0719      	lsls	r1, r3, #28
 800a0e6:	d42c      	bmi.n	800a142 <__swsetup_r+0x82>
 800a0e8:	06dd      	lsls	r5, r3, #27
 800a0ea:	d411      	bmi.n	800a110 <__swsetup_r+0x50>
 800a0ec:	2309      	movs	r3, #9
 800a0ee:	6033      	str	r3, [r6, #0]
 800a0f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0f4:	81a3      	strh	r3, [r4, #12]
 800a0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0fa:	e03e      	b.n	800a17a <__swsetup_r+0xba>
 800a0fc:	4b25      	ldr	r3, [pc, #148]	; (800a194 <__swsetup_r+0xd4>)
 800a0fe:	429c      	cmp	r4, r3
 800a100:	d101      	bne.n	800a106 <__swsetup_r+0x46>
 800a102:	68ac      	ldr	r4, [r5, #8]
 800a104:	e7eb      	b.n	800a0de <__swsetup_r+0x1e>
 800a106:	4b24      	ldr	r3, [pc, #144]	; (800a198 <__swsetup_r+0xd8>)
 800a108:	429c      	cmp	r4, r3
 800a10a:	bf08      	it	eq
 800a10c:	68ec      	ldreq	r4, [r5, #12]
 800a10e:	e7e6      	b.n	800a0de <__swsetup_r+0x1e>
 800a110:	0758      	lsls	r0, r3, #29
 800a112:	d512      	bpl.n	800a13a <__swsetup_r+0x7a>
 800a114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a116:	b141      	cbz	r1, 800a12a <__swsetup_r+0x6a>
 800a118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a11c:	4299      	cmp	r1, r3
 800a11e:	d002      	beq.n	800a126 <__swsetup_r+0x66>
 800a120:	4630      	mov	r0, r6
 800a122:	f7ff fb41 	bl	80097a8 <_free_r>
 800a126:	2300      	movs	r3, #0
 800a128:	6363      	str	r3, [r4, #52]	; 0x34
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a130:	81a3      	strh	r3, [r4, #12]
 800a132:	2300      	movs	r3, #0
 800a134:	6063      	str	r3, [r4, #4]
 800a136:	6923      	ldr	r3, [r4, #16]
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	89a3      	ldrh	r3, [r4, #12]
 800a13c:	f043 0308 	orr.w	r3, r3, #8
 800a140:	81a3      	strh	r3, [r4, #12]
 800a142:	6923      	ldr	r3, [r4, #16]
 800a144:	b94b      	cbnz	r3, 800a15a <__swsetup_r+0x9a>
 800a146:	89a3      	ldrh	r3, [r4, #12]
 800a148:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a14c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a150:	d003      	beq.n	800a15a <__swsetup_r+0x9a>
 800a152:	4621      	mov	r1, r4
 800a154:	4630      	mov	r0, r6
 800a156:	f000 fa09 	bl	800a56c <__smakebuf_r>
 800a15a:	89a0      	ldrh	r0, [r4, #12]
 800a15c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a160:	f010 0301 	ands.w	r3, r0, #1
 800a164:	d00a      	beq.n	800a17c <__swsetup_r+0xbc>
 800a166:	2300      	movs	r3, #0
 800a168:	60a3      	str	r3, [r4, #8]
 800a16a:	6963      	ldr	r3, [r4, #20]
 800a16c:	425b      	negs	r3, r3
 800a16e:	61a3      	str	r3, [r4, #24]
 800a170:	6923      	ldr	r3, [r4, #16]
 800a172:	b943      	cbnz	r3, 800a186 <__swsetup_r+0xc6>
 800a174:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a178:	d1ba      	bne.n	800a0f0 <__swsetup_r+0x30>
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	0781      	lsls	r1, r0, #30
 800a17e:	bf58      	it	pl
 800a180:	6963      	ldrpl	r3, [r4, #20]
 800a182:	60a3      	str	r3, [r4, #8]
 800a184:	e7f4      	b.n	800a170 <__swsetup_r+0xb0>
 800a186:	2000      	movs	r0, #0
 800a188:	e7f7      	b.n	800a17a <__swsetup_r+0xba>
 800a18a:	bf00      	nop
 800a18c:	20000014 	.word	0x20000014
 800a190:	0800b3f4 	.word	0x0800b3f4
 800a194:	0800b414 	.word	0x0800b414
 800a198:	0800b3d4 	.word	0x0800b3d4

0800a19c <abort>:
 800a19c:	b508      	push	{r3, lr}
 800a19e:	2006      	movs	r0, #6
 800a1a0:	f000 fa54 	bl	800a64c <raise>
 800a1a4:	2001      	movs	r0, #1
 800a1a6:	f7f7 fb09 	bl	80017bc <_exit>
	...

0800a1ac <__sflush_r>:
 800a1ac:	898a      	ldrh	r2, [r1, #12]
 800a1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	0710      	lsls	r0, r2, #28
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	d458      	bmi.n	800a26c <__sflush_r+0xc0>
 800a1ba:	684b      	ldr	r3, [r1, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	dc05      	bgt.n	800a1cc <__sflush_r+0x20>
 800a1c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	dc02      	bgt.n	800a1cc <__sflush_r+0x20>
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1ce:	2e00      	cmp	r6, #0
 800a1d0:	d0f9      	beq.n	800a1c6 <__sflush_r+0x1a>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1d8:	682f      	ldr	r7, [r5, #0]
 800a1da:	602b      	str	r3, [r5, #0]
 800a1dc:	d032      	beq.n	800a244 <__sflush_r+0x98>
 800a1de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	075a      	lsls	r2, r3, #29
 800a1e4:	d505      	bpl.n	800a1f2 <__sflush_r+0x46>
 800a1e6:	6863      	ldr	r3, [r4, #4]
 800a1e8:	1ac0      	subs	r0, r0, r3
 800a1ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1ec:	b10b      	cbz	r3, 800a1f2 <__sflush_r+0x46>
 800a1ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1f0:	1ac0      	subs	r0, r0, r3
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1f8:	6a21      	ldr	r1, [r4, #32]
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	47b0      	blx	r6
 800a1fe:	1c43      	adds	r3, r0, #1
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	d106      	bne.n	800a212 <__sflush_r+0x66>
 800a204:	6829      	ldr	r1, [r5, #0]
 800a206:	291d      	cmp	r1, #29
 800a208:	d82c      	bhi.n	800a264 <__sflush_r+0xb8>
 800a20a:	4a2a      	ldr	r2, [pc, #168]	; (800a2b4 <__sflush_r+0x108>)
 800a20c:	40ca      	lsrs	r2, r1
 800a20e:	07d6      	lsls	r6, r2, #31
 800a210:	d528      	bpl.n	800a264 <__sflush_r+0xb8>
 800a212:	2200      	movs	r2, #0
 800a214:	6062      	str	r2, [r4, #4]
 800a216:	04d9      	lsls	r1, r3, #19
 800a218:	6922      	ldr	r2, [r4, #16]
 800a21a:	6022      	str	r2, [r4, #0]
 800a21c:	d504      	bpl.n	800a228 <__sflush_r+0x7c>
 800a21e:	1c42      	adds	r2, r0, #1
 800a220:	d101      	bne.n	800a226 <__sflush_r+0x7a>
 800a222:	682b      	ldr	r3, [r5, #0]
 800a224:	b903      	cbnz	r3, 800a228 <__sflush_r+0x7c>
 800a226:	6560      	str	r0, [r4, #84]	; 0x54
 800a228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a22a:	602f      	str	r7, [r5, #0]
 800a22c:	2900      	cmp	r1, #0
 800a22e:	d0ca      	beq.n	800a1c6 <__sflush_r+0x1a>
 800a230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a234:	4299      	cmp	r1, r3
 800a236:	d002      	beq.n	800a23e <__sflush_r+0x92>
 800a238:	4628      	mov	r0, r5
 800a23a:	f7ff fab5 	bl	80097a8 <_free_r>
 800a23e:	2000      	movs	r0, #0
 800a240:	6360      	str	r0, [r4, #52]	; 0x34
 800a242:	e7c1      	b.n	800a1c8 <__sflush_r+0x1c>
 800a244:	6a21      	ldr	r1, [r4, #32]
 800a246:	2301      	movs	r3, #1
 800a248:	4628      	mov	r0, r5
 800a24a:	47b0      	blx	r6
 800a24c:	1c41      	adds	r1, r0, #1
 800a24e:	d1c7      	bne.n	800a1e0 <__sflush_r+0x34>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d0c4      	beq.n	800a1e0 <__sflush_r+0x34>
 800a256:	2b1d      	cmp	r3, #29
 800a258:	d001      	beq.n	800a25e <__sflush_r+0xb2>
 800a25a:	2b16      	cmp	r3, #22
 800a25c:	d101      	bne.n	800a262 <__sflush_r+0xb6>
 800a25e:	602f      	str	r7, [r5, #0]
 800a260:	e7b1      	b.n	800a1c6 <__sflush_r+0x1a>
 800a262:	89a3      	ldrh	r3, [r4, #12]
 800a264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a268:	81a3      	strh	r3, [r4, #12]
 800a26a:	e7ad      	b.n	800a1c8 <__sflush_r+0x1c>
 800a26c:	690f      	ldr	r7, [r1, #16]
 800a26e:	2f00      	cmp	r7, #0
 800a270:	d0a9      	beq.n	800a1c6 <__sflush_r+0x1a>
 800a272:	0793      	lsls	r3, r2, #30
 800a274:	680e      	ldr	r6, [r1, #0]
 800a276:	bf08      	it	eq
 800a278:	694b      	ldreq	r3, [r1, #20]
 800a27a:	600f      	str	r7, [r1, #0]
 800a27c:	bf18      	it	ne
 800a27e:	2300      	movne	r3, #0
 800a280:	eba6 0807 	sub.w	r8, r6, r7
 800a284:	608b      	str	r3, [r1, #8]
 800a286:	f1b8 0f00 	cmp.w	r8, #0
 800a28a:	dd9c      	ble.n	800a1c6 <__sflush_r+0x1a>
 800a28c:	6a21      	ldr	r1, [r4, #32]
 800a28e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a290:	4643      	mov	r3, r8
 800a292:	463a      	mov	r2, r7
 800a294:	4628      	mov	r0, r5
 800a296:	47b0      	blx	r6
 800a298:	2800      	cmp	r0, #0
 800a29a:	dc06      	bgt.n	800a2aa <__sflush_r+0xfe>
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a2:	81a3      	strh	r3, [r4, #12]
 800a2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a8:	e78e      	b.n	800a1c8 <__sflush_r+0x1c>
 800a2aa:	4407      	add	r7, r0
 800a2ac:	eba8 0800 	sub.w	r8, r8, r0
 800a2b0:	e7e9      	b.n	800a286 <__sflush_r+0xda>
 800a2b2:	bf00      	nop
 800a2b4:	20400001 	.word	0x20400001

0800a2b8 <_fflush_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	690b      	ldr	r3, [r1, #16]
 800a2bc:	4605      	mov	r5, r0
 800a2be:	460c      	mov	r4, r1
 800a2c0:	b913      	cbnz	r3, 800a2c8 <_fflush_r+0x10>
 800a2c2:	2500      	movs	r5, #0
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	b118      	cbz	r0, 800a2d2 <_fflush_r+0x1a>
 800a2ca:	6983      	ldr	r3, [r0, #24]
 800a2cc:	b90b      	cbnz	r3, 800a2d2 <_fflush_r+0x1a>
 800a2ce:	f000 f887 	bl	800a3e0 <__sinit>
 800a2d2:	4b14      	ldr	r3, [pc, #80]	; (800a324 <_fflush_r+0x6c>)
 800a2d4:	429c      	cmp	r4, r3
 800a2d6:	d11b      	bne.n	800a310 <_fflush_r+0x58>
 800a2d8:	686c      	ldr	r4, [r5, #4]
 800a2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0ef      	beq.n	800a2c2 <_fflush_r+0xa>
 800a2e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2e4:	07d0      	lsls	r0, r2, #31
 800a2e6:	d404      	bmi.n	800a2f2 <_fflush_r+0x3a>
 800a2e8:	0599      	lsls	r1, r3, #22
 800a2ea:	d402      	bmi.n	800a2f2 <_fflush_r+0x3a>
 800a2ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2ee:	f000 f915 	bl	800a51c <__retarget_lock_acquire_recursive>
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	f7ff ff59 	bl	800a1ac <__sflush_r>
 800a2fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2fc:	07da      	lsls	r2, r3, #31
 800a2fe:	4605      	mov	r5, r0
 800a300:	d4e0      	bmi.n	800a2c4 <_fflush_r+0xc>
 800a302:	89a3      	ldrh	r3, [r4, #12]
 800a304:	059b      	lsls	r3, r3, #22
 800a306:	d4dd      	bmi.n	800a2c4 <_fflush_r+0xc>
 800a308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a30a:	f000 f908 	bl	800a51e <__retarget_lock_release_recursive>
 800a30e:	e7d9      	b.n	800a2c4 <_fflush_r+0xc>
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <_fflush_r+0x70>)
 800a312:	429c      	cmp	r4, r3
 800a314:	d101      	bne.n	800a31a <_fflush_r+0x62>
 800a316:	68ac      	ldr	r4, [r5, #8]
 800a318:	e7df      	b.n	800a2da <_fflush_r+0x22>
 800a31a:	4b04      	ldr	r3, [pc, #16]	; (800a32c <_fflush_r+0x74>)
 800a31c:	429c      	cmp	r4, r3
 800a31e:	bf08      	it	eq
 800a320:	68ec      	ldreq	r4, [r5, #12]
 800a322:	e7da      	b.n	800a2da <_fflush_r+0x22>
 800a324:	0800b3f4 	.word	0x0800b3f4
 800a328:	0800b414 	.word	0x0800b414
 800a32c:	0800b3d4 	.word	0x0800b3d4

0800a330 <std>:
 800a330:	2300      	movs	r3, #0
 800a332:	b510      	push	{r4, lr}
 800a334:	4604      	mov	r4, r0
 800a336:	e9c0 3300 	strd	r3, r3, [r0]
 800a33a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a33e:	6083      	str	r3, [r0, #8]
 800a340:	8181      	strh	r1, [r0, #12]
 800a342:	6643      	str	r3, [r0, #100]	; 0x64
 800a344:	81c2      	strh	r2, [r0, #14]
 800a346:	6183      	str	r3, [r0, #24]
 800a348:	4619      	mov	r1, r3
 800a34a:	2208      	movs	r2, #8
 800a34c:	305c      	adds	r0, #92	; 0x5c
 800a34e:	f7fb fdc1 	bl	8005ed4 <memset>
 800a352:	4b05      	ldr	r3, [pc, #20]	; (800a368 <std+0x38>)
 800a354:	6263      	str	r3, [r4, #36]	; 0x24
 800a356:	4b05      	ldr	r3, [pc, #20]	; (800a36c <std+0x3c>)
 800a358:	62a3      	str	r3, [r4, #40]	; 0x28
 800a35a:	4b05      	ldr	r3, [pc, #20]	; (800a370 <std+0x40>)
 800a35c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a35e:	4b05      	ldr	r3, [pc, #20]	; (800a374 <std+0x44>)
 800a360:	6224      	str	r4, [r4, #32]
 800a362:	6323      	str	r3, [r4, #48]	; 0x30
 800a364:	bd10      	pop	{r4, pc}
 800a366:	bf00      	nop
 800a368:	0800a685 	.word	0x0800a685
 800a36c:	0800a6a7 	.word	0x0800a6a7
 800a370:	0800a6df 	.word	0x0800a6df
 800a374:	0800a703 	.word	0x0800a703

0800a378 <_cleanup_r>:
 800a378:	4901      	ldr	r1, [pc, #4]	; (800a380 <_cleanup_r+0x8>)
 800a37a:	f000 b8af 	b.w	800a4dc <_fwalk_reent>
 800a37e:	bf00      	nop
 800a380:	0800a2b9 	.word	0x0800a2b9

0800a384 <__sfmoreglue>:
 800a384:	b570      	push	{r4, r5, r6, lr}
 800a386:	2268      	movs	r2, #104	; 0x68
 800a388:	1e4d      	subs	r5, r1, #1
 800a38a:	4355      	muls	r5, r2
 800a38c:	460e      	mov	r6, r1
 800a38e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a392:	f7ff fa75 	bl	8009880 <_malloc_r>
 800a396:	4604      	mov	r4, r0
 800a398:	b140      	cbz	r0, 800a3ac <__sfmoreglue+0x28>
 800a39a:	2100      	movs	r1, #0
 800a39c:	e9c0 1600 	strd	r1, r6, [r0]
 800a3a0:	300c      	adds	r0, #12
 800a3a2:	60a0      	str	r0, [r4, #8]
 800a3a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a3a8:	f7fb fd94 	bl	8005ed4 <memset>
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	bd70      	pop	{r4, r5, r6, pc}

0800a3b0 <__sfp_lock_acquire>:
 800a3b0:	4801      	ldr	r0, [pc, #4]	; (800a3b8 <__sfp_lock_acquire+0x8>)
 800a3b2:	f000 b8b3 	b.w	800a51c <__retarget_lock_acquire_recursive>
 800a3b6:	bf00      	nop
 800a3b8:	2000076d 	.word	0x2000076d

0800a3bc <__sfp_lock_release>:
 800a3bc:	4801      	ldr	r0, [pc, #4]	; (800a3c4 <__sfp_lock_release+0x8>)
 800a3be:	f000 b8ae 	b.w	800a51e <__retarget_lock_release_recursive>
 800a3c2:	bf00      	nop
 800a3c4:	2000076d 	.word	0x2000076d

0800a3c8 <__sinit_lock_acquire>:
 800a3c8:	4801      	ldr	r0, [pc, #4]	; (800a3d0 <__sinit_lock_acquire+0x8>)
 800a3ca:	f000 b8a7 	b.w	800a51c <__retarget_lock_acquire_recursive>
 800a3ce:	bf00      	nop
 800a3d0:	2000076e 	.word	0x2000076e

0800a3d4 <__sinit_lock_release>:
 800a3d4:	4801      	ldr	r0, [pc, #4]	; (800a3dc <__sinit_lock_release+0x8>)
 800a3d6:	f000 b8a2 	b.w	800a51e <__retarget_lock_release_recursive>
 800a3da:	bf00      	nop
 800a3dc:	2000076e 	.word	0x2000076e

0800a3e0 <__sinit>:
 800a3e0:	b510      	push	{r4, lr}
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	f7ff fff0 	bl	800a3c8 <__sinit_lock_acquire>
 800a3e8:	69a3      	ldr	r3, [r4, #24]
 800a3ea:	b11b      	cbz	r3, 800a3f4 <__sinit+0x14>
 800a3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f0:	f7ff bff0 	b.w	800a3d4 <__sinit_lock_release>
 800a3f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a3f8:	6523      	str	r3, [r4, #80]	; 0x50
 800a3fa:	4b13      	ldr	r3, [pc, #76]	; (800a448 <__sinit+0x68>)
 800a3fc:	4a13      	ldr	r2, [pc, #76]	; (800a44c <__sinit+0x6c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	62a2      	str	r2, [r4, #40]	; 0x28
 800a402:	42a3      	cmp	r3, r4
 800a404:	bf04      	itt	eq
 800a406:	2301      	moveq	r3, #1
 800a408:	61a3      	streq	r3, [r4, #24]
 800a40a:	4620      	mov	r0, r4
 800a40c:	f000 f820 	bl	800a450 <__sfp>
 800a410:	6060      	str	r0, [r4, #4]
 800a412:	4620      	mov	r0, r4
 800a414:	f000 f81c 	bl	800a450 <__sfp>
 800a418:	60a0      	str	r0, [r4, #8]
 800a41a:	4620      	mov	r0, r4
 800a41c:	f000 f818 	bl	800a450 <__sfp>
 800a420:	2200      	movs	r2, #0
 800a422:	60e0      	str	r0, [r4, #12]
 800a424:	2104      	movs	r1, #4
 800a426:	6860      	ldr	r0, [r4, #4]
 800a428:	f7ff ff82 	bl	800a330 <std>
 800a42c:	68a0      	ldr	r0, [r4, #8]
 800a42e:	2201      	movs	r2, #1
 800a430:	2109      	movs	r1, #9
 800a432:	f7ff ff7d 	bl	800a330 <std>
 800a436:	68e0      	ldr	r0, [r4, #12]
 800a438:	2202      	movs	r2, #2
 800a43a:	2112      	movs	r1, #18
 800a43c:	f7ff ff78 	bl	800a330 <std>
 800a440:	2301      	movs	r3, #1
 800a442:	61a3      	str	r3, [r4, #24]
 800a444:	e7d2      	b.n	800a3ec <__sinit+0xc>
 800a446:	bf00      	nop
 800a448:	0800af8c 	.word	0x0800af8c
 800a44c:	0800a379 	.word	0x0800a379

0800a450 <__sfp>:
 800a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a452:	4607      	mov	r7, r0
 800a454:	f7ff ffac 	bl	800a3b0 <__sfp_lock_acquire>
 800a458:	4b1e      	ldr	r3, [pc, #120]	; (800a4d4 <__sfp+0x84>)
 800a45a:	681e      	ldr	r6, [r3, #0]
 800a45c:	69b3      	ldr	r3, [r6, #24]
 800a45e:	b913      	cbnz	r3, 800a466 <__sfp+0x16>
 800a460:	4630      	mov	r0, r6
 800a462:	f7ff ffbd 	bl	800a3e0 <__sinit>
 800a466:	3648      	adds	r6, #72	; 0x48
 800a468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a46c:	3b01      	subs	r3, #1
 800a46e:	d503      	bpl.n	800a478 <__sfp+0x28>
 800a470:	6833      	ldr	r3, [r6, #0]
 800a472:	b30b      	cbz	r3, 800a4b8 <__sfp+0x68>
 800a474:	6836      	ldr	r6, [r6, #0]
 800a476:	e7f7      	b.n	800a468 <__sfp+0x18>
 800a478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a47c:	b9d5      	cbnz	r5, 800a4b4 <__sfp+0x64>
 800a47e:	4b16      	ldr	r3, [pc, #88]	; (800a4d8 <__sfp+0x88>)
 800a480:	60e3      	str	r3, [r4, #12]
 800a482:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a486:	6665      	str	r5, [r4, #100]	; 0x64
 800a488:	f000 f847 	bl	800a51a <__retarget_lock_init_recursive>
 800a48c:	f7ff ff96 	bl	800a3bc <__sfp_lock_release>
 800a490:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a494:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a498:	6025      	str	r5, [r4, #0]
 800a49a:	61a5      	str	r5, [r4, #24]
 800a49c:	2208      	movs	r2, #8
 800a49e:	4629      	mov	r1, r5
 800a4a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4a4:	f7fb fd16 	bl	8005ed4 <memset>
 800a4a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a4ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b4:	3468      	adds	r4, #104	; 0x68
 800a4b6:	e7d9      	b.n	800a46c <__sfp+0x1c>
 800a4b8:	2104      	movs	r1, #4
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	f7ff ff62 	bl	800a384 <__sfmoreglue>
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	6030      	str	r0, [r6, #0]
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d1d5      	bne.n	800a474 <__sfp+0x24>
 800a4c8:	f7ff ff78 	bl	800a3bc <__sfp_lock_release>
 800a4cc:	230c      	movs	r3, #12
 800a4ce:	603b      	str	r3, [r7, #0]
 800a4d0:	e7ee      	b.n	800a4b0 <__sfp+0x60>
 800a4d2:	bf00      	nop
 800a4d4:	0800af8c 	.word	0x0800af8c
 800a4d8:	ffff0001 	.word	0xffff0001

0800a4dc <_fwalk_reent>:
 800a4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	4688      	mov	r8, r1
 800a4e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a4e8:	2700      	movs	r7, #0
 800a4ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4ee:	f1b9 0901 	subs.w	r9, r9, #1
 800a4f2:	d505      	bpl.n	800a500 <_fwalk_reent+0x24>
 800a4f4:	6824      	ldr	r4, [r4, #0]
 800a4f6:	2c00      	cmp	r4, #0
 800a4f8:	d1f7      	bne.n	800a4ea <_fwalk_reent+0xe>
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a500:	89ab      	ldrh	r3, [r5, #12]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d907      	bls.n	800a516 <_fwalk_reent+0x3a>
 800a506:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a50a:	3301      	adds	r3, #1
 800a50c:	d003      	beq.n	800a516 <_fwalk_reent+0x3a>
 800a50e:	4629      	mov	r1, r5
 800a510:	4630      	mov	r0, r6
 800a512:	47c0      	blx	r8
 800a514:	4307      	orrs	r7, r0
 800a516:	3568      	adds	r5, #104	; 0x68
 800a518:	e7e9      	b.n	800a4ee <_fwalk_reent+0x12>

0800a51a <__retarget_lock_init_recursive>:
 800a51a:	4770      	bx	lr

0800a51c <__retarget_lock_acquire_recursive>:
 800a51c:	4770      	bx	lr

0800a51e <__retarget_lock_release_recursive>:
 800a51e:	4770      	bx	lr

0800a520 <__swhatbuf_r>:
 800a520:	b570      	push	{r4, r5, r6, lr}
 800a522:	460e      	mov	r6, r1
 800a524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a528:	2900      	cmp	r1, #0
 800a52a:	b096      	sub	sp, #88	; 0x58
 800a52c:	4614      	mov	r4, r2
 800a52e:	461d      	mov	r5, r3
 800a530:	da08      	bge.n	800a544 <__swhatbuf_r+0x24>
 800a532:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	602a      	str	r2, [r5, #0]
 800a53a:	061a      	lsls	r2, r3, #24
 800a53c:	d410      	bmi.n	800a560 <__swhatbuf_r+0x40>
 800a53e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a542:	e00e      	b.n	800a562 <__swhatbuf_r+0x42>
 800a544:	466a      	mov	r2, sp
 800a546:	f000 f903 	bl	800a750 <_fstat_r>
 800a54a:	2800      	cmp	r0, #0
 800a54c:	dbf1      	blt.n	800a532 <__swhatbuf_r+0x12>
 800a54e:	9a01      	ldr	r2, [sp, #4]
 800a550:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a554:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a558:	425a      	negs	r2, r3
 800a55a:	415a      	adcs	r2, r3
 800a55c:	602a      	str	r2, [r5, #0]
 800a55e:	e7ee      	b.n	800a53e <__swhatbuf_r+0x1e>
 800a560:	2340      	movs	r3, #64	; 0x40
 800a562:	2000      	movs	r0, #0
 800a564:	6023      	str	r3, [r4, #0]
 800a566:	b016      	add	sp, #88	; 0x58
 800a568:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a56c <__smakebuf_r>:
 800a56c:	898b      	ldrh	r3, [r1, #12]
 800a56e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a570:	079d      	lsls	r5, r3, #30
 800a572:	4606      	mov	r6, r0
 800a574:	460c      	mov	r4, r1
 800a576:	d507      	bpl.n	800a588 <__smakebuf_r+0x1c>
 800a578:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	6123      	str	r3, [r4, #16]
 800a580:	2301      	movs	r3, #1
 800a582:	6163      	str	r3, [r4, #20]
 800a584:	b002      	add	sp, #8
 800a586:	bd70      	pop	{r4, r5, r6, pc}
 800a588:	ab01      	add	r3, sp, #4
 800a58a:	466a      	mov	r2, sp
 800a58c:	f7ff ffc8 	bl	800a520 <__swhatbuf_r>
 800a590:	9900      	ldr	r1, [sp, #0]
 800a592:	4605      	mov	r5, r0
 800a594:	4630      	mov	r0, r6
 800a596:	f7ff f973 	bl	8009880 <_malloc_r>
 800a59a:	b948      	cbnz	r0, 800a5b0 <__smakebuf_r+0x44>
 800a59c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5a0:	059a      	lsls	r2, r3, #22
 800a5a2:	d4ef      	bmi.n	800a584 <__smakebuf_r+0x18>
 800a5a4:	f023 0303 	bic.w	r3, r3, #3
 800a5a8:	f043 0302 	orr.w	r3, r3, #2
 800a5ac:	81a3      	strh	r3, [r4, #12]
 800a5ae:	e7e3      	b.n	800a578 <__smakebuf_r+0xc>
 800a5b0:	4b0d      	ldr	r3, [pc, #52]	; (800a5e8 <__smakebuf_r+0x7c>)
 800a5b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	6020      	str	r0, [r4, #0]
 800a5b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5bc:	81a3      	strh	r3, [r4, #12]
 800a5be:	9b00      	ldr	r3, [sp, #0]
 800a5c0:	6163      	str	r3, [r4, #20]
 800a5c2:	9b01      	ldr	r3, [sp, #4]
 800a5c4:	6120      	str	r0, [r4, #16]
 800a5c6:	b15b      	cbz	r3, 800a5e0 <__smakebuf_r+0x74>
 800a5c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f000 f8d1 	bl	800a774 <_isatty_r>
 800a5d2:	b128      	cbz	r0, 800a5e0 <__smakebuf_r+0x74>
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	f023 0303 	bic.w	r3, r3, #3
 800a5da:	f043 0301 	orr.w	r3, r3, #1
 800a5de:	81a3      	strh	r3, [r4, #12]
 800a5e0:	89a0      	ldrh	r0, [r4, #12]
 800a5e2:	4305      	orrs	r5, r0
 800a5e4:	81a5      	strh	r5, [r4, #12]
 800a5e6:	e7cd      	b.n	800a584 <__smakebuf_r+0x18>
 800a5e8:	0800a379 	.word	0x0800a379

0800a5ec <_malloc_usable_size_r>:
 800a5ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5f0:	1f18      	subs	r0, r3, #4
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	bfbc      	itt	lt
 800a5f6:	580b      	ldrlt	r3, [r1, r0]
 800a5f8:	18c0      	addlt	r0, r0, r3
 800a5fa:	4770      	bx	lr

0800a5fc <_raise_r>:
 800a5fc:	291f      	cmp	r1, #31
 800a5fe:	b538      	push	{r3, r4, r5, lr}
 800a600:	4604      	mov	r4, r0
 800a602:	460d      	mov	r5, r1
 800a604:	d904      	bls.n	800a610 <_raise_r+0x14>
 800a606:	2316      	movs	r3, #22
 800a608:	6003      	str	r3, [r0, #0]
 800a60a:	f04f 30ff 	mov.w	r0, #4294967295
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a612:	b112      	cbz	r2, 800a61a <_raise_r+0x1e>
 800a614:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a618:	b94b      	cbnz	r3, 800a62e <_raise_r+0x32>
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 f830 	bl	800a680 <_getpid_r>
 800a620:	462a      	mov	r2, r5
 800a622:	4601      	mov	r1, r0
 800a624:	4620      	mov	r0, r4
 800a626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a62a:	f000 b817 	b.w	800a65c <_kill_r>
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d00a      	beq.n	800a648 <_raise_r+0x4c>
 800a632:	1c59      	adds	r1, r3, #1
 800a634:	d103      	bne.n	800a63e <_raise_r+0x42>
 800a636:	2316      	movs	r3, #22
 800a638:	6003      	str	r3, [r0, #0]
 800a63a:	2001      	movs	r0, #1
 800a63c:	e7e7      	b.n	800a60e <_raise_r+0x12>
 800a63e:	2400      	movs	r4, #0
 800a640:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a644:	4628      	mov	r0, r5
 800a646:	4798      	blx	r3
 800a648:	2000      	movs	r0, #0
 800a64a:	e7e0      	b.n	800a60e <_raise_r+0x12>

0800a64c <raise>:
 800a64c:	4b02      	ldr	r3, [pc, #8]	; (800a658 <raise+0xc>)
 800a64e:	4601      	mov	r1, r0
 800a650:	6818      	ldr	r0, [r3, #0]
 800a652:	f7ff bfd3 	b.w	800a5fc <_raise_r>
 800a656:	bf00      	nop
 800a658:	20000014 	.word	0x20000014

0800a65c <_kill_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	4d07      	ldr	r5, [pc, #28]	; (800a67c <_kill_r+0x20>)
 800a660:	2300      	movs	r3, #0
 800a662:	4604      	mov	r4, r0
 800a664:	4608      	mov	r0, r1
 800a666:	4611      	mov	r1, r2
 800a668:	602b      	str	r3, [r5, #0]
 800a66a:	f7f7 f897 	bl	800179c <_kill>
 800a66e:	1c43      	adds	r3, r0, #1
 800a670:	d102      	bne.n	800a678 <_kill_r+0x1c>
 800a672:	682b      	ldr	r3, [r5, #0]
 800a674:	b103      	cbz	r3, 800a678 <_kill_r+0x1c>
 800a676:	6023      	str	r3, [r4, #0]
 800a678:	bd38      	pop	{r3, r4, r5, pc}
 800a67a:	bf00      	nop
 800a67c:	20000768 	.word	0x20000768

0800a680 <_getpid_r>:
 800a680:	f7f7 b884 	b.w	800178c <_getpid>

0800a684 <__sread>:
 800a684:	b510      	push	{r4, lr}
 800a686:	460c      	mov	r4, r1
 800a688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a68c:	f000 f894 	bl	800a7b8 <_read_r>
 800a690:	2800      	cmp	r0, #0
 800a692:	bfab      	itete	ge
 800a694:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a696:	89a3      	ldrhlt	r3, [r4, #12]
 800a698:	181b      	addge	r3, r3, r0
 800a69a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a69e:	bfac      	ite	ge
 800a6a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a6a2:	81a3      	strhlt	r3, [r4, #12]
 800a6a4:	bd10      	pop	{r4, pc}

0800a6a6 <__swrite>:
 800a6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6aa:	461f      	mov	r7, r3
 800a6ac:	898b      	ldrh	r3, [r1, #12]
 800a6ae:	05db      	lsls	r3, r3, #23
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	4616      	mov	r6, r2
 800a6b6:	d505      	bpl.n	800a6c4 <__swrite+0x1e>
 800a6b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6bc:	2302      	movs	r3, #2
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f000 f868 	bl	800a794 <_lseek_r>
 800a6c4:	89a3      	ldrh	r3, [r4, #12]
 800a6c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6ce:	81a3      	strh	r3, [r4, #12]
 800a6d0:	4632      	mov	r2, r6
 800a6d2:	463b      	mov	r3, r7
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6da:	f000 b817 	b.w	800a70c <_write_r>

0800a6de <__sseek>:
 800a6de:	b510      	push	{r4, lr}
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e6:	f000 f855 	bl	800a794 <_lseek_r>
 800a6ea:	1c43      	adds	r3, r0, #1
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	bf15      	itete	ne
 800a6f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6fa:	81a3      	strheq	r3, [r4, #12]
 800a6fc:	bf18      	it	ne
 800a6fe:	81a3      	strhne	r3, [r4, #12]
 800a700:	bd10      	pop	{r4, pc}

0800a702 <__sclose>:
 800a702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a706:	f000 b813 	b.w	800a730 <_close_r>
	...

0800a70c <_write_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4d07      	ldr	r5, [pc, #28]	; (800a72c <_write_r+0x20>)
 800a710:	4604      	mov	r4, r0
 800a712:	4608      	mov	r0, r1
 800a714:	4611      	mov	r1, r2
 800a716:	2200      	movs	r2, #0
 800a718:	602a      	str	r2, [r5, #0]
 800a71a:	461a      	mov	r2, r3
 800a71c:	f7f7 f875 	bl	800180a <_write>
 800a720:	1c43      	adds	r3, r0, #1
 800a722:	d102      	bne.n	800a72a <_write_r+0x1e>
 800a724:	682b      	ldr	r3, [r5, #0]
 800a726:	b103      	cbz	r3, 800a72a <_write_r+0x1e>
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	bd38      	pop	{r3, r4, r5, pc}
 800a72c:	20000768 	.word	0x20000768

0800a730 <_close_r>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	4d06      	ldr	r5, [pc, #24]	; (800a74c <_close_r+0x1c>)
 800a734:	2300      	movs	r3, #0
 800a736:	4604      	mov	r4, r0
 800a738:	4608      	mov	r0, r1
 800a73a:	602b      	str	r3, [r5, #0]
 800a73c:	f7f7 f881 	bl	8001842 <_close>
 800a740:	1c43      	adds	r3, r0, #1
 800a742:	d102      	bne.n	800a74a <_close_r+0x1a>
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	b103      	cbz	r3, 800a74a <_close_r+0x1a>
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	20000768 	.word	0x20000768

0800a750 <_fstat_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	4d07      	ldr	r5, [pc, #28]	; (800a770 <_fstat_r+0x20>)
 800a754:	2300      	movs	r3, #0
 800a756:	4604      	mov	r4, r0
 800a758:	4608      	mov	r0, r1
 800a75a:	4611      	mov	r1, r2
 800a75c:	602b      	str	r3, [r5, #0]
 800a75e:	f7f7 f87c 	bl	800185a <_fstat>
 800a762:	1c43      	adds	r3, r0, #1
 800a764:	d102      	bne.n	800a76c <_fstat_r+0x1c>
 800a766:	682b      	ldr	r3, [r5, #0]
 800a768:	b103      	cbz	r3, 800a76c <_fstat_r+0x1c>
 800a76a:	6023      	str	r3, [r4, #0]
 800a76c:	bd38      	pop	{r3, r4, r5, pc}
 800a76e:	bf00      	nop
 800a770:	20000768 	.word	0x20000768

0800a774 <_isatty_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	4d06      	ldr	r5, [pc, #24]	; (800a790 <_isatty_r+0x1c>)
 800a778:	2300      	movs	r3, #0
 800a77a:	4604      	mov	r4, r0
 800a77c:	4608      	mov	r0, r1
 800a77e:	602b      	str	r3, [r5, #0]
 800a780:	f7f7 f87b 	bl	800187a <_isatty>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_isatty_r+0x1a>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_isatty_r+0x1a>
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	20000768 	.word	0x20000768

0800a794 <_lseek_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	4d07      	ldr	r5, [pc, #28]	; (800a7b4 <_lseek_r+0x20>)
 800a798:	4604      	mov	r4, r0
 800a79a:	4608      	mov	r0, r1
 800a79c:	4611      	mov	r1, r2
 800a79e:	2200      	movs	r2, #0
 800a7a0:	602a      	str	r2, [r5, #0]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	f7f7 f874 	bl	8001890 <_lseek>
 800a7a8:	1c43      	adds	r3, r0, #1
 800a7aa:	d102      	bne.n	800a7b2 <_lseek_r+0x1e>
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	b103      	cbz	r3, 800a7b2 <_lseek_r+0x1e>
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	bd38      	pop	{r3, r4, r5, pc}
 800a7b4:	20000768 	.word	0x20000768

0800a7b8 <_read_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4d07      	ldr	r5, [pc, #28]	; (800a7d8 <_read_r+0x20>)
 800a7bc:	4604      	mov	r4, r0
 800a7be:	4608      	mov	r0, r1
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	602a      	str	r2, [r5, #0]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f7f7 f802 	bl	80017d0 <_read>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_read_r+0x1e>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_read_r+0x1e>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	20000768 	.word	0x20000768

0800a7dc <_init>:
 800a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7de:	bf00      	nop
 800a7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7e2:	bc08      	pop	{r3}
 800a7e4:	469e      	mov	lr, r3
 800a7e6:	4770      	bx	lr

0800a7e8 <_fini>:
 800a7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ea:	bf00      	nop
 800a7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ee:	bc08      	pop	{r3}
 800a7f0:	469e      	mov	lr, r3
 800a7f2:	4770      	bx	lr
